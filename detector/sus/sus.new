#!/usr/local/bin/perl -w
#######################################################################
#
# SuS
#
# Program to generated a commented, LaTeX version of 
# a source code.
#
# Copyright (C) 1998 J C Gonzalez
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#----------------------------------------------------------------------
#
#  Created: Thu May  7 16:24:22 1998
#  Author:  Jose Carlos Gonzalez
#  Purpose: Perl program to get documentation out of comments
#           in source codes
#  Notes:   Generates a commented, LaTeX version of the code
#    
#----------------------------------------------------------------------
# $RCSfile$
# $Revision$
# $Author$ 
# $Date$
#######################################################################
#
# Notes:  Documentation still to come...
#
#######################################################################

#######################################################################
# 
# SuS version 1.0
# Copyleft [c] 1998, 1999  J.C. Gonzalez <gonzalez\@mppmu.mpg.de>
# Max-Planck-Institut fuer Physik, Munchen
# All rights reserved
# 
# Simple script to get pretty-printed or online documented source code
#
#
#######################################################################

require 5.003;

$Program = "SuS";
$Version = "1.0";

$latex = 1;
$verbose = 0;

$disclaimer = '';
$copyright = '';

$output = 'output.';
$chgoutput = 0;

while ($_ = $ARGV[0], /^-/) {
    shift;
    last if /^--$/;
    if (/^-latex$/) { $latex = 1; }
    if (/^-html$/)  { $latex = 0; }
    if (/^-o$/)     { $output = $ARGV[0]; 
                      $chgoutput = 1; 
                      shift; }
    if (/^-d$/)     { $disclaimer = $ARGV[0];
                      shift; }
    if (/^-c$/)     { $copyright = $ARGV[0];
                      shift; }
    if (/^-v$/)     { $verbose = 1; }
    if (/^-[hH]$/)  { print << "eoh";
--------------------------------------------------------------
$Program version $Version
Copyleft [c] 1998, 1999  J.C. Gonzalez <gonzalez\@mppmu.mpg.de>
Max-Planck-Institut fuer Physik, Munchen
--------------------------------------------------------------
Usage::

 $0  [ $_ ] [ -v ] [ -latex | -html ] 
     [ -o output_file ] [ -d disclaimer_file ] [ -c copyright_file ]
     file(s) . . .

eoh
    exit 0;
}

}

$html = ! $latex;

if ( ! $chgoutput ) {
    if ( $latex ) { 
        $output .= 'tex';
    } else {
        $output .= 'html';
    }
}

$types  = 'extern|auto|register|static|typedef|struct';
$types .= '|union|enum|signed|unsigned|short|long';
$types .= '|int|char|float|double|void|volatile|const';
$types .= '|inline|friend|bool|virtual|complex|template';
$types .= '|namespace|using';
$types .= '|explicit|mutable';
$types .= '|export';
$types .= '|\*|\*\*|\*\*\*|\*\*\*\*';

$eol = "\n";
$floating_around_context = 0;
$text_context = 1;
$code_context = 2;

$secA = '';
$secZ = '';

$ssecA = '';
$ssecZ = '';

$sssecA = '';
$sssecZ = '';

$ssssecA = '';
$ssssecZ = '';

$ttA = '';
$ttZ = '';

$codeA = '';
$codeZ = '';

$parA = '';
$parZ = '';

$commA = '';
$commZ = '';

$clineA = '';
$clineZ = '';

$eqA = '';
$eqZ = '';

$eqqA = '';
$eqqZ = '';

$title = '';
$author = '';
$date = '';
$desc = '';
$email = '';
$file = '';
$app = '';

%DEFS = ();
%DEFSCOMM = ();
$ndefs = 0;

%FN = ();
%FNCOMM = ();
%FNVAR = ();
$nfn = 0;
$fnvar = '';

%VAR = ();
%VARCOMM = ();
$return = '';
$nvar = 0;

$uptitle = 0;
$cover = 1;
$typetitle = $uptitle;

%IDXVAR = ();
%IDXVARTYPE = ();
%IDXVARKIND = ();
%IDXVARLINE = ();
$nidxvar = 0;

$tableofcontents = 0;
$listoftables = 0;
$listoffigures = 0;

$context = $floating_around_context;
$chunk_counter = 0;
$chunk = '';
%CHUNKS=();
%CONTEXTS=();
%LINES=();
$line = 1;
$i = 0;

## open the output file

open OUTPUT, "> $output";
if ( $verbose ) {    
    print STDERR "-> $output\n";
}

## First, divide the input in chunks

while (<>) {
    
    if ( /(.*)\/\*\![ ]*(?:\@\"|\@text)(.*)/ ||
         /(.*)\/\/\![ ]*(?:\@\"|\@text)(.*)/ ) { # text block starting
        
        $chunk .= $1;
        &save_chunk($chunk_counter, $chunk, $context);

        $context = $text_context;
        $chunk = $2;
        $chunk_counter++;
        $line = $.;

    } elsif ( /(.*)\/\*\![ ]*(?:\@\{|\@code)(.*)/ ||
         /(.*)\/\/\![ ]*(?:\@\{|\@code)(.*)/ ) { # code block starting
            
        $chunk .= $1;
        &save_chunk($chunk_counter, $chunk, $context);
        
        $context = $code_context;
        $chunk = $2;
        $chunk_counter++;
        $line = $.;
        
    } elsif ( /(.*)(?:\@\"|\@endtext)[ ]*\*\/(.*)/ ||
         /(.*)\/\/\![ ]*(?:\@\"|\@endtext)(.*)/ ) { # text block finishing

        $chunk .= $1;
        &save_chunk($chunk_counter, $chunk, $context);
        
        $context = $floating_around_context;
        $chunk = $2;
        $chunk_counter++;
        $line = $.;
        
    } elsif ( /(.*)(?:\@\}|\@endcode)[ ]*\*\/(.*)/ ||
         /(.*)\/\/\![ ]*(?:\@\}|\@endcode)(.*)/ ) { # code block finishing

        $chunk .= $1;
        &save_chunk($chunk_counter, $chunk, $context);
        
        $context = $floating_around_context;
        $chunk = $2;
        $chunk_counter++;
        $line = $.;
        
    } else { # current context continues
        
        $chunk .= $_;
            
    } 

}

&save_chunk($chunk_counter, $chunk, $context);

## Parse each chunk, and print it 

if ( $html == 1 ) {
    &declare_HTML;
} else {
    &declare_LaTeX;
}

&prolog;

foreach $i (0..$chunk_counter) {

    &clear_fnvar;

    if ($verbose) {
        print STDERR "Parsing chunk \# $i . . .";
    }

    $_ = $CHUNKS{$i};
    $context = $CONTEXTS{$i};

    if ( $context == $text_context ) {
        
        &process_text;

    } elsif ( $context == $code_context ) {

        $line = $LINES{$i} ;
        &process_code;

    } else {

        &process_floating;

    }

    print OUTPUT $_;
    if ($verbose) {
        print STDERR " done.\n";
    }
}

&do_listavar;

&epilog;

if ( $verbose ) {
    foreach $i (1..$nidxvar) {
        print STDERR "[" . $IDXVARTYPE{$i} . "] " . $IDXVAR{$i} . $eol;
    }
}

## close the output file and exit

close OUTPUT;
exit 0;

############################################################
## SUBROUTINES
############################################################

sub save_chunk {

    my ($chn, $ch, $cont) = @_;
    if ($verbose) {
        print STDERR "%% chunk $chn\[$cont\] " . '%' x 40 . $eol;
        print STDERR $ch;
        print STDERR "%% end of chunk $chn\[$cont\] " . '%' x 33 . $eol;
    }
    $CHUNKS{$chn} = $ch;
    $CONTEXTS{$chn} = $cont;
    $LINES{$chn} = $line + 1;
}

sub process_text {
    &special_chars;
    $_ = $parA . $_ . $parZ;
    s/\|(.*?)\|/$ttA$1$ttZ/gs;
#    s/\@\^(.*?)\@\^/\\footnote\{$1\}/gs;
#    s/\@\$(.*?)\@\$/$eqA $1 $eqZ/gs;
#    s/\@\[(.*?)\@\]/$eqqA $1 $eqqZ/gs;
}

sub process_code {
    &special_chars;
    &comments;
    &getvars;
    if ( $html ) {
        $_ = $codeA . $_ . $codeZ;
    } else {
        $_ = $codeA . ",firstnumber=" . $line . "]\n" . $_ . $codeZ;
    }
    if ( $html ) {
        s/(\#include\s+)\<(.*)\>/$1&lt;$2&gt;/g;
    }
    
#    s/\@\^(.*?)\@\^/\\footnote\{$1\}/gs;
#    s/\@\$(.*?)\@\$/$eqA $1 $eqZ/gs;
#    s/\@\[(.*?)\@\]/$eqqA $1 $eqqZ/gs;

    $_;
}

sub process_floating {  

    $conv = "";
    &special_chars;
    &sections;

    if ( /\@tableofcontents/s ) { $tableofcontents = 1; }
    if ( /\@listoftables/s )    { $listoftables = 1; }
    if ( /\@listoffigures/s )   { $listoffigures = 1; }

    if ( /\@file\s+(.*)\n/ )   { $file = $1 }
    if ( /\@app\s+(.*)\n/ )    { $app = $1 }
    if ( /\@title\s+(.*)\n/ )  { $title = $1 }
    if ( /\@desc\s+(.*)\n/ )   { $desc = $1 }
    if ( /\@author\s+(.*)\n/ ) { $author = $1 }
    if ( /\@email\s+(.*)\n/ )  { $email = $1 }
    if ( /\@name\s+(.*)\n/ )   { $name = $1 }
    if ( /\@date\s+(.*)\n/ )   { $date = $1 }

    while ( /\@var[ ]+(\w+)[ ]+(.*)\n/ ) {
        $nvar++;
        $VAR{$nvar} = $1;
        $VARCOMM{$nvar} = $2;
        s/\@var(.*)\n//;
    }

    if ( /\@return\s+(.*)\n/ ) { $return = $1; }


    if ( /\@maintitle/ ) {
        $typetitle = $uptitle;
        $conv = &do_maintitle;         
        s/(\/\*\!|\/\/\!)(.*)\@maintitle/$conv/sg;
    }

    if ( /\@coverpage/ ) {
        $typetitle = $cover;
        $conv = &do_maintitle;
        s/(\/\*\!|\/\/\!)(.*)\@coverpage/$conv/sg;
    }

    if ( /\@function/ ) {
        $conv = &do_function;
        s/(\/\*\!|\/\/\!)(.*)\@function/$conv/sg;
    }

}

sub special_chars {
    if ( $html == 1) {
        s/\&/\&amp;/g;
        s/\</\&lt;/g;
        s/\>/\&gt;/g;
    } elsif ( $context != $code_context ) {
        s/\&/\\\&/g;
        s/\</\$<\$/g;
        s/\>/\$>\$/g;
    }
}

sub sections {
    s/\n.*(\@\>|\@section)\s+(.*)\./\n$secA$2$secZ/g;
    s/\n.*(\@\>\>|\@subsection)\s+(.*)\./\n$ssecA$2$ssecZ/g;
    s/\n.*(\@\>\>\>|\@subsubsection)\s+(.*)\./\n$sssecA$2$sssecZ/g;
    s/\n.*(\@\>\>\>\>|\@paragraph)\s+(.*)\./\n$ssssecA$2$ssssecZ/g;

}    

sub comments {
    if ( $latex ) {
        $str = $_;
        $newstr = "";
        while ( $str =~ /(\/\*|\/\/)\![ ]*\@\'(.*?)(\*\/|\/\/[ ]*\@\')/s ) {
            $matched = $&;
            $comment = $2;
            $newstr .= $`;
            $str = $';
            $l = ($matched =~ s/\n/\n/g) + 1;
            # print STDERR "{" . $l . "}\n";
            $newstr .= "$codeZ$commA$comment$commZ";
            $newstr .= "\\addtocounter\{FancyVerbLine\}\{$l\}\n";
            $newstr .= "$codeA\,firstnumber=last\]";
        }
        if ( $newstr ) {
            $_ = $newstr . $str;
        }
    } else {
        s/(\/\*|\/\/)\![ ]*\@\'(.*?)(\*\/|\/\/[ ]*\@\')/$codeZ$commA$2$commZ$codeA\n/gs;
    }

    # commenting preceding code in same line
    if ( $latex ) {
        s/(\/\*|\/\/)[ ]*\@\<(.*?)(\*\/\n|\n)/$clineA$2$clineZ\n/;
    } else {
        s/(\/\*|\/\/)[ ]*\@\&lt\;(.*?)(\*\/\n|\n)/$clineA$2$clineZ\n/;
    }

    while ( /(?:\/\*|\/\/)(.*)(\@\:[ ]*)(.*?)(?:\*\/\n|\n)(.*?)\n/s ) {
        $ndefs++;
        $DEFS{$ndefs} = $4;
        $DEFSCOMM{$ndefs} = $3;
        s/$2$3/ $3/s;
    }


}

sub getvars {

    $oldstr = $_;
    $str = $_;
    $newstr = "";

    while ( $str =~ /($types)\s+/s ) {

        $vt = $1;
        $str = $';
        $newstr .= $` . $&;

        while ( $str =~ /^($types)\s+/s) {
            $vt .= " " . $1;
            $str = $';
            $newstr .= $&;
        }

        # print STDERR ">>> $str"; 

        while ( $str =~ /^(?!$types)(\w+)[ ,;=\[\(]*/ ) {

            $v = $1;
            $str = $';
            $matched = $&;

            if ( $verbose ) {
                print STDERR $vt . ' => ' . $v . $eol;
            }

            if ( $oldstr =~ /\b$v\s*\((.*?)\)/ ) {
                $t = "f";
            } else {
                $t = "v";
            }

            $l = ($newstr =~ s/\n/\n/g);

            $nidxvar++;
            $IDXVAR{$nidxvar} = $v;
            if ( $latex ) {
                $IDXVARTYPE{$nidxvar} = $vt;
                $IDXVARTYPE{$nidxvar} =~ s/\*/\\\*/g;
            } else {
                $IDXVARTYPE{$nidxvar} = $vt;
            }
            $IDXVARKIND{$nidxvar} = $t;
            $IDXVARLINE{$nidxvar} = $line + $l;

            if ( $latex ) {
                $newstr .= $matched . "\index\$v\@$v ($vt:$t$l)";
            } else {
                $newstr .= "<A name=var$nidxvar>$matched</a>";
            }

            # print STDERR ">>> $str"; 
        }

    }

    $_ = $newstr . $str;
    #$_;
}

sub prolog {

    if ( $html == 1 ) {
        
        print OUTPUT << "eom";

<HTML>

<HEAD>
<TITLE>Hola</TITLE>
<LINK REL=STYLESHEET HREF="style.css">
</HEAD>

<BODY>

eom
 
    } else {
        
        print OUTPUT << "eom";

\\documentclass{article}	

\\usepackage{fancyvrb}
\\usepackage{makeidx}

\\makeindex

\\begin{document}

eom
 
    }

}

sub do_maintitle {
    if ( $html == 1 ) {
        &do_maintitle_HTML;
    } else {
        &do_maintitle_LaTeX;
    }
}        
    
sub do_maintitle_LaTeX {
    if ( $typetitle == $cover ) {

        print STDERR "Cover title\n" if ( $verbose );
        $conv = "

\\thispagestyle{empty}

\\mbox{}
\\vskip 2cm \\hskip -1.5cm
\\parbox[c]{15cm}{
  {\\Huge \\bfseries $title \\\\}
%
  \\rule{15cm}{3pt}
%
  \\flushright{$desc\\par}
  \\vskip 13cm
  \\flushleft{\\Large
    $author\\\\
    Last update: $date\\par}
  \\rule{15cm}{2pt}
}
 
\\newpage
\\thispagestyle{empty}
\\mbox{}
";

        if ( $disclaimer ne '' ) { 
            $conv .= "\\input{$disclaimer}";
        }

        if ( $copyright ne '' ) { 
            $conv .= "\\vfill\\input{$copyright}";
        } else {
            $conv .= "
\\vfill\\noindent%
Copyright \$\\copyright\$ \\number\\year, $author (\{\\tt $email\})\\\\
Last update: $date\\\\
Printed: \\today\\\\
\\\\
{\\it Generated using $Program version $Version \\\/}
";
        }

        $conv .= "

\\newpage

\\title{$title}
\\author{$author\\\\E-mail: {\\tt $email}}
\\date{$date}
\\maketitle

";
    } else {

        print STDERR "Up-title\n" if ( $verbose );
        $conv = "

\\thispagestyle{empty}

\\title{$title}
\\author{$author\\\\E-mail: {\\tt $email}}
\\date{$date}
\\maketitle

";
    }
}

sub do_maintitle_HTML {
    $conv = "

<CENTER>
<P>
<BR>
<FONT SIZE=+4>
<STRONG>$title</STRONG>
</FONT>
<BR>
$author
<BR>
 E-mail: <code>$email</code>
<BR><BR>
$date
</P>
</CENTER>

"
}

sub do_function {
    if ( $html == 1 ) {
        &do_function_HTML;
    } else {
        &do_function_LaTeX;
    }
    $nfn++;
    $FN{$nfn} = $name;
    $FNCOMM{$nfn} = $desc;
    $FNVAR{$nfn} = $fnvar;
}        
    
sub do_function_LaTeX {
    $conv = "\n\n\\subsubsection{$name}\n";
    $conv .= "\\begin\{tabular\}\{\|ll\|\}\n\\hline\n";
    
    if ( $name ) { $conv .= "Name:&\\emph\{ $name \}\\\\\n"; }
    if ( $author ) { $conv .= "Author:& $author \\\\\n"; }
    if ( $date ) { $conv .= "Date:& $date \\\\\n"; }
    if ( $desc ) { $conv .= "Description:& $desc \\\\\n"; }
    if ( $nvar > 0 ) {
        $fnvar = ' ';
        $conv .= "Variables:&~\\\\\n"; 
        foreach $i (1..$nvar) {
            $v = $VAR{ $i };
            $vc = $VARCOMM{ $i };
            $conv .= "\\hfil\\tt $v& $vc\\\\\n";
            $fnvar .= " $v,"; 
        }
        chop $fnvar;
    }
    
    if ( $return ) { $conv .= "Return:& $return\\\\\n"; }
    $conv .= "\\hline\n\\end\{tabular\}\n\\\\";
}

sub do_function_HTML {
    $conv = "\n<HR>\n<H4>$name</H4>\n<P><BLOCKQUOTE><TABLE BORDER=1>\n";
    if ( $name ) {$conv .= "<TR><TD>Name:</TD><TD><STRONG>$name</STRONG></TD></TR>\n";}
    if ( $author ) {$conv .= "<TR><TD>Author:</TD><TD>$author</TD></TR>\n";}
    if ( $date ) {$conv .= "<TR><TD>Date:</TD><TD>$date</TD></TR>\n";}
    if ( $desc ) {$conv .= "<TR><TD>Description:</TD><TD>$desc</TD></TR>\n";}
    if ( $nvar > 0 ) {
        $conv .= "<TR VALIGN=TOP><TD>Variables:</TD>\n<TD>\n<DL COMPACT>\n";
        foreach $i (1..$nvar) {
            $v = $VAR{ $i };
            $vc = $VARCOMM{ $i };
            $conv .= "<DT><code> $v </code></DT><DD> $vc </DD>\n";
        }
        $conv .= "</DL>\n</TD></TR>";
    }
    if( $return ) {$conv .= "<TR><TD>Return:</TD><TD>$return</TD></TR>\n"};
    $conv .= "</TABLE></BLOCKQUOTE></P>\n\n";
}

sub do_listavar {
    if ( $html == 1 ) {
        &do_listavar_HTML;
    } else {
        &do_listavar_LaTeX;
    }
}


sub do_listavar_HTML {}
sub do_listavar_LaTeX {}

sub clear_fnvar {
    $title = "";
    $author = "";
    $date = "";
    $desc = "";
    $email = "";
    $file = "";
    $app = "";
    %VAR = ();
    %VARCOMM = ();
    $return = "";
    $nvar = 0;
}

sub epilog {

    if ( $html == 1 ) {
    
        if ( $nidxvar > 0 ) {
            print OUTPUT << "eom";
<HR SIZE=5>
<H1>List of defined variables &amp; functions</H1>
<P>
This list is simply sorted in order of appearance.
</P>
<CENTER>
<TABLE WIDTH=60% BORDER=1>
eom
            foreach $i (1..$nidxvar) {
                print OUTPUT << "eom";
<TR>

<TD>$IDXVARKIND{$i}:$IDXVARLINE{$i}</TD>
<TD>\&lt;$IDXVARTYPE{$i}\&gt;</TD>
<TD><A href="#var$i">$IDXVAR{$i}</A></TD>
</TR>
eom
            }
            print OUTPUT << "eom";
</TABLE>
</CENTER>
eom
        }

        print OUTPUT << "eom";

<HR SIZE=5><ADDRESS>
J.C.Gonz\&aacute;lez<BR>
E-mail: \&lt;gonzalez\@gae.ucm.es\&gt;<BR>
</ADDRESS>
</BODY>

</HTML>

eom
 
    } else {

        $epi = "";
 
        # list of variables

        if ( $nidxvar > 0 ) {

            $epi .= '\section{Table of defined variables \& functions}' . $eol;
            $epi .= 'Sorted in order of definition';
            $epi .= ' (left to right, and top to bottom).\par' . $eol;
            
            $epi .= '\begin{tabular}{|rl|rl|}\hline' . $eol;
            foreach $i (1..$nidxvar) {
                $epi .= "\$<\$$IDXVARTYPE{$i}\$>";
                $epi .= "_{\\rm $IDXVARKIND{$i},$IDXVARLINE{$i}}\$ & ";
                $epi .= "$IDXVAR{$i}";
                if (($i % 2) != 0) {
                    $epi .= '&';
                } else {
                    $epi .= "\\\\\n";
                }
            }
            $epi .= ' & ' x ($nidxvar % 2);
            if ( ($nidxvar % 3) != 0 ) {
                $epi .= "\\\\\n";
            }
            $epi .= '\hline\end{tabular}' . $eol . $eol;
        }

        # list of definitions

        if ( $ndefs > 0 ) {
            
            if ( $verbose ) {
                print STDERR $DEFS{$i} . ": " . $DEFSCOMM{$i} . $eol;
            }

            $epi .= '\section{List of explicit definitions}' . $eol;

            $epi .= '\begin{description}' . $eol;
            foreach $i (1..$ndefs) {
                $epi .= "\\item[\\texttt\{$DEFS{$i}\}]$DEFSCOMM{$i}";
                $epi .= $eol;
            }
            $epi .= '\end{description}' . $eol;

        }

        # list of functions
        
        if ( $nfn > 0 ) {

            if ( $verbose ) {
                print STDERR $FN{$i} . ": " . $FNCOMM{$i} . $eol;
            }

            $epi .= '\section{List of functions}' . $eol;

            $epi .= '\begin{description}' . $eol;
            foreach $i (1..$nfn) {
                $epi .= "\\item[\\texttt\{$FN{$i}($FNVAR{$i} )\}] ";
                $epi .= "\\index\{$FN{$i}\}" . $eol;
                $epi .= "$FNCOMM{$i}" . $eol;
            }
            $epi .= '\end{description}' . $eol;

        }

        # others

        if ($tableofcontents) { $epi .= "\\tableofcontents\n"; }
        if ($listoffigures) { $epi .= "\\listoffigures\n"; }
        if ($listoftables) { $epi .= "\\listoftables\n"; }

        if ( $nidxvar > 0 ) {
            $epi .= "\\printindex\n";
        }

        print OUTPUT "$epi\n\\end{document}\n"
 
    }

}

sub declare_LaTeX {
    $secA = '\section{';
    $secZ = '}' . $eol;

    $ssecA = '\subsection{';
    $ssecZ = '}' . $eol;

    $sssecA = '\subsubsection{';
    $sssecZ = '}' . $eol;

    $ssssecA = '\paragraph{';    
    $ssssecZ = '}';

    $ttA = '{\tt ';
    $ttZ = '}';

    $parA = $eol;
    $parZ = '\par' . $eol;

    $commA = '\begin{quote}' . $eol;
    $commZ = '\end{quote}';

    $clineA = "\\(\leftarrow\\)\textrm\";
    $clineZ = "\";

    $codeA = '\begin{Verbatim}[commandchars=\\\,' . 
        'numbers=left,numbersep=2pt,frame=lines,framerule=1pt';
    $codeZ = '\end{Verbatim}' . $eol;

    $eqA = '$';
    $eqZ = '$';
    
    $eqqA = '\[';
    $eqqZ = '\]';

}
    
sub declare_HTML {
    $secA = '<BR><HR SIZE=5><H1>';
    $secZ = '</H1>' . $eol;

    $ssecA = '<HR><H2>';
    $ssecZ = '</H2>' . $eol;

    $sssecA = '<H3>';
    $sssecZ = '</H3>' . $eol;

    $ssssecA = '<H4>';
    $ssssecZ = '</H4>' . $eol;

    $ttA = '<code>';
    $ttZ = '</code>';

    $parA = '<p>';
    $parZ = '</p>' . $eol;

    $commA = '<p><blockquote>' . $eol;
    $commZ = '</blockquote></p>' . $eol;

    $clineA = '<b>';
    $clineZ = '</b>';

    $codeA = '<P><blockquote class=table><pre>' . $eol;
    $codeZ = '</pre></blockquote></P>';

    $eqA = '<eq>';
    $eqZ = '<eq>';
    
    $eqqA = '<eqq>';
    $eqqZ = '<eqq>';

}
