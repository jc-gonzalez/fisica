/******************************************************************************
 * File:    ranlib.h
 *
 * Domain:  Config.Config.Ranlib
 *
 * Version: 1.0
 *
 * Date:    2015/07/01
 *
 * Copyright (C) 2015 J C Gonzalez
 *_____________________________________________________________________________
 *
 * Topic: General Information
 *
 * Purpose:
 *   Declare Ranlib class
 *
 * Created by:
 *   J C Gonzalez
 *
 * Status:
 *   Prototype
 *
 * Dependencies:
 *   none
 *
 * Files read / modified:
 *   none
 *
 * History:
 *   See <Changelog>
 *
 * About: License Conditions
 *   See <License>
 *
 ******************************************************************************/

#ifndef RANLIB_H
#define RANLIB_H

#include <map>
#include <vector>
#include <string>

#ifdef with
# undef with
#endif

////////////////////////////////////////////////////////////////////////////
// Namespace: Config
// -----------------------
//
// Library namespace
////////////////////////////////////////////////////////////////////////////
namespace Config {

typedef std::map<std::string, 
		 std::string>                      KeyValueMap;

typedef std::map<std::string, 
		 std::map<std::string, 
			  std::string> >           Config;

//==========================================================================
// Class: Ranlib
//==========================================================================
class Ranlib {

public:

  //----------------------------------------------------------------------
  // Constructor: Ranlib
  //----------------------------------------------------------------------
  Ranlib() : config(0) {}
  
  //----------------------------------------------------------------------
  // Destructor: ~Ranlib
  // Virtual destructor
  //----------------------------------------------------------------------
  virtual ~Ranlib() {}

  //----------------------------------------------------------------------
  // Method: createConfig
  //----------------------------------------------------------------------
  Config * createConfig();

  //----------------------------------------------------------------------
  // Method: createConfig
  //----------------------------------------------------------------------
  void destroyConfig(Config * c);

  //----------------------------------------------------------------------
  // Method: with
  //----------------------------------------------------------------------
  Ranlib & with(Config * cfg);

  //----------------------------------------------------------------------
  // Method: with
  //----------------------------------------------------------------------
  inline Ranlib & use(Config * cfg) { return with(cfg); }

  //----------------------------------------------------------------------
  // Method: section
  //----------------------------------------------------------------------
  Ranlib & section(std::string section);

  //----------------------------------------------------------------------
  // Method: add
  //----------------------------------------------------------------------
  Ranlib & add(std::string key, std::string value);

  //----------------------------------------------------------------------
  // Method: add
  //----------------------------------------------------------------------
  Ranlib & add(std::string section, std::string key, std::string value);

  //----------------------------------------------------------------------
  // Method: add
  //----------------------------------------------------------------------
  template<class T>
  Ranlib & add(std::string key, T value);

  //----------------------------------------------------------------------
  // Method: add
  //----------------------------------------------------------------------
  template<class T>
  Ranlib & add(std::string section, std::string key, T value);

  //----------------------------------------------------------------------
  // Method: remove
  //----------------------------------------------------------------------
  Ranlib & remove(std::string key);

  //----------------------------------------------------------------------
  // Method: remove
  //----------------------------------------------------------------------
  Ranlib & remove(std::string section, std::string key);

  //----------------------------------------------------------------------
  // Method: exists
  //----------------------------------------------------------------------
  bool exists(std::string key);
  
  //----------------------------------------------------------------------
  // Method: exists
  //----------------------------------------------------------------------
  bool exists(std::string section, std::string key);
  
  //----------------------------------------------------------------------
  // Method: valueOf
  //----------------------------------------------------------------------
  std::string valueOf(std::string key);

  //----------------------------------------------------------------------
  // Method: valueOf
  //----------------------------------------------------------------------
  std::string valueOf(std::string section, std::string key);

  //----------------------------------------------------------------------
  // Method: getListOf
  //----------------------------------------------------------------------
  Ranlib & getListOf(std::string key, std::vector<std::string> & vec);
  
  //----------------------------------------------------------------------
  // Method: getVectorOf
  //----------------------------------------------------------------------
  Ranlib & getVectorOf(std::string key, std::vector<int> & vec);

  //----------------------------------------------------------------------
  // Method: getKeys
  //----------------------------------------------------------------------
  Ranlib & getKeys(std::string section, std::vector<std::string> & vec);
    
  //----------------------------------------------------------------------
  // Method: valueAs
  //----------------------------------------------------------------------
  template<class T>
  T valueAs(std::string key);

  //----------------------------------------------------------------------
  // Method: valueAs
  //----------------------------------------------------------------------
  template<class T>
  T valueAs(std::string section, std::string key);

  //----------------------------------------------------------------------
  // Method: saveTo
  //----------------------------------------------------------------------
  bool saveTo(Config * config, const char * fileName);

  //----------------------------------------------------------------------
  // Method: loadFrom
  //----------------------------------------------------------------------
  bool loadFrom(Config * config, const char * fileName);

  //----------------------------------------------------------------------
  // Method: parse
  //----------------------------------------------------------------------
  bool parse(Config * config, const char * content);

private:
  std::string lastSection;

  Config * config; 
};

}

#endif  /* RANLIB_H */

