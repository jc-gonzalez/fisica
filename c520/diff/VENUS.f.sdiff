C============================================================	C============================================================
C								C
C                           V E N U S  4.12			C                           V E N U S  4.12
C                 (VERY ENERGETIC NUCLEAR SCATTERING)		C                 (VERY ENERGETIC NUCLEAR SCATTERING)
C                      SUBROUTINE-TURBO-VERSION            MA	C                      SUBROUTINE-TURBO-VERSION            MA
C								C
C------------------------------------------------------------	C------------------------------------------------------------
C								C
C   AUTHOR:							C   AUTHOR:
C   -------							C   -------
C								C
C   KLAUS WERNER						C   KLAUS WERNER
C								C
C   UNIV. HEIDELBERG, INST. F. THEORETISCHE PHYSIK		C   UNIV. HEIDELBERG, INST. F. THEORETISCHE PHYSIK
C   PHILOSOPHENWEG 19, 6900 HEIDELBERG, GERMANY			C   PHILOSOPHENWEG 19, 6900 HEIDELBERG, GERMANY
C   WERNER@DHDMPI5.BITNET, WERNER@MINNIE.MPI-HD.MPG.DE, 28877	C   WERNER@DHDMPI5.BITNET, WERNER@MINNIE.MPI-HD.MPG.DE, 28877
C								C
C   NOW AT: 							C   NOW AT: 
C   UNIVERSITE DE NANTES, SUBATECH - ECOLE DES MINES		C   UNIVERSITE DE NANTES, SUBATECH - ECOLE DES MINES
C   4, RUE ALFRED KASTLER, F44070 NANTES CEDEX 03, FRANCE	C   4, RUE ALFRED KASTLER, F44070 NANTES CEDEX 03, FRANCE
C   E-MAIL: WERNER@NANHP2.IN2P3.FR				C   E-MAIL: WERNER@NANHP2.IN2P3.FR
C   FAX:    (33)  51 85 84 79					C   FAX:    (33)  51 85 84 79
C   TEL:    (33)  51 85 84 25					C   TEL:    (33)  51 85 84 25
C								C
C								C
C   SUBROUTINE-TURBO-VERSION 4.12/5:				C   SUBROUTINE-TURBO-VERSION 4.12/5:
C   --------------------------------				C   --------------------------------
C   DIETER HECK							C   DIETER HECK
C   FORSCHUNGSZENTRUM KARLSRUHE, INST. F. KERNPHYSIK 3		C   FORSCHUNGSZENTRUM KARLSRUHE, INST. F. KERNPHYSIK 3
C   POSTFACH 3640, D-76021 KARLSRUHE, GERMANY			C   POSTFACH 3640, D-76021 KARLSRUHE, GERMANY
C   E-MAIL:  HECK@IK3.FZK.DE					C   E-MAIL:  HECK@IK3.FZK.DE
C   FAX:     07247-82-4075					C   FAX:     07247-82-4075
C   TEL:     07247-82-3777					C   TEL:     07247-82-3777
C								C
C   LAST CHANGES:  OCT  05, 1995				C   LAST CHANGES:  OCT  05, 1995
C------------------------------------------------------------	C------------------------------------------------------------
C								C
C   VENUS:							C   VENUS:
C   ------							C   ------
C								C
C  VENUS IS A MONTE CARLO PROCEDURE TO SIMULATE HADRONIC INTE	C  VENUS IS A MONTE CARLO PROCEDURE TO SIMULATE HADRONIC INTE
C  ULTRARELATIVISTIC ENERGIES (HADRON-HADRON, HADRON-NUCLEUS,	C  ULTRARELATIVISTIC ENERGIES (HADRON-HADRON, HADRON-NUCLEUS,
C  NUCLEUS SCATTERING), AND ALSO INTERACTIONS INVOLVING LEPTO	C  NUCLEUS SCATTERING), AND ALSO INTERACTIONS INVOLVING LEPTO
C  ANNIHILATION, LEPTON-NUCLEON, LEPTON-NUCLEUS SCATTERING).	C  ANNIHILATION, LEPTON-NUCLEON, LEPTON-NUCLEUS SCATTERING).
C  VENUS IS BASED ON GRIBOV-REGGE THEORY (OF MULTIPLE POMERON	C  VENUS IS BASED ON GRIBOV-REGGE THEORY (OF MULTIPLE POMERON
C  AND CLASSICAL RELATIVISTIC STRING DYNAMICS. A DETAILED DES	C  AND CLASSICAL RELATIVISTIC STRING DYNAMICS. A DETAILED DES
C  BE FOUND IN THE UNIV. HEIDELBERG PREPRINT HD-TVP-93-1 (270	C  BE FOUND IN THE UNIV. HEIDELBERG PREPRINT HD-TVP-93-1 (270
C  WHICH IS PUBLISHED IN PHYSICS REPORTS 232 (1993) 87-299.	C  WHICH IS PUBLISHED IN PHYSICS REPORTS 232 (1993) 87-299.
C								C
C   DISTRIBUTION:						C   DISTRIBUTION:
C   -------------						C   -------------
C								C
C  THIS CODE SHOULD NOT BE DISTRIBUTED WITHOUT NOTIFYING THE 	C  THIS CODE SHOULD NOT BE DISTRIBUTED WITHOUT NOTIFYING THE 
C  DICATING WHAT THE CODE IS GOING TO BE USED FOR. DEPENDING 	C  DICATING WHAT THE CODE IS GOING TO BE USED FOR. DEPENDING 
C  OF REACTION AND THE KIND OF OBSERVABLES ANALYSED,  THE SYS	C  OF REACTION AND THE KIND OF OBSERVABLES ANALYSED,  THE SYS
C  CERTAINTIES OF THE VENUS SIMULATIONS VARY STRONGLY,  AND T	C  CERTAINTIES OF THE VENUS SIMULATIONS VARY STRONGLY,  AND T
C  BE CLARIFIED BEFORE USING VENUS.				C  BE CLARIFIED BEFORE USING VENUS.
C								C
C   IMPORTANT FEATURES:						C   IMPORTANT FEATURES:
C   -------------------						C   -------------------
C								C
C  COVARIANT TREATMENT OF SECONDARY INTERACTIONS. EACH PRODUC	C  COVARIANT TREATMENT OF SECONDARY INTERACTIONS. EACH PRODUC
C  IS ALLOWED TO REINTERACT WITH OTHER PRODUCED PARTICLES OR 	C  IS ALLOWED TO REINTERACT WITH OTHER PRODUCED PARTICLES OR 
C  SPECTATORS. IMPORTANT FOR HADRON-NUCLEUS, NUCLEUS-NUCLEUS 	C  SPECTATORS. IMPORTANT FOR HADRON-NUCLEUS, NUCLEUS-NUCLEUS 
C  LEPTON-NUCLEUS SCATTERING.					C  LEPTON-NUCLEUS SCATTERING.
C  NO FINAL STATE INTERACTION, IF 'RADIAC' IS SET ZERO.		C  NO FINAL STATE INTERACTION, IF 'RADIAC' IS SET ZERO.
C								C
C  PARTICIPATION OF ANTIQUARKS (IN ADDITION TO QUARKS) IN THE	C  PARTICIPATION OF ANTIQUARKS (IN ADDITION TO QUARKS) IN THE
C  COLOUR EXCHANGE MECHANISM TO FORM STRINGS.			C  COLOUR EXCHANGE MECHANISM TO FORM STRINGS.
C								C
C  POSSIBILITY OF DIQUARK BREAKUP, LEADING TO MULTI-STRINGS, 	C  POSSIBILITY OF DIQUARK BREAKUP, LEADING TO MULTI-STRINGS, 
C  A FORWARD QUARK LINKED VIA TWO (!) STRINGS TO TWO BACKWARD	C  A FORWARD QUARK LINKED VIA TWO (!) STRINGS TO TWO BACKWARD
C  QUARKS (DOUBLE-STRING). SUCH STRINGS FRAGMENT DIFFERENTLY 	C  QUARKS (DOUBLE-STRING). SUCH STRINGS FRAGMENT DIFFERENTLY 
C  QUARK-DIQUARK STRINGS. IN CASE OF THE DOUBLE-STRING, THE F	C  QUARK-DIQUARK STRINGS. IN CASE OF THE DOUBLE-STRING, THE F
C  QUARK WILL FRAGMENT VIA TWO BREAKS INTO A LEADING BARYON.	C  QUARK WILL FRAGMENT VIA TWO BREAKS INTO A LEADING BARYON.
C								C
C  SOPHISTICATED FRAGMENTATION PROCEDURE. SINCE SPACE-TIME	C  SOPHISTICATED FRAGMENTATION PROCEDURE. SINCE SPACE-TIME
C  EVOLUTION IS AN IMPORTANT ISSUE CONCERNING FINAL STATE INT	C  EVOLUTION IS AN IMPORTANT ISSUE CONCERNING FINAL STATE INT
C  ACTIONS, IT IS NOT ENOUGH TO HAVE A FRAGMENTATION MODEL WH	C  ACTIONS, IT IS NOT ENOUGH TO HAVE A FRAGMENTATION MODEL WH
C  WORKS, IT SHOULD HAVE THE RIGHT SPACE-TIME DESCRIPTION! TH	C  WORKS, IT SHOULD HAVE THE RIGHT SPACE-TIME DESCRIPTION! TH
C  FOR THE FIELD-FEYNMAN MODEL OF EARLIER VERSIONS (<3.00) HA	C  FOR THE FIELD-FEYNMAN MODEL OF EARLIER VERSIONS (<3.00) HA
C  ABANDONED AND REPLACED BY A VERY POWERFUL AND APPEALING PR	C  ABANDONED AND REPLACED BY A VERY POWERFUL AND APPEALING PR
C  SUGGESTED BY ARTRU/MENNESSIER.				C  SUGGESTED BY ARTRU/MENNESSIER.
C								C
C  VERY LARGE RESONANCE TABLE, INCLUDING FOR EXAMPLE ALL NUCL	C  VERY LARGE RESONANCE TABLE, INCLUDING FOR EXAMPLE ALL NUCL
C  RESONANCES UP TO 2 GEV. THE DECAY TABLE INCLUDES ALSO KSHO	C  RESONANCES UP TO 2 GEV. THE DECAY TABLE INCLUDES ALSO KSHO
C  AND LAMBDA DECAYS. DECAY SUPPRESSION IS GOVERNED BY THE PA	C  AND LAMBDA DECAYS. DECAY SUPPRESSION IS GOVERNED BY THE PA
C  'NDECAY' AND 'NDECAX'. SETTING 'NDECAY' TO 1 SUPPRESSES AL	C  'NDECAY' AND 'NDECAX'. SETTING 'NDECAY' TO 1 SUPPRESSES AL
C  FOR FURTHER DETAILS SEARCH FOR 'DECAY SUPPRESSION' IN SUBR	C  FOR FURTHER DETAILS SEARCH FOR 'DECAY SUPPRESSION' IN SUBR
C								C
C  FOR VERSION >= 4.01, WE USE GRIBOVS CUT-POMERON PROBABILIT	C  FOR VERSION >= 4.01, WE USE GRIBOVS CUT-POMERON PROBABILIT
C  DETERMINE THE WEIGHTS FOR MULTI-COLOUR-EXCHANGE.		C  DETERMINE THE WEIGHTS FOR MULTI-COLOUR-EXCHANGE.
C								C
C------------------------------------------------------------	C------------------------------------------------------------
C								C
C   PARTICLE ID (SAME AS ISAJET - SEE ISAJET.DOC, F.E.PAIGE)	C   PARTICLE ID (SAME AS ISAJET - SEE ISAJET.DOC, F.E.PAIGE)
C   --------------------------------------------------------	C   --------------------------------------------------------
C								C
C  QUARKS AND LEPTONS ARE NUMBERED IN ORDER OF MASS:		C  QUARKS AND LEPTONS ARE NUMBERED IN ORDER OF MASS:
C        UP=1 DN=2 ST=3 CH=4 BT=5 TP=6				C        UP=1 DN=2 ST=3 CH=4 BT=5 TP=6
C        NUE=11 E-=12 NUM=13 MU-=14 NUT=15 TAU-=16		C        NUE=11 E-=12 NUM=13 MU-=14 NUT=15 TAU-=16
C  WITH A NEGATIVE SIGN FOR ANTIPARTICLES.			C  WITH A NEGATIVE SIGN FOR ANTIPARTICLES.
C  ARBITRARY CONVENTIONS ARE:					C  ARBITRARY CONVENTIONS ARE:
C        GL=9 GM=10 KS=20 KL=-20 W+=80 Z0=90 .			C        GL=9 GM=10 KS=20 KL=-20 W+=80 Z0=90 .
C  THE CODE FOR A MESON IS AN INTEGER +-JKL, WHERE J.LE.K ARE	C  THE CODE FOR A MESON IS AN INTEGER +-JKL, WHERE J.LE.K ARE
C  QUARKS AND L IS THE SPIN. THE SIGN IS FOR THE J QUARK.	C  QUARKS AND L IS THE SPIN. THE SIGN IS FOR THE J QUARK.
C  FLAVOR SINGLET MESONS ARE ORDERED BY MASS:			C  FLAVOR SINGLET MESONS ARE ORDERED BY MASS:
C        PI0=110 ETA=220 ETAP=330 ETAC=440 .			C        PI0=110 ETA=220 ETAP=330 ETAC=440 .
C  SIMILARLY, THE CODE FOR A BARYON IS A COMPOUND INTEGER +-I	C  SIMILARLY, THE CODE FOR A BARYON IS A COMPOUND INTEGER +-I
C  FORMED FROM THE THREE QUARKS I,J,K AND A SPIN LABEL L=0,1.	C  FORMED FROM THE THREE QUARKS I,J,K AND A SPIN LABEL L=0,1.
C  THE CODE FOR A DIQUARK IS +-IJ00.				C  THE CODE FOR A DIQUARK IS +-IJ00.
C								C
C   LIST OF IDENT CODES:					C   LIST OF IDENT CODES:
C								C
C     IDENT     LABEL           MASS    CHARGE			C     IDENT     LABEL           MASS    CHARGE
C         1     UP        .30000E+00       .67			C         1     UP        .30000E+00       .67
C        -1     UB        .30000E+00      -.67			C        -1     UB        .30000E+00      -.67
C         2     DN        .30000E+00      -.33			C         2     DN        .30000E+00      -.33
C        -2     DB        .30000E+00       .33			C        -2     DB        .30000E+00       .33
C         3     ST        .50000E+00      -.33			C         3     ST        .50000E+00      -.33
C        -3     SB        .50000E+00       .33			C        -3     SB        .50000E+00       .33
C         4     CH        .16000E+01       .67			C         4     CH        .16000E+01       .67
C        -4     CB        .16000E+01      -.67			C        -4     CB        .16000E+01      -.67
C         5     BT        .49000E+01      -.33			C         5     BT        .49000E+01      -.33
C        -5     BB        .49000E+01       .33			C        -5     BB        .49000E+01       .33
C         6     TP        .30000E+02       .67			C         6     TP        .30000E+02       .67
C        -6     TB        .30000E+02      -.67			C        -6     TB        .30000E+02      -.67
C								C
C         9     GL       0.               0.00			C         9     GL       0.               0.00
C								C
C        10     GM       0.               0.00			C        10     GM       0.               0.00
C								C
C        11     NUE      0.               0.00			C        11     NUE      0.               0.00
C       -11     ANUE     0.               0.00			C       -11     ANUE     0.               0.00
C        12     E-        .51100E-03     -1.00			C        12     E-        .51100E-03     -1.00
C       -12     E+        .51100E-03      1.00			C       -12     E+        .51100E-03      1.00
C        13     NUM      0.               0.00			C        13     NUM      0.               0.00
C       -13     ANUM     0.               0.00			C       -13     ANUM     0.               0.00
C        14     MU-       .10566E+00     -1.00			C        14     MU-       .10566E+00     -1.00
C       -14     MU+       .10566E+00      1.00			C       -14     MU+       .10566E+00      1.00
C        15     NUT      0.               0.00			C        15     NUT      0.               0.00
C       -15     ANUT     0.               0.00			C       -15     ANUT     0.               0.00
C        16     TAU-      .18070E+01     -1.00			C        16     TAU-      .18070E+01     -1.00
C       -16     TAU+      .18070E+01      1.00			C       -16     TAU+      .18070E+01      1.00
C								C
C        20     KS        .49767E+00      0.00			C        20     KS        .49767E+00      0.00
C       -20     KL        .49767E+00      0.00			C       -20     KL        .49767E+00      0.00
C								C
C        80     W+        SIN2W=.23       1.00			C        80     W+        SIN2W=.23       1.00
C       -80     W-        SIN2W=.23      -1.00			C       -80     W-        SIN2W=.23      -1.00
C        90     Z0        SIN2W=.23       0.00			C        90     Z0        SIN2W=.23       0.00
C								C
C       110     PI0       .13496E+00      0.00			C       110     PI0       .13496E+00      0.00
C       120     PI+       .13957E+00      1.00			C       120     PI+       .13957E+00      1.00
C      -120     PI-       .13957E+00     -1.00			C      -120     PI-       .13957E+00     -1.00
C       220     ETA       .54880E+00      0.00			C       220     ETA       .54880E+00      0.00
C       130     K+        .49367E+00      1.00			C       130     K+        .49367E+00      1.00
C      -130     K-        .49367E+00     -1.00			C      -130     K-        .49367E+00     -1.00
C       230     K0        .49767E+00      0.00			C       230     K0        .49767E+00      0.00
C      -230     AK0       .49767E+00      0.00			C      -230     AK0       .49767E+00      0.00
C       330     ETAP      .95760E+00      0.00			C       330     ETAP      .95760E+00      0.00
C       140     AD0       .18633E+01      0.00			C       140     AD0       .18633E+01      0.00
C      -140     D0        .18633E+01      0.00			C      -140     D0        .18633E+01      0.00
C       240     D-        .18683E+01     -1.00			C       240     D-        .18683E+01     -1.00
C      -240     D+        .18683E+01      1.00			C      -240     D+        .18683E+01      1.00
C       340     F-        .20300E+01     -1.00			C       340     F-        .20300E+01     -1.00
C      -340     F+        .20300E+01      1.00			C      -340     F+        .20300E+01      1.00
C       440     ETAC      .29760E+01      0.00			C       440     ETAC      .29760E+01      0.00
C								C
C       111     RHO0      .77000E+00      0.00			C       111     RHO0      .77000E+00      0.00
C       121     RHO+      .77000E+00      1.00			C       121     RHO+      .77000E+00      1.00
C      -121     RHO-      .77000E+00     -1.00			C      -121     RHO-      .77000E+00     -1.00
C       221     OMEG      .78260E+00      0.00			C       221     OMEG      .78260E+00      0.00
C       131     K*+       .88810E+00      1.00			C       131     K*+       .88810E+00      1.00
C      -131     K*-       .88810E+00     -1.00			C      -131     K*-       .88810E+00     -1.00
C       231     K*0       .89220E+00      0.00			C       231     K*0       .89220E+00      0.00
C      -231     AK*0      .89220E+00      0.00			C      -231     AK*0      .89220E+00      0.00
C       331     PHI       .10196E+01      0.00			C       331     PHI       .10196E+01      0.00
C       141     AD*0      .20060E+01      0.00			C       141     AD*0      .20060E+01      0.00
C      -141     D*0       .20060E+01      0.00			C      -141     D*0       .20060E+01      0.00
C       241     D*-       .20086E+01     -1.00			C       241     D*-       .20086E+01     -1.00
C      -241     D*+       .20086E+01      1.00			C      -241     D*+       .20086E+01      1.00
C       341     F*-       .21400E+01     -1.00			C       341     F*-       .21400E+01     -1.00
C      -341     F*+       .21400E+01      1.00			C      -341     F*+       .21400E+01      1.00
C       441     JPSI      .30970E+01      0.00			C       441     JPSI      .30970E+01      0.00
C								C
C      1120     P         .93828E+00      1.00			C      1120     P         .93828E+00      1.00
C     -1120     AP        .93828E+00     -1.00			C     -1120     AP        .93828E+00     -1.00
C      1220     N         .93957E+00      0.00			C      1220     N         .93957E+00      0.00
C     -1220     AN        .93957E+00      0.00			C     -1220     AN        .93957E+00      0.00
C      1130     S+        .11894E+01      1.00			C      1130     S+        .11894E+01      1.00
C     -1130     AS-       .11894E+01     -1.00			C     -1130     AS-       .11894E+01     -1.00
C      1230     S0        .11925E+01      0.00			C      1230     S0        .11925E+01      0.00
C     -1230     AS0       .11925E+01      0.00			C     -1230     AS0       .11925E+01      0.00
C      2130     L         .11156E+01      0.00			C      2130     L         .11156E+01      0.00
C     -2130     AL        .11156E+01      0.00			C     -2130     AL        .11156E+01      0.00
C      2230     S-        .11974E+01     -1.00			C      2230     S-        .11974E+01     -1.00
C     -2230     AS+       .11974E+01      1.00			C     -2230     AS+       .11974E+01      1.00
C      1330     XI0       .13149E+01      0.00			C      1330     XI0       .13149E+01      0.00
C     -1330     AXI0      .13149E+01      0.00			C     -1330     AXI0      .13149E+01      0.00
C      2330     XI-       .13213E+01     -1.00			C      2330     XI-       .13213E+01     -1.00
C     -2330     AXI+      .13213E+01      1.00			C     -2330     AXI+      .13213E+01      1.00
C      1140     SC++      .24300E+01      2.00			C      1140     SC++      .24300E+01      2.00
C     -1140     ASC--     .24300E+01     -2.00			C     -1140     ASC--     .24300E+01     -2.00
C      1240     SC+       .24300E+01      1.00			C      1240     SC+       .24300E+01      1.00
C     -1240     ASC-      .24300E+01     -1.00			C     -1240     ASC-      .24300E+01     -1.00
C      2140     LC+       .22600E+01      1.00			C      2140     LC+       .22600E+01      1.00
C     -2140     ALC-      .22600E+01     -1.00			C     -2140     ALC-      .22600E+01     -1.00
C      2240     SC0       .24300E+01      0.00			C      2240     SC0       .24300E+01      0.00
C     -2240     ASC0      .24300E+01      0.00			C     -2240     ASC0      .24300E+01      0.00
C      1340     USC.      .25000E+01      1.00			C      1340     USC.      .25000E+01      1.00
C     -1340     AUSC.     .25000E+01     -1.00			C     -1340     AUSC.     .25000E+01     -1.00
C      3140     SUC.      .24000E+01      1.00			C      3140     SUC.      .24000E+01      1.00
C     -3140     ASUC.     .24000E+01     -1.00			C     -3140     ASUC.     .24000E+01     -1.00
C      2340     DSC.      .25000E+01      0.00			C      2340     DSC.      .25000E+01      0.00
C     -2340     ADSC.     .25000E+01      0.00			C     -2340     ADSC.     .25000E+01      0.00
C      3240     SDC.      .24000E+01      0.00			C      3240     SDC.      .24000E+01      0.00
C     -3240     ASDC.     .24000E+01      0.00			C     -3240     ASDC.     .24000E+01      0.00
C      3340     SSC.      .26000E+01      0.00			C      3340     SSC.      .26000E+01      0.00
C     -3340     ASSC.     .26000E+01      0.00			C     -3340     ASSC.     .26000E+01      0.00
C      1440     UCC.      .35500E+01      2.00			C      1440     UCC.      .35500E+01      2.00
C     -1440     AUCC.     .35500E+01     -2.00			C     -1440     AUCC.     .35500E+01     -2.00
C      2440     DCC.      .35500E+01      1.00			C      2440     DCC.      .35500E+01      1.00
C     -2440     ADCC.     .35500E+01     -1.00			C     -2440     ADCC.     .35500E+01     -1.00
C      3440     SCC.      .37000E+01      1.00			C      3440     SCC.      .37000E+01      1.00
C     -3440     ASCC.     .37000E+01     -1.00			C     -3440     ASCC.     .37000E+01     -1.00
C								C
C      1111     DL++      .12320E+01      2.00			C      1111     DL++      .12320E+01      2.00
C     -1111     ADL--     .12320E+01     -2.00			C     -1111     ADL--     .12320E+01     -2.00
C      1121     DL+       .12320E+01      1.00			C      1121     DL+       .12320E+01      1.00
C     -1121     ADL-      .12320E+01     -1.00			C     -1121     ADL-      .12320E+01     -1.00
C      1221     DL0       .12320E+01      0.00			C      1221     DL0       .12320E+01      0.00
C     -1221     ADL0      .12320E+01      0.00			C     -1221     ADL0      .12320E+01      0.00
C      2221     DL-       .12320E+01     -1.00			C      2221     DL-       .12320E+01     -1.00
C     -2221     ADL+      .12320E+01      1.00			C     -2221     ADL+      .12320E+01      1.00
C      1131     S*+       .13823E+01      1.00			C      1131     S*+       .13823E+01      1.00
C     -1131     AS*-      .13823E+01     -1.00			C     -1131     AS*-      .13823E+01     -1.00
C      1231     S*0       .13820E+01      0.00			C      1231     S*0       .13820E+01      0.00
C     -1231     AS*0      .13820E+01      0.00			C     -1231     AS*0      .13820E+01      0.00
C      2231     S*-       .13875E+01     -1.00			C      2231     S*-       .13875E+01     -1.00
C     -2231     AS*+      .13875E+01      1.00			C     -2231     AS*+      .13875E+01      1.00
C      1331     XI*0      .15318E+01      0.00			C      1331     XI*0      .15318E+01      0.00
C     -1331     AXI*0     .15318E+01      0.00			C     -1331     AXI*0     .15318E+01      0.00
C      2331     XI*-      .15350E+01     -1.00			C      2331     XI*-      .15350E+01     -1.00
C     -2331     AXI*+     .15350E+01      1.00			C     -2331     AXI*+     .15350E+01      1.00
C      3331     OM-       .16722E+01     -1.00			C      3331     OM-       .16722E+01     -1.00
C     -3331     AOM+      .16722E+01      1.00			C     -3331     AOM+      .16722E+01      1.00
C      1141     UUC*      .26300E+01      2.00			C      1141     UUC*      .26300E+01      2.00
C     -1141     AUUC*     .26300E+01     -2.00			C     -1141     AUUC*     .26300E+01     -2.00
C      1241     UDC*      .26300E+01      1.00			C      1241     UDC*      .26300E+01      1.00
C     -1241     AUDC*     .26300E+01     -1.00			C     -1241     AUDC*     .26300E+01     -1.00
C      2241     DDC*      .26300E+01      0.00			C      2241     DDC*      .26300E+01      0.00
C     -2241     ADDC*     .26300E+01      0.00			C     -2241     ADDC*     .26300E+01      0.00
C      1341     USC*      .27000E+01      1.00			C      1341     USC*      .27000E+01      1.00
C     -1341     AUSC*     .27000E+01     -1.00			C     -1341     AUSC*     .27000E+01     -1.00
C      2341     DSC*      .27000E+01      0.00			C      2341     DSC*      .27000E+01      0.00
C     -2341     ADSC*     .27000E+01      0.00			C     -2341     ADSC*     .27000E+01      0.00
C      3341     SSC*      .28000E+01      0.00			C      3341     SSC*      .28000E+01      0.00
C     -3341     ASSC*     .28000E+01      0.00			C     -3341     ASSC*     .28000E+01      0.00
C      1441     UCC*      .37500E+01      2.00			C      1441     UCC*      .37500E+01      2.00
C     -1441     AUCC*     .37500E+01     -2.00			C     -1441     AUCC*     .37500E+01     -2.00
C      2441     DCC*      .37500E+01      1.00			C      2441     DCC*      .37500E+01      1.00
C     -2441     ADCC*     .37500E+01     -1.00			C     -2441     ADCC*     .37500E+01     -1.00
C      3441     SCC*      .39000E+01      1.00			C      3441     SCC*      .39000E+01      1.00
C     -3441     ASCC*     .39000E+01     -1.00			C     -3441     ASCC*     .39000E+01     -1.00
C      4441     CCC*      .48000E+01      2.00			C      4441     CCC*      .48000E+01      2.00
C     -4441     ACCC*     .48000E+01     -2.00			C     -4441     ACCC*     .48000E+01     -2.00
C------------------------------------------------------------	C------------------------------------------------------------
C								C
C   LIST OF SUBROUTINES AND FUNCTIONS OF SUBROUTINE-TURBO-VER	C   LIST OF SUBROUTINES AND FUNCTIONS OF SUBROUTINE-TURBO-VER
C   ---------------------------------------------------------	C   ---------------------------------------------------------
C								C
C     AVENUS  HAHABS  HAPAPA  HASI    HASTFC  HASTFL  HASTFR 	C     AVENUS  HAHABS  HAPAPA  HASI    HASTFC  HASTFL  HASTFR 
C     HASTFW  HASTPR  HDECMP  HRESCL  IDCOMJ  IDCOMK  IDCOMP 	C     HASTFW  HASTPR  HDECMP  HRESCL  IDCOMJ  IDCOMK  IDCOMP 
C     IDENCO  IDFLAV  IDLABL  IDMASS  IDMIX   IDQUAC  IDRES  	C     IDENCO  IDFLAV  IDLABL  IDMASS  IDMIX   IDQUAC  IDRES  
C     IDSPIN  IDTAU   IDTRA   IDTRAI  IDTRB   IDTRBI  IDTR4	C     IDSPIN  IDTAU   IDTRA   IDTRAI  IDTRB   IDTRBI  IDTR4
C     JAMBR1  JAMBR2  JAMFRA  JCENTD  JCENTP  JCENTR  JCLUDE 	C     JAMBR1  JAMBR2  JAMFRA  JCENTD  JCENTP  JCENTR  JCLUDE 
C     JDECAY  JDECIN  JESTPR  JETGEN  JFRADE  JINTA1  JINTA2	C     JDECAY  JDECIN  JESTPR  JETGEN  JFRADE  JINTA1  JINTA2
C     JINTCC  JINTCE  JINTCH  JINTCL  JINTEL  JINTFP  JINTFS	C     JINTCC  JINTCE  JINTCH  JINTCL  JINTEL  JINTFP  JINTFS
C     JINTFU  JINTPA  JRESCL  JSPLIT  LEPEXP  LEPSTR  LEPTAR	C     JINTFU  JINTPA  JRESCL  JSPLIT  LEPEXP  LEPSTR  LEPTAR
C     NUCINI  NUCLCO  NUCOGE  NUCOLL  NUCSTR  PVJPSF		C     NUCINI  NUCLCO  NUCOGE  NUCOLL  NUCSTR  PVJPSF
C     RACPRO  RANSTC  RANXQ   SBET    SDENSI  SGAM    SGAU	C     RACPRO  RANSTC  RANXQ   SBET    SDENSI  SGAM    SGAU
C     SHOPAR  SJCENT  SJCEN4  SJCGAM  SMASS   SMASSI  SMASSP 	C     SHOPAR  SJCENT  SJCEN4  SJCGAM  SMASS   SMASSI  SMASSP 
C     SPTF    SPTH    SPTJ    SPTQ    SSE0    SSE1    SSPLIT 	C     SPTF    SPTH    SPTJ    SPTQ    SSE0    SSE1    SSPLIT 
C     STAA    STXD    STXS    STXU    STXUS   STXZNE  STXZPR 	C     STAA    STXD    STXS    STXU    STXUS   STXZNE  STXZPR 
C     SVA1    UINTEG  UTACOS  UTAMNU  UTAMNX  UTAMNY  UTAMNZ 	C     SVA1    UINTEG  UTACOS  UTAMNU  UTAMNX  UTAMNY  UTAMNZ 
C     UTAXIS  UTCHM   UTCLEA  UTHIST  UTHSEA  UTINVT  UTKSIX	C     UTAXIS  UTCHM   UTCLEA  UTHIST  UTHSEA  UTINVT  UTKSIX
C     UTKSTR  UTLOBO  UTLOB2  UTLOC   UTMSG   UTMSGF  UTOVEL 	C     UTKSTR  UTLOBO  UTLOB2  UTLOC   UTMSG   UTMSGF  UTOVEL 
C     UTPART  UTPCM   UTQUAF  UTQZ    UTREMB  UTREPL  UTRESM 	C     UTPART  UTPCM   UTQUAF  UTQZ    UTREMB  UTREPL  UTRESM 
C     UTROTA  UTROT2  UTSTOP  UTTAIN  UTTAIX  UTTAUS  UTTAUT 	C     UTROTA  UTROT2  UTSTOP  UTTAIN  UTTAIX  UTTAUS  UTTAUT 
C								C
C------------------------------------------------------------	C------------------------------------------------------------
C								C
C   SUBROUTINE-TURBO-VERSION 4.12:				C   SUBROUTINE-TURBO-VERSION 4.12:
C   ------------------------------				C   ------------------------------
C								C
C     IT IS TUNED FOR FASTER CALCULATION, ESPECIALLY IF ENERG	C     IT IS TUNED FOR FASTER CALCULATION, ESPECIALLY IF ENERG
C   TARGET ARE VARYING FROM COLLISION TO COLLISION, AS IS THE	C   TARGET ARE VARYING FROM COLLISION TO COLLISION, AS IS THE
C   THE DEVELOPMENT OF AN AIR SHOWER CASCADE.			C   THE DEVELOPMENT OF AN AIR SHOWER CASCADE.
C     IT NEEDS LINKING ROUTINES FOR INPUT AND OUTPUT AND A RA	C     IT NEEDS LINKING ROUTINES FOR INPUT AND OUTPUT AND A RA
C   GENERATOR. ALL PARAMETERS MUST BE SET IN THE LINKING ROUT	C   GENERATOR. ALL PARAMETERS MUST BE SET IN THE LINKING ROUT
C   FOR CONNECTION WITH THE AIR SHOWER PROGRAM 'CORSIKA', SUC	C   FOR CONNECTION WITH THE AIR SHOWER PROGRAM 'CORSIKA', SUC
C   ARE AVAILABLE:						C   ARE AVAILABLE:
C        RANGEN:    RANDOM GENERATOR				C        RANGEN:    RANDOM GENERATOR
C        UTQSEA:    CALC. OF SEA     QUARK STRUCTURE FUNCTION	C        UTQSEA:    CALC. OF SEA     QUARK STRUCTURE FUNCTION
C        UTQVAL:    CALC. OF VALENCE QUARK STRUCTURE FUNCTION	C        UTQVAL:    CALC. OF VALENCE QUARK STRUCTURE FUNCTION
C        VENDAT:    INITIALIZATION OF PARTICLE ID TABLE		C        VENDAT:    INITIALIZATION OF PARTICLE ID TABLE
C        VENINI:    FOR FIRST INITIALIZATION OF PARAMETERS	C        VENINI:    FOR FIRST INITIALIZATION OF PARAMETERS
C        VENLNK:    FOR INITIALIZATION OF ENERGY DEPENDENT PA	C        VENLNK:    FOR INITIALIZATION OF ENERGY DEPENDENT PA
C        VSTORE:    TO STORE THE GENERATED SECONDARY PARTICLE	C        VSTORE:    TO STORE THE GENERATED SECONDARY PARTICLE
C								C
C   NOTE: THE COMMONS ARE IN GENERAL DIFFERENT FROM THE UNTUN	C   NOTE: THE COMMONS ARE IN GENERAL DIFFERENT FROM THE UNTUN
C         VENUS VERSION 4.12					C         VENUS VERSION 4.12
C------------------------------------------------------------	C------------------------------------------------------------
C  COPYRIGHT AND ANY OTHER APPROPRIATE LEGAL PROTECTION OF TH	C  COPYRIGHT AND ANY OTHER APPROPRIATE LEGAL PROTECTION OF TH
C  COMPUTER PROGRAMS AND ASSOCIATED DOCUMENTATION RESERVED IN	C  COMPUTER PROGRAMS AND ASSOCIATED DOCUMENTATION RESERVED IN
C  COUNTRIES OF THE WORLD.					C  COUNTRIES OF THE WORLD.
C								C
C  FZK WELCOMES COMMENTS CONCERNING THE VENUS CODE BUT UNDERT	C  FZK WELCOMES COMMENTS CONCERNING THE VENUS CODE BUT UNDERT
C  OBLIGATION FOR MAINTENANCE OF THE PROGRAMS, NOR RESPONSIBI	C  OBLIGATION FOR MAINTENANCE OF THE PROGRAMS, NOR RESPONSIBI
C  THEIR CORRECTNESS, AND ACCEPTS NO LIABILITY WHATSOEVER RES	C  THEIR CORRECTNESS, AND ACCEPTS NO LIABILITY WHATSOEVER RES
C  FROM THE USE OF ITS PROGRAMS.				C  FROM THE USE OF ITS PROGRAMS.
C============================================================	C============================================================

      SUBROUTINE AVENUS						      SUBROUTINE AVENUS

C------------------------------------------------------------	C------------------------------------------------------------
C  GENERATES ONE VENUS EVENT					C  GENERATES ONE VENUS EVENT
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      DOUBLE PRECISION SEEDC,SEEDI				      DOUBLE PRECISION SEEDC,SEEDI
      COMMON /CSEED/   SEEDC,SEEDI				      COMMON /CSEED/   SEEDC,SEEDI
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      ISHS0=ISHSUB						      ISHS0=ISHSUB
      IF ( ISHEVT .NE. 0  .AND.  NREVT+1 .NE. ISHEVT ) THEN	      IF ( ISHEVT .NE. 0  .AND.  NREVT+1 .NE. ISHEVT ) THEN
        ISH=0							        ISH=0
        ISHSUB=0						        ISHSUB=0
      ENDIF							      ENDIF
CDH   IF ( NREVT.EQ.0 .AND. (ISH.EQ.13.OR.ISH.EQ.14) ) CALL U	CDH   IF ( NREVT.EQ.0 .AND. (ISH.EQ.13.OR.ISH.EQ.14) ) CALL U
CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('*** AVENUS *** ')		CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('*** AVENUS *** ')
      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN		      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'AVENUS (ENTRY)'				        WRITE(IFCH,*)'AVENUS (ENTRY)'
      ENDIF							      ENDIF
      IPAGE=0							      IPAGE=0
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 )					      IF ( ISH .GE. 91 )
     *  WRITE(IFCH,113)('-',L=1,79),IPAGE,NREVT+1,SEEDC,('-',	     *  WRITE(IFCH,113)('-',L=1,79),IPAGE,NREVT+1,SEEDC,('-',
113   FORMAT(/1X,79A1/1X,I5,'.PAGE            '			113   FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *  ,5X,'EVT:',I4,5X,'SEEDC:',D25.15/1X,79A1/)		     *  ,5X,'EVT:',I4,5X,'SEEDC:',D25.15/1X,79A1/)
      IF ( ICHOIC. EQ. 4  .OR.  ICHOIC .EQ. 5 ) GOTO 1000	      IF ( ICHOIC. EQ. 4  .OR.  ICHOIC .EQ. 5 ) GOTO 1000
      BIMEVT=-1							      BIMEVT=-1
      NTEVT0=NTEVT						      NTEVT0=NTEVT
3     NTEVT=NTEVT0						3     NTEVT=NTEVT0
2     NTEVT=NTEVT+1						2     NTEVT=NTEVT+1
      IF     ( ICHOIC .EQ. 1 ) THEN				      IF     ( ICHOIC .EQ. 1 ) THEN
        CALL JETGEN(IER)					        CALL JETGEN(IER)
        IF ( IER .EQ. 1 ) GOTO 3				        IF ( IER .EQ. 1 ) GOTO 3
      ELSEIF ( ICHOIC .EQ. 2  .OR.  ICHOIC .EQ. 3 ) THEN	      ELSEIF ( ICHOIC .EQ. 2  .OR.  ICHOIC .EQ. 3 ) THEN
        CALL NUCOLL						        CALL NUCOLL
      ENDIF							      ENDIF
      IF ( ICHOIC .EQ. 1  .OR.  ICHOIC .EQ. 2 ) THEN		      IF ( ICHOIC .EQ. 1  .OR.  ICHOIC .EQ. 2 ) THEN
        CALL JFRADE(IER)					        CALL JFRADE(IER)
        IF ( IER. EQ. 1 ) GOTO 3				        IF ( IER. EQ. 1 ) GOTO 3
      ENDIF							      ENDIF
      IF ( (ICHOIC.EQ.2 .OR. ICHOIC.EQ.3) .AND. NEVT.EQ.0 ) T	      IF ( (ICHOIC.EQ.2 .OR. ICHOIC.EQ.3) .AND. NEVT.EQ.0 ) T
        BIMEVT=-1						        BIMEVT=-1
        GOTO 2							        GOTO 2
      ENDIF							      ENDIF
      IF ( JERR .GT. 0 ) THEN					      IF ( JERR .GT. 0 ) THEN
        CALL UTSTOP('AVENUS: JERR > 0                        	        CALL UTSTOP('AVENUS: JERR > 0                        
      ENDIF							      ENDIF
      NREVT=NREVT+1						      NREVT=NREVT+1

1000  CONTINUE							1000  CONTINUE
CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('    AVENUS F   ')		CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('    AVENUS F   ')
      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN		      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN
        WRITE(IFCH,*)'AVENUS (EXIT)'				        WRITE(IFCH,*)'AVENUS (EXIT)'
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0
      ISHSUB=ISHS0						      ISHSUB=ISHS0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HAHABS(PROJ,TARG,IAP,IAT,ISKIP,IRETHH)		      SUBROUTINE HAHABS(PROJ,TARG,IAP,IAT,ISKIP,IRETHH)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS A BASIC (ONE COLOR EXCHANGE) HADRON-HADRON COLLIS	C  PERFORMS A BASIC (ONE COLOR EXCHANGE) HADRON-HADRON COLLIS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CLEAD/   COOAV3,COOAV4,LEAD			      COMMON /CLEAD/   COOAV3,COOAV4,LEAD
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /CNEW/    KOTRI,NEWCOL,NEWICO			      COMMON /CNEW/    KOTRI,NEWCOL,NEWICO
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL			      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /CSTSH/   NSTSH					      COMMON /CSTSH/   NSTSH
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      PROJ(NSI,NHA),PSUM(5),PSUMX(5)			      REAL      PROJ(NSI,NHA),PSUM(5),PSUMX(5)
     *         ,SIL(NSI),SILP(NSI),SILT(NSI)			     *         ,SIL(NSI),SILP(NSI),SILT(NSI)
     *         ,SIX(NSI,NSIX),SIXP(NSI,NSIX),SIXT(NSI,NSIX)	     *         ,SIX(NSI,NSIX),SIXP(NSI,NSIX),SIXT(NSI,NSIX)
     *         ,STRAP(NSI,NSIX+1),STRAT(NSI,NSIX+1)		     *         ,STRAP(NSI,NSIX+1),STRAT(NSI,NSIX+1)
     *         ,STRLP(NSI,NSIX+1),STRLT(NSI,NSIX+1)		     *         ,STRLP(NSI,NSIX+1),STRLT(NSI,NSIX+1)
     *         ,STR0(NSI,NSIX+1),TARG(NSI,NHA)			     *         ,STR0(NSI,NSIX+1),TARG(NSI,NHA)
      INTEGER   ICVP(2),ICVT(2),JCVP(NFLAV,2),JCVT(NFLAV,2)	      INTEGER   ICVP(2),ICVT(2),JCVP(NFLAV,2),JCVT(NFLAV,2)
      CHARACTER XFLAP*3,XFLAT*3,XFLBP*3,XFLBT*3			      CHARACTER XFLAP*3,XFLAT*3,XFLBP*3,XFLBT*3
C------------------------------------------------------------	C------------------------------------------------------------
      R=RANGEN()						      R=RANGEN()
      NTRY=0							      NTRY=0
      IRETHH=0							      IRETHH=0
      CALL UTREMB(PROJ,TARG,2)					      CALL UTREMB(PROJ,TARG,2)
      GOTO 9							      GOTO 9

9994  IRET=0							9994  IRET=0
      CALL UTREST(PROJ,TARG,2)					      CALL UTREST(PROJ,TARG,2)
 9    CONTINUE							 9    CONTINUE
      DO 8 NX=1,NSIX						      DO 8 NX=1,NSIX
        DO 8 N=1,NSI						        DO 8 N=1,NSI
          SIXP(N,NX)=0.						          SIXP(N,NX)=0.
          SIXT(N,NX)=0.						          SIXT(N,NX)=0.
 8    CONTINUE							 8    CONTINUE
      CALL HDECMP(PROJ,SIL,SIX)					      CALL HDECMP(PROJ,SIL,SIX)
      CALL UTKSIX(SIX,KMAXP)					      CALL UTKSIX(SIX,KMAXP)
      CALL HDECMP(TARG,SIL,SIX)					      CALL HDECMP(TARG,SIL,SIX)
      CALL UTKSIX(SIX,KMAXT)					      CALL UTKSIX(SIX,KMAXT)
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,100) ( (PROJ(I,J),I=1,NSI), J=2,KMAXP+2 )	        WRITE(IFCH,100) ( (PROJ(I,J),I=1,NSI), J=2,KMAXP+2 )
100     FORMAT ( ' PROJ:',4F13.5,2F8.0/,20('      ',4F13.5,2F	100     FORMAT ( ' PROJ:',4F13.5,2F8.0/,20('      ',4F13.5,2F
        WRITE(IFCH,102) ( (TARG(I,J),I=1,NSI), J=2,KMAXT+2 )	        WRITE(IFCH,102) ( (TARG(I,J),I=1,NSI), J=2,KMAXT+2 )
102     FORMAT ( ' TARG:',4F13.5,2F8.0/,50('      ',4F13.5,2F	102     FORMAT ( ' TARG:',4F13.5,2F8.0/,50('      ',4F13.5,2F
      ENDIF							      ENDIF
      IF ( ISKIP .EQ. 1 ) GOTO 9999				      IF ( ISKIP .EQ. 1 ) GOTO 9999

9997  CALL HDECMP(PROJ,SILP,SIXP)				9997  CALL HDECMP(PROJ,SILP,SIXP)
      CALL HDECMP(TARG,SILT,SIXT)				      CALL HDECMP(TARG,SILT,SIXT)
 1    ICVP(1)=NINT(PROJ(5,1))					 1    ICVP(1)=NINT(PROJ(5,1))
      ICVP(2)=NINT(PROJ(6,1))					      ICVP(2)=NINT(PROJ(6,1))
      ICVT(1)=NINT(TARG(5,1))					      ICVT(1)=NINT(TARG(5,1))
      ICVT(2)=NINT(TARG(6,1))					      ICVT(2)=NINT(TARG(6,1))
      CALL HAPAPA(SILP,IFLAP,XFLAP,PTAP,PTAHP,IFLBP,XFLBP,PTB	      CALL HAPAPA(SILP,IFLAP,XFLAP,PTAP,PTAHP,IFLBP,XFLBP,PTB
     *            ,NQAQP,ICVP)					     *            ,NQAQP,ICVP)
      CALL HAPAPA(SILT,IFLAT,XFLAT,PTAT,PTAHT,IFLBT,XFLBT,PTB	      CALL HAPAPA(SILT,IFLAT,XFLAT,PTAT,PTAHT,IFLBT,XFLBT,PTB
     *            ,NQAQT,ICVT)					     *            ,NQAQT,ICVT)
      IF ( NQAQP*NQAQT .EQ. -1 ) GOTO 1				      IF ( NQAQP*NQAQT .EQ. -1 ) GOTO 1

9998  NTRY=NTRY+1						9998  NTRY=NTRY+1
      IF ( NTRY .GT. NTRYMX+1 ) THEN				      IF ( NTRY .GT. NTRYMX+1 ) THEN
        ISKIP=1							        ISKIP=1
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF

      CALL HDECMP(PROJ,SILP,SIXP)				      CALL HDECMP(PROJ,SILP,SIXP)
      CALL HDECMP(TARG,SILT,SIXT)				      CALL HDECMP(TARG,SILT,SIXT)
      CALL HASTFS(SILP,SIXP,IFLAP,XFLAP,PTAP,PTAHP		      CALL HASTFS(SILP,SIXP,IFLAP,XFLAP,PTAP,PTAHP
     *            ,SILT,SIXT,IFLBT,XFLBT,PTBT,PTBHT,STRAP,IRE	     *            ,SILT,SIXT,IFLBT,XFLBT,PTBT,PTBHT,STRAP,IRE
      IF ( IRET .EQ. 1 ) THEN					      IF ( IRET .EQ. 1 ) THEN
        ISKIP=1							        ISKIP=1
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF
      IF ( IRET .EQ. 2 ) GOTO 9997				      IF ( IRET .EQ. 2 ) GOTO 9997
      IF ( IRET .EQ. 3 ) THEN					      IF ( IRET .EQ. 3 ) THEN
        IF ( XFLBP(1:2) .EQ. 'VA' ) XFLBP(1:2)='SE'		        IF ( XFLBP(1:2) .EQ. 'VA' ) XFLBP(1:2)='SE'
        IF ( XFLAT(1:2) .EQ. 'VA' ) XFLAT(1:2)='SE'		        IF ( XFLAT(1:2) .EQ. 'VA' ) XFLAT(1:2)='SE'
        IFLAT=IFLBT						        IFLAT=IFLBT
        IFLBP=IFLAP						        IFLBP=IFLAP
        GOTO 9998						        GOTO 9998
      ENDIF							      ENDIF
      IF ( IRET .EQ. 5 ) THEN					      IF ( IRET .EQ. 5 ) THEN
        IF ( XFLAP(1:2) .EQ. 'SE'  .AND.  XFLBP(1:2) .EQ. 'SE	        IF ( XFLAP(1:2) .EQ. 'SE'  .AND.  XFLBP(1:2) .EQ. 'SE
          IFLBP=-ABS(IFLBP)					          IFLBP=-ABS(IFLBP)
          IFLAP=IFLBP						          IFLAP=IFLBP
        ENDIF							        ENDIF
        IF ( XFLAT(1:2) .EQ. 'SE'  .AND.  XFLBT(1:2) .EQ. 'SE	        IF ( XFLAT(1:2) .EQ. 'SE'  .AND.  XFLBT(1:2) .EQ. 'SE
          IFLAT=-ABS(IFLAT)					          IFLAT=-ABS(IFLAT)
          IFLBT=IFLAT						          IFLBT=IFLAT
        ENDIF							        ENDIF
        GOTO 9998						        GOTO 9998
      ENDIF							      ENDIF
      CALL HASTFS(SILT,SIXT,IFLAT,XFLAT,PTAT,PTAHT		      CALL HASTFS(SILT,SIXT,IFLAT,XFLAT,PTAT,PTAHT
     *,SILP,SIXP,IFLBP,XFLBP,PTBP,PTBHP,STRAT,IRET,2)		     *,SILP,SIXP,IFLBP,XFLBP,PTBP,PTBHP,STRAT,IRET,2)
      IF ( IRET .EQ. 1 ) THEN					      IF ( IRET .EQ. 1 ) THEN
        ISKIP=1							        ISKIP=1
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF
      IF ( IRET .EQ. 2 ) GOTO 9997				      IF ( IRET .EQ. 2 ) GOTO 9997
      IF ( IRET .EQ. 3 ) THEN					      IF ( IRET .EQ. 3 ) THEN
        IF ( XFLAP(1:2) .EQ. 'VA' ) XFLAP(1:2)='SE'		        IF ( XFLAP(1:2) .EQ. 'VA' ) XFLAP(1:2)='SE'
        IF ( XFLBT(1:2) .EQ. 'VA' ) XFLBT(1:2)='SE'		        IF ( XFLBT(1:2) .EQ. 'VA' ) XFLBT(1:2)='SE'
        IFLBT=IFLAT						        IFLBT=IFLAT
        IFLAP=IFLBP						        IFLAP=IFLBP
        GOTO 9998						        GOTO 9998
      ENDIF							      ENDIF
      IF ( IRET .EQ. 5 ) THEN					      IF ( IRET .EQ. 5 ) THEN
        IF ( XFLAP(1:2) .EQ. 'SE'  .AND.  XFLBP(1:2) .EQ. 'SE	        IF ( XFLAP(1:2) .EQ. 'SE'  .AND.  XFLBP(1:2) .EQ. 'SE
          IFLAP=-ABS(IFLAP)					          IFLAP=-ABS(IFLAP)
          IFLBP=IFLAP						          IFLBP=IFLAP
        ENDIF							        ENDIF
        IF ( XFLAT(1:2) .EQ. 'SE'  .AND.  XFLBT(1:2) .EQ. 'SE	        IF ( XFLAT(1:2) .EQ. 'SE'  .AND.  XFLBT(1:2) .EQ. 'SE
          IFLBT=-ABS(IFLBT)					          IFLBT=-ABS(IFLBT)
          IFLAT=IFLBT						          IFLAT=IFLBT
        ENDIF							        ENDIF
        GOTO 9998						        GOTO 9998
      ENDIF							      ENDIF

      CALL HASTFC(SILP,SIXP,IRET)				      CALL HASTFC(SILP,SIXP,IRET)
      IF     ( IRET .EQ. 0 ) THEN				      IF     ( IRET .EQ. 0 ) THEN
        CALL HASTFC(SILT,SIXT,IRET)				        CALL HASTFC(SILT,SIXT,IRET)
      ELSEIF ( IRET .EQ. 1 ) THEN				      ELSEIF ( IRET .EQ. 1 ) THEN
        IF ( ISH .GE. 91 ) WRITE(IFCH,*)'LIGHT STRING --> RED	        IF ( ISH .GE. 91 ) WRITE(IFCH,*)'LIGHT STRING --> RED
        GOTO 9998						        GOTO 9998
      ELSEIF ( IRET .EQ. 2 ) THEN				      ELSEIF ( IRET .EQ. 2 ) THEN
        IF ( ISH .GE. 91 ) WRITE(IFCH,*)'JC>9 --> REDO HAPAPA	        IF ( ISH .GE. 91 ) WRITE(IFCH,*)'JC>9 --> REDO HAPAPA
        GOTO 9997						        GOTO 9997
      ENDIF							      ENDIF

9999  CONTINUE							9999  CONTINUE
      IF ( ISKIP .EQ. 1 ) THEN					      IF ( ISKIP .EQ. 1 ) THEN
        COLEVT=COLEVT-1./NCOLEX					        COLEVT=COLEVT-1./NCOLEX
        CALL HDECMP(PROJ,SILP,SIXP)				        CALL HDECMP(PROJ,SILP,SIXP)
        CALL HDECMP(TARG,SILT,SIXT)				        CALL HDECMP(TARG,SILT,SIXT)
        IF ( ISH .GE. 91 ) THEN					        IF ( ISH .GE. 91 ) THEN
          WRITE(IFCH,*)'SKIP'					          WRITE(IFCH,*)'SKIP'
          CALL HASTFW(SILP,SIXP)				          CALL HASTFW(SILP,SIXP)
          CALL HASTFW(SILT,SIXT)				          CALL HASTFW(SILT,SIXT)
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      CALL HASTFL(SILP,SIXP,STRLP)				      CALL HASTFL(SILP,SIXP,STRLP)
      CALL HASTFL(SILT,SIXT,STRLT)				      CALL HASTFL(SILT,SIXT,STRLT)

      IF ( ISKIP .EQ. 1 ) GOTO 9995				      IF ( ISKIP .EQ. 1 ) GOTO 9995

      CALL IDDECO(ICVP,JCVP)					      CALL IDDECO(ICVP,JCVP)
      CALL IDDECO(ICVT,JCVT)					      CALL IDDECO(ICVT,JCVT)
      IF ( XFLAP(1:2).EQ.'VA') JCVP(IABS(IFLAP),1)=JCVP(IABS(	      IF ( XFLAP(1:2).EQ.'VA') JCVP(IABS(IFLAP),1)=JCVP(IABS(
      IF ( XFLBP(1:2).EQ.'VA') JCVP(IABS(IFLBP),2)=JCVP(IABS(	      IF ( XFLBP(1:2).EQ.'VA') JCVP(IABS(IFLBP),2)=JCVP(IABS(
      IF ( XFLAT(1:2).EQ.'VA') JCVT(IABS(IFLAT),1)=JCVT(IABS(	      IF ( XFLAT(1:2).EQ.'VA') JCVT(IABS(IFLAT),1)=JCVT(IABS(
      IF ( XFLBT(1:2).EQ.'VA') JCVT(IABS(IFLBT),2)=JCVT(IABS(	      IF ( XFLBT(1:2).EQ.'VA') JCVT(IABS(IFLBT),2)=JCVT(IABS(
      CALL IDENCO(JCVP,ICVP,IRETEN)				      CALL IDENCO(JCVP,ICVP,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('HAPAPA: IDENCO RET CODE = 1             	        CALL UTSTOP('HAPAPA: IDENCO RET CODE = 1             
      ENDIF							      ENDIF
      CALL IDENCO(JCVT,ICVT,IRETEN)				      CALL IDENCO(JCVT,ICVT,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('HAPAPA: IDENCO RET CODE = 1             	        CALL UTSTOP('HAPAPA: IDENCO RET CODE = 1             
      ENDIF							      ENDIF

      PROJ(5,1)=ICVP(1)						      PROJ(5,1)=ICVP(1)
      PROJ(6,1)=ICVP(2)						      PROJ(6,1)=ICVP(2)
      TARG(5,1)=ICVT(1)						      TARG(5,1)=ICVT(1)
      TARG(6,1)=ICVT(2)						      TARG(6,1)=ICVT(2)
      CALL UTKSIX(SIXP,KMAXPN)					      CALL UTKSIX(SIXP,KMAXPN)
      CALL UTKSIX(SIXT,KMAXTN)					      CALL UTKSIX(SIXT,KMAXTN)
      IF ( KMAXPN+1 .GT. NSIX ) THEN				      IF ( KMAXPN+1 .GT. NSIX ) THEN
        CALL UTSTOP('HAHABS: DIMENSION NSIX TOO SMALL        	        CALL UTSTOP('HAHABS: DIMENSION NSIX TOO SMALL        
      ENDIF							      ENDIF
      IF ( KMAXTN+1 .GT. NSIX ) THEN				      IF ( KMAXTN+1 .GT. NSIX ) THEN
        CALL UTSTOP('HAHABS: DIMENSION NSIX TOO SMALL        	        CALL UTSTOP('HAHABS: DIMENSION NSIX TOO SMALL        
      ENDIF							      ENDIF
      KMXP=KMAXPN+1						      KMXP=KMAXPN+1
      KMXT=KMAXTN+1						      KMXT=KMAXTN+1
      DO 5 N=1,NSI						      DO 5 N=1,NSI
        PROJ(N,2)=STRLP(N,1)					        PROJ(N,2)=STRLP(N,1)
        TARG(N,2)=STRLT(N,1)					        TARG(N,2)=STRLT(N,1)
        DO 6 J=1,KMXP						        DO 6 J=1,KMXP
          PROJ(N,2+J)=SIXP(N,J)					          PROJ(N,2+J)=SIXP(N,J)
 6      CONTINUE						 6      CONTINUE
        DO 7 J=1,KMXT						        DO 7 J=1,KMXT
          TARG(N,2+J)=SIXT(N,J)					          TARG(N,2+J)=SIXT(N,J)
 7      CONTINUE						 7      CONTINUE
        KPROJA(2,IPROJ)=KOL					        KPROJA(2,IPROJ)=KOL
        IF ( KMAXPN .GT. KMAXP ) THEN				        IF ( KMAXPN .GT. KMAXP ) THEN
          DO 2 K=KMAXP+1,KMAXPN					          DO 2 K=KMAXP+1,KMAXPN
            KPROJA(2+K,IPROJ)=KOL				            KPROJA(2+K,IPROJ)=KOL
 2        CONTINUE						 2        CONTINUE
        ENDIF							        ENDIF
        KTARGA(2,ITARG)=KOL					        KTARGA(2,ITARG)=KOL
        IF ( KMAXTN .GT. KMAXT ) THEN				        IF ( KMAXTN .GT. KMAXT ) THEN
          DO 3 K=KMAXT+1,KMAXTN					          DO 3 K=KMAXT+1,KMAXTN
            KTARGA(2+K,ITARG)=KOL				            KTARGA(2+K,ITARG)=KOL
 3        CONTINUE						 3        CONTINUE
        ENDIF							        ENDIF
 5    CONTINUE							 5    CONTINUE

      NSTSH=0							      NSTSH=0
      LEAD=0							      LEAD=0
      ISPLT=0							      ISPLT=0
11    CALL HASTPR(STRAP,ISPLT)					11    CALL HASTPR(STRAP,ISPLT)
      IF ( ISPLT .NE. 0 ) THEN					      IF ( ISPLT .NE. 0 ) THEN
        CALL UTSTOP('HAHABS: ISPLT /= 0                      	        CALL UTSTOP('HAHABS: ISPLT /= 0                      
      ENDIF							      ENDIF
      ISPLT=0							      ISPLT=0
12    CALL HASTPR(STRAT,ISPLT)					12    CALL HASTPR(STRAT,ISPLT)
      IF ( ISPLT .NE. 0 ) THEN					      IF ( ISPLT .NE. 0 ) THEN
        CALL UTSTOP('HAHABS: ISPLT /= 0                      	        CALL UTSTOP('HAHABS: ISPLT /= 0                      
      ENDIF							      ENDIF

      IF ( KMAXPN .GT. KMAXP ) THEN				      IF ( KMAXPN .GT. KMAXP ) THEN
        PROJ(3,1)=PROJ(3,1)+COORD(3,KOL)			        PROJ(3,1)=PROJ(3,1)+COORD(3,KOL)
        PROJ(4,1)=PROJ(4,1)+COORD(4,KOL)			        PROJ(4,1)=PROJ(4,1)+COORD(4,KOL)
      ENDIF							      ENDIF
      IF ( KMAXTN .GT. KMAXT ) THEN				      IF ( KMAXTN .GT. KMAXT ) THEN
        TARG(3,1)=TARG(3,1)+COORD(3,KOL)			        TARG(3,1)=TARG(3,1)+COORD(3,KOL)
        TARG(4,1)=TARG(4,1)+COORD(4,KOL)			        TARG(4,1)=TARG(4,1)+COORD(4,KOL)
      ENDIF							      ENDIF
      KMAXP=KMAXPN						      KMAXP=KMAXPN
      KMAXT=KMAXTN						      KMAXT=KMAXTN

9995  LEAD=1							9995  LEAD=1

C  WRITE LEADING STRING (PROJ)					C  WRITE LEADING STRING (PROJ)
C  ---------------------------					C  ---------------------------

      IF ( IAP .EQ. 1 ) THEN					      IF ( IAP .EQ. 1 ) THEN

        IF ( KMAXP .GT. 0 ) THEN				        IF ( KMAXP .GT. 0 ) THEN
          COOAV3=PROJ(3,1)/KMAXP				          COOAV3=PROJ(3,1)/KMAXP
          COOAV4=PROJ(4,1)/KMAXP				          COOAV4=PROJ(4,1)/KMAXP
        ELSE							        ELSE
          COOAV3=COORD(3,KOL)					          COOAV3=COORD(3,KOL)
          COOAV4=COORD(4,KOL)					          COOAV4=COORD(4,KOL)
        ENDIF							        ENDIF
        CALL UTKSTR(STRLP,KMAXOR)				        CALL UTKSTR(STRLP,KMAXOR)
        PZSTRL=0.						        PZSTRL=0.
        ESTRL=0.						        ESTRL=0.
        ISEA=1							        ISEA=1
        PSUM(1)=0.						        PSUM(1)=0.
        PSUM(2)=0.						        PSUM(2)=0.
        PSUM(3)=0.						        PSUM(3)=0.
        PSUM(4)=0.						        PSUM(4)=0.
        DO 22 K=1,KMAXOR					        DO 22 K=1,KMAXOR
          PSUM(1)=PSUM(1)+STRLP(1,K)				          PSUM(1)=PSUM(1)+STRLP(1,K)
          PSUM(2)=PSUM(2)+STRLP(2,K)				          PSUM(2)=PSUM(2)+STRLP(2,K)
          PSUM(3)=PSUM(3)+STRLP(3,K)				          PSUM(3)=PSUM(3)+STRLP(3,K)
          PSUM(4)=PSUM(4)+STRLP(4,K)				          PSUM(4)=PSUM(4)+STRLP(4,K)
          AMPR=0.						          AMPR=0.
C-C       IF ( K .EQ. 1 ) AMPR=.94				C-C       IF ( K .EQ. 1 ) AMPR=.94
          PZSTRL=PZSTRL+STRLP(3,K)				          PZSTRL=PZSTRL+STRLP(3,K)
          ESTRL=ESTRL+SQRT(STRLP(4,K)**2+AMPR**2)		          ESTRL=ESTRL+SQRT(STRLP(4,K)**2+AMPR**2)
          IF (K.GE.2.AND.STRLP(5,K).GT.0..AND.STRLP(6,K).GT.0	          IF (K.GE.2.AND.STRLP(5,K).GT.0..AND.STRLP(6,K).GT.0
22      CONTINUE						22      CONTINUE
        PSUM(5)=PSUM(4)**2-PSUM(3)**2-PSUM(2)**2-PSUM(1)**2	        PSUM(5)=PSUM(4)**2-PSUM(3)**2-PSUM(2)**2-PSUM(1)**2
        IF ( PSUM(5) .GT. 0. ) PSUM(5)=SQRT(PSUM(5))		        IF ( PSUM(5) .GT. 0. ) PSUM(5)=SQRT(PSUM(5))
        IF ( PZSTRL/PNLLX.GT.1.-0.850/ENGY**2.AND.ISKIP.NE.1 	        IF ( PZSTRL/PNLLX.GT.1.-0.850/ENGY**2.AND.ISKIP.NE.1 
        ISTRL=0							        ISTRL=0
        IF ( NSTSH .EQ. 0 .AND. ISEA .EQ. 1  .AND.		        IF ( NSTSH .EQ. 0 .AND. ISEA .EQ. 1  .AND.
     *                     PZSTRL/PNLLX .GT. 1.-10.000/ENGY**	     *                     PZSTRL/PNLLX .GT. 1.-10.000/ENGY**
        DO 23 K=1,KMAXOR					        DO 23 K=1,KMAXOR
          DO 23 I=1,NSI						          DO 23 I=1,NSI
            STR0(I,K)=STRLP(I,K)				            STR0(I,K)=STRLP(I,K)
23      CONTINUE						23      CONTINUE
        NSTR0=NSTR						        NSTR0=NSTR
17      NSTR=NSTR0						17      NSTR=NSTR0
        ISPLT=0							        ISPLT=0
15      CONTINUE						15      CONTINUE
        DO 24 K=1,KMAXOR					        DO 24 K=1,KMAXOR
          DO 24 I=1,NSI						          DO 24 I=1,NSI
            STRLP(I,K)=STR0(I,K)				            STRLP(I,K)=STR0(I,K)
24      CONTINUE						24      CONTINUE
13      CALL HASTPR(STRLP,ISPLT)				13      CALL HASTPR(STRLP,ISPLT)
        IF     ( ISPLT .EQ. -1 ) THEN				        IF     ( ISPLT .EQ. -1 ) THEN
          IF ( ISKIP .EQ. 1 ) GOTO 9996				          IF ( ISKIP .EQ. 1 ) GOTO 9996
          GOTO 9994						          GOTO 9994
        ELSEIF ( ISPLT .EQ. -3 ) THEN				        ELSEIF ( ISPLT .EQ. -3 ) THEN
          GOTO 15						          GOTO 15
        ELSEIF ( ISPLT .EQ. -4 ) THEN				        ELSEIF ( ISPLT .EQ. -4 ) THEN
          GOTO 1001						          GOTO 1001
        ELSEIF ( ISPLT .EQ. -5 ) THEN				        ELSEIF ( ISPLT .EQ. -5 ) THEN
          GOTO 17						          GOTO 17
        ELSEIF ( ISPLT .GT. 0 ) THEN				        ELSEIF ( ISPLT .GT. 0 ) THEN
          GOTO 13						          GOTO 13
        ENDIF							        ENDIF
        IF ( NSTR .GT. NSTR0+1 ) THEN				        IF ( NSTR .GT. NSTR0+1 ) THEN
          PSUMX(1)=0.						          PSUMX(1)=0.
          PSUMX(2)=0.						          PSUMX(2)=0.
          PSUMX(3)=0.						          PSUMX(3)=0.
          PSUMX(4)=0.						          PSUMX(4)=0.
          DO 25 J=NSTR0+1,NSTR					          DO 25 J=NSTR0+1,NSTR
            PSUMX(1)=PSUMX(1)+PSTR(1,J)				            PSUMX(1)=PSUMX(1)+PSTR(1,J)
            PSUMX(2)=PSUMX(2)+PSTR(2,J)				            PSUMX(2)=PSUMX(2)+PSTR(2,J)
            PSUMX(3)=PSUMX(3)+PSTR(3,J)				            PSUMX(3)=PSUMX(3)+PSTR(3,J)
            PSUMX(4)=PSUMX(4)+PSTR(4,J)				            PSUMX(4)=PSUMX(4)+PSTR(4,J)
25        CONTINUE						25        CONTINUE
          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(	          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(
          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))	          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))
C-C       WRITE(6,*)' '						C-C       WRITE(6,*)' '
C-C       DO 26 J=NSTR0+1,NSTR					C-C       DO 26 J=NSTR0+1,NSTR
C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)			C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)
C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,	C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,
C-C  *      ,IRLSTR(J)						C-C  *      ,IRLSTR(J)
C-C26     CONTINUE						C-C26     CONTINUE
C-C       WRITE(6,*)PSUM					C-C       WRITE(6,*)PSUM
C-C       WRITE(6,*)PSUMX					C-C       WRITE(6,*)PSUMX
          DO 27 J=NSTR0+1,NSTR					          DO 27 J=NSTR0+1,NSTR
            PSTR(1,J+NSTR-NSTR0)=PSTR(1,J)			            PSTR(1,J+NSTR-NSTR0)=PSTR(1,J)
            PSTR(2,J+NSTR-NSTR0)=PSTR(2,J)			            PSTR(2,J+NSTR-NSTR0)=PSTR(2,J)
            PSTR(3,J+NSTR-NSTR0)=PSTR(3,J)			            PSTR(3,J+NSTR-NSTR0)=PSTR(3,J)
            PSTR(4,J+NSTR-NSTR0)=PSTR(4,J)			            PSTR(4,J+NSTR-NSTR0)=PSTR(4,J)
27        CONTINUE						27        CONTINUE
          CALL HRESCL(NSTR0+1,NSTR,PSUM,IFAIL)			          CALL HRESCL(NSTR0+1,NSTR,PSUM,IFAIL)
          IF ( IFAIL .GT. 0 ) THEN				          IF ( IFAIL .GT. 0 ) THEN
C-C         WRITE(6,*)'RESCALE FAILED'				C-C         WRITE(6,*)'RESCALE FAILED'
            DO 28 J=NSTR0+1,NSTR				            DO 28 J=NSTR0+1,NSTR
              PSTR(1,J)=PSTR(1,J+NSTR-NSTR0)			              PSTR(1,J)=PSTR(1,J+NSTR-NSTR0)
              PSTR(2,J)=PSTR(2,J+NSTR-NSTR0)			              PSTR(2,J)=PSTR(2,J+NSTR-NSTR0)
              PSTR(3,J)=PSTR(3,J+NSTR-NSTR0)			              PSTR(3,J)=PSTR(3,J+NSTR-NSTR0)
              PSTR(4,J)=PSTR(4,J+NSTR-NSTR0)			              PSTR(4,J)=PSTR(4,J+NSTR-NSTR0)
28          CONTINUE						28          CONTINUE
          ENDIF							          ENDIF
          PSUMX(1)=0.						          PSUMX(1)=0.
          PSUMX(2)=0.						          PSUMX(2)=0.
          PSUMX(3)=0.						          PSUMX(3)=0.
          PSUMX(4)=0.						          PSUMX(4)=0.
          DO 29 J=NSTR0+1,NSTR					          DO 29 J=NSTR0+1,NSTR
            PSUMX(1)=PSUMX(1)+PSTR(1,J)				            PSUMX(1)=PSUMX(1)+PSTR(1,J)
            PSUMX(2)=PSUMX(2)+PSTR(2,J)				            PSUMX(2)=PSUMX(2)+PSTR(2,J)
            PSUMX(3)=PSUMX(3)+PSTR(3,J)				            PSUMX(3)=PSUMX(3)+PSTR(3,J)
            PSUMX(4)=PSUMX(4)+PSTR(4,J)				            PSUMX(4)=PSUMX(4)+PSTR(4,J)
29        CONTINUE						29        CONTINUE
          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(	          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(
          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))	          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))
C-C       DO 30 J=NSTR0+1,NSTR					C-C       DO 30 J=NSTR0+1,NSTR
C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)			C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)
C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,	C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,
C-C  *      ,IRLSTR(J)						C-C  *      ,IRLSTR(J)
C-C30     CONTINUE						C-C30     CONTINUE
C-C       WRITE(6,*)PSUM					C-C       WRITE(6,*)PSUM
C-C       WRITE(6,*)PSUMX					C-C       WRITE(6,*)PSUMX
109       FORMAT(' /CSTR/',I4,3X,4I5,2X,3(E10.3),I4)		109       FORMAT(' /CSTR/',I4,3X,4I5,2X,3(E10.3),I4)
        ENDIF							        ENDIF

      ENDIF							      ENDIF

C  WRITE LEADING STRING (TARG)					C  WRITE LEADING STRING (TARG)
C  ---------------------------					C  ---------------------------

      IF ( IAT .EQ. 1 ) THEN					      IF ( IAT .EQ. 1 ) THEN

        IF ( KMAXT .GT. 0 ) THEN				        IF ( KMAXT .GT. 0 ) THEN
          COOAV3=TARG(3,1)/KMAXT				          COOAV3=TARG(3,1)/KMAXT
          COOAV4=TARG(4,1)/KMAXT				          COOAV4=TARG(4,1)/KMAXT
        ELSE							        ELSE
          COOAV3=COORD(3,KOL)					          COOAV3=COORD(3,KOL)
          COOAV4=COORD(4,KOL)					          COOAV4=COORD(4,KOL)
        ENDIF							        ENDIF
        CALL UTKSTR(STRLT,KMAXOR)				        CALL UTKSTR(STRLT,KMAXOR)
        PZSTRL=0.						        PZSTRL=0.
        ESTRL=0.						        ESTRL=0.
        ISEA=1							        ISEA=1
        PSUM(1)=0.						        PSUM(1)=0.
        PSUM(2)=0.						        PSUM(2)=0.
        PSUM(3)=0.						        PSUM(3)=0.
        PSUM(4)=0.						        PSUM(4)=0.
        DO 33 K=1,KMAXOR					        DO 33 K=1,KMAXOR
          PSUM(1)=PSUM(1)+STRLT(1,K)				          PSUM(1)=PSUM(1)+STRLT(1,K)
          PSUM(2)=PSUM(2)+STRLT(2,K)				          PSUM(2)=PSUM(2)+STRLT(2,K)
          PSUM(3)=PSUM(3)+STRLT(3,K)				          PSUM(3)=PSUM(3)+STRLT(3,K)
          PSUM(4)=PSUM(4)+STRLT(4,K)				          PSUM(4)=PSUM(4)+STRLT(4,K)
          AMPR=0.						          AMPR=0.
C-C       IF ( K .EQ. 1 ) AMPR=.94				C-C       IF ( K .EQ. 1 ) AMPR=.94
          PZSTRL=PZSTRL+STRLT(3,K)				          PZSTRL=PZSTRL+STRLT(3,K)
          ESTRL=ESTRL+SQRT(STRLT(4,K)**2+AMPR**2)		          ESTRL=ESTRL+SQRT(STRLT(4,K)**2+AMPR**2)
          IF ( K.GE.2.AND.STRLT(5,K).GT.0..AND.STRLT(6,K).GT.	          IF ( K.GE.2.AND.STRLT(5,K).GT.0..AND.STRLT(6,K).GT.
33      CONTINUE						33      CONTINUE
        PSUM(5)=PSUM(4)**2-PSUM(3)**2-PSUM(2)**2-PSUM(1)**2	        PSUM(5)=PSUM(4)**2-PSUM(3)**2-PSUM(2)**2-PSUM(1)**2
        IF ( PSUM(5) .GT. 0. ) PSUM(5)=SQRT(PSUM(5))		        IF ( PSUM(5) .GT. 0. ) PSUM(5)=SQRT(PSUM(5))
        IF ( -PZSTRL/PNLLX.GT.1.-0.850/ENGY**2.AND.ISKIP.NE.1	        IF ( -PZSTRL/PNLLX.GT.1.-0.850/ENGY**2.AND.ISKIP.NE.1
        ISTRL=0							        ISTRL=0
        IF ( NSTSH .EQ. 0  .AND.  ISEA .EQ. 1 .AND.		        IF ( NSTSH .EQ. 0  .AND.  ISEA .EQ. 1 .AND.
     *                 -PZSTRL/PNLLX .GT. 1.-10.000/ENGY**2 )	     *                 -PZSTRL/PNLLX .GT. 1.-10.000/ENGY**2 )
        DO 34 K=1,KMAXOR					        DO 34 K=1,KMAXOR
          DO 34 I=1,NSI						          DO 34 I=1,NSI
            STR0(I,K)=STRLT(I,K)				            STR0(I,K)=STRLT(I,K)
34      CONTINUE						34      CONTINUE
        NSTR0=NSTR						        NSTR0=NSTR
18      NSTR=NSTR0						18      NSTR=NSTR0
        ISPLT=0							        ISPLT=0
16      CONTINUE						16      CONTINUE
        DO 35 K=1,KMAXOR					        DO 35 K=1,KMAXOR
          DO 35 I=1,NSI						          DO 35 I=1,NSI
            STRLT(I,K)=STR0(I,K)				            STRLT(I,K)=STR0(I,K)
35      CONTINUE						35      CONTINUE
14      CALL HASTPR(STRLT,ISPLT)				14      CALL HASTPR(STRLT,ISPLT)
        IF     ( ISPLT .EQ. -1 ) THEN				        IF     ( ISPLT .EQ. -1 ) THEN
           IF ( ISKIP .EQ. 1 ) GOTO 9996			           IF ( ISKIP .EQ. 1 ) GOTO 9996
           GOTO 9994						           GOTO 9994
        ELSEIF ( ISPLT .EQ. -3 ) THEN				        ELSEIF ( ISPLT .EQ. -3 ) THEN
          GOTO 16						          GOTO 16
        ELSEIF ( ISPLT .EQ. -4 ) THEN				        ELSEIF ( ISPLT .EQ. -4 ) THEN
          GOTO 1001						          GOTO 1001
        ELSEIF ( ISPLT .EQ. -5 ) THEN				        ELSEIF ( ISPLT .EQ. -5 ) THEN
          GOTO 18						          GOTO 18
        ELSEIF ( ISPLT .GT.  0 ) THEN				        ELSEIF ( ISPLT .GT.  0 ) THEN
          GOTO 14						          GOTO 14
        ENDIF							        ENDIF
        IF ( NSTR .GT. NSTR0+1 ) THEN				        IF ( NSTR .GT. NSTR0+1 ) THEN
          PSUMX(1)=0.						          PSUMX(1)=0.
          PSUMX(2)=0.						          PSUMX(2)=0.
          PSUMX(3)=0.						          PSUMX(3)=0.
          PSUMX(4)=0.						          PSUMX(4)=0.
          DO 36 J=NSTR0+1,NSTR					          DO 36 J=NSTR0+1,NSTR
            PSUMX(1)=PSUMX(1)+PSTR(1,J)				            PSUMX(1)=PSUMX(1)+PSTR(1,J)
            PSUMX(2)=PSUMX(2)+PSTR(2,J)				            PSUMX(2)=PSUMX(2)+PSTR(2,J)
            PSUMX(3)=PSUMX(3)+PSTR(3,J)				            PSUMX(3)=PSUMX(3)+PSTR(3,J)
            PSUMX(4)=PSUMX(4)+PSTR(4,J)				            PSUMX(4)=PSUMX(4)+PSTR(4,J)
36        CONTINUE						36        CONTINUE
          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(	          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(
          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))	          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))
C-C       WRITE(6,*)' '						C-C       WRITE(6,*)' '
C-C       DO 37 J=NSTR0+1,NSTR					C-C       DO 37 J=NSTR0+1,NSTR
C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)			C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)
C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,	C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,
C-C  *      ,IRLSTR(J)						C-C  *      ,IRLSTR(J)
C-C37     CONTINUE						C-C37     CONTINUE
C-C       WRITE(6,*)PSUM					C-C       WRITE(6,*)PSUM
C-C       WRITE(6,*)PSUMX					C-C       WRITE(6,*)PSUMX
          DO 38 J=NSTR0+1,NSTR					          DO 38 J=NSTR0+1,NSTR
            PSTR(1,J+NSTR-NSTR0)=PSTR(1,J)			            PSTR(1,J+NSTR-NSTR0)=PSTR(1,J)
            PSTR(2,J+NSTR-NSTR0)=PSTR(2,J)			            PSTR(2,J+NSTR-NSTR0)=PSTR(2,J)
            PSTR(3,J+NSTR-NSTR0)=PSTR(3,J)			            PSTR(3,J+NSTR-NSTR0)=PSTR(3,J)
            PSTR(4,J+NSTR-NSTR0)=PSTR(4,J)			            PSTR(4,J+NSTR-NSTR0)=PSTR(4,J)
38        CONTINUE						38        CONTINUE
          CALL HRESCL(NSTR0+1,NSTR,PSUM,IFAIL)			          CALL HRESCL(NSTR0+1,NSTR,PSUM,IFAIL)
          IF ( IFAIL .GT. 0 ) THEN				          IF ( IFAIL .GT. 0 ) THEN
C-C         WRITE(6,*)'RESCALE FAILED'				C-C         WRITE(6,*)'RESCALE FAILED'
            DO 39 J=NSTR0+1,NSTR				            DO 39 J=NSTR0+1,NSTR
              PSTR(1,J)=PSTR(1,J+NSTR-NSTR0)			              PSTR(1,J)=PSTR(1,J+NSTR-NSTR0)
              PSTR(2,J)=PSTR(2,J+NSTR-NSTR0)			              PSTR(2,J)=PSTR(2,J+NSTR-NSTR0)
              PSTR(3,J)=PSTR(3,J+NSTR-NSTR0)			              PSTR(3,J)=PSTR(3,J+NSTR-NSTR0)
              PSTR(4,J)=PSTR(4,J+NSTR-NSTR0)			              PSTR(4,J)=PSTR(4,J+NSTR-NSTR0)
39          CONTINUE						39          CONTINUE
          ENDIF							          ENDIF
          PSUMX(1)=0.						          PSUMX(1)=0.
          PSUMX(2)=0.						          PSUMX(2)=0.
          PSUMX(3)=0.						          PSUMX(3)=0.
          PSUMX(4)=0.						          PSUMX(4)=0.
          DO 40 J=NSTR0+1,NSTR					          DO 40 J=NSTR0+1,NSTR
            PSUMX(1)=PSUMX(1)+PSTR(1,J)				            PSUMX(1)=PSUMX(1)+PSTR(1,J)
            PSUMX(2)=PSUMX(2)+PSTR(2,J)				            PSUMX(2)=PSUMX(2)+PSTR(2,J)
            PSUMX(3)=PSUMX(3)+PSTR(3,J)				            PSUMX(3)=PSUMX(3)+PSTR(3,J)
            PSUMX(4)=PSUMX(4)+PSTR(4,J)				            PSUMX(4)=PSUMX(4)+PSTR(4,J)
40        CONTINUE						40        CONTINUE
          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(	          PSUMX(5)=PSUMX(4)**2-PSUMX(3)**2-PSUMX(2)**2-PSUMX(
          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))	          IF ( PSUMX(5) .GT. 0. ) PSUMX(5)=SQRT(PSUMX(5))
C-C       DO 41 J=NSTR0+1,NSTR					C-C       DO 41 J=NSTR0+1,NSTR
C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)			C-C       WRITE(6,109) J,(ICSTR(K,J)/100,K=1,4)
C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,	C-C  *      ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J)/PNLLX,
C-C  *      ,IRLSTR(J)						C-C  *      ,IRLSTR(J)
C-C41     CONTINUE						C-C41     CONTINUE
C-C       WRITE(6,*)PSUM					C-C       WRITE(6,*)PSUM
C-C       WRITE(6,*)PSUMX					C-C       WRITE(6,*)PSUMX
        ENDIF							        ENDIF

      ENDIF							      ENDIF

C  EXIT								C  EXIT
C  ----								C  ----

      IF ( ISH .LT. 91 ) RETURN					      IF ( ISH .LT. 91 ) RETURN

      WRITE(IFCH,100) ( (PROJ(I,J),I=1,NSI), J=2,KMAXP+2 )	      WRITE(IFCH,100) ( (PROJ(I,J),I=1,NSI), J=2,KMAXP+2 )
      WRITE(IFCH,102) ( (TARG(I,J),I=1,NSI), J=2,KMAXT+2 )	      WRITE(IFCH,102) ( (TARG(I,J),I=1,NSI), J=2,KMAXT+2 )
101   FORMAT ( '  ',I3,'. TRIAL')				101   FORMAT ( '  ',I3,'. TRIAL')
      RETURN							      RETURN

9996  CONTINUE							9996  CONTINUE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'SKIP IMPOSSIBLE, STRL CANT BE STORED'	        WRITE(IFCH,*)'SKIP IMPOSSIBLE, STRL CANT BE STORED'
      ENDIF							      ENDIF
      ISKIP=2							      ISKIP=2
      RETURN							      RETURN

1001  CONTINUE							1001  CONTINUE
        IF ( ISH .GE. 91 ) THEN					        IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)						        WRITE(IFCH,*)
     *      'SR HAHABS: NOT JUSTIFIED COMPLETE ABSORPTION -> 	     *      'SR HAHABS: NOT JUSTIFIED COMPLETE ABSORPTION -> 
      ENDIF							      ENDIF
      IRETHH=1							      IRETHH=1
      IF ( ISKIP .EQ. 1 ) GOTO 9996				      IF ( ISKIP .EQ. 1 ) GOTO 9996
      RETURN							      RETURN

1002  CONTINUE							1002  CONTINUE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'SR HAHABS: TOO FAST MULTI-STRING -> IRE	        WRITE(IFCH,*)'SR HAHABS: TOO FAST MULTI-STRING -> IRE
      ENDIF							      ENDIF
      IRETHH=1							      IRETHH=1
      IF ( ISKIP .EQ. 1 ) THEN					      IF ( ISKIP .EQ. 1 ) THEN
        CALL UTSTOP('HAHABS: ISKIP=1 SHOULD NOT HAPPEN       	        CALL UTSTOP('HAHABS: ISKIP=1 SHOULD NOT HAPPEN       
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HAPAPA(SIL,IFLA,XFLA,PTA,PTAH,IFLB,XFLB,PTB,	      SUBROUTINE HAPAPA(SIL,IFLA,XFLA,PTA,PTAH,IFLB,XFLB,PTB,
     *,ICV)							     *,ICV)

C------------------------------------------------------------	C------------------------------------------------------------
C  DETERMINES MOMENTA AND FLAVOR OF PARTICIPATING PARTONS IN 	C  DETERMINES MOMENTA AND FLAVOR OF PARTICIPATING PARTONS IN 
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NPTQ=129)					      PARAMETER (NPTQ=129)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSTRU=2049)					      PARAMETER (NSTRU=2049)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CNEW/    KOTRI,NEWCOL,NEWICO			      COMMON /CNEW/    KOTRI,NEWCOL,NEWICO
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTQ/    QPTH(NPTQ),QPTQ(NPTQ),XPTQ(NPTQ),QPTQM	      COMMON /CPTQ/    QPTH(NPTQ),QPTQ(NPTQ),XPTQ(NPTQ),QPTQM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      PROBAB(NFLAV),PROBSU(NFLAV+1),SIL(NSI)		      REAL      PROBAB(NFLAV),PROBSU(NFLAV+1),SIL(NSI)
      INTEGER   ICV(2),ID(2),JC(NFLAV,2),JCV(NFLAV,2)		      INTEGER   ICV(2),ID(2),JC(NFLAV,2),JCV(NFLAV,2)
      CHARACTER CHPT*1,XFLA*3,XFLB*3				      CHARACTER CHPT*1,XFLA*3,XFLB*3
C------------------------------------------------------------	C------------------------------------------------------------
      SGN=SIGN(1.,SIL(3))					      SGN=SIGN(1.,SIL(3))
      IF     ( SGN .GT. 0. ) THEN				      IF     ( SGN .GT. 0. ) THEN
        QVALC=QVAPC						        QVALC=QVAPC
        QSEAC=QSEPC						        QSEAC=QSEPC
        CHPT='P'						        CHPT='P'
        W=WPROJ							        W=WPROJ
      ELSE							      ELSE
        QVALC=QVATC						        QVALC=QVATC
        QSEAC=QSETC						        QSEAC=QSETC
        CHPT='T'						        CHPT='T'
        W=WTARG							        W=WTARG
      ENDIF							      ENDIF
      CALL IDDECO(ICV,JCV)					      CALL IDDECO(ICV,JCV)
      NVQ=0							      NVQ=0
      NVA=0							      NVA=0
      DO 12 I=1,NFLAV						      DO 12 I=1,NFLAV
        IF ( ISH.GE.0  .AND.  (JCV(I,1).LT.0.OR.JCV(I,2).LT.0	        IF ( ISH.GE.0  .AND.  (JCV(I,1).LT.0.OR.JCV(I,2).LT.0
          CALL UTMSG('HAHABS')					          CALL UTMSG('HAHABS')
          WRITE(IFCH,*)'*****  NEGATIVE JCV'			          WRITE(IFCH,*)'*****  NEGATIVE JCV'
          WRITE(IFCH,*)'JCV:'					          WRITE(IFCH,*)'JCV:'
          WRITE(IFCH,*)JCV					          WRITE(IFCH,*)JCV
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        NVQ=NVQ+JCV(I,1)					        NVQ=NVQ+JCV(I,1)
        NVA=NVA+JCV(I,2)					        NVA=NVA+JCV(I,2)
12    CONTINUE							12    CONTINUE
      ID(1)=NINT(SIL(4+1))					      ID(1)=NINT(SIL(4+1))
      ID(2)=NINT(SIL(4+2))					      ID(2)=NINT(SIL(4+2))
      CALL IDDECO(ID,JC)					      CALL IDDECO(ID,JC)
      NQU=0							      NQU=0
      NAQ=0							      NAQ=0
      DO 11 I=1,NFLAV						      DO 11 I=1,NFLAV
        NQU=NQU+JC(I,1)						        NQU=NQU+JC(I,1)
        NAQ=NAQ+JC(I,2)						        NAQ=NAQ+JC(I,2)
11    CONTINUE							11    CONTINUE
      NEQ=NQU-NAQ						      NEQ=NQU-NAQ

C  DETERMINE NQAQ,IVAL1,IVAL2					C  DETERMINE NQAQ,IVAL1,IVAL2
C  --------------------------					C  --------------------------
      NQAQ=0							      NQAQ=0
      IVAL=0							      IVAL=0
      IF ( RANGEN() .GT. W ) THEN				      IF ( RANGEN() .GT. W ) THEN
        IF ( NEQ .GT. NEQMN ) THEN				        IF ( NEQ .GT. NEQMN ) THEN
          PQ=1.							          PQ=1.
        ELSE							        ELSE
          PQ=0.							          PQ=0.
        ENDIF							        ENDIF
        IF ( NEQ .LT. NEQMX ) THEN				        IF ( NEQ .LT. NEQMX ) THEN
          PA=1.							          PA=1.
        ELSE							        ELSE
          PA=0.							          PA=0.
        ENDIF							        ENDIF
        SUM=(NVQ*PQ+NVA*PA*IAQU)*QVALC+QSEAC*.5*(PQ+PA*IAQU)	        SUM=(NVQ*PQ+NVA*PA*IAQU)*QVALC+QSEAC*.5*(PQ+PA*IAQU)
        IF ( SUM .EQ. 0. ) GOTO 14				        IF ( SUM .EQ. 0. ) GOTO 14
        SUMI = 1./SUM						        SUMI = 1./SUM
        PVQ=NVQ*PQ*QVALC*SUMI					        PVQ=NVQ*PQ*QVALC*SUMI
        PVA=NVA*PA*IAQU*QVALC*SUMI				        PVA=NVA*PA*IAQU*QVALC*SUMI
        PSQ=.5*PQ*QSEAC*SUMI					        PSQ=.5*PQ*QSEAC*SUMI
        PSA=.5*PA*IAQU*QSEAC*SUMI				        PSA=.5*PA*IAQU*QSEAC*SUMI
        R=RANGEN()						        R=RANGEN()
        IF ( R .LT. PVQ+PVA ) IVAL=1				        IF ( R .LT. PVQ+PVA ) IVAL=1
        NQAQ=-1							        NQAQ=-1
        IF ( IVAL .EQ. 1  .AND.  R .LT. PVQ ) NQAQ=1		        IF ( IVAL .EQ. 1  .AND.  R .LT. PVQ ) NQAQ=1
        IF ( IVAL .EQ. 0  .AND.  R .LT. PVQ+PVA+PSQ ) NQAQ=1	        IF ( IVAL .EQ. 0  .AND.  R .LT. PVQ+PVA+PSQ ) NQAQ=1
        IF ( NQU-NAQ-NQAQ .LT. NEQMN ) THEN			        IF ( NQU-NAQ-NQAQ .LT. NEQMN ) THEN
          IF ( ISH .GE. 90 ) THEN				          IF ( ISH .GE. 90 ) THEN
            CALL UTMSG('HAPAPA')				            CALL UTMSG('HAPAPA')
            WRITE(IFCH,*)'*****  NEQ < NEQMN'			            WRITE(IFCH,*)'*****  NEQ < NEQMN'
            WRITE(IFCH,*)'PVQ/A PSQ/A:',PVQ,PVA,PSQ,PSA		            WRITE(IFCH,*)'PVQ/A PSQ/A:',PVQ,PVA,PSQ,PSA
            WRITE(IFCH,*)'NQAQ:',NQAQ				            WRITE(IFCH,*)'NQAQ:',NQAQ
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          NQAQ=0						          NQAQ=0
        ENDIF							        ENDIF
        IF ( NQU-NAQ-NQAQ .GT. NEQMX ) THEN			        IF ( NQU-NAQ-NQAQ .GT. NEQMX ) THEN
          IF ( ISH .GE. 90 ) THEN				          IF ( ISH .GE. 90 ) THEN
            IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '			            IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '
            CALL UTMSG('HAPAPA')				            CALL UTMSG('HAPAPA')
            WRITE(IFCH,*)'*****  NEQ > NEQMX'			            WRITE(IFCH,*)'*****  NEQ > NEQMX'
            WRITE(IFCH,*)'PVQ/A PSQ/A:',PVQ,PVA,PSQ,PSA		            WRITE(IFCH,*)'PVQ/A PSQ/A:',PVQ,PVA,PSQ,PSA
            WRITE(IFCH,*)'NQAQ:',NQAQ				            WRITE(IFCH,*)'NQAQ:',NQAQ
            IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '			            IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '
          ENDIF							          ENDIF
          NQAQ=0						          NQAQ=0
        ENDIF							        ENDIF
        IF ( NQU-NAQ-NQAQ .LT. NEQMN ) THEN			        IF ( NQU-NAQ-NQAQ .LT. NEQMN ) THEN
          CALL UTSTOP('HAPAPA: NEQ.LT.NEQMN                  	          CALL UTSTOP('HAPAPA: NEQ.LT.NEQMN                  
        ENDIF							        ENDIF
        IF ( NQU-NAQ-NQAQ .GT. NEQMX ) THEN			        IF ( NQU-NAQ-NQAQ .GT. NEQMX ) THEN
          CALL UTSTOP('HAPAPA: NEQ.GT.NEQMX                  	          CALL UTSTOP('HAPAPA: NEQ.GT.NEQMX                  
        ENDIF							        ENDIF
      ENDIF							      ENDIF
14    CONTINUE							14    CONTINUE
      IVAL1=IVAL						      IVAL1=IVAL
      IVAL2=IVAL						      IVAL2=IVAL
      IF ( NQAQ .EQ. 0 ) THEN					      IF ( NQAQ .EQ. 0 ) THEN
        IVAL1=0							        IVAL1=0
        SUM=NVQ*QVALC+QSEAC*.5					        SUM=NVQ*QVALC+QSEAC*.5
        IF ( SUM .EQ. 0. ) GOTO 15				        IF ( SUM .EQ. 0. ) GOTO 15
        SUMI = 1./SUM						        SUMI = 1./SUM
        PVQ=NVQ*QVALC*SUMI					        PVQ=NVQ*QVALC*SUMI
        PSQ=.5*QSEAC*SUMI					        PSQ=.5*QSEAC*SUMI
        R=RANGEN()						        R=RANGEN()
        IF ( R .LT. PVQ ) IVAL1=1				        IF ( R .LT. PVQ ) IVAL1=1
15      CONTINUE						15      CONTINUE
C-C     IF ( NVQ.GT.0  .AND.  RANGEN().LT.PVALEN ) IVAL1=1	C-C     IF ( NVQ.GT.0  .AND.  RANGEN().LT.PVALEN ) IVAL1=1
        IVAL2=0							        IVAL2=0
        SUM=NVA*IAQU*QVALC+QSEAC*.5*IAQU			        SUM=NVA*IAQU*QVALC+QSEAC*.5*IAQU
        IF ( SUM .EQ. 0. ) GOTO 16				        IF ( SUM .EQ. 0. ) GOTO 16
        SUMI = 1./SUM						        SUMI = 1./SUM
        PVA=NVA*IAQU*QVALC*SUMI					        PVA=NVA*IAQU*QVALC*SUMI
        PSA=.5*IAQU*QSEAC*SUMI					        PSA=.5*IAQU*QSEAC*SUMI
        R=RANGEN()						        R=RANGEN()
        IF ( R .LT. PVA ) IVAL2=1				        IF ( R .LT. PVA ) IVAL2=1
16      CONTINUE						16      CONTINUE
C-C     IF ( NVA.GT.0 .AND. RANGEN().LT.PVALEN ) IVAL2=1	C-C     IF ( NVA.GT.0 .AND. RANGEN().LT.PVALEN ) IVAL2=1
        IF ( IVAL1 .EQ. 1  .AND. IVAL2 .EQ. 1 ) THEN		        IF ( IVAL1 .EQ. 1  .AND. IVAL2 .EQ. 1 ) THEN
          R=RANGEN()						          R=RANGEN()
          IF ( R .LT. 0.5 ) THEN				          IF ( R .LT. 0.5 ) THEN
            IVAL1=0						            IVAL1=0
          ELSE							          ELSE
            IVAL2=0						            IVAL2=0
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

C  QUARK							C  QUARK
C  -----							C  -----
      XFLA='---'						      XFLA='---'
      IF ( NQAQ .GE. 0 ) THEN					      IF ( NQAQ .GE. 0 ) THEN
        IF ( IVAL1 .EQ. 1 ) THEN				        IF ( IVAL1 .EQ. 1 ) THEN
          PROBAB(1)=JCV(1,1)					          PROBAB(1)=JCV(1,1)
          PROBAB(2)=JCV(2,1)					          PROBAB(2)=JCV(2,1)
          PROBAB(3)=JCV(3,1)					          PROBAB(3)=JCV(3,1)
          PROBAB(4)=JCV(4,1)					          PROBAB(4)=JCV(4,1)
          SU=PROBAB(1)+PROBAB(2)+PROBAB(3)+PROBAB(4)		          SU=PROBAB(1)+PROBAB(2)+PROBAB(3)+PROBAB(4)
          XFLA='VA'//CHPT					          XFLA='VA'//CHPT
        ELSE							        ELSE
          PROBAB(1)=1.						          PROBAB(1)=1.
          PROBAB(2)=1.						          PROBAB(2)=1.
          PROBAB(3)=RSTRAS					          PROBAB(3)=RSTRAS
          PROBAB(4)=0.						          PROBAB(4)=0.
          SU=2.+PROBAB(3)					          SU=2.+PROBAB(3)
          XFLA='SE'//CHPT					          XFLA='SE'//CHPT
        ENDIF							        ENDIF
        PROBSU(1)=0.						        PROBSU(1)=0.
        PROBSU(2)=1./SU*PROBAB(1)				        PROBSU(2)=1./SU*PROBAB(1)
        PROBSU(3)=1./SU*PROBAB(2)+PROBSU(2)			        PROBSU(3)=1./SU*PROBAB(2)+PROBSU(2)
        PROBSU(4)=1./SU*PROBAB(3)+PROBSU(3)			        PROBSU(4)=1./SU*PROBAB(3)+PROBSU(3)
        PROBSU(5)=1./SU*PROBAB(4)+PROBSU(4)			        PROBSU(5)=1./SU*PROBAB(4)+PROBSU(4)
        R=RANGEN()						        R=RANGEN()
        IF     ( R .LE. PROBSU(2) ) THEN			        IF     ( R .LE. PROBSU(2) ) THEN
          IFLA=1						          IFLA=1
        ELSEIF ( R .LE. PROBSU(3) ) THEN			        ELSEIF ( R .LE. PROBSU(3) ) THEN
          IFLA=2						          IFLA=2
        ELSEIF ( R .LE. PROBSU(4) ) THEN			        ELSEIF ( R .LE. PROBSU(4) ) THEN
          IFLA=3						          IFLA=3
        ELSE							        ELSE
          IFLA=4						          IFLA=4
        ENDIF							        ENDIF
        R=RANGEN()						        R=RANGEN()
        IF     ( IOPTQ .EQ. 2 ) THEN				        IF     ( IOPTQ .EQ. 2 ) THEN
          PTA = SQRT( -4.*PTQ**2/PI * LOG(1.-R*QPTQMX) )	          PTA = SQRT( -4.*PTQ**2/PI * LOG(1.-R*QPTQMX) )
        ELSEIF ( IOPTQ .EQ. 3 ) THEN				        ELSEIF ( IOPTQ .EQ. 3 ) THEN
          PTA = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )		          PTA = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )
        ELSE							        ELSE
          PTA=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))		          PTA=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))
        ENDIF							        ENDIF
        PTAH=PTH*SQRT( 1./SQRT(1.-2.*PTH**2*RANGEN()*QPTHMX) 	        PTAH=PTH*SQRT( 1./SQRT(1.-2.*PTH**2*RANGEN()*QPTHMX) 
      ENDIF							      ENDIF

C  ANTIQUARK							C  ANTIQUARK
C  ---------							C  ---------
      XFLB='---'						      XFLB='---'
      IF ( NQAQ .LE. 0 ) THEN					      IF ( NQAQ .LE. 0 ) THEN
        IF ( IVAL2 .EQ. 1 ) THEN				        IF ( IVAL2 .EQ. 1 ) THEN
          PROBAB(1)=JCV(1,2)					          PROBAB(1)=JCV(1,2)
          PROBAB(2)=JCV(2,2)					          PROBAB(2)=JCV(2,2)
          PROBAB(3)=JCV(3,2)					          PROBAB(3)=JCV(3,2)
          PROBAB(4)=JCV(4,2)					          PROBAB(4)=JCV(4,2)
          SU=PROBAB(1)+PROBAB(2)+PROBAB(3)+PROBAB(4)		          SU=PROBAB(1)+PROBAB(2)+PROBAB(3)+PROBAB(4)
          XFLB='VA'//CHPT					          XFLB='VA'//CHPT
        ELSE							        ELSE
          PROBAB(1)=1.						          PROBAB(1)=1.
          PROBAB(2)=1.						          PROBAB(2)=1.
          PROBAB(3)=RSTRAS					          PROBAB(3)=RSTRAS
          SU=2.+RSTRAS						          SU=2.+RSTRAS
          PROBAB(4)=0.						          PROBAB(4)=0.
          XFLB='SE'//CHPT					          XFLB='SE'//CHPT
        ENDIF							        ENDIF
        PROBSU(1)=0.						        PROBSU(1)=0.
        PROBSU(2)=1./SU*PROBAB(1)				        PROBSU(2)=1./SU*PROBAB(1)
        PROBSU(3)=1./SU*PROBAB(2)+PROBSU(2)			        PROBSU(3)=1./SU*PROBAB(2)+PROBSU(2)
        PROBSU(4)=1./SU*PROBAB(3)+PROBSU(3)			        PROBSU(4)=1./SU*PROBAB(3)+PROBSU(3)
        PROBSU(5)=1./SU*PROBAB(4)+PROBSU(4)			        PROBSU(5)=1./SU*PROBAB(4)+PROBSU(4)
        R=RANGEN()						        R=RANGEN()
        IF     ( R .LE. PROBSU(2) ) THEN			        IF     ( R .LE. PROBSU(2) ) THEN
          IFLB=1						          IFLB=1
        ELSEIF ( R .LE. PROBSU(3) ) THEN			        ELSEIF ( R .LE. PROBSU(3) ) THEN
          IFLB=2						          IFLB=2
        ELSEIF ( R .LE. PROBSU(4) ) THEN			        ELSEIF ( R .LE. PROBSU(4) ) THEN
          IFLB=3						          IFLB=3
        ELSE							        ELSE
          IFLB=4						          IFLB=4
        ENDIF							        ENDIF
        IF ( NQAQ.EQ.0 .AND. IVAL1.EQ.0 .AND. IVAL2.EQ.0 ) IF	        IF ( NQAQ.EQ.0 .AND. IVAL1.EQ.0 .AND. IVAL2.EQ.0 ) IF
C-C     IF ( NQAQ.EQ.0 .AND. IVAL2.EQ.0 ) IFLB=IFLA		C-C     IF ( NQAQ.EQ.0 .AND. IVAL2.EQ.0 ) IFLB=IFLA
C-C     IF ( NQAQ.EQ.0 .AND. IVAL1.EQ.0 ) IFLA=IFLB		C-C     IF ( NQAQ.EQ.0 .AND. IVAL1.EQ.0 ) IFLA=IFLB
        R=RANGEN()						        R=RANGEN()
        IF     ( IOPTQ .EQ. 2 ) THEN				        IF     ( IOPTQ .EQ. 2 ) THEN
          PTB = SQRT( -4.*PTQ**2/PI * LOG(1.-QPTQMX*R) )	          PTB = SQRT( -4.*PTQ**2/PI * LOG(1.-QPTQMX*R) )
        ELSEIF ( IOPTQ .EQ. 3 ) THEN				        ELSEIF ( IOPTQ .EQ. 3 ) THEN
          PTB = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )		          PTB = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )
        ELSE							        ELSE
          PTB=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))		          PTB=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))
        ENDIF							        ENDIF
        PTBH=PTH*SQRT( 1./SQRT(1.-2.*PTH**2*RANGEN()*QPTHMX) 	        PTBH=PTH*SQRT( 1./SQRT(1.-2.*PTH**2*RANGEN()*QPTHMX) 
      ENDIF							      ENDIF

      IF ( NQAQ.EQ.0 .AND. IVAL1.EQ.0 .AND. IVAL2.EQ.0 ) THEN	      IF ( NQAQ.EQ.0 .AND. IVAL1.EQ.0 .AND. IVAL2.EQ.0 ) THEN
        IFLA=-IFLA						        IFLA=-IFLA
        IFLB=-IFLB						        IFLB=-IFLB
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASI(QAQ,SIL,IFL,XFL,PT0,PT0H,SI,IRET,JORD,I	      SUBROUTINE HASI(QAQ,SIL,IFL,XFL,PT0,PT0H,SI,IRET,JORD,I
     *               ,PTDIFF)					     *               ,PTDIFF)

C------------------------------------------------------------	C------------------------------------------------------------
C  DETERMINES STRING INGREDIENTS (=JETS)			C  DETERMINES STRING INGREDIENTS (=JETS)
C  IRET=0: OK							C  IRET=0: OK
C  IRET=1: REMNANT CHANGES DIRECTION				C  IRET=1: REMNANT CHANGES DIRECTION
C  IRET=2: JC(,)=10						C  IRET=2: JC(,)=10
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      PTDIFF(2),SI(NSI),SIL(NSI)			      REAL      PTDIFF(2),SI(NSI),SIL(NSI)
      INTEGER   IC(2),ID(2),JC(NFLAV,2)				      INTEGER   IC(2),ID(2),JC(NFLAV,2)
      CHARACTER QAQ*5,XFL*3					      CHARACTER QAQ*5,XFL*3
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0
      IRETX=0							      IRETX=0
      NTRY=0							      NTRY=0
      PTDIFF(1)=0.						      PTDIFF(1)=0.
      PTDIFF(2)=0.						      PTDIFF(2)=0.
      IFLA=ABS(IFL)						      IFLA=ABS(IFL)
      IF ( XFL .EQ. '000' ) THEN				      IF ( XFL .EQ. '000' ) THEN
        DO 11 J=3,NSI						        DO 11 J=3,NSI
          SI(J)=0.						          SI(J)=0.
11      CONTINUE						11      CONTINUE
      ELSE							      ELSE
        DO 10 J=1,NSI						        DO 10 J=1,NSI
          SI(J)=0.						          SI(J)=0.
10      CONTINUE						10      CONTINUE
      ENDIF							      ENDIF
      IF ( XFL .EQ. '---' ) GOTO 1000				      IF ( XFL .EQ. '---' ) GOTO 1000
      IF      ( JORD .EQ. 1 ) THEN				      IF      ( JORD .EQ. 1 ) THEN
        IF     ( QAQ .EQ. 'QUARK' ) THEN			        IF     ( QAQ .EQ. 'QUARK' ) THEN
          AMS=AMPROJ						          AMS=AMPROJ
        ELSEIF ( QAQ .EQ. 'ANTIQ' ) THEN			        ELSEIF ( QAQ .EQ. 'ANTIQ' ) THEN
          AMS=AMTARG						          AMS=AMTARG
        ENDIF							        ENDIF
      ELSEIF ( JORD .EQ. 2 ) THEN				      ELSEIF ( JORD .EQ. 2 ) THEN
        IF     ( QAQ .EQ. 'ANTIQ' ) THEN			        IF     ( QAQ .EQ. 'ANTIQ' ) THEN
          AMS=AMPROJ						          AMS=AMPROJ
        ELSEIF ( QAQ .EQ. 'QUARK' ) THEN			        ELSEIF ( QAQ .EQ. 'QUARK' ) THEN
          AMS=AMTARG						          AMS=AMTARG
        ENDIF							        ENDIF
      ENDIF							      ENDIF
C-C   ENLL=SQRT(AMS**2+PNLLX**2)				C-C   ENLL=SQRT(AMS**2+PNLLX**2)
      ENLL=SIL(4)						      ENLL=SIL(4)
      SGN=SIGN(1.,SIL(3))					      SGN=SIGN(1.,SIL(3))
      IF ( RANGEN() .LE. PHARD ) THEN				      IF ( RANGEN() .LE. PHARD ) THEN
        IHARD=1							        IHARD=1
      ELSE							      ELSE
        IHARD=0							        IHARD=0
      ENDIF							      ENDIF
      ID(1)=NINT(SIL(4+1))					      ID(1)=NINT(SIL(4+1))
      ID(2)=NINT(SIL(4+2))					      ID(2)=NINT(SIL(4+2))
      CALL IDDECO(ID,JC)					      CALL IDDECO(ID,JC)
9999  NTRY=NTRY+1						9999  NTRY=NTRY+1
      IF ( NTRY .GT. 20 ) THEN					      IF ( NTRY .GT. 20 ) THEN
        IRET=1							        IRET=1
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF
      IF     ( IHARD .EQ. 0 ) THEN				      IF     ( IHARD .EQ. 0 ) THEN
        PT=PT0							        PT=PT0
        IF ( PT .GT. ENLL ) PT=RANGEN()*ENLL			        IF ( PT .GT. ENLL ) PT=RANGEN()*ENLL
        ENMIN=0.						        ENMIN=0.
      ELSE							      ELSE
        PT=PT0H							        PT=PT0H
        IF ( PT .GT. ENLL ) PT=RANGEN()*ENLL			        IF ( PT .GT. ENLL ) PT=RANGEN()*ENLL
        ENMIN=PT						        ENMIN=PT
      ENDIF							      ENDIF
      PTFULL=PT							      PTFULL=PT
      LO=0							      LO=0
51    LO=LO+1							51    LO=LO+1
      IF ( XFL .EQ. '000' ) THEN				      IF ( XFL .EQ. '000' ) THEN
        EN=0.							        EN=0.
        PT=0.							        PT=0.
      ELSE							      ELSE
        EN=RANSTC(XFL,ENMIN/ENLL)*ENLL				        EN=RANSTC(XFL,ENMIN/ENLL)*ENLL
      ENDIF							      ENDIF
      IF ( PT .GT. EN ) THEN					      IF ( PT .GT. EN ) THEN
        IF ( RANGEN() .LT. 0.5  .AND.  LO .LE. 10 ) GOTO 51	        IF ( RANGEN() .LT. 0.5  .AND.  LO .LE. 10 ) GOTO 51
        PT=RANGEN()*EN						        PT=RANGEN()*EN
      ENDIF							      ENDIF
      PHI=2.*PI*RANGEN()					      PHI=2.*PI*RANGEN()
      IF ( XFL .NE. '000' ) THEN				      IF ( XFL .NE. '000' ) THEN
        SI(1)=PT*COS(PHI)					        SI(1)=PT*COS(PHI)
        SI(2)=PT*SIN(PHI)					        SI(2)=PT*SIN(PHI)
        SI(3)=SGN*SQRT(EN**2-PT**2)				        SI(3)=SGN*SQRT(EN**2-PT**2)
        IF ( SI(1).EQ.0.  .AND.  SI(2).EQ.0.  .AND.  SI(3).EQ	        IF ( SI(1).EQ.0.  .AND.  SI(2).EQ.0.  .AND.  SI(3).EQ
          IRETX=1						          IRETX=1
          IRET=1						          IRET=1
          GOTO 1000						          GOTO 1000
        ENDIF							        ENDIF
C-C     PTDIFF(1)=(PTFULL-PT)*COS(PHI)				C-C     PTDIFF(1)=(PTFULL-PT)*COS(PHI)
C-C     PTDIFF(2)=(PTFULL-PT)*SIN(PHI)				C-C     PTDIFF(2)=(PTFULL-PT)*SIN(PHI)
      ENDIF							      ENDIF
      IF ( (SIL(3)-SI(3))*SIL(3) .LT. 0. ) THEN			      IF ( (SIL(3)-SI(3))*SIL(3) .LT. 0. ) THEN
        IF ( ISH .GE. 94 ) WRITE(IFCH,*)'SIL,SI,ENLL,EN',SIL,	        IF ( ISH .GE. 94 ) WRITE(IFCH,*)'SIL,SI,ENLL,EN',SIL,
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF
      SI(4)=SQRT(SI(1)**2+SI(2)**2+SI(3)**2)			      SI(4)=SQRT(SI(1)**2+SI(2)**2+SI(3)**2)
      IF     ( QAQ .EQ. 'QUARK' ) THEN				      IF     ( QAQ .EQ. 'QUARK' ) THEN
        SI(5)=10**(NFLAV-IFLA)					        SI(5)=10**(NFLAV-IFLA)
      ELSEIF ( QAQ .EQ. 'ANTIQ' ) THEN				      ELSEIF ( QAQ .EQ. 'ANTIQ' ) THEN
        SI(6)=10**(NFLAV-IFLA)					        SI(6)=10**(NFLAV-IFLA)
      ENDIF							      ENDIF

      IF ( IXFLAB .EQ. 0 ) THEN					      IF ( IXFLAB .EQ. 0 ) THEN
        SIL(1)=SIL(1)-SI(1)					        SIL(1)=SIL(1)-SI(1)
        SIL(2)=SIL(2)-SI(2)					        SIL(2)=SIL(2)-SI(2)
        SIL(3)=SIL(3)-SI(3)					        SIL(3)=SIL(3)-SI(3)
        SIL(4)=SQRT(SIL(1)**2+SIL(2)**2+SIL(3)**2)		        SIL(4)=SQRT(SIL(1)**2+SIL(2)**2+SIL(3)**2)
      ENDIF							      ENDIF

      IF ( JC(IFLA,1) .GT. 0 ) THEN				      IF ( JC(IFLA,1) .GT. 0 ) THEN
        L1=1							        L1=1
      ELSE							      ELSE
        L1=0							        L1=0
      ENDIF							      ENDIF
      IF ( JC(IFLA,2) .GT. 0 ) THEN				      IF ( JC(IFLA,2) .GT. 0 ) THEN
        L2=1							        L2=1
      ELSE							      ELSE
        L2=0							        L2=0
      ENDIF							      ENDIF
      IF     ( QAQ .EQ. 'QUARK' ) THEN				      IF     ( QAQ .EQ. 'QUARK' ) THEN
        IF     ( L1 .EQ. 0 ) THEN				        IF     ( L1 .EQ. 0 ) THEN
          JC(IFLA,2)=JC(IFLA,2)+1				          JC(IFLA,2)=JC(IFLA,2)+1
        ELSE							        ELSE
          JC(IFLA,1)=JC(IFLA,1)-1				          JC(IFLA,1)=JC(IFLA,1)-1
        ENDIF							        ENDIF
      ELSEIF ( QAQ .EQ. 'ANTIQ' ) THEN				      ELSEIF ( QAQ .EQ. 'ANTIQ' ) THEN
        IF     ( L2 .EQ. 0 ) THEN				        IF     ( L2 .EQ. 0 ) THEN
          JC(IFLA,1)=JC(IFLA,1)+1				          JC(IFLA,1)=JC(IFLA,1)+1
        ELSE							        ELSE
          JC(IFLA,2)=JC(IFLA,2)-1				          JC(IFLA,2)=JC(IFLA,2)-1
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( JC(IFLA,1) .EQ. 10  .OR.  JC(IFLA,2) .EQ. 10 ) GOT	      IF ( JC(IFLA,1) .EQ. 10  .OR.  JC(IFLA,2) .EQ. 10 ) GOT
      CALL IDENCO(JC,IC,IRETEN)					      CALL IDENCO(JC,IC,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('HASI  : IDENCO RET CODE = 1             	        CALL UTSTOP('HASI  : IDENCO RET CODE = 1             
      ENDIF							      ENDIF
      SIL(5)=IC(1)						      SIL(5)=IC(1)
      SIL(6)=IC(2)						      SIL(6)=IC(2)
      GOTO 1000							      GOTO 1000

9998  IRET=2							9998  IRET=2
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('HASI  ')					        CALL UTMSG('HASI  ')
        WRITE(IFCH,*)'*****  JC(,)=10'				        WRITE(IFCH,*)'*****  JC(,)=10'
        WRITE(IFCH,*)JC						        WRITE(IFCH,*)JC
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF

1000  CONTINUE							1000  CONTINUE
      IF ( ISH .GE. 90  .AND. IRETX .EQ. 1 ) THEN		      IF ( ISH .GE. 90  .AND. IRETX .EQ. 1 ) THEN
        CALL UTMSG('HASI  ')					        CALL UTMSG('HASI  ')
        WRITE(IFCH,*)'*****  SI(1/2/3)=0'			        WRITE(IFCH,*)'*****  SI(1/2/3)=0'
        WRITE(IFCH,*)SI						        WRITE(IFCH,*)SI
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        IF ( IRET .NE. 0  .OR.  NTRY .GT. 1 )			        IF ( IRET .NE. 0  .OR.  NTRY .GT. 1 )
     *           WRITE(IFCH,*)'IRET=',IRET,'  NTRY=',NTRY	     *           WRITE(IFCH,*)'IRET=',IRET,'  NTRY=',NTRY
        IF     ( NTRY .GT. 0 ) THEN				        IF     ( NTRY .GT. 0 ) THEN
          WRITE(IFCH,100)XFL,PT0,PT,EN,EN/ENLL			          WRITE(IFCH,100)XFL,PT0,PT,EN,EN/ENLL
100       FORMAT(' HASI: XFL=',A3				100       FORMAT(' HASI: XFL=',A3
     *          ,' PT0=',E10.3,' PT=',E10.3,' EN=',E10.3,' X=	     *          ,' PT0=',E10.3,' PT=',E10.3,' EN=',E10.3,' X=
        ELSEIF ( NTRY .EQ. 0 ) THEN				        ELSEIF ( NTRY .EQ. 0 ) THEN
          WRITE(IFCH,101)XFL					          WRITE(IFCH,101)XFL
101       FORMAT(1X,'HASI: XFL=',A3)				101       FORMAT(1X,'HASI: XFL=',A3)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASTFC(SIL,SIX,IRET)				      SUBROUTINE HASTFC(SIL,SIX,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  CHECKS LONG STRINGS						C  CHECKS LONG STRINGS
C  IRET=0: OK							C  IRET=0: OK
C  IRET=1: MASS .LT. MINIMAL MASS				C  IRET=1: MASS .LT. MINIMAL MASS
C  IRET=2: JC(,) .GT. 9						C  IRET=2: JC(,) .GT. 9
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL    SI(NSI),SIL(NSI),SIX(NSI,NSIX)			      REAL    SI(NSI),SIL(NSI),SIX(NSI,NSIX)
      INTEGER IC(2),JC(NFLAV,2),JCP(NFLAV,2)			      INTEGER IC(2),JC(NFLAV,2),JCP(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0

      CALL UTKSIX(SIX,KMAX)					      CALL UTKSIX(SIX,KMAX)
      IF ( KMAX .LT. 1 ) GOTO 9000				      IF ( KMAX .LT. 1 ) GOTO 9000

      SI(1)=SIL(1)						      SI(1)=SIL(1)
      SI(2)=SIL(2)						      SI(2)=SIL(2)
      SI(3)=SIL(3)						      SI(3)=SIL(3)
      SI(4)=SIL(4)						      SI(4)=SIL(4)
      DO 110 K=1,KMAX						      DO 110 K=1,KMAX
        SI(1)=SI(1)+SIX(1,K)					        SI(1)=SI(1)+SIX(1,K)
        SI(2)=SI(2)+SIX(2,K)					        SI(2)=SI(2)+SIX(2,K)
        SI(3)=SI(3)+SIX(3,K)					        SI(3)=SI(3)+SIX(3,K)
        SI(4)=SI(4)+SIX(4,K)					        SI(4)=SI(4)+SIX(4,K)
110   CONTINUE							110   CONTINUE
      S=SI(4)**2-SI(1)**2-SI(2)**2-SI(3)**2			      S=SI(4)**2-SI(1)**2-SI(2)**2-SI(3)**2

      IC(1)=NINT(SIL(5))					      IC(1)=NINT(SIL(5))
      IC(2)=NINT(SIL(6))					      IC(2)=NINT(SIL(6))
      CALL IDDECO(IC,JC)					      CALL IDDECO(IC,JC)
      DO 130 K=1,KMAX						      DO 130 K=1,KMAX
        IC(1)=NINT(ABS(SIX(5,K)))				        IC(1)=NINT(ABS(SIX(5,K)))
        IC(2)=NINT(ABS(SIX(6,K)))				        IC(2)=NINT(ABS(SIX(6,K)))
        CALL IDDECO(IC,JCP)					        CALL IDDECO(IC,JCP)
        DO 120 I=1,NFLAV					        DO 120 I=1,NFLAV
          JC(I,1)=JC(I,1)+JCP(I,1)				          JC(I,1)=JC(I,1)+JCP(I,1)
          JC(I,2)=JC(I,2)+JCP(I,2)				          JC(I,2)=JC(I,2)+JCP(I,2)
120     CONTINUE						120     CONTINUE
130   CONTINUE							130   CONTINUE

      DO 125 I=1,NFLAV						      DO 125 I=1,NFLAV
        IF ( JC(I,1)-JC(I,2) .GE.  10 ) IRET=2			        IF ( JC(I,1)-JC(I,2) .GE.  10 ) IRET=2
        IF ( JC(I,1)-JC(I,2) .LE. -10 ) IRET=2			        IF ( JC(I,1)-JC(I,2) .LE. -10 ) IRET=2
125   CONTINUE							125   CONTINUE

      IF ( IRET .EQ. 2 ) GOTO 9000				      IF ( IRET .EQ. 2 ) GOTO 9000

      KEU=JC(1,1)-JC(1,2)					      KEU=JC(1,1)-JC(1,2)
      KED=JC(2,1)-JC(2,2)					      KED=JC(2,1)-JC(2,2)
      KES=JC(3,1)-JC(3,2)					      KES=JC(3,1)-JC(3,2)
      KEC=JC(4,1)-JC(4,2)					      KEC=JC(4,1)-JC(4,2)
      AMIN=UTAMNU(KEU,KED,KES,KEC,4)*0.5			      AMIN=UTAMNU(KEU,KED,KES,KEC,4)*0.5

C-C   IF ( S .LT. AMIN**2 ) IRET=1				C-C   IF ( S .LT. AMIN**2 ) IRET=1

9000  CONTINUE							9000  CONTINUE

      IF ( ISH .GE. 94 ) THEN					      IF ( ISH .GE. 94 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        IF ( IRET .EQ. 0 ) THEN					        IF ( IRET .EQ. 0 ) THEN
          WRITE(IFCH,*)('-',L=1,79)				          WRITE(IFCH,*)('-',L=1,79)
        ELSE							        ELSE
          WRITE(IFCH,*)('#',L=1,79)				          WRITE(IFCH,*)('#',L=1,79)
        ENDIF							        ENDIF
        WRITE(IFCH,*)'IRET= ',IRET ,'  KMAX= ',KMAX,'  NREVT=	        WRITE(IFCH,*)'IRET= ',IRET ,'  KMAX= ',KMAX,'  NREVT=
     *        ,'  NCES= ',NCES					     *        ,'  NCES= ',NCES
        WRITE(IFCH,8004)SIL					        WRITE(IFCH,8004)SIL
8004    FORMAT(' SIL: ',4F13.5,2F8.0)				8004    FORMAT(' SIL: ',4F13.5,2F8.0)
        IF ( KMAX .GT. 0 ) THEN					        IF ( KMAX .GT. 0 ) THEN
          WRITE(IFCH,8007)(SIX(I,1),I=1,NSI)			          WRITE(IFCH,8007)(SIX(I,1),I=1,NSI)
8007      FORMAT(' SIX: ',4F13.5,2F8.0)				8007      FORMAT(' SIX: ',4F13.5,2F8.0)
          IF ( KMAX .GT. 1 ) THEN				          IF ( KMAX .GT. 1 ) THEN
            DO 1 J=2,KMAX					            DO 1 J=2,KMAX
              WRITE(IFCH,8008)(SIX(I,J),I=1,NSI)		              WRITE(IFCH,8008)(SIX(I,J),I=1,NSI)
 1          CONTINUE						 1          CONTINUE
8008        FORMAT('      ',4F13.5,2F8.0)			8008        FORMAT('      ',4F13.5,2F8.0)
          ENDIF							          ENDIF
          WRITE(IFCH,8005)(SI(I),I=1,4)				          WRITE(IFCH,8005)(SI(I),I=1,4)
8005      FORMAT('  SI: ',4F13.5)				8005      FORMAT('  SI: ',4F13.5)
          WRITE(IFCH,8006)(SI(I)**2,I=1,4)			          WRITE(IFCH,8006)(SI(I)**2,I=1,4)
8006      FORMAT(' SI>2:',4F13.5)				8006      FORMAT(' SI>2:',4F13.5)
          WRITE(IFCH,*)'JC:'					          WRITE(IFCH,*)'JC:'
          WRITE(IFCH,*)JC					          WRITE(IFCH,*)JC
          WRITE(IFCH,*)'KEU,KED,KES,KEC: ',KEU,KED,KES,KEC	          WRITE(IFCH,*)'KEU,KED,KES,KEC: ',KEU,KED,KES,KEC
          WRITE(IFCH,*)'S= ',S,'    AMIN**2= ',AMIN**2,'   AM	          WRITE(IFCH,*)'S= ',S,'    AMIN**2= ',AMIN**2,'   AM
        ENDIF							        ENDIF
        IF ( IRET .NE. 0 ) THEN					        IF ( IRET .NE. 0 ) THEN
          WRITE(IFCH,*)('#',L=1,79)				          WRITE(IFCH,*)('#',L=1,79)
        ELSE							        ELSE
          WRITE(IFCH,*)('-',L=1,79)				          WRITE(IFCH,*)('-',L=1,79)
        ENDIF							        ENDIF
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF

      IF ( IRET .NE. 0 ) RETURN					      IF ( IRET .NE. 0 ) RETURN
      IF ( ISH .GE. 91 ) CALL HASTFW (SIL,SIX)			      IF ( ISH .GE. 91 ) CALL HASTFW (SIL,SIX)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASTFL(SIL,SIX,STRL)				      SUBROUTINE HASTFL(SIL,SIX,STRL)

C------------------------------------------------------------	C------------------------------------------------------------
C  FORMS A LEADING STRING					C  FORMS A LEADING STRING
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)

      REAL SIL(NSI),SIX(NSI,NSIX),STRL(NSI,NSIX+1)		      REAL SIL(NSI),SIX(NSI,NSIX),STRL(NSI,NSIX+1)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 100 N=1,NSI						      DO 100 N=1,NSI
        STRL(N,1)=SIL(N)					        STRL(N,1)=SIL(N)
        STRL(N,2)=0.						        STRL(N,2)=0.
100   CONTINUE							100   CONTINUE
      CALL UTKSIX(SIX,KMAX)					      CALL UTKSIX(SIX,KMAX)
      IF ( KMAX .EQ. 0 ) RETURN					      IF ( KMAX .EQ. 0 ) RETURN
      DO 111 K=1,KMAX						      DO 111 K=1,KMAX
        DO 110 N=1,NSI						        DO 110 N=1,NSI
          STRL(N,K+1)=SIX(N,K)					          STRL(N,K+1)=SIX(N,K)
110     CONTINUE						110     CONTINUE
111   CONTINUE							111   CONTINUE
      DO 120 N=1,NSI						      DO 120 N=1,NSI
        STRL(N,KMAX+2)=0.					        STRL(N,KMAX+2)=0.
120   CONTINUE							120   CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASTFR(SILA,SILB,SIA,SIB,IRET)			      SUBROUTINE HASTFR(SILA,SILB,SIA,SIB,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  SUBTRACTS SIA-SIB FROM SILA-SILB (ONLY MOMENTUM COMPONENTS	C  SUBTRACTS SIA-SIB FROM SILA-SILB (ONLY MOMENTUM COMPONENTS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION A,B,D,DAUXIL,PAB(4),PAM,PAP,PA3,PA4	      DOUBLE PRECISION A,B,D,DAUXIL,PAB(4),PAM,PAP,PA3,PA4
     *                ,PEM,PEP,PIM,PIP,PI3,PI4,PLAB(4)		     *                ,PEM,PEP,PIM,PIP,PI3,PI4,PLAB(4)
     *                ,POT,POX,POY,PUT,PUX,PUY,PYM,PYP,SLA	     *                ,POT,POX,POY,PUT,PUX,PUY,PYM,PYP,SLA
     *                ,SSIA(NSI),SSIB(NSI),SSILA(NSI),SSILB(N	     *                ,SSIA(NSI),SSIB(NSI),SSILA(NSI),SSILB(N
      REAL             SIA(NSI),SIB(NSI),SILA(NSI),SILB(NSI)	      REAL             SIA(NSI),SIB(NSI),SILA(NSI),SILB(NSI)
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0
      DO 12 I=1,4						      DO 12 I=1,4
        SSILB(I)=SILB(I)					        SSILB(I)=SILB(I)
        SSILA(I)=SILA(I)					        SSILA(I)=SILA(I)
        PLAB(I)=SSILA(I)+SSILB(I)				        PLAB(I)=SSILA(I)+SSILB(I)
        SSIB(I)=SIB(I)						        SSIB(I)=SIB(I)
        SSIA(I)=SIA(I)						        SSIA(I)=SIA(I)
        PAB(I)=SSIA(I)+SSIB(I)					        PAB(I)=SSIA(I)+SSIB(I)
12    CONTINUE							12    CONTINUE
      SLA=SIGN(1.D0, SSILA(3))					      SLA=SIGN(1.D0, SSILA(3))

      IF ( ISH.GE.0 .AND. SSIA(3)*SSILA(3) .LT. 0.D0 ) THEN	      IF ( ISH.GE.0 .AND. SSIA(3)*SSILA(3) .LT. 0.D0 ) THEN
        CALL UTMSG('HASTFR')					        CALL UTMSG('HASTFR')
        WRITE(IFCH,*)'*****  SSIA(3)*SSILA(3)<0'		        WRITE(IFCH,*)'*****  SSIA(3)*SSILA(3)<0'
        WRITE(IFCH,*)SSIA(3),SSILA(3)				        WRITE(IFCH,*)SSIA(3),SSILA(3)
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF

      A=0.D0							      A=0.D0
      D=0.D0							      D=0.D0
      PYP=0.D0							      PYP=0.D0
      PYM=0.D0							      PYM=0.D0
      PIP=0.D0							      PIP=0.D0
      PAM=0.D0							      PAM=0.D0

      POX=SSILA(1)-SSIA(1)					      POX=SSILA(1)-SSIA(1)
      POY=SSILA(2)-SSIA(2)					      POY=SSILA(2)-SSIA(2)
      POT=SQRT(POX**2+POY**2)					      POT=SQRT(POX**2+POY**2)
      PUX=SSILB(1)-SSIB(1)					      PUX=SSILB(1)-SSIB(1)
      PUY=SSILB(2)-SSIB(2)					      PUY=SSILB(2)-SSIB(2)
      PUT=SQRT(PUX**2+PUY**2)					      PUT=SQRT(PUX**2+PUY**2)
      DAUXIL = SLA*(PLAB(3)-PAB(3))				      DAUXIL = SLA*(PLAB(3)-PAB(3))
      PEP= PLAB(4)-PAB(4) + DAUXIL				      PEP= PLAB(4)-PAB(4) + DAUXIL
      PEM= PLAB(4)-PAB(4) - DAUXIL				      PEM= PLAB(4)-PAB(4) - DAUXIL
      IF ( PEP .LT. 0.D0 ) GOTO 9001				      IF ( PEP .LT. 0.D0 ) GOTO 9001
      IF ( PEM .LT. 0.D0 ) GOTO 9001				      IF ( PEM .LT. 0.D0 ) GOTO 9001
      A=(PEM*PEP-PUT**2-POT**2)*0.5D0				      A=(PEM*PEP-PUT**2-POT**2)*0.5D0
      D=PUT*POT							      D=PUT*POT
      DAUXIL = A**2 - D**2					      DAUXIL = A**2 - D**2
      IF ( DAUXIL .LT. 0.D0 ) GOTO 9001				      IF ( DAUXIL .LT. 0.D0 ) GOTO 9001
      B=SQRT(DAUXIL)						      B=SQRT(DAUXIL)
      PYP=(A+PUT**2-B)/PEM					      PYP=(A+PUT**2-B)/PEM
      PYM=(A+POT**2-B)/PEP					      PYM=(A+POT**2-B)/PEP
      IF ( PYP .LT. 0.D0 ) GOTO 9001				      IF ( PYP .LT. 0.D0 ) GOTO 9001
      IF ( PYM .LT. 0.D0 ) GOTO 9001				      IF ( PYM .LT. 0.D0 ) GOTO 9001
      PIP=PEP-PYP						      PIP=PEP-PYP
      IF ( PIP .LT. 0.D0 ) GOTO 9001				      IF ( PIP .LT. 0.D0 ) GOTO 9001
      PIM=PYM							      PIM=PYM
      PAP=PYP							      PAP=PYP
      PAM=PEM-PYM						      PAM=PEM-PYM
      IF ( PAM .LT. 0.D0 ) GOTO 9001				      IF ( PAM .LT. 0.D0 ) GOTO 9001
      PI3=(PIP-PIM)*0.5D0*SLA					      PI3=(PIP-PIM)*0.5D0*SLA
      PI4=(PIP+PIM)*0.5D0					      PI4=(PIP+PIM)*0.5D0
      PA3=(PAP-PAM)*0.5D0*SLA					      PA3=(PAP-PAM)*0.5D0*SLA
      PA4=(PAP+PAM)*0.5D0					      PA4=(PAP+PAM)*0.5D0
      IF ( PI3*SSILA(3) .LT. 0.D0 ) GOTO 9001			      IF ( PI3*SSILA(3) .LT. 0.D0 ) GOTO 9001
      IF ( PA3*SSILB(3) .LT. 0.D0 ) GOTO 9001			      IF ( PA3*SSILB(3) .LT. 0.D0 ) GOTO 9001
      SSILA(1)=POX						      SSILA(1)=POX
      SSILA(2)=POY						      SSILA(2)=POY
      SSILA(3)=PI3						      SSILA(3)=PI3
      SSILA(4)=PI4						      SSILA(4)=PI4
      SSILB(1)=PUX						      SSILB(1)=PUX
      SSILB(2)=PUY						      SSILB(2)=PUY
      SSILB(3)=PA3						      SSILB(3)=PA3
      SSILB(4)=PA4						      SSILB(4)=PA4

      DO 13 I=1,4						      DO 13 I=1,4
        SILA(I)=SSILA(I)					        SILA(I)=SSILA(I)
        SILB(I)=SSILB(I)					        SILB(I)=SSILB(I)
        SIA(I)=SSIA(I)						        SIA(I)=SSIA(I)
        SIB(I)=SSIB(I)						        SIB(I)=SSIB(I)
13    CONTINUE							13    CONTINUE

      IF ( ISH .LT. 90 ) GOTO 9000				      IF ( ISH .LT. 90 ) GOTO 9000

      IF ( ABS(PIP*PIM-POT**2) .GT. 1.D-4 ) THEN		      IF ( ABS(PIP*PIM-POT**2) .GT. 1.D-4 ) THEN
        CALL UTMSG('HASTFR')					        CALL UTMSG('HASTFR')
        WRITE(IFCH,*)'*****  PIP*PIM /= POT**2'			        WRITE(IFCH,*)'*****  PIP*PIM /= POT**2'
        WRITE(IFCH,*)'PIP*PIM=',PIP*PIM				        WRITE(IFCH,*)'PIP*PIM=',PIP*PIM
        WRITE(IFCH,*)'POT**2=',POT**2				        WRITE(IFCH,*)'POT**2=',POT**2
        WRITE(IFCH,*)'PIP=',PIP					        WRITE(IFCH,*)'PIP=',PIP
        WRITE(IFCH,*)'PIM=',PIM					        WRITE(IFCH,*)'PIM=',PIM
        WRITE(IFCH,*)'POT=',POT					        WRITE(IFCH,*)'POT=',POT
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      IF ( ABS(PAP*PAM-PUT**2) .GT. 1.D-4 ) THEN		      IF ( ABS(PAP*PAM-PUT**2) .GT. 1.D-4 ) THEN
        CALL UTMSG('HASTFR')					        CALL UTMSG('HASTFR')
        WRITE(IFCH,*)'*****  PAP*PAM /= PUT**2'			        WRITE(IFCH,*)'*****  PAP*PAM /= PUT**2'
        WRITE(IFCH,*)'PAP*PAM=',PAP*PAM				        WRITE(IFCH,*)'PAP*PAM=',PAP*PAM
        WRITE(IFCH,*)'PUT**2=',PUT**2				        WRITE(IFCH,*)'PUT**2=',PUT**2
        WRITE(IFCH,*)'PAP=',PAP					        WRITE(IFCH,*)'PAP=',PAP
        WRITE(IFCH,*)'PAM=',PAM					        WRITE(IFCH,*)'PAM=',PAM
        WRITE(IFCH,*)'PUT=',PUT					        WRITE(IFCH,*)'PUT=',PUT
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      IF ( ABS(SSILA(4)**2					      IF ( ABS(SSILA(4)**2
     *        -SSILA(1)**2-SSILA(2)**2-SSILA(3)**2) .GT. 1.D-	     *        -SSILA(1)**2-SSILA(2)**2-SSILA(3)**2) .GT. 1.D-
        CALL UTMSG('HASTFR')					        CALL UTMSG('HASTFR')
        WRITE(IFCH,*)'*****  MASS**2 OF SSILA NONZERO'		        WRITE(IFCH,*)'*****  MASS**2 OF SSILA NONZERO'
        WRITE(IFCH,*)'MASS**2=',SSILA(4)**2			        WRITE(IFCH,*)'MASS**2=',SSILA(4)**2
     *                         -SSILA(1)**2-SSILA(2)**2-SSILA	     *                         -SSILA(1)**2-SSILA(2)**2-SSILA
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      IF ( ABS(SSILB(4)**2					      IF ( ABS(SSILB(4)**2
     *         -SSILB(1)**2-SSILB(2)**2-SSILB(3)**2) .GT. 1.D	     *         -SSILB(1)**2-SSILB(2)**2-SSILB(3)**2) .GT. 1.D
        CALL UTMSG('HASTFR')					        CALL UTMSG('HASTFR')
        WRITE(IFCH,*)'*****  MASS**2 OF SSILB NONZERO'		        WRITE(IFCH,*)'*****  MASS**2 OF SSILB NONZERO'
        WRITE(IFCH,*)'MASS**2=',SSILB(4)**2			        WRITE(IFCH,*)'MASS**2=',SSILB(4)**2
     *                         -SSILB(1)**2-SSILB(2)**2-SSILB	     *                         -SSILB(1)**2-SSILB(2)**2-SSILB
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      DO 14 N=1,4						      DO 14 N=1,4
        IF ( ABS(PLAB(N)					        IF ( ABS(PLAB(N)
     *         -SSILA(N)-SSILB(N)-SSIA(N)-SSIB(N)) .GT. 1.D-4	     *         -SSILA(N)-SSILB(N)-SSIA(N)-SSIB(N)) .GT. 1.D-4
14    CONTINUE							14    CONTINUE
      GOTO 16							      GOTO 16
15    CONTINUE							15    CONTINUE
      CALL UTMSG('HASTFR')					      CALL UTMSG('HASTFR')
      WRITE(IFCH,*)'***** SSILA+SSILB /= SSILA_NEW+SSILB_NEW+	      WRITE(IFCH,*)'***** SSILA+SSILB /= SSILA_NEW+SSILB_NEW+
      WRITE(IFCH,*)'SSILA_OLD+SSILB_OLD:'			      WRITE(IFCH,*)'SSILA_OLD+SSILB_OLD:'
      WRITE(IFCH,*)PLAB						      WRITE(IFCH,*)PLAB
      WRITE(IFCH,*)'SSILA_NEW+SSILB_NEW+SSIA+SSIB:'		      WRITE(IFCH,*)'SSILA_NEW+SSILB_NEW+SSIA+SSIB:'
      WRITE(IFCH,*)((SSILA(K)+SSILB(K)+SSIA(K)+SSIB(K)),K=1,4	      WRITE(IFCH,*)((SSILA(K)+SSILB(K)+SSIA(K)+SSIB(K)),K=1,4
      WRITE(IFCH,*)'SSILA_NEW:'					      WRITE(IFCH,*)'SSILA_NEW:'
      WRITE(IFCH,*)(SSILA(N),N=1,4)				      WRITE(IFCH,*)(SSILA(N),N=1,4)
      WRITE(IFCH,*)'SSILB_NEW:'					      WRITE(IFCH,*)'SSILB_NEW:'
      WRITE(IFCH,*)(SSILB(N),N=1,4)				      WRITE(IFCH,*)(SSILB(N),N=1,4)
      WRITE(IFCH,*)'SSIA:'					      WRITE(IFCH,*)'SSIA:'
      WRITE(IFCH,*)(SSIA(N),N=1,4)				      WRITE(IFCH,*)(SSIA(N),N=1,4)
      WRITE(IFCH,*)'SSIB:'					      WRITE(IFCH,*)'SSIB:'
      WRITE(IFCH,*)(SSIB(N),N=1,4)				      WRITE(IFCH,*)(SSIB(N),N=1,4)
      CALL UTMSGF						      CALL UTMSGF
16    CONTINUE							16    CONTINUE

9000  RETURN							9000  RETURN

9001  IRET=1							9001  IRET=1
      IF ( ISH .LT. 90 ) RETURN					      IF ( ISH .LT. 90 ) RETURN
      CALL UTMSG('HASTFR')					      CALL UTMSG('HASTFR')
      WRITE(IFCH,*)'STRING SUBTRACTION NOT POSSIBLE'		      WRITE(IFCH,*)'STRING SUBTRACTION NOT POSSIBLE'
      WRITE(IFCH,*)'SNGL(SSILA):'				      WRITE(IFCH,*)'SNGL(SSILA):'
      WRITE(IFCH,*)(SNGL(SSILA(N)),N=1,4)			      WRITE(IFCH,*)(SNGL(SSILA(N)),N=1,4)
      WRITE(IFCH,*)'SNGL(SSILB):'				      WRITE(IFCH,*)'SNGL(SSILB):'
      WRITE(IFCH,*)(SNGL(SSILB(N)),N=1,4)			      WRITE(IFCH,*)(SNGL(SSILB(N)),N=1,4)
      WRITE(IFCH,*)'SNGL(SSIA):'				      WRITE(IFCH,*)'SNGL(SSIA):'
      WRITE(IFCH,*)(SNGL(SSIA(N)),N=1,4)			      WRITE(IFCH,*)(SNGL(SSIA(N)),N=1,4)
      WRITE(IFCH,*)'SNGL(SSIB):'				      WRITE(IFCH,*)'SNGL(SSIB):'
      WRITE(IFCH,*)(SNGL(SSIB(N)),N=1,4)			      WRITE(IFCH,*)(SNGL(SSIB(N)),N=1,4)
      WRITE(IFCH,*)'PEP,PEM:',PEP,PEM				      WRITE(IFCH,*)'PEP,PEM:',PEP,PEM
      WRITE(IFCH,*)'POT,PUT:',POT,PUT				      WRITE(IFCH,*)'POT,PUT:',POT,PUT
      WRITE(IFCH,*)'A,D:',A,D					      WRITE(IFCH,*)'A,D:',A,D
      WRITE(IFCH,*)'A**2-D**2:',A**2-D**2			      WRITE(IFCH,*)'A**2-D**2:',A**2-D**2
      WRITE(IFCH,*)'PYP,PYM:',PYP,PYM				      WRITE(IFCH,*)'PYP,PYM:',PYP,PYM
      WRITE(IFCH,*)'PIP,PAM:',PIP,PAM				      WRITE(IFCH,*)'PIP,PAM:',PIP,PAM
      WRITE(IFCH,*)'PI3,SILA(3):',PI3,SILA(3)			      WRITE(IFCH,*)'PI3,SILA(3):',PI3,SILA(3)
      WRITE(IFCH,*)'PA3,SILB(3):',PA3,SILB(3)			      WRITE(IFCH,*)'PA3,SILB(3):',PA3,SILB(3)
      CALL UTMSGF						      CALL UTMSGF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASTFS(SILA,SIXA,IFLA,XFLA,PTA,PTAH		      SUBROUTINE HASTFS(SILA,SIXA,IFLA,XFLA,PTA,PTAH
     *                 ,SILB,SIXB,IFLB,XFLB,PTB,PTBH  ,STR,IR	     *                 ,SILB,SIXB,IFLB,XFLB,PTB,PTBH  ,STR,IR

C------------------------------------------------------------	C------------------------------------------------------------
C  FORMS A SHORT (=Q-QBAR) STRING				C  FORMS A SHORT (=Q-QBAR) STRING
C  IRET=0: OK							C  IRET=0: OK
C  IRET=1: IN SR HASI: REMNANT CHANGES DIRECTION OR ZERO SI()	C  IRET=1: IN SR HASI: REMNANT CHANGES DIRECTION OR ZERO SI()
C  IRET=2: IN SR HASI: JC(,)=10 .				C  IRET=2: IN SR HASI: JC(,)=10 .
C  IRET=3: STRING MASS TOO SMALL. NOT 4 , 5 .			C  IRET=3: STRING MASS TOO SMALL. NOT 4 , 5 .
C  IRET=4: STRING MASS TOO SMALL. EQUAL FLAVOUR,ZERO MOMENTUM	C  IRET=4: STRING MASS TOO SMALL. EQUAL FLAVOUR,ZERO MOMENTUM
C  IRET=5: STRING MASS TOO SMALL. VALENCE QUARKS INVOLVED.	C  IRET=5: STRING MASS TOO SMALL. VALENCE QUARKS INVOLVED.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NPTQ=129)					      PARAMETER (NPTQ=129)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTQ/    QPTH(NPTQ),QPTQ(NPTQ),XPTQ(NPTQ),QPTQM	      COMMON /CPTQ/    QPTH(NPTQ),QPTQ(NPTQ),XPTQ(NPTQ),QPTQM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      PTDIFF(2),SIA(NSI),SIB(NSI),SILA(NSI),SILB(NS	      REAL      PTDIFF(2),SIA(NSI),SIB(NSI),SILA(NSI),SILB(NS
     *         ,SIXA(NSI,NSIX),SIXB(NSI,NSIX),STR(NSI,NSIX+1)	     *         ,SIXA(NSI,NSIX),SIXB(NSI,NSIX),STR(NSI,NSIX+1)
      CHARACTER XFLA*3,XFLB*3					      CHARACTER XFLA*3,XFLB*3
C------------------------------------------------------------	C------------------------------------------------------------
      DO 50 N=1,NSI						      DO 50 N=1,NSI
        STR(N,1)=0.						        STR(N,1)=0.
        STR(N,2)=0.						        STR(N,2)=0.
        STR(N,3)=0.						        STR(N,3)=0.
50    CONTINUE							50    CONTINUE

      CALL UTKSIX(SIXA,KMAXA)					      CALL UTKSIX(SIXA,KMAXA)
      CALL UTKSIX(SIXB,KMAXB)					      CALL UTKSIX(SIXB,KMAXB)

      R=RANGEN()						      R=RANGEN()
      IF     ( IOPTQ .EQ. 2 ) THEN				      IF     ( IOPTQ .EQ. 2 ) THEN
        PT = SQRT( -4.*PTQ**2/PI * LOG(1.-QPTQMX*R) )		        PT = SQRT( -4.*PTQ**2/PI * LOG(1.-QPTQMX*R) )
      ELSEIF ( IOPTQ .EQ. 3 ) THEN				      ELSEIF ( IOPTQ .EQ. 3 ) THEN
        PT = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )			        PT = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )
      ELSE							      ELSE
        PT=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))			        PT=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))
      ENDIF							      ENDIF
      PHI=2.*PI*RANGEN()					      PHI=2.*PI*RANGEN()
      SIA(1)=PT*COS(PHI)					      SIA(1)=PT*COS(PHI)
      SIB(1)=-SIA(1)						      SIB(1)=-SIA(1)
      SIA(2)=PT*SIN(PHI)					      SIA(2)=PT*SIN(PHI)
      SIB(2)=-SIA(2)						      SIB(2)=-SIA(2)

      IXFLAB=0							      IXFLAB=0
      IF (  XFLA.NE.'---' .AND. XFLB.NE.'---' .AND.		      IF (  XFLA.NE.'---' .AND. XFLB.NE.'---' .AND.
     *       (XFLA .NE. '000'  .OR.  XFLB .NE. '000') ) IXFLA	     *       (XFLA .NE. '000'  .OR.  XFLB .NE. '000') ) IXFLA
      CALL HASI('QUARK',SILA,IFLA,XFLA,PTA,PTAH,SIA,IRET,JORD	      CALL HASI('QUARK',SILA,IFLA,XFLA,PTA,PTAH,SIA,IRET,JORD
     *          ,PTDIFF)					     *          ,PTDIFF)
      IF ( IRET .EQ. 1 ) GOTO 9001				      IF ( IRET .EQ. 1 ) GOTO 9001
      IF ( IRET .EQ. 2 ) GOTO 9002				      IF ( IRET .EQ. 2 ) GOTO 9002
      SILA(1)=SILA(1)-PTDIFF(1)					      SILA(1)=SILA(1)-PTDIFF(1)
      SILA(2)=SILA(2)-PTDIFF(2)					      SILA(2)=SILA(2)-PTDIFF(2)
      SILB(1)=SILB(1)+PTDIFF(1)					      SILB(1)=SILB(1)+PTDIFF(1)
      SILB(2)=SILB(2)+PTDIFF(2)					      SILB(2)=SILB(2)+PTDIFF(2)
      CALL HASI('ANTIQ',SILB,IFLB,XFLB,PTB,PTBH,SIB,IRET,JORD	      CALL HASI('ANTIQ',SILB,IFLB,XFLB,PTB,PTBH,SIB,IRET,JORD
     *          ,PTDIFF)					     *          ,PTDIFF)
      IF ( IRET .EQ. 1 ) GOTO 9001				      IF ( IRET .EQ. 1 ) GOTO 9001
      IF ( IRET .EQ. 2 ) GOTO 9002				      IF ( IRET .EQ. 2 ) GOTO 9002
      SILB(1)=SILB(1)-PTDIFF(1)					      SILB(1)=SILB(1)-PTDIFF(1)
      SILB(2)=SILB(2)-PTDIFF(2)					      SILB(2)=SILB(2)-PTDIFF(2)
      SILA(1)=SILA(1)+PTDIFF(1)					      SILA(1)=SILA(1)+PTDIFF(1)
      SILA(2)=SILA(2)+PTDIFF(2)					      SILA(2)=SILA(2)+PTDIFF(2)
      IF ( SILA(5) .EQ. 0.  .AND.  SILA(6) .EQ. 0. ) THEN	      IF ( SILA(5) .EQ. 0.  .AND.  SILA(6) .EQ. 0. ) THEN
        SILA(5)=100000.						        SILA(5)=100000.
        SILA(6)=100000.						        SILA(6)=100000.
      ENDIF							      ENDIF
      IF ( SILB(5) .EQ. 0.  .AND.  SILB(6) .EQ. 0. ) THEN	      IF ( SILB(5) .EQ. 0.  .AND.  SILB(6) .EQ. 0. ) THEN
        SILB(5)=100000.						        SILB(5)=100000.
        SILB(6)=100000.						        SILB(6)=100000.
      ENDIF							      ENDIF
      IF     ( XFLA .EQ. '000'  .AND.  XFLB .EQ. '000' ) THEN	      IF     ( XFLA .EQ. '000'  .AND.  XFLB .EQ. '000' ) THEN
        GOTO 9003						        GOTO 9003
      ELSEIF ( XFLA .NE. '---'  .AND.  XFLB .NE. '---' ) THEN	      ELSEIF ( XFLA .NE. '---'  .AND.  XFLB .NE. '---' ) THEN
        CALL HASTFR(SILA,SILB,SIA,SIB,IRET)			        CALL HASTFR(SILA,SILB,SIA,SIB,IRET)
        IF ( IRET .EQ. 1 ) GOTO 9003				        IF ( IRET .EQ. 1 ) GOTO 9003
        DO 65 N=1,NSI						        DO 65 N=1,NSI
          STS(N,1)=SIA(N)					          STS(N,1)=SIA(N)
          STS(N,2)=SIB(N)					          STS(N,2)=SIB(N)
65      CONTINUE						65      CONTINUE
        CALL UTAMST(STS,AM,AMIN,IRET)				        CALL UTAMST(STS,AM,AMIN,IRET)
        IF ( IRET .NE. 0 ) GOTO 9003				        IF ( IRET .NE. 0 ) GOTO 9003
        DO 70 N=1,NSI						        DO 70 N=1,NSI
          STR(N,1)=SIA(N)					          STR(N,1)=SIA(N)
          STR(N,2)=SIB(N)					          STR(N,2)=SIB(N)
70      CONTINUE						70      CONTINUE
      ELSEIF ( XFLA .NE. '---'  .AND.  XFLB .EQ. '---' ) THEN	      ELSEIF ( XFLA .NE. '---'  .AND.  XFLB .EQ. '---' ) THEN
        IF ( KMAXB+1 .GT. NSIX ) THEN				        IF ( KMAXB+1 .GT. NSIX ) THEN
          CALL UTSTOP('HASTFS: NSIX TOO SMALL                	          CALL UTSTOP('HASTFS: NSIX TOO SMALL                
        ENDIF							        ENDIF
        DO 60 N=1,NSI						        DO 60 N=1,NSI
          SIXB(N,KMAXB+1)=SIA(N)				          SIXB(N,KMAXB+1)=SIA(N)
          IF ( KMAXB+2 .LE. NSIX ) SIXB(N,KMAXB+2)=0.		          IF ( KMAXB+2 .LE. NSIX ) SIXB(N,KMAXB+2)=0.
60      CONTINUE						60      CONTINUE
        IF ( IFLA .LT. 0 ) THEN					        IF ( IFLA .LT. 0 ) THEN
          SIXB(5,KMAXB+1)=-SIXB(5,KMAXB+1)			          SIXB(5,KMAXB+1)=-SIXB(5,KMAXB+1)
          SIXB(6,KMAXB+1)=-SIXB(6,KMAXB+1)			          SIXB(6,KMAXB+1)=-SIXB(6,KMAXB+1)
        ENDIF							        ENDIF
        KMAXB=KMAXB+1						        KMAXB=KMAXB+1
      ELSEIF ( XFLA .EQ. '---'  .AND.  XFLB .NE. '---' ) THEN	      ELSEIF ( XFLA .EQ. '---'  .AND.  XFLB .NE. '---' ) THEN
        IF ( KMAXA+1 .GT. NSIX ) THEN				        IF ( KMAXA+1 .GT. NSIX ) THEN
          CALL UTSTOP('HASTFS: NSIX TOO SMALL                	          CALL UTSTOP('HASTFS: NSIX TOO SMALL                
        ENDIF							        ENDIF
        DO 80 N=1,NSI						        DO 80 N=1,NSI
          SIXA(N,KMAXA+1)=SIB(N)				          SIXA(N,KMAXA+1)=SIB(N)
          IF ( KMAXA+2 .LE. NSIX ) SIXA(N,KMAXA+2)=0.		          IF ( KMAXA+2 .LE. NSIX ) SIXA(N,KMAXA+2)=0.
80      CONTINUE						80      CONTINUE
        IF ( IFLB .LT. 0 ) THEN					        IF ( IFLB .LT. 0 ) THEN
          SIXA(5,KMAXA+1)=-SIXA(5,KMAXA+1)			          SIXA(5,KMAXA+1)=-SIXA(5,KMAXA+1)
          SIXA(6,KMAXA+1)=-SIXA(6,KMAXA+1)			          SIXA(6,KMAXA+1)=-SIXA(6,KMAXA+1)
        ENDIF							        ENDIF
        KMAXA=KMAXA+1						        KMAXA=KMAXA+1
      ELSEIF ( XFLA .EQ. '---'  .AND.  XFLB .EQ. '---' ) THEN	      ELSEIF ( XFLA .EQ. '---'  .AND.  XFLB .EQ. '---' ) THEN
C  NO ACTION							C  NO ACTION
      ELSE							      ELSE
        CALL UTSTOP('HASTFS: IF/ELSE ERROR                   	        CALL UTSTOP('HASTFS: IF/ELSE ERROR                   
      ENDIF							      ENDIF

9000  IRET=0							9000  IRET=0
      IF ( ISH .GE. 91 ) WRITE(IFCH,102)SIA,XFLA,SIB,XFLB	      IF ( ISH .GE. 91 ) WRITE(IFCH,102)SIA,XFLA,SIB,XFLB
102   FORMAT(' SIA: ',4F13.5,2F8.0,2X,A3			102   FORMAT(' SIA: ',4F13.5,2F8.0,2X,A3
     *      /' SIB: ',4F13.5,2F8.0,2X,A3)			     *      /' SIB: ',4F13.5,2F8.0,2X,A3)
      RETURN							      RETURN

9001  IRET=1							9001  IRET=1
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB			        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB
        WRITE(IFCH,*)'REMNANT CHANGES DIRECTION'		        WRITE(IFCH,*)'REMNANT CHANGES DIRECTION'
        WRITE(IFCH,*)' OR ZERO SI(1/2/3)'			        WRITE(IFCH,*)' OR ZERO SI(1/2/3)'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      RETURN							      RETURN

9002  IRET=2							9002  IRET=2
C     JC(,)=10							C     JC(,)=10
      IF ( ISH .GE. 91 ) WRITE(IFCH,102)SIA,XFLA,SIB,XFLB	      IF ( ISH .GE. 91 ) WRITE(IFCH,102)SIA,XFLA,SIB,XFLB
      RETURN							      RETURN

9003  IRET=3							9003  IRET=3
      IF ( XFLA(1:2) .EQ. 'VA'  .OR.  XFLB(1:2) .EQ. 'VA' ) G	      IF ( XFLA(1:2) .EQ. 'VA'  .OR.  XFLB(1:2) .EQ. 'VA' ) G
      WT=ABS(SIA(1)+SIB(1))+ABS(SIA(2)+SIB(2))			      WT=ABS(SIA(1)+SIB(1))+ABS(SIA(2)+SIB(2))
     *                              +ABS(SIA(3)+SIB(3))		     *                              +ABS(SIA(3)+SIB(3))
      IF ( ABS(IFLA).EQ.ABS(IFLB) .AND. WT.LT.1.E-3		      IF ( ABS(IFLA).EQ.ABS(IFLB) .AND. WT.LT.1.E-3
     *            .AND. XFLA.EQ.'000' .AND. XFLB.EQ.'000' ) G	     *            .AND. XFLA.EQ.'000' .AND. XFLB.EQ.'000' ) G
      IFLB=SIGN( IABS(IFLA), IFLB)				      IFLB=SIGN( IABS(IFLA), IFLB)
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB			        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB
        WRITE(IFCH,*)'STRING MASS TOO SMALL (3)'		        WRITE(IFCH,*)'STRING MASS TOO SMALL (3)'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      XFLA='000'						      XFLA='000'
      XFLB='000'						      XFLB='000'
      RETURN							      RETURN

9004  IRET=4							9004  IRET=4
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB			        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB
        WRITE(IFCH,*)'STRING MASS TOO SMALL (4)'		        WRITE(IFCH,*)'STRING MASS TOO SMALL (4)'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      RETURN							      RETURN

9005  IRET=5							9005  IRET=5
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB			        WRITE(IFCH,102)SIA,XFLA,SIB,XFLB
        WRITE(IFCH,*)'STRING MASS TOO SMALL (5)'		        WRITE(IFCH,*)'STRING MASS TOO SMALL (5)'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      XFLA(1:2)='SE'						      XFLA(1:2)='SE'
      XFLB(1:2)='SE'						      XFLB(1:2)='SE'
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASTFW(SIL,SIX)				      SUBROUTINE HASTFW(SIL,SIX)

C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL SIL(NSI),SIX(NSI,NSIX)				      REAL SIL(NSI),SIX(NSI,NSIX)
C------------------------------------------------------------	C------------------------------------------------------------
      CALL UTKSIX(SIX,KMAX)					      CALL UTKSIX(SIX,KMAX)
      WRITE(IFCH,103)SIL,((SIX(I,J),I=1,NSI),J=1,KMAX)		      WRITE(IFCH,103)SIL,((SIX(I,J),I=1,NSI),J=1,KMAX)
103   FORMAT(/' SIL: ',4F13.5,2F8.0/,' SIX: ',4F13.5,2F8.0/	103   FORMAT(/' SIL: ',4F13.5,2F8.0/,' SIX: ',4F13.5,2F8.0/
     *,50('      ',4F13.5,2F8.0/))				     *,50('      ',4F13.5,2F8.0/))
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HASTPR(STRO,ISPLT)				      SUBROUTINE HASTPR(STRO,ISPLT)

C------------------------------------------------------------	C------------------------------------------------------------
C  PROCESSES A STRING						C  PROCESSES A STRING
C  OUT: ISPLT=0 : PROCESSING OF STRO FINISHED			C  OUT: ISPLT=0 : PROCESSING OF STRO FINISHED
C            >0 : HASTPR TO BE REDONE TO PROCESS REDUCED STRI	C            >0 : HASTPR TO BE REDONE TO PROCESS REDUCED STRI
C            -1 : ERROR						C            -1 : ERROR
C            -3 : HASTPR TO BE REDONE WITH NEW EPART,APART	C            -3 : HASTPR TO BE REDONE WITH NEW EPART,APART
C            -4 : HAHA COLLISION TO BE REDONE BEC OF TOO FAST	C            -4 : HAHA COLLISION TO BE REDONE BEC OF TOO FAST
C                             (ONLY FOR ICHOIC=2)		C                             (ONLY FOR ICHOIC=2)
C            -5 : HASTPR TO BE REDONE BECAUSE OF PRODUCED S=3	C            -5 : HASTPR TO BE REDONE BECAUSE OF PRODUCED S=3
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CJSPLI/  ALEAD,APART,ELEAD,EPART,SGNSIL,JPART,N	      COMMON /CJSPLI/  ALEAD,APART,ELEAD,EPART,SGNSIL,JPART,N
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CLEAD/   COOAV3,COOAV4,LEAD			      COMMON /CLEAD/   COOAV3,COOAV4,LEAD
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CNSUC/   NSUC					      COMMON /CNSUC/   NSUC
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL			      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /CSTSH/   NSTSH					      COMMON /CSTSH/   NSTSH
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION DAUXIL,PPE,PPM,PPP,PPX,PPY,PPZ,PP1(4),	      DOUBLE PRECISION DAUXIL,PPE,PPM,PPP,PPX,PPY,PPZ,PP1(4),
      REAL             P1(4),P2(4),STR(NSI,2),STRO(NSI,NSIX+1	      REAL             P1(4),P2(4),STR(NSI,2),STRO(NSI,NSIX+1
      INTEGER          IC(2),IC1(2),IC1X(2),IC2(2)		      INTEGER          IC(2),IC1(2),IC1X(2),IC2(2)
     *                ,JC(NFLAV,2),JC1(NFLAV,2),JC2(NFLAV,2)	     *                ,JC(NFLAV,2),JC1(NFLAV,2),JC2(NFLAV,2)
     *                ,JC3(NFLAV,2)				     *                ,JC3(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IF     ( ISPLT .EQ. -3 ) THEN				      IF     ( ISPLT .EQ. -3 ) THEN
        JPART=1							        JPART=1
        ISPLT=0							        ISPLT=0
      ELSEIF ( ISPLT .EQ.  0 ) THEN				      ELSEIF ( ISPLT .EQ.  0 ) THEN
        JPART=0							        JPART=0
      ENDIF							      ENDIF
      ISPLT0=ISPLT						      ISPLT0=ISPLT

      CALL UTKSTR(STRO,KMAX)					      CALL UTKSTR(STRO,KMAX)

C  ZERO STRING							C  ZERO STRING
C  -----------							C  -----------
      IF ( KMAX .EQ. 0 ) THEN					      IF ( KMAX .EQ. 0 ) THEN
        IF ( ISH .GE. 91 ) THEN					        IF ( ISH .GE. 91 ) THEN
          WRITE(IFCH,*)'ZERO STRING'				          WRITE(IFCH,*)'ZERO STRING'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
        ISPLT=0							        ISPLT=0
        RETURN							        RETURN
      ENDIF							      ENDIF

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I=5	        WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I=5
105     FORMAT(' STR: ',4F13.5,2I8)				105     FORMAT(' STR: ',4F13.5,2I8)
        IF ( KMAX .GT. 1 ) THEN					        IF ( KMAX .GT. 1 ) THEN
          DO 8 K=2,KMAX						          DO 8 K=2,KMAX
            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))	            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))
104         FORMAT('      ',4F13.5,2I8)				104         FORMAT('      ',4F13.5,2I8)
 8        CONTINUE						 8        CONTINUE
        ENDIF							        ENDIF
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF

C  CHECK LEADING OBJECT						C  CHECK LEADING OBJECT
C  --------------------						C  --------------------
      IC1(1)=NINT(STRO(4+1,1))					      IC1(1)=NINT(STRO(4+1,1))
      IC1(2)=NINT(STRO(4+2,1))					      IC1(2)=NINT(STRO(4+2,1))
      CALL IDCOMP(IC1,IC1X,JC3,1)				      CALL IDCOMP(IC1,IC1X,JC3,1)
      STRO(4+1,1)=IC1X(1)					      STRO(4+1,1)=IC1X(1)
      STRO(4+2,1)=IC1X(2)					      STRO(4+2,1)=IC1X(2)
      CALL IDDECO(IC1X,JC1)					      CALL IDDECO(IC1X,JC1)
      NPA=0							      NPA=0
      DO 7 N=1,NFLAV						      DO 7 N=1,NFLAV
        NPA=NPA+JC1(N,1)+JC1(N,2)				        NPA=NPA+JC1(N,1)+JC1(N,2)
 7    CONTINUE							 7    CONTINUE

C  SPLIT STRING							C  SPLIT STRING
C  ------------							C  ------------
      IF ( KMAX .GT. 2  .OR. KMAX.EQ.2 .AND. ISPLT.GT.0		      IF ( KMAX .GT. 2  .OR. KMAX.EQ.2 .AND. ISPLT.GT.0
     *                  .OR. KMAX.EQ.2 .AND. NPA.GT.3		     *                  .OR. KMAX.EQ.2 .AND. NPA.GT.3
     *                  .OR. KMAX.EQ.2 .AND. LEAD.EQ.1 ) THEN	     *                  .OR. KMAX.EQ.2 .AND. LEAD.EQ.1 ) THEN
        IF ( ISPLT .EQ. 0 ) THEN				        IF ( ISPLT .EQ. 0 ) THEN
          NSUC=0						          NSUC=0
          KMAXOR=KMAX						          KMAXOR=KMAX
          IF ( STRO(3,1) .LT. 0. ) THEN				          IF ( STRO(3,1) .LT. 0. ) THEN
            SGNSIL=-1						            SGNSIL=-1
          ELSE							          ELSE
            SGNSIL=1						            SGNSIL=1
          ENDIF							          ENDIF
          DO 17 N=1,NFLAV					          DO 17 N=1,NFLAV
            JC2(N,1)=0						            JC2(N,1)=0
            JC2(N,2)=0						            JC2(N,2)=0
17        CONTINUE						17        CONTINUE
          DO 15 K=1,KMAX					          DO 15 K=1,KMAX
            IC1(1)=NINT(ABS(STRO(4+1,K)))			            IC1(1)=NINT(ABS(STRO(4+1,K)))
            IC1(2)=NINT(ABS(STRO(4+2,K)))			            IC1(2)=NINT(ABS(STRO(4+2,K)))
            CALL IDDECO(IC1,JC1)				            CALL IDDECO(IC1,JC1)
            DO 16 N=1,NFLAV					            DO 16 N=1,NFLAV
              JC2(N,1)=JC2(N,1)+JC1(N,1)			              JC2(N,1)=JC2(N,1)+JC1(N,1)
              JC2(N,2)=JC2(N,2)+JC1(N,2)			              JC2(N,2)=JC2(N,2)+JC1(N,2)
              IF ( N .GT. 4  .AND.  (JC2(N,1).NE.0 .OR.		              IF ( N .GT. 4  .AND.  (JC2(N,1).NE.0 .OR.
     *                               JC2(N,2) .NE. 0) ) THEN	     *                               JC2(N,2) .NE. 0) ) THEN
                 CALL UTSTOP('HASTPR: FLAVOUR > 4            	                 CALL UTSTOP('HASTPR: FLAVOUR > 4            
               ENDIF						               ENDIF
16          CONTINUE						16          CONTINUE
15        CONTINUE						15        CONTINUE
          KEU=JC2(1,1)-JC2(1,2)					          KEU=JC2(1,1)-JC2(1,2)
          KED=JC2(2,1)-JC2(2,2)					          KED=JC2(2,1)-JC2(2,2)
          KES=JC2(3,1)-JC2(3,2)					          KES=JC2(3,1)-JC2(3,2)
          KEC=JC2(4,1)-JC2(4,2)					          KEC=JC2(4,1)-JC2(4,2)
          ALEAD=UTAMNU(KEU,KED,KES,KEC,0)			          ALEAD=UTAMNU(KEU,KED,KES,KEC,0)
C-C       ALEAD=0.						C-C       ALEAD=0.
          ELEAD=STRO(4,1)					          ELEAD=STRO(4,1)
          IF ( JPART .EQ. 0 ) THEN				          IF ( JPART .EQ. 0 ) THEN
            NSCCX=KMAXOR-1					            NSCCX=KMAXOR-1
            NSTR0=NSTR						            NSTR0=NSTR
          ELSE							          ELSE
            NSCCX=MAX(1,NSCC)					            NSCCX=MAX(1,NSCC)
            NSTR=NSTR0						            NSTR=NSTR0
          ENDIF							          ENDIF
          APART=ALEAD/NSCCX					          APART=ALEAD/NSCCX
          EPART=ELEAD/NSCCX					          EPART=ELEAD/NSCCX
          IF ( ALEAD .GT. ELEAD ) THEN				          IF ( ALEAD .GT. ELEAD ) THEN
            IF ( ISH .GE. 90 ) THEN				            IF ( ISH .GE. 90 ) THEN
              CALL UTMSG('HASTPR')				              CALL UTMSG('HASTPR')
              WRITE(IFCH,*)'*****  ALEAD > ELEAD  ==> RET COD	              WRITE(IFCH,*)'*****  ALEAD > ELEAD  ==> RET COD
              WRITE(IFCH,*)'ALEAD=',ALEAD,'   ELEAD=',ELEAD	              WRITE(IFCH,*)'ALEAD=',ALEAD,'   ELEAD=',ELEAD
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
            ISPLT=-1						            ISPLT=-1
            RETURN						            RETURN
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        CALL JSPLIT(STRO,STR,KOLSP,IER,KMAXOR)			        CALL JSPLIT(STRO,STR,KOLSP,IER,KMAXOR)
        IF     ( IER .EQ. 1 ) THEN				        IF     ( IER .EQ. 1 ) THEN
          ISPLT=-1						          ISPLT=-1
          RETURN						          RETURN
        ELSEIF ( IER .EQ. 3 ) THEN				        ELSEIF ( IER .EQ. 3 ) THEN
          ISPLT=-3						          ISPLT=-3
          RETURN						          RETURN
        ENDIF							        ENDIF
        ISPLT=ISPLT+1						        ISPLT=ISPLT+1
        IF ( IER .EQ. 2 ) THEN					        IF ( IER .EQ. 2 ) THEN
          IF ( ISH .GE. 91 ) THEN				          IF ( ISH .GE. 91 ) THEN
            WRITE(IFCH,*)'MULTISTRING: ABSORPTION OF ONE LEG'	            WRITE(IFCH,*)'MULTISTRING: ABSORPTION OF ONE LEG'
            WRITE(IFCH,*)' '					            WRITE(IFCH,*)' '
          ENDIF							          ENDIF
          RETURN						          RETURN
        ENDIF							        ENDIF
        KOLZ=KOLSP						        KOLZ=KOLSP
        IF ( KOLZ .LT. 1  .OR.  KOLZ .GT. KOLLMX ) THEN		        IF ( KOLZ .LT. 1  .OR.  KOLZ .GT. KOLLMX ) THEN
          WRITE(IFCH,*)'KOLZ=',KOLZ				          WRITE(IFCH,*)'KOLZ=',KOLZ
          CALL UTSTOP('HASTPR: KOLZ OUT OF RANGE (1)         	          CALL UTSTOP('HASTPR: KOLZ OUT OF RANGE (1)         
        ENDIF							        ENDIF
        KIN=1							        KIN=1
      ELSE							      ELSE
        IF ( ISPLT .GT. 0 ) THEN				        IF ( ISPLT .GT. 0 ) THEN
          KIN=1							          KIN=1
        ELSE							        ELSE
          KIN=0							          KIN=0
        ENDIF							        ENDIF
        DO 5 N=1,NSI						        DO 5 N=1,NSI
          IF ( N .LE. 4 ) THEN					          IF ( N .LE. 4 ) THEN
            STR(N,1)=STRO(N,1)					            STR(N,1)=STRO(N,1)
            STR(N,2)=STRO(N,2)					            STR(N,2)=STRO(N,2)
          ELSE							          ELSE
            STR(N,1)=ABS(STRO(N,1))				            STR(N,1)=ABS(STRO(N,1))
            STR(N,2)=ABS(STRO(N,2))				            STR(N,2)=ABS(STRO(N,2))
          ENDIF							          ENDIF
 5      CONTINUE						 5      CONTINUE
        IF     ( ISPLT .GT. 0 ) THEN				        IF     ( ISPLT .GT. 0 ) THEN
          IF ( SGNSIL .LT. 0. ) THEN				          IF ( SGNSIL .LT. 0. ) THEN
            KOLZ=KTARGA(2,ITARG)				            KOLZ=KTARGA(2,ITARG)
          ELSE							          ELSE
            KOLZ=KPROJA(2,IPROJ)				            KOLZ=KPROJA(2,IPROJ)
          ENDIF							          ENDIF
        ELSEIF ( LEAD .EQ. 1  .AND.  KMAX .EQ. 2 ) THEN		        ELSEIF ( LEAD .EQ. 1  .AND.  KMAX .EQ. 2 ) THEN
          IF ( STR(3,1) .LT. 0. ) THEN				          IF ( STR(3,1) .LT. 0. ) THEN
            KOLZ=KTARGA(2,ITARG)				            KOLZ=KTARGA(2,ITARG)
          ELSE							          ELSE
            KOLZ=KPROJA(2,IPROJ)				            KOLZ=KPROJA(2,IPROJ)
          ENDIF							          ENDIF
        ELSE							        ELSE
          KOLZ=KOL						          KOLZ=KOL
        ENDIF							        ENDIF
        IF ( KOLZ .LT. 1  .OR.  KOLZ .GT. KOLLMX ) THEN		        IF ( KOLZ .LT. 1  .OR.  KOLZ .GT. KOLLMX ) THEN
          IF(ISH.GE.90)THEN					          IF(ISH.GE.90)THEN
            CALL UTMSG('HASTPR')				            CALL UTMSG('HASTPR')
            WRITE(IFCH,*)'*****  KOLZ OUT OF RANGE;   KOLZ:',	            WRITE(IFCH,*)'*****  KOLZ OUT OF RANGE;   KOLZ:',
     *        ,'   SET TO:',KOL					     *        ,'   SET TO:',KOL
            WRITE(IFCH,105)(STR(I,1),I=1,4),(NINT(STR(I,1)),I	            WRITE(IFCH,105)(STR(I,1),I=1,4),(NINT(STR(I,1)),I
            WRITE(IFCH,104)(STR(I,2),I=1,4),(NINT(STR(I,2)),I	            WRITE(IFCH,104)(STR(I,2),I=1,4),(NINT(STR(I,2)),I
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          KOLZ=KOL						          KOLZ=KOL
        ENDIF							        ENDIF
        ISPLT=0							        ISPLT=0
      ENDIF							      ENDIF

C  ADD TWO JETS							C  ADD TWO JETS
C  ------------							C  ------------
      IC1(1)=NINT(STR(4+1,1))					      IC1(1)=NINT(STR(4+1,1))
      IC1(2)=NINT(STR(4+2,1))					      IC1(2)=NINT(STR(4+2,1))
      IC2(1)=NINT(STR(4+1,2))					      IC2(1)=NINT(STR(4+1,2))
      IC2(2)=NINT(STR(4+2,2))					      IC2(2)=NINT(STR(4+2,2))
      IA1=IC1(1)+IC1(2)						      IA1=IC1(1)+IC1(2)
      IA2=IC2(1)+IC2(2)						      IA2=IC2(1)+IC2(2)
      IF ( IA1 .EQ. 0  .AND.  IA2 .EQ. 0 ) THEN			      IF ( IA1 .EQ. 0  .AND.  IA2 .EQ. 0 ) THEN
        WRITE(IFCH,*)'STRO:'					        WRITE(IFCH,*)'STRO:'
        WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I=5	        WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I=5
        IF ( KMAX .GT. 1 ) THEN					        IF ( KMAX .GT. 1 ) THEN
          DO 18 K=2,KMAX					          DO 18 K=2,KMAX
            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))	            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))
18        CONTINUE						18        CONTINUE
        ENDIF							        ENDIF
        WRITE(IFCH,*)'STR:'					        WRITE(IFCH,*)'STR:'
        WRITE(IFCH,105)(STR(I,1),I=1,4),(NINT(STR(I,1)),I=5,6	        WRITE(IFCH,105)(STR(I,1),I=1,4),(NINT(STR(I,1)),I=5,6
        WRITE(IFCH,104)(STR(I,2),I=1,4),(NINT(STR(I,2)),I=5,6	        WRITE(IFCH,104)(STR(I,2),I=1,4),(NINT(STR(I,2)),I=5,6
        CALL UTSTOP('HASTPR: STR=0                           	        CALL UTSTOP('HASTPR: STR=0                           
      ENDIF							      ENDIF
      CALL IDDECO(IC1,JC1)					      CALL IDDECO(IC1,JC1)
      CALL IDDECO(IC2,JC2)					      CALL IDDECO(IC2,JC2)
      N1=0							      N1=0
      N2=0							      N2=0
      DO 9 N=1,NFLAV						      DO 9 N=1,NFLAV
        N1=N1+JC1(N,1)+JC1(N,2)					        N1=N1+JC1(N,1)+JC1(N,2)
        N2=N2+JC2(N,1)+JC2(N,2)					        N2=N2+JC2(N,1)+JC2(N,2)
        JC(N,1)=JC1(N,1)+JC2(N,1)				        JC(N,1)=JC1(N,1)+JC2(N,1)
        JC(N,2)=JC1(N,2)+JC2(N,2)				        JC(N,2)=JC1(N,2)+JC2(N,2)
        IF ( N .GT. 4 .AND. (JC(N,1) .NE. 0 .OR.		        IF ( N .GT. 4 .AND. (JC(N,1) .NE. 0 .OR.
     *                       JC(N,2) .NE. 0) ) THEN		     *                       JC(N,2) .NE. 0) ) THEN
          CALL UTSTOP ('HASTPR: FLAVOUR > 4                  	          CALL UTSTOP ('HASTPR: FLAVOUR > 4                  
        ENDIF							        ENDIF
 9    CONTINUE							 9    CONTINUE
      KEU=JC(1,1)-JC(1,2)					      KEU=JC(1,1)-JC(1,2)
      KED=JC(2,1)-JC(2,2)					      KED=JC(2,1)-JC(2,2)
      KES=JC(3,1)-JC(3,2)					      KES=JC(3,1)-JC(3,2)
      KEC=JC(4,1)-JC(4,2)					      KEC=JC(4,1)-JC(4,2)
      AMSTR=UTAMNU(KEU,KED,KES,KEC,6)				      AMSTR=UTAMNU(KEU,KED,KES,KEC,6)
      CALL IDENCO(JC,IC,IRETEN)					      CALL IDENCO(JC,IC,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('HASTPR: IDENCO RET CODE = 1             	        CALL UTSTOP('HASTPR: IDENCO RET CODE = 1             
      ENDIF							      ENDIF
      IDSTR=IDTRA(IC,0,0,3)					      IDSTR=IDTRA(IC,0,0,3)

C  DETERMINE ROT						C  DETERMINE ROT
C  -------------						C  -------------
      PP1(1)=STR(1,1)						      PP1(1)=STR(1,1)
      PP1(2)=STR(2,1)						      PP1(2)=STR(2,1)
      PP1(3)=STR(3,1)						      PP1(3)=STR(3,1)
      PP1(4)=STR(4,1)						      PP1(4)=STR(4,1)
      PP2(1)=STR(1,2)						      PP2(1)=STR(1,2)
      PP2(2)=STR(2,2)						      PP2(2)=STR(2,2)
      PP2(3)=STR(3,2)						      PP2(3)=STR(3,2)
      PP2(4)=STR(4,2)						      PP2(4)=STR(4,2)
      PPX=PP1(1)+PP2(1)						      PPX=PP1(1)+PP2(1)
      PPY=PP1(2)+PP2(2)						      PPY=PP1(2)+PP2(2)
      PPZ=PP1(3)+PP2(3)						      PPZ=PP1(3)+PP2(3)
      PPP=SQRT(PPX**2+PPY**2+PPZ**2)				      PPP=SQRT(PPX**2+PPY**2+PPZ**2)
      IF ( IA1 .NE. 0  .AND.  IA2 .NE. 0 ) THEN			      IF ( IA1 .NE. 0  .AND.  IA2 .NE. 0 ) THEN
        PP1(4)=SQRT(PP1(1)**2+PP1(2)**2+PP1(3)**2)		        PP1(4)=SQRT(PP1(1)**2+PP1(2)**2+PP1(3)**2)
        PP2(4)=SQRT(PP2(1)**2+PP2(2)**2+PP2(3)**2)		        PP2(4)=SQRT(PP2(1)**2+PP2(2)**2+PP2(3)**2)
        PPE=PP1(4)+PP2(4)					        PPE=PP1(4)+PP2(4)
        PPM=SQRT((PPE-PPP)*(PPE+PPP))				        PPM=SQRT((PPE-PPP)*(PPE+PPP))
        CALL UTLOB2(1,PPX,PPY,PPZ,PPE,PPM,PP1(1),PP1(2),PP1(3	        CALL UTLOB2(1,PPX,PPY,PPZ,PPE,PPM,PP1(1),PP1(2),PP1(3
        CALL UTLOB2(1,PPX,PPY,PPZ,PPE,PPM,PP2(1),PP2(2),PP2(3	        CALL UTLOB2(1,PPX,PPY,PPZ,PPE,PPM,PP2(1),PP2(2),PP2(3
      ELSE							      ELSE
        PPE=PP1(4)+PP2(4)					        PPE=PP1(4)+PP2(4)
        DAUXIL=(PPE-PPP)*(PPE+PPP)				        DAUXIL=(PPE-PPP)*(PPE+PPP)
        IF ( DAUXIL .GT. 0.D0 ) THEN				        IF ( DAUXIL .GT. 0.D0 ) THEN
          PPM=SQRT(DAUXIL)					          PPM=SQRT(DAUXIL)
        ELSE							        ELSE
          PPM=0.D0						          PPM=0.D0
          PPE=PPP						          PPE=PPP
        ENDIF							        ENDIF
        PP1(1)=0.D0						        PP1(1)=0.D0
        PP1(2)=0.D0						        PP1(2)=0.D0
        PP1(3)=0.D0						        PP1(3)=0.D0
        PP1(4)=0.D0						        PP1(4)=0.D0
        PP2(1)=0.D0						        PP2(1)=0.D0
        PP2(2)=0.D0						        PP2(2)=0.D0
        PP2(3)=0.D0						        PP2(3)=0.D0
        PP2(4)=0.D0						        PP2(4)=0.D0
      ENDIF							      ENDIF
      PX=PPX							      PX=PPX
      PY=PPY							      PY=PPY
      PZ=PPZ							      PZ=PPZ
      E=PPE							      E=PPE
      AM=PPM							      AM=PPM
      P=PPP							      P=PPP
      P1(1)=PP1(1)						      P1(1)=PP1(1)
      P1(2)=PP1(2)						      P1(2)=PP1(2)
      P1(3)=PP1(3)						      P1(3)=PP1(3)
      P1(4)=PP1(4)						      P1(4)=PP1(4)
      P2(1)=PP2(1)						      P2(1)=PP2(1)
      P2(2)=PP2(2)						      P2(2)=PP2(2)
      P2(3)=PP2(3)						      P2(3)=PP2(3)
      P2(4)=PP2(4)						      P2(4)=PP2(4)
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,107)(P1(I),I=1,4),IC1			        WRITE(IFCH,107)(P1(I),I=1,4),IC1
        WRITE(IFCH,107)(P2(I),I=1,4),IC2			        WRITE(IFCH,107)(P2(I),I=1,4),IC2
107     FORMAT(' JET: ',4F13.5,2I8)				107     FORMAT(' JET: ',4F13.5,2I8)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
CDH   IF ( P1(3) .NE. 0. ) THEN					CDH   IF ( P1(3) .NE. 0. ) THEN
CDH     DIRCN=SIGN(1.,P1(3))					CDH     DIRCN=SIGN(1.,P1(3))
CDH   ELSE							CDH   ELSE
CDH     DIRCN=1.						CDH     DIRCN=1.
CDH   ENDIF							CDH   ENDIF

C  MASS ADJUSTMENT						C  MASS ADJUSTMENT
C  ---------------						C  ---------------
      AM0=AM							      AM0=AM
      CALL IDRES(IDSTR,AM,IDSTRR,IADJ)				      CALL IDRES(IDSTR,AM,IDSTRR,IADJ)

C  DIFFRACTIVE PARTICLE:					C  DIFFRACTIVE PARTICLE:
C-C   IF ( (IA1.EQ.0.OR.IA2.EQ.0) .AND. ISPLT0.EQ.0 ) THEN	C-C   IF ( (IA1.EQ.0.OR.IA2.EQ.0) .AND. ISPLT0.EQ.0 ) THEN
C-C     IF ( MOD(IDSTRR,10).EQ.0 .AND. RANGEN().LT.0.1 ) THEN	C-C     IF ( MOD(IDSTRR,10).EQ.0 .AND. RANGEN().LT.0.1 ) THEN
C-C       AM=0.							C-C       AM=0.
C-C       CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			C-C       CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
C-C       AM=AM+.300						C-C       AM=AM+.300
C-C       CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			C-C       CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
C-C     ENDIF							C-C     ENDIF
C-C   ENDIF							C-C   ENDIF

C  REMNANT:							C  REMNANT:
      IF ( (IA1.EQ.0 .OR. IA2.EQ.0) .AND. ISPLT0.GT.0 ) THEN	      IF ( (IA1.EQ.0 .OR. IA2.EQ.0) .AND. ISPLT0.GT.0 ) THEN
        IF     ( NSUC .GT. 0 ) THEN				        IF     ( NSUC .GT. 0 ) THEN
          AM=0.							          AM=0.
          CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			          CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
          IF     ( N1+N2 .EQ. 2 ) THEN				          IF     ( N1+N2 .EQ. 2 ) THEN
            IF ( RANGEN() .LT. 0.33 ) AM=AM+0.400		            IF ( RANGEN() .LT. 0.33 ) AM=AM+0.400
          ELSEIF ( MOD(IDSTRR,10) .EQ. 0 ) THEN			          ELSEIF ( MOD(IDSTRR,10) .EQ. 0 ) THEN
            IF ( RANGEN() .LT. 0.33 ) AM=AM+0.300		            IF ( RANGEN() .LT. 0.33 ) AM=AM+0.300
          ELSE							          ELSE
            IF ( RANGEN() .GT. 0.33 ) THEN			            IF ( RANGEN() .GT. 0.33 ) THEN
              ISPLT=-5						              ISPLT=-5
              RETURN						              RETURN
            ENDIF						            ENDIF
          ENDIF							          ENDIF
          CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			          CALL IDRES(IDSTR,AM,IDSTRR,IADJ)

C  ALL LEGS ABSORBED						C  ALL LEGS ABSORBED
        ELSEIF ( NSUC .EQ. 0 ) THEN				        ELSEIF ( NSUC .EQ. 0 ) THEN
          IF ( ISEA .EQ. 0 ) THEN				          IF ( ISEA .EQ. 0 ) THEN
            ISPLT=-4						            ISPLT=-4
            RETURN						            RETURN
          ENDIF							          ENDIF
          AM=0.							          AM=0.
          IF ( ISTRL .EQ. 1 ) THEN				          IF ( ISTRL .EQ. 1 ) THEN
            AM=SQRT(ENGY**2*(1-ABS(PZSTRL)/PNLLX)+.94**2 )	            AM=SQRT(ENGY**2*(1-ABS(PZSTRL)/PNLLX)+.94**2 )
          ELSE							          ELSE
            CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			            CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
            IF ( MOD(IDSTRR,10) .EQ. 0 ) THEN			            IF ( MOD(IDSTRR,10) .EQ. 0 ) THEN
              AM=AM+RANGEN()					              AM=AM+RANGEN()
            ELSE						            ELSE
              AM=AM+RANGEN()-0.30				              AM=AM+RANGEN()-0.30
            ENDIF						            ENDIF
C-C         IF ( MOD(IDSTRR,10).EQ.0.AND.RANGEN().LT.0.33 ) A	C-C         IF ( MOD(IDSTRR,10).EQ.0.AND.RANGEN().LT.0.33 ) A
          ENDIF							          ENDIF
          CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			          CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
        ENDIF							        ENDIF
      ENDIF							      ENDIF

C  LEADING STRING = HADRON:					C  LEADING STRING = HADRON:
      IF ( LEAD.EQ.1 .AND. IA1.NE.0 .AND.IA2.NE.0		      IF ( LEAD.EQ.1 .AND. IA1.NE.0 .AND.IA2.NE.0
     *     .AND. ISPLT0.EQ.0 .AND. ISPLT.EQ.0 .AND. IDSTRR.NE	     *     .AND. ISPLT0.EQ.0 .AND. ISPLT.EQ.0 .AND. IDSTRR.NE
        AM=0.							        AM=0.
        CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			        CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
        IF ( MOD(IDSTRR,10).EQ.0  .AND.  RANGEN().LT.0.33 ) A	        IF ( MOD(IDSTRR,10).EQ.0  .AND.  RANGEN().LT.0.33 ) A
        CALL IDRES(IDSTR,AM,IDSTRR,IADJ)			        CALL IDRES(IDSTR,AM,IDSTRR,IADJ)
      ENDIF							      ENDIF

      IDSTR=IDSTRR						      IDSTR=IDSTRR
      IF ( IDSTR .EQ. 0  .AND.  AM .LT. AMSTR ) AM=AMSTR	      IF ( IDSTR .EQ. 0  .AND.  AM .LT. AMSTR ) AM=AMSTR
      PPM=AM							      PPM=AM
      E=SQRT(PPP**2+PPM**2)					      E=SQRT(PPP**2+PPM**2)

C  WRITE /CSTR/							C  WRITE /CSTR/
C  ------------							C  ------------
      NSTR=NSTR+1						      NSTR=NSTR+1
      IF ( NSTR .GT. MXSTR ) THEN				      IF ( NSTR .GT. MXSTR ) THEN
        CALL UTSTOP('HASTPR: NSTR>MXSTR                      	        CALL UTSTOP('HASTPR: NSTR>MXSTR                      
      ENDIF							      ENDIF
      IF ( LEAD .EQ. 0 ) NSTSH=1				      IF ( LEAD .EQ. 0 ) NSTSH=1
      NSUC=NSUC+1						      NSUC=NSUC+1
      IRLSTR(NSTR)=NSUC						      IRLSTR(NSTR)=NSUC
      IF ( ISPLT0 .EQ. 0  .AND.  ISPLT .EQ. 0 ) IRLSTR(NSTR)=	      IF ( ISPLT0 .EQ. 0  .AND.  ISPLT .EQ. 0 ) IRLSTR(NSTR)=
      ICSTR(1,NSTR)=IC1(1)					      ICSTR(1,NSTR)=IC1(1)
      ICSTR(2,NSTR)=IC1(2)					      ICSTR(2,NSTR)=IC1(2)
      ICSTR(3,NSTR)=IC2(1)					      ICSTR(3,NSTR)=IC2(1)
      ICSTR(4,NSTR)=IC2(2)					      ICSTR(4,NSTR)=IC2(2)
      PSTR(1,NSTR)=PX						      PSTR(1,NSTR)=PX
      PSTR(2,NSTR)=PY						      PSTR(2,NSTR)=PY
      PSTR(3,NSTR)=PZ						      PSTR(3,NSTR)=PZ
      PSTR(4,NSTR)=E						      PSTR(4,NSTR)=E
      PSTR(5,NSTR)=AM						      PSTR(5,NSTR)=AM
      ROTSTR(1,NSTR)=P1(1)					      ROTSTR(1,NSTR)=P1(1)
      ROTSTR(2,NSTR)=P1(2)					      ROTSTR(2,NSTR)=P1(2)
      ROTSTR(3,NSTR)=P1(3)					      ROTSTR(3,NSTR)=P1(3)
      IF ( P1(1) .EQ. 0.  .AND.  P1(2) .EQ. 0.  .AND.  P1(3) 	      IF ( P1(1) .EQ. 0.  .AND.  P1(2) .EQ. 0.  .AND.  P1(3) 
     *                                                ROTSTR(	     *                                                ROTSTR(
      XORSTR(1,NSTR)=COORD(1,KOLZ)				      XORSTR(1,NSTR)=COORD(1,KOLZ)
      XORSTR(2,NSTR)=COORD(2,KOLZ)				      XORSTR(2,NSTR)=COORD(2,KOLZ)
      XORSTR(3,NSTR)=COORD(3,KOLZ)				      XORSTR(3,NSTR)=COORD(3,KOLZ)
      XORSTR(4,NSTR)=COORD(4,KOLZ)				      XORSTR(4,NSTR)=COORD(4,KOLZ)
      IORSTR(NSTR)=-KOLZ					      IORSTR(NSTR)=-KOLZ
      AMSAC=AMSAC+AM						      AMSAC=AMSAC+AM
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        IF     ( ISPLT .GT. 0 ) THEN				        IF     ( ISPLT .GT. 0 ) THEN
          WRITE(IFCH,*)'SPLIT OFF STRING:'			          WRITE(IFCH,*)'SPLIT OFF STRING:'
        ELSEIF ( ISPLT0 .GT. 0 ) THEN				        ELSEIF ( ISPLT0 .GT. 0 ) THEN
          WRITE(IFCH,*)'REMAINDER:'				          WRITE(IFCH,*)'REMAINDER:'
        ELSEIF ( LEAD .EQ. 1 ) THEN				        ELSEIF ( LEAD .EQ. 1 ) THEN
          WRITE(IFCH,*)'ORDINARY BARYONIC STRING:'		          WRITE(IFCH,*)'ORDINARY BARYONIC STRING:'
        ELSE							        ELSE
          WRITE(IFCH,*)'ORDINARY MESONIC STRING:'		          WRITE(IFCH,*)'ORDINARY MESONIC STRING:'
        ENDIF							        ENDIF
        WRITE(IFCH,106)NSTR,(ICSTR(K,NSTR)/100,K=1,4)		        WRITE(IFCH,106)NSTR,(ICSTR(K,NSTR)/100,K=1,4)
     *                      ,(PSTR(I,NSTR),I=3,5)		     *                      ,(PSTR(I,NSTR),I=3,5)
106     FORMAT(/' /CSTR/',I4,3X,4I5,2X,3(E10.3)/)		106     FORMAT(/' /CSTR/',I4,3X,4I5,2X,3(E10.3)/)
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HDECMP(BAR,SIL,SIX)				      SUBROUTINE HDECMP(BAR,SIL,SIX)

C------------------------------------------------------------	C------------------------------------------------------------
C  DECOMPOSES BAR INTO SIL,SIX					C  DECOMPOSES BAR INTO SIL,SIX
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      REAL BAR(NSI,NHA),SIL(NSI),SIX(NSI,NSIX)			      REAL BAR(NSI,NHA),SIL(NSI),SIX(NSI,NSIX)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 1 N=1,NSI						      DO 1 N=1,NSI
        SIL(N)=BAR(N,2)						        SIL(N)=BAR(N,2)
 1    CONTINUE							 1    CONTINUE
      DO 3 M=1,NSIX						      DO 3 M=1,NSIX
        SIXSQR=0.						        SIXSQR=0.
        DO 2 N=1,NSI						        DO 2 N=1,NSI
          SIX(N,M)=BAR(N,2+M)					          SIX(N,M)=BAR(N,2+M)
          SIXSQR=SIXSQR+SIX(N,M)**2				          SIXSQR=SIXSQR+SIX(N,M)**2
 2      CONTINUE						 2      CONTINUE
        IF ( SIXSQR .LE. 1.E-5 ) RETURN				        IF ( SIXSQR .LE. 1.E-5 ) RETURN
 3    CONTINUE							 3    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE HRESCL(J1,J2,PSUM,IFAIL)			      SUBROUTINE HRESCL(J1,J2,PSUM,IFAIL)

C------------------------------------------------------------	C------------------------------------------------------------
C  RESCALES STRING MOMENTA OF STRINGS J1-J2 TO HAVE TOTAL MOM	C  RESCALES STRING MOMENTA OF STRINGS J1-J2 TO HAVE TOTAL MOM
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION PADD(5),PP(5),PPSUM(5)			      DOUBLE PRECISION PADD(5),PP(5),PPSUM(5)
      REAL             PSUM(5)					      REAL             PSUM(5)
      DATA             ERRLIM /.001/				      DATA             ERRLIM /.001/
C------------------------------------------------------------	C------------------------------------------------------------
      IFAIL=1							      IFAIL=1

      PPSUM(1)=PSUM(1)						      PPSUM(1)=PSUM(1)
      PPSUM(2)=PSUM(2)						      PPSUM(2)=PSUM(2)
      PPSUM(3)=PSUM(3)						      PPSUM(3)=PSUM(3)
      PPSUM(4)=PSUM(4)						      PPSUM(4)=PSUM(4)
      PPSUM(5)=PSUM(5)						      PPSUM(5)=PSUM(5)

      IF ( J1 .GE. J2 ) THEN					      IF ( J1 .GE. J2 ) THEN
        CALL UTSTOP('HRESCL: J1 .GE. J2                      	        CALL UTSTOP('HRESCL: J1 .GE. J2                      
      ENDIF							      ENDIF

      PADD(1)=0.D0						      PADD(1)=0.D0
      PADD(2)=0.D0						      PADD(2)=0.D0
      PADD(3)=0.D0						      PADD(3)=0.D0
      PADD(4)=0.D0						      PADD(4)=0.D0
      PADD(5)=0.D0						      PADD(5)=0.D0
      DO 110 J=J1,J2						      DO 110 J=J1,J2
        PADD(1)=PADD(1)+PSTR(1,J)				        PADD(1)=PADD(1)+PSTR(1,J)
        PADD(2)=PADD(2)+PSTR(2,J)				        PADD(2)=PADD(2)+PSTR(2,J)
        PADD(3)=PADD(3)+PSTR(3,J)				        PADD(3)=PADD(3)+PSTR(3,J)
        PADD(4)=PADD(4)+PSTR(4,J)				        PADD(4)=PADD(4)+PSTR(4,J)
        PADD(5)=PADD(5)+PSTR(5,J)				        PADD(5)=PADD(5)+PSTR(5,J)
110   CONTINUE							110   CONTINUE
      IF ( PADD(5) .GE. PPSUM(5) ) THEN				      IF ( PADD(5) .GE. PPSUM(5) ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('HRESCL')					          CALL UTMSG('HRESCL')
          WRITE(IFCH,*)'*****  SUM OF STR MASSES .GE. PSUM(5)	          WRITE(IFCH,*)'*****  SUM OF STR MASSES .GE. PSUM(5)
          DO 1 J=J1,J2						          DO 1 J=J1,J2
            WRITE(IFCH,109)J,(ICSTR(K,J)/100,K=1,4)		            WRITE(IFCH,109)J,(ICSTR(K,J)/100,K=1,4)
     *                       ,(PSTR(L,J),L=3,5)			     *                       ,(PSTR(L,J),L=3,5)
109         FORMAT(' /CSTR/',I4,3X,4I5,2X,3(E10.3))		109         FORMAT(' /CSTR/',I4,3X,4I5,2X,3(E10.3))
 1        CONTINUE						 1        CONTINUE
          WRITE(IFCH,*)'PPSUM(345):',(SNGL(PPSUM(K)),K=3,5)	          WRITE(IFCH,*)'PPSUM(345):',(SNGL(PPSUM(K)),K=3,5)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        RETURN							        RETURN
      ENDIF							      ENDIF
      PADD(5)=PADD(4)**2-PADD(1)**2-PADD(2)**2-PADD(3)**2	      PADD(5)=PADD(4)**2-PADD(1)**2-PADD(2)**2-PADD(3)**2
      IF ( PADD(5) .LE. 0.D0 ) THEN				      IF ( PADD(5) .LE. 0.D0 ) THEN
        DO 2 J=J1,J2						        DO 2 J=J1,J2
          WRITE(IFCH,108)J,(PSTR(L,J),L=1,5)			          WRITE(IFCH,108)J,(PSTR(L,J),L=1,5)
108       FORMAT(' /CSTR/',I4,2X,5(E10.3))			108       FORMAT(' /CSTR/',I4,2X,5(E10.3))
 2      CONTINUE						 2      CONTINUE
        CALL UTSTOP('HRESCL: MASS**2 OF STRING-SUM NEGATIVE  	        CALL UTSTOP('HRESCL: MASS**2 OF STRING-SUM NEGATIVE  
      ENDIF							      ENDIF
      PADD(5)=SQRT(PADD(5))					      PADD(5)=SQRT(PADD(5))

C  BOOST STRINGS TO REST					C  BOOST STRINGS TO REST
C  ---------------------					C  ---------------------
      DO 115 J=J1,J2						      DO 115 J=J1,J2
        PP(1)=PSTR(1,J)						        PP(1)=PSTR(1,J)
        PP(2)=PSTR(2,J)						        PP(2)=PSTR(2,J)
        PP(3)=PSTR(3,J)						        PP(3)=PSTR(3,J)
        PP(4)=PSTR(4,J)						        PP(4)=PSTR(4,J)
        CALL UTLOB2(1,PADD(1),PADD(2),PADD(3),PADD(4),PADD(5)	        CALL UTLOB2(1,PADD(1),PADD(2),PADD(3),PADD(4),PADD(5)
     *                ,PP(1),PP(2),PP(3),PP(4))			     *                ,PP(1),PP(2),PP(3),PP(4))
        PSTR(1,J)=PP(1)						        PSTR(1,J)=PP(1)
        PSTR(2,J)=PP(2)						        PSTR(2,J)=PP(2)
        PSTR(3,J)=PP(3)						        PSTR(3,J)=PP(3)
        PSTR(4,J)=PP(4)						        PSTR(4,J)=PP(4)
115   CONTINUE							115   CONTINUE

C  RESCALE MOMENTA IN REST FRAME				C  RESCALE MOMENTA IN REST FRAME
C  -----------------------------				C  -----------------------------
      SCAL=1.							      SCAL=1.
      DO 301 IPASS=1,200					      DO 301 IPASS=1,200
        SUM=0.							        SUM=0.
        DO 310 J=J1,J2						        DO 310 J=J1,J2
          PSTR(1,J)=SCAL*PSTR(1,J)				          PSTR(1,J)=SCAL*PSTR(1,J)
          PSTR(2,J)=SCAL*PSTR(2,J)				          PSTR(2,J)=SCAL*PSTR(2,J)
          PSTR(3,J)=SCAL*PSTR(3,J)				          PSTR(3,J)=SCAL*PSTR(3,J)
          PSTR(4,J)=SQRT(PSTR(1,J)**2+PSTR(2,J)**2+PSTR(3,J)*	          PSTR(4,J)=SQRT(PSTR(1,J)**2+PSTR(2,J)**2+PSTR(3,J)*
     *                  +PSTR(5,J)**2)				     *                  +PSTR(5,J)**2)
          SUM=SUM+PSTR(4,J)					          SUM=SUM+PSTR(4,J)
310     CONTINUE						310     CONTINUE
        SCAL=PSUM(5)/SUM					        SCAL=PSUM(5)/SUM
        IF ( ABS(SCAL-1.) .LE. ERRLIM ) GOTO 300		        IF ( ABS(SCAL-1.) .LE. ERRLIM ) GOTO 300
301   CONTINUE							301   CONTINUE
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('HRESCL')					        CALL UTMSG('HRESCL')
        WRITE(IFCH,*)'*****  SCAL=',SCAL			        WRITE(IFCH,*)'*****  SCAL=',SCAL
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
300   CONTINUE							300   CONTINUE

C  BOOST BACK WITH PPSUM					C  BOOST BACK WITH PPSUM
C  ---------------------					C  ---------------------
      DO 315 J=J1,J2						      DO 315 J=J1,J2
        PP(1)=PSTR(1,J)						        PP(1)=PSTR(1,J)
        PP(2)=PSTR(2,J)						        PP(2)=PSTR(2,J)
        PP(3)=PSTR(3,J)						        PP(3)=PSTR(3,J)
        PP(4)=PSTR(4,J)						        PP(4)=PSTR(4,J)
        CALL UTLOB2(-1,PPSUM(1),PPSUM(2),PPSUM(3),PPSUM(4),PP	        CALL UTLOB2(-1,PPSUM(1),PPSUM(2),PPSUM(3),PPSUM(4),PP
     *             ,PP(1),PP(2),PP(3),PP(4))			     *             ,PP(1),PP(2),PP(3),PP(4))
        PSTR(1,J)=PP(1)						        PSTR(1,J)=PP(1)
        PSTR(2,J)=PP(2)						        PSTR(2,J)=PP(2)
        PSTR(3,J)=PP(3)						        PSTR(3,J)=PP(3)
        PSTR(4,J)=PP(4)						        PSTR(4,J)=PP(4)
315   CONTINUE							315   CONTINUE

      IFAIL=0							      IFAIL=0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDCOMJ(JC)					      SUBROUTINE IDCOMJ(JC)

C------------------------------------------------------------	C------------------------------------------------------------
C  COMPACTIFIES JC						C  COMPACTIFIES JC
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER IC(2),ICX(2),JC(NFLAV,2)				      INTEGER IC(2),ICX(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      CALL IDCOMP(IC,ICX,JC,2)					      CALL IDCOMP(IC,ICX,JC,2)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDCOMK(IC)					      SUBROUTINE IDCOMK(IC)

C------------------------------------------------------------	C------------------------------------------------------------
C  COMPACTIFIES IC						C  COMPACTIFIES IC
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER IC(2),ICX(2),JC(NFLAV,2)				      INTEGER IC(2),ICX(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      CALL IDCOMP(IC,ICX,JC,1)					      CALL IDCOMP(IC,ICX,JC,1)
      IC(1)=ICX(1)						      IC(1)=ICX(1)
      IC(2)=ICX(2)						      IC(2)=ICX(2)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDCOMP(IC,ICX,JC,IM)				      SUBROUTINE IDCOMP(IC,ICX,JC,IM)

C------------------------------------------------------------	C------------------------------------------------------------
C  COMPACTIFIES IC,JC						C  COMPACTIFIES IC,JC
C  INPUT: IM (1 OR 2)						C  INPUT: IM (1 OR 2)
C         IC (IF IM=1)						C         IC (IF IM=1)
C         JC (IF IM=2)						C         JC (IF IM=2)
C  OUTPUT: ICX (IF IM=1)					C  OUTPUT: ICX (IF IM=1)
C          JC							C          JC
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER IC(2),ICX(2),JC(NFLAV,2)				      INTEGER IC(2),ICX(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( IM .EQ. 1 ) CALL IDDECO(IC,JC)			      IF ( IM .EQ. 1 ) CALL IDDECO(IC,JC)
      ICX(1)=0							      ICX(1)=0
      ICX(2)=0							      ICX(2)=0
      DO 2 N=1,NFLAV						      DO 2 N=1,NFLAV
        IF ( JC(N,1) .NE. 0  .OR. JC(N,2) .NE. 0 ) GOTO 1	        IF ( JC(N,1) .NE. 0  .OR. JC(N,2) .NE. 0 ) GOTO 1
 2    CONTINUE							 2    CONTINUE
      RETURN							      RETURN
 1    L=0							 1    L=0
      DO 3 N=1,NFLAV						      DO 3 N=1,NFLAV
        K=MIN(JC(N,1),JC(N,2))					        K=MIN(JC(N,1),JC(N,2))
        JC(N,1)=JC(N,1)-K					        JC(N,1)=JC(N,1)-K
        JC(N,2)=JC(N,2)-K					        JC(N,2)=JC(N,2)-K
        IF ( JC(N,1) .LT. 0  .OR.  JC(N,2) .LT. 0 ) THEN	        IF ( JC(N,1) .LT. 0  .OR.  JC(N,2) .LT. 0 ) THEN
          CALL UTSTOP('IDCOMP: JC NEGATIVE                   	          CALL UTSTOP('IDCOMP: JC NEGATIVE                   
        ENDIF							        ENDIF
        L=L+JC(N,1)+JC(N,2)					        L=L+JC(N,1)+JC(N,2)
 3    CONTINUE							 3    CONTINUE
      IF ( L .EQ. 0 ) THEN					      IF ( L .EQ. 0 ) THEN
        JC(1,1)=1						        JC(1,1)=1
        JC(1,2)=1						        JC(1,2)=1
      ENDIF							      ENDIF
      IF ( IM .EQ. 1 ) THEN					      IF ( IM .EQ. 1 ) THEN
        CALL IDENCO(JC,ICX,IRETEN)				        CALL IDENCO(JC,ICX,IRETEN)
        IF ( IRETEN .EQ. 1 ) THEN				        IF ( IRETEN .EQ. 1 ) THEN
          CALL UTSTOP('IDCOMP: IDENCO RET CODE = 1           	          CALL UTSTOP('IDCOMP: IDENCO RET CODE = 1           
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDDECO(IC,JC)					      SUBROUTINE IDDECO(IC,JC)

C------------------------------------------------------------	C------------------------------------------------------------
C  DECODE PARTICLE ID						C  DECODE PARTICLE ID
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER IC(2),JC(NFLAV,2)					      INTEGER IC(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      ICI=IC(1)							      ICI=IC(1)
      JC(6,1)=MOD(ICI,10)					      JC(6,1)=MOD(ICI,10)
      JC(5,1)=MOD(ICI/10,10)					      JC(5,1)=MOD(ICI/10,10)
      JC(4,1)=MOD(ICI/100,10)					      JC(4,1)=MOD(ICI/100,10)
      JC(3,1)=MOD(ICI/1000,10)					      JC(3,1)=MOD(ICI/1000,10)
      JC(2,1)=MOD(ICI/10000,10)					      JC(2,1)=MOD(ICI/10000,10)
      JC(1,1)=MOD(ICI/100000,10)				      JC(1,1)=MOD(ICI/100000,10)
      ICI=IC(2)							      ICI=IC(2)
      JC(6,2)=MOD(ICI,10)					      JC(6,2)=MOD(ICI,10)
      JC(5,2)=MOD(ICI/10,10)					      JC(5,2)=MOD(ICI/10,10)
      JC(4,2)=MOD(ICI/100,10)					      JC(4,2)=MOD(ICI/100,10)
      JC(3,2)=MOD(ICI/1000,10)					      JC(3,2)=MOD(ICI/1000,10)
      JC(2,2)=MOD(ICI/10000,10)					      JC(2,2)=MOD(ICI/10000,10)
      JC(1,2)=MOD(ICI/100000,10)				      JC(1,2)=MOD(ICI/100000,10)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDENCO(JC,IC,IRETEN)				      SUBROUTINE IDENCO(JC,IC,IRETEN)

C------------------------------------------------------------	C------------------------------------------------------------
C  ENCODE PARTICLE ID						C  ENCODE PARTICLE ID
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER IC(2),JC(NFLAV,2)					      INTEGER IC(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IRETEN=0							      IRETEN=0
      IC(1)=0							      IC(1)=0
      DO 20 I=1,NFLAV						      DO 20 I=1,NFLAV
        IF ( JC(I,1) .GE. 10 ) GOTO 22				        IF ( JC(I,1) .GE. 10 ) GOTO 22
        IC(1)=IC(1)+JC(I,1)*10**(NFLAV-I)			        IC(1)=IC(1)+JC(I,1)*10**(NFLAV-I)
20    CONTINUE							20    CONTINUE
      IC(2)=0							      IC(2)=0
      DO 21 I=1,NFLAV						      DO 21 I=1,NFLAV
        IF ( JC(I,2) .GE. 10 ) GOTO 22				        IF ( JC(I,2) .GE. 10 ) GOTO 22
        IC(2)=IC(2)+JC(I,2)*10**(NFLAV-I)			        IC(2)=IC(2)+JC(I,2)*10**(NFLAV-I)
21    CONTINUE							21    CONTINUE
      RETURN							      RETURN
22    IRETEN=1							22    IRETEN=1
      IC(1)=0							      IC(1)=0
      IC(2)=0							      IC(2)=0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDFLAV(ID,IFL1,IFL2,IFL3,JSPIN,INDEX)		      SUBROUTINE IDFLAV(ID,IFL1,IFL2,IFL3,JSPIN,INDEX)

C------------------------------------------------------------	C------------------------------------------------------------
C  UNPACKS THE IDENT CODE ID=+/-IJKL				C  UNPACKS THE IDENT CODE ID=+/-IJKL
C								C
C          MESONS--						C          MESONS--
C          I=0, J<=K, +/- IS SIGN FOR J				C          I=0, J<=K, +/- IS SIGN FOR J
C          ID=110 FOR PI0, ID=220 FOR ETA, ETC.			C          ID=110 FOR PI0, ID=220 FOR ETA, ETC.
C								C
C          BARYONS--						C          BARYONS--
C          I<=J<=K IN GENERAL					C          I<=J<=K IN GENERAL
C          J<I<K FOR SECOND STATE ANTISYMMETRIC IN (I,J), EG.	C          J<I<K FOR SECOND STATE ANTISYMMETRIC IN (I,J), EG.
C								C
C          OTHER--						C          OTHER--
C          ID=1,...,6 FOR QUARKS				C          ID=1,...,6 FOR QUARKS
C          ID=9 FOR GLUON					C          ID=9 FOR GLUON
C          ID=10 FOR PHOTON					C          ID=10 FOR PHOTON
C          ID=11,...,16 FOR LEPTONS				C          ID=11,...,16 FOR LEPTONS
C          ID=20 FOR KS, ID=-20 FOR KL				C          ID=20 FOR KS, ID=-20 FOR KL
C								C
C          I=21...26 FOR SCALAR QUARKS				C          I=21...26 FOR SCALAR QUARKS
C          I=29 FOR GLUINO					C          I=29 FOR GLUINO
C          I=30 FOR PHOTINO					C          I=30 FOR PHOTINO
C          I=31...36 FOR SCALAR LEPTONS				C          I=31...36 FOR SCALAR LEPTONS
C          I=39 FOR WINO					C          I=39 FOR WINO
C          I=40 FOR ZINO					C          I=40 FOR ZINO
C								C
C          ID=80 FOR W+						C          ID=80 FOR W+
C          ID=81,...,89 FOR HIGGS MESONS			C          ID=81,...,89 FOR HIGGS MESONS
C          ID=90 FOR Z0						C          ID=90 FOR Z0
C								C
C          DIQUARKS--						C          DIQUARKS--
C          ID=+/-IJ00, I<J FOR DIQUARK COMPOSED OF I,J.		C          ID=+/-IJ00, I<J FOR DIQUARK COMPOSED OF I,J.
C								C
C          INDEX IS A SEQUENCE NUMBER USED INTERNALLY		C          INDEX IS A SEQUENCE NUMBER USED INTERNALLY
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NMES=2)					      PARAMETER (NMES=2)
      PARAMETER (NQLEP=41)					      PARAMETER (NQLEP=41)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
C------------------------------------------------------------	C------------------------------------------------------------
      IDABS=ABS(ID)						      IDABS=ABS(ID)
      I=IDABS/1000						      I=IDABS/1000
      J1=IDABS-I*1000						      J1=IDABS-I*1000
      J = J1/100						      J = J1/100
      ISI = SIGN(1,ID)						      ISI = SIGN(1,ID)
      IF ( ID .NE. 0  .AND.  MOD(ID,100) .EQ. 0 ) GOTO 300	      IF ( ID .NE. 0  .AND.  MOD(ID,100) .EQ. 0 ) GOTO 300
      IF ( J .EQ. 0 ) GOTO 200					      IF ( J .EQ. 0 ) GOTO 200
      K1= J1 - J*100						      K1= J1 - J*100
      K = K1/10							      K = K1/10
      JSPIN= K1 - K*10						      JSPIN= K1 - K*10
      IF ( I .EQ. 0 ) GOTO 100					      IF ( I .EQ. 0 ) GOTO 100
C  BARYONS							C  BARYONS
C  ONLY X,Y BARYONS ARE QQX, QQY, Q=U,D,S.			C  ONLY X,Y BARYONS ARE QQX, QQY, Q=U,D,S.
      IFL1=ISI*I						      IFL1=ISI*I
      IFL2=ISI*J						      IFL2=ISI*J
      IFL3=ISI*K						      IFL3=ISI*K
      IF ( K .LE. 6 ) THEN					      IF ( K .LE. 6 ) THEN
        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+(K-1)*K*(2*K-1)/6	        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+(K-1)*K*(2*K-1)/6
     *                        +109*JSPIN+36*NMES+NQLEP+11	     *                        +109*JSPIN+36*NMES+NQLEP+11
      ELSE							      ELSE
        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+9*(K-7)+91		        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+9*(K-7)+91
     *                        +109*JSPIN+36*NMES+NQLEP+11	     *                        +109*JSPIN+36*NMES+NQLEP+11
      ENDIF							      ENDIF
      RETURN							      RETURN
C  MESONS							C  MESONS
100   CONTINUE							100   CONTINUE
      IFL1=0							      IFL1=0
      IFL2=ISI*J						      IFL2=ISI*J
      IFL3=ISI*K						      IFL3=ISI*K
      INDEX=J+K*(K-1)/2+36*JSPIN+NQLEP				      INDEX=J+K*(K-1)/2+36*JSPIN+NQLEP
      INDEX=INDEX+11						      INDEX=INDEX+11
      RETURN							      RETURN
C  QUARKS, LEPTONS, ETC						C  QUARKS, LEPTONS, ETC
200   CONTINUE							200   CONTINUE
      IFL1=0							      IFL1=0
      IFL2=0							      IFL2=0
      IFL3=0							      IFL3=0
      JSPIN=0							      JSPIN=0
      INDEX=IDABS						      INDEX=IDABS
      IF ( IDABS .LT. 20 ) RETURN				      IF ( IDABS .LT. 20 ) RETURN
C  DEFINE INDEX=20 FOR KS, INDEX=21 FOR KL			C  DEFINE INDEX=20 FOR KS, INDEX=21 FOR KL
      INDEX=IDABS+1						      INDEX=IDABS+1
      IF ( ID .EQ. 20 ) INDEX=20				      IF ( ID .EQ. 20 ) INDEX=20
C  INDEX=NQLEP+1,...,NQLEP+11 FOR W+, HIGGS, Z0			C  INDEX=NQLEP+1,...,NQLEP+11 FOR W+, HIGGS, Z0
      IF ( IDABS .LT. 80 ) RETURN				      IF ( IDABS .LT. 80 ) RETURN
      INDEX=NQLEP+IDABS-79					      INDEX=NQLEP+IDABS-79
      RETURN							      RETURN
300   CONTINUE							300   CONTINUE
      IFL1=ISI*I						      IFL1=ISI*I
      IFL2=ISI*J						      IFL2=ISI*J
      IFL3=0							      IFL3=0
      JSPIN=0							      JSPIN=0
      INDEX=0							      INDEX=0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION IDLABL(ID)					      FUNCTION IDLABL(ID)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS THE CHARACTER*8 LABEL FOR THE PARTICLE ID		C  RETURNS THE CHARACTER*8 LABEL FOR THE PARTICLE ID
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NMES=2)					      PARAMETER (NMES=2)
      PARAMETER (NQLEP=41)					      PARAMETER (NQLEP=41)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP

      CHARACTER*8 IDLABL,LABAR0(109),LABAR1(109),LAQQ(21),LBA	      CHARACTER*8 IDLABL,LABAR0(109),LABAR1(109),LAQQ(21),LBA
     *           ,LBAR1(109),LLEP(104),LMES0(64),LMES1(64),LQ	     *           ,LBAR1(109),LLEP(104),LMES0(64),LMES1(64),LQ

C          DIQUARK LABELS					C          DIQUARK LABELS
      DATA LQQ/							      DATA LQQ/
     1'UU0. ','UD0. ','DD0. ','US0. ','DS0. ','SS0. ','UC0. '	     1'UU0. ','UD0. ','DD0. ','US0. ','DS0. ','SS0. ','UC0. '
     2'SC0. ','CC0. ','UB0. ','DB0. ','SB0. ','CB0. ','BB0. '	     2'SC0. ','CC0. ','UB0. ','DB0. ','SB0. ','CB0. ','BB0. '
     3'DT0. ','ST0. ','CT0. ','BT0. ','TT0. '/			     3'DT0. ','ST0. ','CT0. ','BT0. ','TT0. '/
      DATA LAQQ/						      DATA LAQQ/
     1'AUU0.','AUD0.','ADD0.','AUS0.','ADS0.','ASS0.','AUC0.'	     1'AUU0.','AUD0.','ADD0.','AUS0.','ADS0.','ASS0.','AUC0.'
     2'ASC0.','ACC0.','AUB0.','ADB0.','ASB0.','ACB0.','ABB0.'	     2'ASC0.','ACC0.','AUB0.','ADB0.','ASB0.','ACB0.','ABB0.'
     3'ADT0.','AST0.','ACT0.','ABT0.','ATT0.'/			     3'ADT0.','AST0.','ACT0.','ABT0.','ATT0.'/
C          QUARK AND LEPTON LABELS				C          QUARK AND LEPTON LABELS
      DATA LLEP/						      DATA LLEP/
     *'     ','UP   ','UB   ','DN   ','DB   ','ST   ','SB   '	     *'     ','UP   ','UB   ','DN   ','DB   ','ST   ','SB   '
     *'CB   ','BT   ','BB   ','TP   ','TB   ','Y    ','YB   '	     *'CB   ','BT   ','BB   ','TP   ','TB   ','Y    ','YB   '
     *'XB   ','GL   ','ERR  ','GM   ','ERR  ','NUE  ','ANUE '	     *'XB   ','GL   ','ERR  ','GM   ','ERR  ','NUE  ','ANUE '
     *'E+   ','NUM  ','ANUM ','MU-  ','MU+  ','NUT  ','ANUT '	     *'E+   ','NUM  ','ANUM ','MU-  ','MU+  ','NUT  ','ANUT '
     *'TAU+ ','ERR  ','ERR  ','ERR  ','ERR  ','ERR  ','ERR  '	     *'TAU+ ','ERR  ','ERR  ','ERR  ','ERR  ','ERR  ','ERR  '
     *'ERR  ','ERR  ','KL   ',					     *'ERR  ','ERR  ','KL   ',
     *'UPSS ','UBSS ','DNSS ','DBSS ','STSS ','SBSS ','CHSS '	     *'UPSS ','UBSS ','DNSS ','DBSS ','STSS ','SBSS ','CHSS '
     *'BTSS ','BBSS ','TPSS ','TBSS ','ERR  ','ERR  ','ERR  '	     *'BTSS ','BBSS ','TPSS ','TBSS ','ERR  ','ERR  ','ERR  '
     *'GLSS ','ERR  ','GMSS ','ERR  ','NESS ','ANESS','E-SS '	     *'GLSS ','ERR  ','GMSS ','ERR  ','NESS ','ANESS','E-SS '
     *'NMSS ','ANMSS','MU-SS','MU+SS','NTSS ','ANTSS','T-SS '	     *'NMSS ','ANMSS','MU-SS','MU+SS','NTSS ','ANTSS','T-SS '
     *'ERR  ','ERR  ','ERR  ','ERR  ','W+SS ','W-SS ','Z0SS '	     *'ERR  ','ERR  ','ERR  ','ERR  ','W+SS ','W-SS ','Z0SS '
     *'W+   ','W-   ','H10  ','AH10 ','H20  ','AH20 ','H30  '	     *'W+   ','W-   ','H10  ','AH10 ','H20  ','AH20 ','H30  '
     *'H4+  ','H4-  ','H5+  ','H5-  ','H6+  ','H6-  ','H7++ '	     *'H4+  ','H4-  ','H5+  ','H5-  ','H6+  ','H6-  ','H7++ '
     *'H8++ ','H8-- ','H9++ ','H9-- ','Z0   '/			     *'H8++ ','H8-- ','H9++ ','H9-- ','Z0   '/
C          0- MESON LABELS					C          0- MESON LABELS
      DATA LMES0/						      DATA LMES0/
     1'PI0  ','PI+  ','ETA  ','PI-  ','K+   ','K0   ','ETAP '	     1'PI0  ','PI+  ','ETA  ','PI-  ','K+   ','K0   ','ETAP '
     2'K-   ','AD0  ','D-   ','F-   ','ETAC ','F+   ','D+   '	     2'K-   ','AD0  ','D-   ','F-   ','ETAC ','F+   ','D+   '
     2'UB.  ','DB.  ','SB.  ','CB.  ','BB.  ','BC.  ','BS.  '	     2'UB.  ','DB.  ','SB.  ','CB.  ','BB.  ','BC.  ','BS.  '
     3'BU.  ','UT.  ','DT.  ','ST.  ','CT.  ','BT.  ','TT.  '	     3'BU.  ','UT.  ','DT.  ','ST.  ','CT.  ','BT.  ','TT.  '
     4'TC.  ','TS.  ','TD.  ','TU.  ','UY.  ','DY.  ','SY.  '	     4'TC.  ','TS.  ','TD.  ','TU.  ','UY.  ','DY.  ','SY.  '
     5'BY.  ','TY.  ','YY.  ','YT.  ','YB.  ','YC.  ','YS.  '	     5'BY.  ','TY.  ','YY.  ','YT.  ','YB.  ','YC.  ','YS.  '
     6'YU.  ','UX.  ','DX.  ','SX.  ','CX.  ','BX.  ','TX.  '	     6'YU.  ','UX.  ','DX.  ','SX.  ','CX.  ','BX.  ','TX.  '
     7'XX.  ','XY.  ','XT.  ','XB.  ','XC.  ','XS.  ','XD.  '	     7'XX.  ','XY.  ','XT.  ','XB.  ','XC.  ','XS.  ','XD.  '
C          1- MESON LABELS					C          1- MESON LABELS
      DATA LMES1/						      DATA LMES1/
     1'RHO0 ','RHO+ ','OMEG ','RHO- ','K*+  ','K*0  ','PHI  '	     1'RHO0 ','RHO+ ','OMEG ','RHO- ','K*+  ','K*0  ','PHI  '
     2'K*-  ','AD*0 ','D*-  ','F*-  ','JPSI ','F*+  ','D*+  '	     2'K*-  ','AD*0 ','D*-  ','F*-  ','JPSI ','F*+  ','D*+  '
     3'UB*  ','DB*  ','SB*  ','CB*  ','UPSL ','BC*  ','BS*  '	     3'UB*  ','DB*  ','SB*  ','CB*  ','UPSL ','BC*  ','BS*  '
     4'BU*  ','UT*  ','DT*  ','ST*  ','CT*  ','BT*  ','TT*  '	     4'BU*  ','UT*  ','DT*  ','ST*  ','CT*  ','BT*  ','TT*  '
     5'TC*  ','TS*  ','TD*  ','TU*  ','UY*  ','DY*  ','SY*  '	     5'TC*  ','TS*  ','TD*  ','TU*  ','UY*  ','DY*  ','SY*  '
     6'BY*  ','TY*  ','YY*  ','YT*  ','YB*  ','YC*  ','YS*  '	     6'BY*  ','TY*  ','YY*  ','YT*  ','YB*  ','YC*  ','YS*  '
     7'YU*  ','UX*  ','DX*  ','SX*  ','CX*  ','BX*  ','TX*  '	     7'YU*  ','UX*  ','DX*  ','SX*  ','CX*  ','BX*  ','TX*  '
     8'XX*  ','XY*  ','XT*  ','XB*  ','XC*  ','XS*  ','XD*  '	     8'XX*  ','XY*  ','XT*  ','XB*  ','XC*  ','XS*  ','XD*  '
C          1/2+ BARYON LABELS					C          1/2+ BARYON LABELS
      DATA LBAR0/						      DATA LBAR0/
     1'ERR  ','P    ','N    ','ERR  ','ERR  ','S+   ','S0   '	     1'ERR  ','P    ','N    ','ERR  ','ERR  ','S+   ','S0   '
     2'L    ','XI0  ','XI-  ','ERR  ','ERR  ','ERR  ','SC++ '	     2'L    ','XI0  ','XI-  ','ERR  ','ERR  ','ERR  ','SC++ '
     3'SC0  ','LC+  ','USC. ','DSC. ','SSC. ','SDC. ','SUC. '	     3'SC0  ','LC+  ','USC. ','DSC. ','SSC. ','SDC. ','SUC. '
     4'DCC. ','SCC. ','ERR  ','ERR  ','ERR  ','ERR  ','UUB. '	     4'DCC. ','SCC. ','ERR  ','ERR  ','ERR  ','ERR  ','UUB. '
     5'DDB. ','DUB. ','USB. ','DSB. ','SSB. ','SDB. ','SUB. '	     5'DDB. ','DUB. ','USB. ','DSB. ','SSB. ','SDB. ','SUB. '
     6'DCB. ','SCB. ','CCB. ','CSB. ','CDB. ','CUB. ','UBB. '	     6'DCB. ','SCB. ','CCB. ','CSB. ','CDB. ','CUB. ','UBB. '
     7'SBB. ','CBB. ','ERR  ','ERR  ','ERR  ','ERR  ','ERR  '	     7'SBB. ','CBB. ','ERR  ','ERR  ','ERR  ','ERR  ','ERR  '
     8'UDT. ','DDT. ','DUT. ','UST. ','DST. ','SST. ','SDT. '	     8'UDT. ','DDT. ','DUT. ','UST. ','DST. ','SST. ','SDT. '
     9'UCT. ','DCT. ','SCT. ','CCT. ','CST. ','CDT. ','CUT. '	     9'UCT. ','DCT. ','SCT. ','CCT. ','CST. ','CDT. ','CUT. '
     1'DBT. ','SBT. ','CBT. ','BBT. ','BCT. ','BST. ','BDT. '	     1'DBT. ','SBT. ','CBT. ','BBT. ','BCT. ','BST. ','BDT. '
     2'UTT. ','DTT. ','STT. ','CTT. ','BTT. ','ERR  ','ERR  '	     2'UTT. ','DTT. ','STT. ','CTT. ','BTT. ','ERR  ','ERR  '
     3'ERR  ','ERR  ','ERR  ','UUY. ','UDY. ','DDY. ','DUY. '	     3'ERR  ','ERR  ','ERR  ','UUY. ','UDY. ','DDY. ','DUY. '
     4'DSY. ','SSY. ','SDY. ','SUY. ','UUX. ','UDX. ','DDX. '	     4'DSY. ','SSY. ','SDY. ','SUY. ','UUX. ','UDX. ','DDX. '
     5'USX. ','DSX. ','SSX. ','SDX. ','SUX. '/			     5'USX. ','DSX. ','SSX. ','SDX. ','SUX. '/
      DATA LABAR0/						      DATA LABAR0/
     1'ERR  ','AP   ','AN   ','ERR  ','ERR  ','AS-  ','AS0  '	     1'ERR  ','AP   ','AN   ','ERR  ','ERR  ','AS-  ','AS0  '
     2'AL   ','AXI0 ','AXI+ ','ERR  ','ERR  ','ERR  ','ASC--'	     2'AL   ','AXI0 ','AXI+ ','ERR  ','ERR  ','ERR  ','ASC--'
     3'ASC0 ','ALC- ','AUSC.','ADSC.','ASSC.','ASDC.','ASUC.'	     3'ASC0 ','ALC- ','AUSC.','ADSC.','ASSC.','ASDC.','ASUC.'
     4'ADCC.','ASCC.','ERR  ','ERR  ','ERR  ','ERR  ','AUUB.'	     4'ADCC.','ASCC.','ERR  ','ERR  ','ERR  ','ERR  ','AUUB.'
     5'ADDB.','ADUB.','AUSB.','ADSB.','ASSB.','ASDB.','ASUB.'	     5'ADDB.','ADUB.','AUSB.','ADSB.','ASSB.','ASDB.','ASUB.'
     6'ADCB.','ASCB.','ACCB.','ACSB.','ACDB.','ACUB.','AUBB.'	     6'ADCB.','ASCB.','ACCB.','ACSB.','ACDB.','ACUB.','AUBB.'
     7'ASBB.','ACBB.','ERR  ','ERR  ','ERR  ','ERR  ','ERR  '	     7'ASBB.','ACBB.','ERR  ','ERR  ','ERR  ','ERR  ','ERR  '
     8'AUDT.','ADDT.','ADUT.','AUST.','ADST.','ASST.','ASDT.'	     8'AUDT.','ADDT.','ADUT.','AUST.','ADST.','ASST.','ASDT.'
     9'AUCT.','ADCT.','ASCT.','ACCT.','ACST.','ACDT.','ACUT.'	     9'AUCT.','ADCT.','ASCT.','ACCT.','ACST.','ACDT.','ACUT.'
     1'ADBT.','ASBT.','ACBT.','ABBT.','ABCT.','ABST.','ABDT.'	     1'ADBT.','ASBT.','ACBT.','ABBT.','ABCT.','ABST.','ABDT.'
     2'AUTT.','ADTT.','ASTT.','ACTT.','ABTT.','ERR  ','ERR  '	     2'AUTT.','ADTT.','ASTT.','ACTT.','ABTT.','ERR  ','ERR  '
     3'ERR  ','ERR  ','ERR  ','AUUY.','AUDY.','ADDY.','ADUY.'	     3'ERR  ','ERR  ','ERR  ','AUUY.','AUDY.','ADDY.','ADUY.'
     4'ADSY.','ASSY.','ASDY.','ASUY.','AUUX.','AUDX.','ADDX.'	     4'ADSY.','ASSY.','ASDY.','ASUY.','AUUX.','AUDX.','ADDX.'
     5'AUSX.','ADSX.','ASSX.','ASDX.','ASUX.'/			     5'AUSX.','ADSX.','ASSX.','ASDX.','ASUX.'/
C          3/2+ BARYON LABELS					C          3/2+ BARYON LABELS
      DATA LBAR1/						      DATA LBAR1/
     1'DL++ ','DL+  ','DL0  ','DL-  ','ERR  ','S*+  ','S*0  '	     1'DL++ ','DL+  ','DL0  ','DL-  ','ERR  ','S*+  ','S*0  '
     2'ERR  ','XI*0 ','XI*- ','OM-  ','ERR  ','ERR  ','UUC* '	     2'ERR  ','XI*0 ','XI*- ','OM-  ','ERR  ','ERR  ','UUC* '
     3'DDC* ','ERR  ','USC* ','DSC* ','SSC* ','ERR  ','ERR  '	     3'DDC* ','ERR  ','USC* ','DSC* ','SSC* ','ERR  ','ERR  '
     4'DCC* ','SCC* ','CCC* ','ERR  ','ERR  ','ERR  ','UUB* '	     4'DCC* ','SCC* ','CCC* ','ERR  ','ERR  ','ERR  ','UUB* '
     5'DDB* ','ERR  ','USB* ','DSB* ','SSB* ','ERR  ','ERR  '	     5'DDB* ','ERR  ','USB* ','DSB* ','SSB* ','ERR  ','ERR  '
     6'DCB* ','SCB* ','CCB* ','ERR  ','ERR  ','ERR  ','UBB* '	     6'DCB* ','SCB* ','CCB* ','ERR  ','ERR  ','ERR  ','UBB* '
     7'SBB* ','CBB* ','BBB* ','ERR  ','ERR  ','ERR  ','ERR  '	     7'SBB* ','CBB* ','BBB* ','ERR  ','ERR  ','ERR  ','ERR  '
     8'UDT* ','DDT* ','ERR  ','UST* ','DST* ','SST* ','ERR  '	     8'UDT* ','DDT* ','ERR  ','UST* ','DST* ','SST* ','ERR  '
     9'UCT* ','DCT* ','SCT* ','CCT* ','ERR  ','ERR  ','ERR  '	     9'UCT* ','DCT* ','SCT* ','CCT* ','ERR  ','ERR  ','ERR  '
     1'DBT* ','SBT* ','CBT* ','BBT* ','ERR  ','ERR  ','ERR  '	     1'DBT* ','SBT* ','CBT* ','BBT* ','ERR  ','ERR  ','ERR  '
     2'UTT* ','DTT* ','STT* ','CTT* ','BTT* ','TTT* ','ERR  '	     2'UTT* ','DTT* ','STT* ','CTT* ','BTT* ','TTT* ','ERR  '
     3'ERR  ','ERR  ','ERR  ','UUY* ','UDY* ','DDY* ','ERR  '	     3'ERR  ','ERR  ','ERR  ','UUY* ','UDY* ','DDY* ','ERR  '
     4'DSY* ','SSY* ','ERR  ','ERR  ','UUX* ','UDX* ','DDX* '	     4'DSY* ','SSY* ','ERR  ','ERR  ','UUX* ','UDX* ','DDX* '
     5'USX* ','DSX* ','SSX* ','ERR  ','ERR  '/			     5'USX* ','DSX* ','SSX* ','ERR  ','ERR  '/
      DATA LABAR1/						      DATA LABAR1/
     1'ADL--','ADL- ','ADL0 ','ADL+ ','ERR  ','AS*- ','AS*0 '	     1'ADL--','ADL- ','ADL0 ','ADL+ ','ERR  ','AS*- ','AS*0 '
     2'ERR  ','AXI*0','AXI*+','AOM+ ','ERR  ','ERR  ','AUUC*'	     2'ERR  ','AXI*0','AXI*+','AOM+ ','ERR  ','ERR  ','AUUC*'
     3'ADDC*','ERR  ','AUSC*','ADSC*','ASSC*','ERR  ','ERR  '	     3'ADDC*','ERR  ','AUSC*','ADSC*','ASSC*','ERR  ','ERR  '
     4'ADCC*','ASCC*','ACCC*','ERR  ','ERR  ','ERR  ','AUUB*'	     4'ADCC*','ASCC*','ACCC*','ERR  ','ERR  ','ERR  ','AUUB*'
     5'ADDB*','ERR  ','AUSB*','ADSB*','ASSB*','ERR  ','ERR  '	     5'ADDB*','ERR  ','AUSB*','ADSB*','ASSB*','ERR  ','ERR  '
     6'ADCB*','ASCB*','ACCB*','ERR  ','ERR  ','ERR  ','AUBB*'	     6'ADCB*','ASCB*','ACCB*','ERR  ','ERR  ','ERR  ','AUBB*'
     7'ASBB*','ACBB*','ABBB*','ERR  ','ERR  ','ERR  ','ERR  '	     7'ASBB*','ACBB*','ABBB*','ERR  ','ERR  ','ERR  ','ERR  '
     8'AUDT*','ADDT*','ERR  ','AUST*','ADST*','ASST*','ERR  '	     8'AUDT*','ADDT*','ERR  ','AUST*','ADST*','ASST*','ERR  '
     9'AUCT*','ADCT*','ASCT*','ACCT*','ERR  ','ERR  ','ERR  '	     9'AUCT*','ADCT*','ASCT*','ACCT*','ERR  ','ERR  ','ERR  '
     1'ADBT*','ASBT*','ACBT*','ABBT*','ERR  ','ERR  ','ERR  '	     1'ADBT*','ASBT*','ACBT*','ABBT*','ERR  ','ERR  ','ERR  '
     2'AUTT*','ADTT*','ASTT*','ACTT*','ABTT*','ATTT*','ERR  '	     2'AUTT*','ADTT*','ASTT*','ACTT*','ABTT*','ATTT*','ERR  '
     3'ERR  ','ERR  ','ERR  ','AUUY*','AUDY*','ADDY*','ERR  '	     3'ERR  ','ERR  ','ERR  ','AUUY*','AUDY*','ADDY*','ERR  '
     4'ADSY*','ASSY*','ERR  ','ERR  ','AUUX*','AUDX*','ADDX*'	     4'ADSY*','ASSY*','ERR  ','ERR  ','AUUX*','AUDX*','ADDX*'
     5'AUSX*','ADSX*','ASSX*','ERR  ','ERR  '/			     5'AUSX*','ADSX*','ASSX*','ERR  ','ERR  '/
C------------------------------------------------------------	C------------------------------------------------------------
      CALL IDFLAV(ID,IFL1,IFL2,IFL3,JSPIN,INDEX)		      CALL IDFLAV(ID,IFL1,IFL2,IFL3,JSPIN,INDEX)
      IF ( ABS(ID) .LT.   100 ) GOTO 200			      IF ( ABS(ID) .LT.   100 ) GOTO 200
      IF ( ABS(ID) .LT. 1000 ) GOTO 100				      IF ( ABS(ID) .LT. 1000 ) GOTO 100
      IF ( ID .NE. 0  .AND.  MOD(ID,100) .EQ. 0 ) GOTO 300	      IF ( ID .NE. 0  .AND.  MOD(ID,100) .EQ. 0 ) GOTO 300
C  BARYONS							C  BARYONS
      INDEX=INDEX-109*JSPIN-36*NMES-NQLEP			      INDEX=INDEX-109*JSPIN-36*NMES-NQLEP
      INDEX=INDEX-11						      INDEX=INDEX-11
      IF     ( JSPIN .EQ. 0 ) THEN				      IF     ( JSPIN .EQ. 0 ) THEN
        IF     ( ID .GT. 0 ) THEN				        IF     ( ID .GT. 0 ) THEN
          IDLABL=LBAR0(INDEX)					          IDLABL=LBAR0(INDEX)
        ELSEIF ( ID .LT. 0 ) THEN				        ELSEIF ( ID .LT. 0 ) THEN
          IDLABL=LABAR0(INDEX)					          IDLABL=LABAR0(INDEX)
        ENDIF							        ENDIF
      ELSEIF ( JSPIN .EQ. 1 ) THEN				      ELSEIF ( JSPIN .EQ. 1 ) THEN
        IF     ( ID .GT. 0 ) THEN				        IF     ( ID .GT. 0 ) THEN
          IDLABL=LBAR1(INDEX)					          IDLABL=LBAR1(INDEX)
        ELSEIF ( ID .LT. 0 ) THEN				        ELSEIF ( ID .LT. 0 ) THEN
          IDLABL=LABAR1(INDEX)					          IDLABL=LABAR1(INDEX)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
C  MESONS							C  MESONS
100   CONTINUE							100   CONTINUE
      I=MAX(IFL2,IFL3)						      I=MAX(IFL2,IFL3)
      J=-MIN(IFL2,IFL3)						      J=-MIN(IFL2,IFL3)
      INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)			      INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)
      IF     ( JSPIN .EQ. 0 ) THEN				      IF     ( JSPIN .EQ. 0 ) THEN
        IDLABL=LMES0(INDEX)					        IDLABL=LMES0(INDEX)
      ELSEIF ( JSPIN .EQ. 1 ) THEN				      ELSEIF ( JSPIN .EQ. 1 ) THEN
        IDLABL=LMES1(INDEX)					        IDLABL=LMES1(INDEX)
      ENDIF							      ENDIF
      RETURN							      RETURN
C  QUARKS, LEPTONS, ETC.					C  QUARKS, LEPTONS, ETC.
200   CONTINUE							200   CONTINUE
      INDEX=2*INDEX						      INDEX=2*INDEX
      IF ( ID .LE. 0 ) INDEX=INDEX+1				      IF ( ID .LE. 0 ) INDEX=INDEX+1
      IDLABL=LLEP(INDEX)					      IDLABL=LLEP(INDEX)
      RETURN							      RETURN
300   I=ABS(IFL1)						300   I=ABS(IFL1)
      J=ABS(IFL2)						      J=ABS(IFL2)
      INDEX=I+J*(J-1)/2						      INDEX=I+J*(J-1)/2
      IF ( ID .GT. 0 ) THEN					      IF ( ID .GT. 0 ) THEN
        IDLABL=LQQ(INDEX)					        IDLABL=LQQ(INDEX)
      ELSE							      ELSE
        IDLABL=LAQQ(INDEX)					        IDLABL=LAQQ(INDEX)
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDMASS(ID,AMASS)				      SUBROUTINE IDMASS(ID,AMASS)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS THE MASS OF THE PARTICLE WITH IDENT CODE ID.		C  RETURNS THE MASS OF THE PARTICLE WITH IDENT CODE ID.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NMES=2)					      PARAMETER (NMES=2)
      PARAMETER (NQLEP=41)					      PARAMETER (NQLEP=41)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      REAL    AMBAR0(30),AMBAR1(30),AMLEP(52),AMMES0(10),AMME	      REAL    AMBAR0(30),AMBAR1(30),AMLEP(52),AMMES0(10),AMME

      DATA AMLEP/.3,.3,.5,1.6,4.9,30.,-1.,-1.,0.,0.,		      DATA AMLEP/.3,.3,.5,1.6,4.9,30.,-1.,-1.,0.,0.,
     *0.,.511003E-3,0.,.105661,0.,1.807,3*-1.,.49767,.49767,	     *0.,.511003E-3,0.,.105661,0.,1.807,3*-1.,.49767,.49767,
     *100.3,100.3,100.5,101.6,104.9,130.,2*-1.,100.,0.,		     *100.3,100.3,100.5,101.6,104.9,130.,2*-1.,100.,0.,
     *100.,100.005,100.,100.1,100.,101.8,2*-1.,100.,100.,	     *100.,100.005,100.,100.1,100.,101.8,2*-1.,100.,100.,
     *11*0./							     *11*0./
C          0- MESON MASS TABLE					C          0- MESON MASS TABLE
      DATA AMMES0/.13496,.13957,.5488,.49367,.49767,.9576,1.8	      DATA AMMES0/.13496,.13957,.5488,.49367,.49767,.9576,1.8
     1,1.8683,2.030,2.976/					     1,1.8683,2.030,2.976/
C          1- MESON MASS TABLE					C          1- MESON MASS TABLE
      DATA AMMES1/.770,.770,.7826,.8881,.8922,1.0196,2.006,2.	      DATA AMMES1/.770,.770,.7826,.8881,.8922,1.0196,2.006,2.
     1,2.140,3.097/						     1,2.140,3.097/
C          1/2+ BARYON MASS TABLE				C          1/2+ BARYON MASS TABLE
      DATA AMBAR0/-1.,.93828,.93957,2*-1.,1.1894,1.1925,1.197	      DATA AMBAR0/-1.,.93828,.93957,2*-1.,1.1894,1.1925,1.197
     1,1.1156,1.3149,1.3213,3*-1.,2.43,2.43,2.43,2.26		     1,1.1156,1.3149,1.3213,3*-1.,2.43,2.43,2.43,2.26
     2,2.50,2.50,2.60,2.40,2.40,3.55,3.55,3.70,4*-1./		     2,2.50,2.50,2.60,2.40,2.40,3.55,3.55,3.70,4*-1./
C          3/2+ BARYON MASS TABLE				C          3/2+ BARYON MASS TABLE
      DATA AMBAR1/1.232,1.232,1.232,1.232,-1.,1.3823,1.3820	      DATA AMBAR1/1.232,1.232,1.232,1.232,-1.,1.3823,1.3820
     1,1.3875,-1.,1.5318,1.5350,1.6722,2*-1.			     1,1.3875,-1.,1.5318,1.5350,1.6722,2*-1.
     2,2.63,2.63,2.63,-1.,2.70,2.70,2.80,2*-1.,3.75,3.75	     2,2.63,2.63,2.63,-1.,2.70,2.70,2.80,2*-1.,3.75,3.75
     3,3.90,4.80,3*-1./						     3,3.90,4.80,3*-1./
C------------------------------------------------------------	C------------------------------------------------------------
      IDABS=ABS(ID)						      IDABS=ABS(ID)
      I=IDABS/1000						      I=IDABS/1000
      J1=IDABS-I*1000						      J1=IDABS-I*1000
      J = J1/100						      J = J1/100
      IF ( ID .NE. 0  .AND.  MOD(ID,100) .EQ. 0 ) GOTO 400	      IF ( ID .NE. 0  .AND.  MOD(ID,100) .EQ. 0 ) GOTO 400
      K1= J1 - J*100						      K1= J1 - J*100
      K = K1/10							      K = K1/10
      JSPIN= K1 - K*10						      JSPIN= K1 - K*10
      IF ( I .GT. 4   .OR.  J .GT. 4   .OR. K .GT .4 ) GOTO 3	      IF ( I .GT. 4   .OR.  J .GT. 4   .OR. K .GT .4 ) GOTO 3
      IF ( J .EQ. 0 ) GOTO 200					      IF ( J .EQ. 0 ) GOTO 200
      IF ( I .EQ. 0 ) GOTO 100					      IF ( I .EQ. 0 ) GOTO 100
C  BARYONS							C  BARYONS
C  ONLY X,Y BARYONS ARE QQX, QQY, Q=U,D,S.			C  ONLY X,Y BARYONS ARE QQX, QQY, Q=U,D,S.
      IF ( K .LE. 6 ) THEN					      IF ( K .LE. 6 ) THEN
        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+(K-1)*K*(2*K-1)/6	        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+(K-1)*K*(2*K-1)/6
      ELSE							      ELSE
        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+9*(K-7)+91		        INDEX=MAX(I-1,J-1)**2+I+MAX(I-J,0)+9*(K-7)+91
      ENDIF							      ENDIF
      AMASS=(1-JSPIN)*AMBAR0(INDEX)+JSPIN*AMBAR1(INDEX)		      AMASS=(1-JSPIN)*AMBAR0(INDEX)+JSPIN*AMBAR1(INDEX)
      RETURN							      RETURN
C  MESONS							C  MESONS
100   CONTINUE							100   CONTINUE
      INDEX = J + K*(K-1)/2					      INDEX = J + K*(K-1)/2
      AMASS = (1-JSPIN)*AMMES0(INDEX) + JSPIN*AMMES1(INDEX)	      AMASS = (1-JSPIN)*AMMES0(INDEX) + JSPIN*AMMES1(INDEX)
      RETURN							      RETURN
C  QUARKS, LEPTONS, ETC						C  QUARKS, LEPTONS, ETC
200   CONTINUE							200   CONTINUE
      IF     ( IDABS .LT. 20 ) THEN				      IF     ( IDABS .LT. 20 ) THEN
        INDEX = IDABS						        INDEX = IDABS
C  DEFINE INDEX=20 FOR KS, INDEX=21 FOR KL			C  DEFINE INDEX=20 FOR KS, INDEX=21 FOR KL
      ELSEIF ( ID .EQ. 20 ) THEN				      ELSEIF ( ID .EQ. 20 ) THEN
        INDEX = 20						        INDEX = 20
C  INDEX=NQLEP+1,...,NQLEP+11 FOR W+, HIGGS, Z0			C  INDEX=NQLEP+1,...,NQLEP+11 FOR W+, HIGGS, Z0
      ELSEIF ( IDABS .LT. 80 ) THEN				      ELSEIF ( IDABS .LT. 80 ) THEN
        INDEX = IDABS+1						        INDEX = IDABS+1
      ELSE							      ELSE
        INDEX = NQLEP+IDABS-79					        INDEX = NQLEP+IDABS-79
      ENDIF							      ENDIF
      AMASS=AMLEP(INDEX)					      AMASS=AMLEP(INDEX)
      RETURN							      RETURN
C  B AND T PARTICLES						C  B AND T PARTICLES
300   CONTINUE							300   CONTINUE
      AMASS=AMLEP(J)+AMLEP(K)-.03+.04*JSPIN			      AMASS=AMLEP(J)+AMLEP(K)-.03+.04*JSPIN
      IF ( I .NE. 0 ) AMASS=AMASS+AMLEP(I)			      IF ( I .NE. 0 ) AMASS=AMASS+AMLEP(I)
      RETURN							      RETURN
C  DIQUARKS							C  DIQUARKS
400   CONTINUE							400   CONTINUE
      AMASS=AMLEP(I)+AMLEP(J)					      AMASS=AMLEP(I)+AMLEP(J)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDMIX(IC,JSPIN,ICM,IDM)			      SUBROUTINE IDMIX(IC,JSPIN,ICM,IDM)

C------------------------------------------------------------	C------------------------------------------------------------
C  ACCOUNTS FOR FLAVOUR MIXING					C  ACCOUNTS FOR FLAVOUR MIXING
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      REAL    PMIX1(3,2),PMIX2(3,2)				      REAL    PMIX1(3,2),PMIX2(3,2)
      INTEGER IC(2),ICM(2)					      INTEGER IC(2),ICM(2)
      DATA PMIX1 /.25,.25,.5,0.,.5,1./, PMIX2 /.5,.5,1.,0.,0.	      DATA PMIX1 /.25,.25,.5,0.,.5,1./, PMIX2 /.5,.5,1.,0.,0.
C------------------------------------------------------------	C------------------------------------------------------------
      ICM(1)=0							      ICM(1)=0
      ICM(2)=0							      ICM(2)=0
      IDM=0							      IDM=0
      I=IC(1)							      I=IC(1)
      IF ( I .NE. IC(2) ) RETURN				      IF ( I .NE. IC(2) ) RETURN
      ID=0							      ID=0
      IF ( I .EQ. 100000 ) ID=1					      IF ( I .EQ. 100000 ) ID=1
      IF ( I .EQ.  10000 ) ID=2					      IF ( I .EQ.  10000 ) ID=2
      IF ( I .EQ.   1000 ) ID=3					      IF ( I .EQ.   1000 ) ID=3
      IF ( ID .EQ. 0 ) RETURN					      IF ( ID .EQ. 0 ) RETURN
      RND=RANGEN()						      RND=RANGEN()
      IDM=INT(PMIX1(ID,JSPIN+1)+RND)+INT(PMIX2(ID,JSPIN+1)+RN	      IDM=INT(PMIX1(ID,JSPIN+1)+RND)+INT(PMIX2(ID,JSPIN+1)+RN
      ICM(1)=10**(NFLAV-IDM)					      ICM(1)=10**(NFLAV-IDM)
      ICM(2)=IC(1)						      ICM(2)=IC(1)
      IDM=IDM*100+IDM*10+JSPIN					      IDM=IDM*100+IDM*10+JSPIN
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDQUAC(I,NQ,NS,NA,JC)				      SUBROUTINE IDQUAC(I,NQ,NS,NA,JC)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS QUARK CONTENT OF PTL I FROM /CPTL/ .			C  RETURNS QUARK CONTENT OF PTL I FROM /CPTL/ .
C        NQ = # QUARKS - # ANTIQUARKS				C        NQ = # QUARKS - # ANTIQUARKS
C        NS = # STRANGE QUARKS - # STRANGE ANTIQUARKS		C        NS = # STRANGE QUARKS - # STRANGE ANTIQUARKS
C        NA = # QUARKS + # ANTIQUARKS				C        NA = # QUARKS + # ANTIQUARKS
C        JC(NFLAV,2) = JC-TYPE PARTICLE IDENTIFICATION CODE.	C        JC(NFLAV,2) = JC-TYPE PARTICLE IDENTIFICATION CODE.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      INTEGER IC(2),JC(NFLAV,2)					      INTEGER IC(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( ABS(IDPTL(I)) .EQ. 20 ) THEN				      IF ( ABS(IDPTL(I)) .EQ. 20 ) THEN
        IF ( RANGEN() .LT. .5 ) THEN				        IF ( RANGEN() .LT. .5 ) THEN
          IDPTL(I)=-230						          IDPTL(I)=-230
        ELSE							        ELSE
          IDPTL(I)=230						          IDPTL(I)=230
        ENDIF							        ENDIF
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF

      IF ( ABS(IDPTL(I)) .LT. 100 ) THEN			      IF ( ABS(IDPTL(I)) .LT. 100 ) THEN
        NQ=0							        NQ=0
        NS=0							        NS=0
        DO 1 N=1,NFLAV						        DO 1 N=1,NFLAV
          JC(N,1)=0						          JC(N,1)=0
          JC(N,2)=0						          JC(N,2)=0
 1      CONTINUE						 1      CONTINUE
      RETURN							      RETURN
      ENDIF							      ENDIF

9999  IF ( IDPTL(I)/100000000 .NE. 7 ) THEN			9999  IF ( IDPTL(I)/100000000 .NE. 7 ) THEN
        CALL IDTR4(IDPTL(I),IC)					        CALL IDTR4(IDPTL(I),IC)
        CALL IDDECO(IC,JC)					        CALL IDDECO(IC,JC)
      ELSE							      ELSE
        CALL IDTRB(IBPTL(1,I),IBPTL(2,I),IBPTL(3,I),IBPTL(4,I	        CALL IDTRB(IBPTL(1,I),IBPTL(2,I),IBPTL(3,I),IBPTL(4,I
      ENDIF							      ENDIF
      NA=0							      NA=0
      NQ=0							      NQ=0
      DO 53 N=1,NFLAV						      DO 53 N=1,NFLAV
        NA=NA+JC(N,1)+JC(N,2)					        NA=NA+JC(N,1)+JC(N,2)
        NQ=NQ+JC(N,1)-JC(N,2)					        NQ=NQ+JC(N,1)-JC(N,2)
53    CONTINUE							53    CONTINUE
      NS=JC(3,1)-JC(3,2)					      NS=JC(3,1)-JC(3,2)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDRES(ID,AM,IDR,IADJ)				      SUBROUTINE IDRES(ID,AM,IDR,IADJ)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS RESONANCE ID IDR CORRESPONDING TO MASS AM.		C  RETURNS RESONANCE ID IDR CORRESPONDING TO MASS AM.
C  PERFORMS MASS ADJUSTMENT, IF NECESSARY (IF SO IADJ=1, 0 EL	C  PERFORMS MASS ADJUSTMENT, IF NECESSARY (IF SO IADJ=1, 0 EL
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( AM .EQ. 0. ) AM=1.E-5				      IF ( AM .EQ. 0. ) AM=1.E-5

      IDI=ID							      IDI=ID
      AMI=AM							      AMI=AM
      IDR=0							      IDR=0
      IADJ=0							      IADJ=0

      IF ( ID .EQ. 0 ) GOTO 9999				      IF ( ID .EQ. 0 ) GOTO 9999
      IDABS = ABS(ID)						      IDABS = ABS(ID)
      DO 5 K=1,MXMX						      DO 5 K=1,MXMX
        DO 3 M=2,MXMA						        DO 3 M=2,MXMA
          IF ( IDABS .EQ. IDMX(M,K) ) THEN			          IF ( IDABS .EQ. IDMX(M,K) ) THEN
            ID=SIGN(IDMX(1,K)*10,ID)				            ID=SIGN(IDMX(1,K)*10,ID)
            GOTO 5						            GOTO 5
          ENDIF							          ENDIF
3       CONTINUE						3       CONTINUE
5     CONTINUE							5     CONTINUE

      IX=IDABS/10						      IX=IDABS/10
      IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) THEN		      IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) THEN
        CALL UTSTOP('IDRES: IX OUT OF RANGE.                 	        CALL UTSTOP('IDRES: IX OUT OF RANGE.                 
      ENDIF							      ENDIF
      I=INDX(IX)						      I=INDX(IX)
      IF ( I .LT. 1  .OR.  I .GT. MXRE ) THEN			      IF ( I .LT. 1  .OR.  I .GT. MXRE ) THEN
        CALL UTSTOP('IDRES: PARTICLE NOT IN TABLE            	        CALL UTSTOP('IDRES: PARTICLE NOT IN TABLE            
      ENDIF							      ENDIF
      DO 1 J=1,MXMA-1						      DO 1 J=1,MXMA-1
        IF ( AM .GE. REMA(I,J)  .AND.  AM .LE. REMA(I,J+1) ) 	        IF ( AM .GE. REMA(I,J)  .AND.  AM .LE. REMA(I,J+1) ) 
          IF ( J .GT. 10 ) THEN					          IF ( J .GT. 10 ) THEN
            CALL UTSTOP('IDRES: SPIN > 9                     	            CALL UTSTOP('IDRES: SPIN > 9                     
          ENDIF							          ENDIF
          IDR=ID/10*10+SIGN(J-1,ID)				          IDR=ID/10*10+SIGN(J-1,ID)
          GOTO 2						          GOTO 2
        ENDIF							        ENDIF
 1    CONTINUE							 1    CONTINUE
      GOTO 9999							      GOTO 9999
 2    CONTINUE							 2    CONTINUE

      DO 4 K=1,MXMX						      DO 4 K=1,MXMX
        IF ( IX .EQ. IDMX(1,K) ) THEN				        IF ( IX .EQ. IDMX(1,K) ) THEN
          IF ( J .LT. 1  .OR.  J .GT. MXMA-1 ) THEN		          IF ( J .LT. 1  .OR.  J .GT. MXMA-1 ) THEN
            CALL UTSTOP('IDRES: INDEX J OUT OF RANGE         	            CALL UTSTOP('IDRES: INDEX J OUT OF RANGE         
          ENDIF							          ENDIF
          IF ( IDMX(J+1,K) .NE. 0 ) IDR = SIGN(IDMX(J+1,K),ID	          IF ( IDMX(J+1,K) .NE. 0 ) IDR = SIGN(IDMX(J+1,K),ID
        ENDIF							        ENDIF
 4    CONTINUE							 4    CONTINUE

      IY=MOD(IABS(IDR),10)					      IY=MOD(IABS(IDR),10)
      IF ( IY .GT. MAXRES ) THEN				      IF ( IY .GT. MAXRES ) THEN
        IADJ=0							        IADJ=0
        IDR=0							        IDR=0
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF

      IF ( IY .NE. 0  .AND.  IY .NE. 1 ) GOTO 9999		      IF ( IY .NE. 0  .AND.  IY .NE. 1 ) GOTO 9999

      CALL IDMASS(IDR,AM)					      CALL IDMASS(IDR,AM)
      IF ( AM .LT. 0. ) THEN					      IF ( AM .LT. 0. ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'*****  ERROR IN IDRES: '			        WRITE(IFCH,*)'*****  ERROR IN IDRES: '
     *      ,'NEG MASS RETURNED FROM IDMASS'			     *      ,'NEG MASS RETURNED FROM IDMASS'
        WRITE(IFCH,*)'ID,AM(INPUT):',IDI,AMI			        WRITE(IFCH,*)'ID,AM(INPUT):',IDI,AMI
        WRITE(IFCH,*)'IDR,AM:',IDR,AM				        WRITE(IFCH,*)'IDR,AM:',IDR,AM
        CALL UTSTOP('IDRES: NEG MASS RETURNED FROM IDMASS    	        CALL UTSTOP('IDRES: NEG MASS RETURNED FROM IDMASS    
      ENDIF							      ENDIF
      IADJ=1							      IADJ=1

9999  ID=IDI							9999  ID=IDI
      IF ( ISH .LT. 93 ) RETURN					      IF ( ISH .LT. 93 ) RETURN
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      WRITE(IFCH,*)'RETURN FROM IDRES. ID,AMI,AM,IDR,IADJ:'	      WRITE(IFCH,*)'RETURN FROM IDRES. ID,AMI,AM,IDR,IADJ:'
      WRITE(IFCH,*)ID,AMI,AM,IDR,IADJ				      WRITE(IFCH,*)ID,AMI,AM,IDR,IADJ
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDRESI						      SUBROUTINE IDRESI

C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZES /CREMA/						C  INITIALIZES /CREMA/
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      PARAMETER (N=29)						      PARAMETER (N=29)
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      REAL    REMAI(N,MXMA),REWII(N,MXMA)			      REAL    REMAI(N,MXMA),REWII(N,MXMA)
      INTEGER ICREI(N,2*MXMA),IDMXI(MXMA,MXMX)			      INTEGER ICREI(N,2*MXMA),IDMXI(MXMA,MXMX)

      DATA (IDMXI(J,1),J=1,MXMA)/ 11, 110, 111,   0,   0,   0	      DATA (IDMXI(J,1),J=1,MXMA)/ 11, 110, 111,   0,   0,   0
      DATA (IDMXI(J,2),J=1,MXMA)/ 22, 220, 330, 331,   0,   0	      DATA (IDMXI(J,2),J=1,MXMA)/ 22, 220, 330, 331,   0,   0
      DATA (IDMXI(J,3),J=1,MXMA)/123,2130,1230,1231,   0,   0	      DATA (IDMXI(J,3),J=1,MXMA)/123,2130,1230,1231,   0,   0
      DATA (IDMXI(J,4),J=1,MXMA)/124,2140,1240,1241,   0,   0	      DATA (IDMXI(J,4),J=1,MXMA)/124,2140,1240,1241,   0,   0
      DATA (IDMXI(J,5),J=1,MXMA)/134,3140,1340,1341,   0,   0	      DATA (IDMXI(J,5),J=1,MXMA)/134,3140,1340,1341,   0,   0
      DATA (IDMXI(J,6),J=1,MXMA)/234,3240,2340,2341,   0,   0	      DATA (IDMXI(J,6),J=1,MXMA)/234,3240,2340,2341,   0,   0
      DATA ((ICREI(K,M),M=1,2*MXMA),K=1,10)/			      DATA ((ICREI(K,M),M=1,2*MXMA),K=1,10)/
     *                 111,000000, 9*300000,    11*0,		     *                 111,000000, 9*300000,    11*0,
     *                 222,000000, 9*030000,    11*0,		     *                 222,000000, 9*030000,    11*0,
     *                 112,       10*210000,    11*0,		     *                 112,       10*210000,    11*0,
     *                 122,       10*120000,    11*0,		     *                 122,       10*120000,    11*0,
     *                 113,       10*201000,    11*0,		     *                 113,       10*201000,    11*0,
     *                 223,       10*021000,    11*0,		     *                 223,       10*021000,    11*0,
     *                 123,       10*111000,    11*0,		     *                 123,       10*111000,    11*0,
     *                 133,       10*102000,    11*0,		     *                 133,       10*102000,    11*0,
     *                 233,       10*012000,    11*0,		     *                 233,       10*012000,    11*0,
     *                 333,000000, 9*003000,    11*0/		     *                 333,000000, 9*003000,    11*0/
      DATA ((ICREI(K,M),M=1,2*MXMA),K=11,20)/			      DATA ((ICREI(K,M),M=1,2*MXMA),K=11,20)/
     *                 114,       10*200100,    11*0,		     *                 114,       10*200100,    11*0,
     *                 124,       10*110100,    11*0,		     *                 124,       10*110100,    11*0,
     *                 224,       10*020100,    11*0,		     *                 224,       10*020100,    11*0,
     *                 134,       10*101100,    11*0,		     *                 134,       10*101100,    11*0,
     *                 234,       10*011100,    11*0,		     *                 234,       10*011100,    11*0,
     *                 334,       10*002100,    11*0,		     *                 334,       10*002100,    11*0,
     *                 144,       10*100200,    11*0,		     *                 144,       10*100200,    11*0,
     *                 244,       10*010200,    11*0,		     *                 244,       10*010200,    11*0,
     *                 344,       10*001200,    11*0,		     *                 344,       10*001200,    11*0,
     *                 444,000000, 9*000300,    11*0/		     *                 444,000000, 9*000300,    11*0/
      DATA ((ICREI(K,M),M=1,2*MXMA),K=21,29)/			      DATA ((ICREI(K,M),M=1,2*MXMA),K=21,29)/
     *                  11,  10*100000,    0,   10*100000,	     *                  11,  10*100000,    0,   10*100000,
     *                  22,  10*001000,    0,   10*001000,	     *                  22,  10*001000,    0,   10*001000,
     *                  12,  10*100000,    0,   10*010000,	     *                  12,  10*100000,    0,   10*010000,
     *                  13,  10*100000,    0,   10*001000,	     *                  13,  10*100000,    0,   10*001000,
     *                  23,  10*010000,    0,   10*001000,	     *                  23,  10*010000,    0,   10*001000,
     *                  14,  10*100000,    0,   10*000100,	     *                  14,  10*100000,    0,   10*000100,
     *                  24,  10*010000,    0,   10*000100,	     *                  24,  10*010000,    0,   10*000100,
     *                  34,  10*001000,    0,   10*000100,	     *                  34,  10*001000,    0,   10*000100,
     *                  44,  10*000100,    0,   10*000100/	     *                  44,  10*000100,    0,   10*000100/

      DATA ((REMAI(K,M),M=1,MXMA),K=1,10)/			      DATA ((REMAI(K,M),M=1,MXMA),K=1,10)/
     *111.,0.000,1.425,1.660,1.825,2.000,0.000,0.000,0.000,0.	     *111.,0.000,1.425,1.660,1.825,2.000,0.000,0.000,0.000,0.
     *222.,0.000,1.425,1.660,1.825,2.000,0.000,0.000,0.000,0.	     *222.,0.000,1.425,1.660,1.825,2.000,0.000,0.000,0.000,0.
     *112.,1.080,1.315,1.485,1.575,1.645,1.685,1.705,1.825,2.	     *112.,1.080,1.315,1.485,1.575,1.645,1.685,1.705,1.825,2.
     *122.,1.080,1.315,1.485,1.575,1.645,1.685,1.705,1.825,2.	     *122.,1.080,1.315,1.485,1.575,1.645,1.685,1.705,1.825,2.
     *113.,1.300,1.500,1.700,1.850,2.000,0.000,0.000,0.000,0.	     *113.,1.300,1.500,1.700,1.850,2.000,0.000,0.000,0.000,0.
     *223.,1.300,1.500,1.700,1.850,2.000,0.000,0.000,0.000,0.	     *223.,1.300,1.500,1.700,1.850,2.000,0.000,0.000,0.000,0.
     *123.,1.117,1.300,1.395,1.465,1.540,1.655,1.710,1.800,1.	     *123.,1.117,1.300,1.395,1.465,1.540,1.655,1.710,1.800,1.
     *133.,1.423,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *133.,1.423,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *233.,1.428,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *233.,1.428,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *333.,0.000,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *333.,0.000,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.
      DATA ((REMAI(K,M),M=1,MXMA),K=11,20)/			      DATA ((REMAI(K,M),M=1,MXMA),K=11,20)/
     *114.,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *114.,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *124.,2.345,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.	     *124.,2.345,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.
     *224.,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *224.,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *134.,2.450,2.600,2.800,0.000,0.000,0.000,0.000,0.000,0.	     *134.,2.450,2.600,2.800,0.000,0.000,0.000,0.000,0.000,0.
     *234.,2.450,2.600,2.800,0.000,0.000,0.000,0.000,0.000,0.	     *234.,2.450,2.600,2.800,0.000,0.000,0.000,0.000,0.000,0.
     *334.,2.700,2.900,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *334.,2.700,2.900,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *144.,3.650,3.850,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *144.,3.650,3.850,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *244.,3.650,3.850,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *244.,3.650,3.850,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *344.,3.800,4.000,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *344.,3.800,4.000,0.000,0.000,0.000,0.000,0.000,0.000,0.
     *444.,0.000,5.000,0.000,0.000,0.000,0.000,0.000,0.000,0.	     *444.,0.000,5.000,0.000,0.000,0.000,0.000,0.000,0.000,0.
      DATA ((REMAI(K,M),M=1,MXMA),K=21,29)/			      DATA ((REMAI(K,M),M=1,MXMA),K=21,29)/
     * 11.,0.450,0.950,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 11.,0.450,0.950,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 22.,0.750,0.965,1.080,0.000,0.000,0.000,0.000,0.000,0.	     * 22.,0.750,0.965,1.080,0.000,0.000,0.000,0.000,0.000,0.
     * 12.,0.450,0.950,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 12.,0.450,0.950,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 13.,0.700,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 13.,0.700,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 23.,0.700,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 23.,0.700,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 14.,1.935,2.077,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 14.,1.935,2.077,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 24.,1.938,2.079,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 24.,1.938,2.079,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 34.,2.085,2.195,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 34.,2.085,2.195,0.000,0.000,0.000,0.000,0.000,0.000,0.
     * 44.,3.037,3.158,0.000,0.000,0.000,0.000,0.000,0.000,0.	     * 44.,3.037,3.158,0.000,0.000,0.000,0.000,0.000,0.000,0.

      DATA ((REWII(K,M),M=1,MXMA),K=1,5)/			      DATA ((REWII(K,M),M=1,MXMA),K=1,5)/
     *111.,0.000E+00,0.115E+00,0.140E+00,0.250E+00,0.250E+00,	     *111.,0.000E+00,0.115E+00,0.140E+00,0.250E+00,0.250E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *222.,0.000E+00,0.115E+00,0.140E+00,0.250E+00,0.250E+00,	     *222.,0.000E+00,0.115E+00,0.140E+00,0.250E+00,0.250E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *112.,0.000E+00,0.115E+00,0.200E+00,0.140E+00,0.140E+00,	     *112.,0.000E+00,0.115E+00,0.200E+00,0.140E+00,0.140E+00,
     *     0.145E+00,0.250E+00,0.140E+00,0.250E+00,0.000E+00,	     *     0.145E+00,0.250E+00,0.140E+00,0.250E+00,0.000E+00,
     *122.,0.000E+00,0.115E+00,0.200E+00,0.140E+00,0.140E+00,	     *122.,0.000E+00,0.115E+00,0.200E+00,0.140E+00,0.140E+00,
     *     0.145E+00,0.250E+00,0.140E+00,0.250E+00,0.000E+00,	     *     0.145E+00,0.250E+00,0.140E+00,0.250E+00,0.000E+00,
     *113.,0.824E-14,0.036E+00,0.080E+00,0.100E+00,0.170E+00,	     *113.,0.824E-14,0.036E+00,0.080E+00,0.100E+00,0.170E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/
      DATA ((REWII(K,M),M=1,MXMA),K=6,10)/			      DATA ((REWII(K,M),M=1,MXMA),K=6,10)/
     *223.,0.445E-14,0.039E+00,0.080E+00,0.100E+00,0.170E+00,	     *223.,0.445E-14,0.039E+00,0.080E+00,0.100E+00,0.170E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *123.,0.250E-14,0.890E-05,0.036E+00,0.040E+00,0.016E+00,	     *123.,0.250E-14,0.890E-05,0.036E+00,0.040E+00,0.016E+00,
     *     0.090E+00,0.080E+00,0.100E+00,0.145E+00,0.170E+00,	     *     0.090E+00,0.080E+00,0.100E+00,0.145E+00,0.170E+00,
     *133.,0.227E-14,0.009E+00,0.000E+00,0.000E+00,0.000E+00,	     *133.,0.227E-14,0.009E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *233.,0.400E-14,0.010E+00,0.000E+00,0.000E+00,0.000E+00,	     *233.,0.400E-14,0.010E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *333.,0.000E+00,0.800E-14,0.000E+00,0.000E+00,0.000E+00,	     *333.,0.000E+00,0.800E-14,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/
      DATA ((REWII(K,M),M=1,MXMA),K=11,15)/			      DATA ((REWII(K,M),M=1,MXMA),K=11,15)/
     *114.,0.400E-11,0.010E+00,0.000E+00,0.000E+00,0.000E+00,	     *114.,0.400E-11,0.010E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *124.,0.400E-11,0.400E-11,0.010E+00,0.000E+00,0.000E+00,	     *124.,0.400E-11,0.400E-11,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *224.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,	     *224.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *134.,0.150E-11,0.400E-11,0.010E+00,0.000E+00,0.000E+00,	     *134.,0.150E-11,0.400E-11,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *234.,0.150E-11,0.400E-11,0.010E+00,0.000E+00,0.000E+00,	     *234.,0.150E-11,0.400E-11,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/
      DATA ((REWII(K,M),M=1,MXMA),K=16,20)/			      DATA ((REWII(K,M),M=1,MXMA),K=16,20)/
     *334.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,	     *334.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *144.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,	     *144.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *244.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,	     *244.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *344.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,	     *344.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     *444.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,	     *444.,0.400E-11,0.010E+00,0.010E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/
      DATA ((REWII(K,M),M=1,MXMA),K=21,25)/			      DATA ((REWII(K,M),M=1,MXMA),K=21,25)/
     * 11.,0.757E-08,0.153E+00,0.057E+00,0.000E+00,0.000E+00,	     * 11.,0.757E-08,0.153E+00,0.057E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 22.,0.105E-05,0.210E-03,0.034E+00,0.004E+00,0.000E+00,	     * 22.,0.105E-05,0.210E-03,0.034E+00,0.004E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 12.,0.000E+00,0.153E+00,0.057E+00,0.000E+00,0.000E+00,	     * 12.,0.000E+00,0.153E+00,0.057E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 13.,0.000E+00,0.051E+00,0.000E+00,0.000E+00,0.000E+00,	     * 13.,0.000E+00,0.051E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 23.,0.197E-02,0.051E+00,0.000E+00,0.000E+00,0.000E+00,	     * 23.,0.197E-02,0.051E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/
      DATA ((REWII(K,M),M=1,MXMA),K=26,29)/			      DATA ((REWII(K,M),M=1,MXMA),K=26,29)/
     * 14.,0.154E-11,0.002E+00,0.000E+00,0.000E+00,0.000E+00,	     * 14.,0.154E-11,0.002E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 24.,0.615E-12,0.002E+00,0.000E+00,0.000E+00,0.000E+00,	     * 24.,0.615E-12,0.002E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 34.,0.150E-11,0.020E+00,0.000E+00,0.000E+00,0.000E+00,	     * 34.,0.150E-11,0.020E+00,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00,
     * 44.,0.010E+00,0.068E-03,0.000E+00,0.000E+00,0.000E+00,	     * 44.,0.010E+00,0.068E-03,0.000E+00,0.000E+00,0.000E+00,
     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/	     *     0.000E+00,0.000E+00,0.000E+00,0.000E+00,0.000E+00/
C------------------------------------------------------------	C------------------------------------------------------------
      NN=N							      NN=N
      DO 3 I=1,MXINDX						      DO 3 I=1,MXINDX
        INDX(I)=0						        INDX(I)=0
 3    CONTINUE							 3    CONTINUE
      DO 44 M=1,MXMA						      DO 44 M=1,MXMA
        DO 4 K=1,MXRE						        DO 4 K=1,MXRE
          REMA(K,M)=0.						          REMA(K,M)=0.
 4      CONTINUE						 4      CONTINUE
44    CONTINUE							44    CONTINUE
      DO 22 I=1,MXMX						      DO 22 I=1,MXMX
        DO 2 J=1,MXMA						        DO 2 J=1,MXMA
          IDMX(J,I)=IDMXI(J,I)					          IDMX(J,I)=IDMXI(J,I)
 2      CONTINUE						 2      CONTINUE
22    CONTINUE							22    CONTINUE

      IF ( NN .GT. MXRE ) THEN					      IF ( NN .GT. MXRE ) THEN
        CALL UTSTOP('IDRESI: DIMENSION MXRE TOO SMALL        	        CALL UTSTOP('IDRESI: DIMENSION MXRE TOO SMALL        
      ENDIF							      ENDIF
      DO 1 K=1,N						      DO 1 K=1,N
        IX=NINT(REMAI(K,1))					        IX=NINT(REMAI(K,1))
        IX2=NINT(REWII(K,1))					        IX2=NINT(REWII(K,1))
        IX3=ICREI(K,1)						        IX3=ICREI(K,1)
        IF ( IX .NE. IX2 ) THEN					        IF ( IX .NE. IX2 ) THEN
          CALL UTSTOP('IDRESI: IX /= IX2                     	          CALL UTSTOP('IDRESI: IX /= IX2                     
        ENDIF							        ENDIF
        IF ( IX .NE. IX3 ) THEN					        IF ( IX .NE. IX3 ) THEN
          CALL UTSTOP('IDRESI: IX /= IX3                     	          CALL UTSTOP('IDRESI: IX /= IX3                     
        ENDIF							        ENDIF
        IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) THEN		        IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) THEN
          CALL UTSTOP('IDRESI: IX OUT OF RANGE.              	          CALL UTSTOP('IDRESI: IX OUT OF RANGE.              
        ENDIF							        ENDIF
        INDX(IX)=K						        INDX(IX)=K
        REMA(K,1)=0.						        REMA(K,1)=0.
        REWI(K,1)=0.						        REWI(K,1)=0.
        ICRE1(K,1)=0						        ICRE1(K,1)=0
        ICRE2(K,1)=0						        ICRE2(K,1)=0
        DO 5 M=2,MXMA						        DO 5 M=2,MXMA
          REMA(K,M)=REMAI(K,M)					          REMA(K,M)=REMAI(K,M)
          REWI(K,M)=REWII(K,M)					          REWI(K,M)=REWII(K,M)
          ICRE1(K,M)=ICREI(K,M)					          ICRE1(K,M)=ICREI(K,M)
          ICRE2(K,M)=ICREI(K,MXMA+M)				          ICRE2(K,M)=ICREI(K,MXMA+M)
 5      CONTINUE						 5      CONTINUE
 1    CONTINUE							 1    CONTINUE

      INDX(33) =INDX(22)					      INDX(33) =INDX(22)
      INDX(213)=INDX(123)					      INDX(213)=INDX(123)
      INDX(214)=INDX(124)					      INDX(214)=INDX(124)
      INDX(314)=INDX(134)					      INDX(314)=INDX(134)
      INDX(324)=INDX(234)					      INDX(324)=INDX(234)

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDSPIN(II,IC,ID,JSPIN)				      SUBROUTINE IDSPIN(II,IC,ID,JSPIN)

C------------------------------------------------------------	C------------------------------------------------------------
C  DETERMINES PARTICLE SPIN					C  DETERMINES PARTICLE SPIN
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU

      REAL    PSPIN1(8)						      REAL    PSPIN1(8)
      INTEGER IC(2),JC(NFLAV,2)					      INTEGER IC(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      PSPIN1(1)=PSPINL						      PSPIN1(1)=PSPINL
      PSPIN1(2)=PSPINL						      PSPIN1(2)=PSPINL
      PSPIN1(3)=PSPINL						      PSPIN1(3)=PSPINL
      PSPIN1(4)=PSPINH						      PSPIN1(4)=PSPINH
      PSPIN1(5)=PSPINH						      PSPIN1(5)=PSPINH
      PSPIN1(6)=PSPINH						      PSPIN1(6)=PSPINH
      PSPIN1(7)=PSPINH						      PSPIN1(7)=PSPINH
      PSPIN1(8)=PSPINH						      PSPIN1(8)=PSPINH
      CALL IDDECO(IC,JC)					      CALL IDDECO(IC,JC)
      IHIGH=0							      IHIGH=0
      IF ( II .EQ. 1 ) THEN					      IF ( II .EQ. 1 ) THEN
        DO 4 I=1,NFLAV						        DO 4 I=1,NFLAV
          IF ( JC(I,1) .NE. 0 ) IHIGH=I				          IF ( JC(I,1) .NE. 0 ) IHIGH=I
          IF ( JC(I,2) .NE. 0 ) IHIGH=I				          IF ( JC(I,2) .NE. 0 ) IHIGH=I
 4      CONTINUE						 4      CONTINUE
      ELSE							      ELSE
        CALL IDFLAV(ID,I1,I2,I3,IDU1,IDU2)			        CALL IDFLAV(ID,I1,I2,I3,IDU1,IDU2)
        DO 5 I=1,NFLAV						        DO 5 I=1,NFLAV
          IF ( I.EQ.ABS(I1)   .OR.  I .EQ. ABS(I2)		          IF ( I.EQ.ABS(I1)   .OR.  I .EQ. ABS(I2)
     *                        .OR.  I .EQ. ABS(I3) ) IHIGH=I	     *                        .OR.  I .EQ. ABS(I3) ) IHIGH=I
5       CONTINUE						5       CONTINUE
      ENDIF							      ENDIF
      JSPIN=INT(RANGEN()+PSPIN1(IHIGH))				      JSPIN=INT(RANGEN()+PSPIN1(IHIGH))
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDTAU(ID,P4,P5,TAUGM)				      SUBROUTINE IDTAU(ID,P4,P5,TAUGM)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS LIFETIME*GAMMA FOR ID WITH ENERGY P4, MASS P5	C  RETURNS LIFETIME*GAMMA FOR ID WITH ENERGY P4, MASS P5
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
C------------------------------------------------------------	C------------------------------------------------------------
      IDABS = ABS(ID)						      IDABS = ABS(ID)
      IF     ( IDABS .LT. 100  .AND.  ID .NE. 20 ) THEN		      IF     ( IDABS .LT. 100  .AND.  ID .NE. 20 ) THEN
        WI=0.							        WI=0.
      ELSEIF ( ID .EQ. 20 ) THEN				      ELSEIF ( ID .EQ. 20 ) THEN
        WI=.197/2.675E13					        WI=.197/2.675E13
      ELSEIF ( IDABS .LT. 100000000 ) THEN			      ELSEIF ( IDABS .LT. 100000000 ) THEN
        IX=IDABS/10						        IX=IDABS/10
        IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) THEN		        IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) THEN
          CALL UTSTOP('IDTAU: IX OUT OF RANGE.               	          CALL UTSTOP('IDTAU: IX OUT OF RANGE.               
        ENDIF							        ENDIF
        II=INDX(IX)						        II=INDX(IX)
        JJ=MOD(IDABS,10)+2					        JJ=MOD(IDABS,10)+2
        DO 75 IMX=1,MXMX					        DO 75 IMX=1,MXMX
          DO 76 IMA=2,MXMA					          DO 76 IMA=2,MXMA
            IF ( IDABS .EQ. IDMX(IMA,IMX) ) JJ=IMA		            IF ( IDABS .EQ. IDMX(IMA,IMX) ) JJ=IMA
76        CONTINUE						76        CONTINUE
75      CONTINUE						75      CONTINUE
        IF ( II.LT.1 .OR. II.GT.MXRE .OR. JJ.LT.1 .OR. JJ.GT.	        IF ( II.LT.1 .OR. II.GT.MXRE .OR. JJ.LT.1 .OR. JJ.GT.
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'ID,II,JJ:',ID,'   ',II,JJ		          WRITE(IFCH,*)'ID,II,JJ:',ID,'   ',II,JJ
          CALL UTSTOP('IDTAU: II OR JJ OUT OF RANGE          	          CALL UTSTOP('IDTAU: II OR JJ OUT OF RANGE          
        ENDIF							        ENDIF
        WI=REWI(II,JJ)						        WI=REWI(II,JJ)
      ELSE							      ELSE
        TAUZ=TAUNLL						        TAUZ=TAUNLL
C-C     TAUZ=MIN( 9./P5**2, TAUZ )				C-C     TAUZ=MIN( 9./P5**2, TAUZ )
C-C     TAUZ=MAX( .2, TAUZ )					C-C     TAUZ=MAX( .2, TAUZ )
        WI=.197/TAUZ						        WI=.197/TAUZ
      ENDIF							      ENDIF
      IF ( WI .EQ. 0. ) THEN					      IF ( WI .EQ. 0. ) THEN
        TAU=AINFIN						        TAU=AINFIN
        TAUGM=AINFIN						        TAUGM=AINFIN
        RETURN							        RETURN
      ELSE							      ELSE
        TAU=.197/WI						        TAU=.197/WI
        IF ( TAU .GE. AINFIN ) THEN				        IF ( TAU .GE. AINFIN ) THEN
          TAUGM = AINFIN					          TAUGM = AINFIN
          RETURN						          RETURN
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( P5 .EQ. 0. ) THEN					      IF ( P5 .EQ. 0. ) THEN
        GM=AINFIN						        GM=AINFIN
        TAUGM=AINFIN						        TAUGM=AINFIN
      ELSE							      ELSE
        GM=P4/P5						        GM=P4/P5
        IF ( GM .GE. AINFIN ) THEN				        IF ( GM .GE. AINFIN ) THEN
          TAUGM = AINFIN					          TAUGM = AINFIN
          RETURN						          RETURN
        ELSE							        ELSE
          TAUGM=TAU*GM						          TAUGM=TAU*GM
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      INTEGER FUNCTION IDTRA(IC,IER,IRES,IMIX)			      INTEGER FUNCTION IDTRA(IC,IER,IRES,IMIX)

C------------------------------------------------------------	C------------------------------------------------------------
C  TRANFORMS FROM WERNER-ID TO PAIGE-ID				C  TRANFORMS FROM WERNER-ID TO PAIGE-ID
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NIDT=44)					      PARAMETER (NIDT=44)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU

      INTEGER IC(2),ICM(2),IDT(3,NIDT)				      INTEGER IC(2),ICM(2),IDT(3,NIDT)
      DATA IDT/							      DATA IDT/
     * 100000,000000,   1   ,010000,000000,   2   ,001000,000	     * 100000,000000,   1   ,010000,000000,   2   ,001000,000
     *,000100,000000,   4					     *,000100,000000,   4
     *,200000,000000,1100   ,110000,000000,1200   ,020000,000	     *,200000,000000,1100   ,110000,000000,1200   ,020000,000
     *,101000,000000,1300   ,011000,000000,2300   ,002000,000	     *,101000,000000,1300   ,011000,000000,2300   ,002000,000
     *,100100,000000,1400   ,010100,000000,2400   ,001100,000	     *,100100,000000,1400   ,010100,000000,2400   ,001100,000
     *,000200,000000,4400					     *,000200,000000,4400
     *,100000,100000, 110   ,100000,010000, 120   ,010000,010	     *,100000,100000, 110   ,100000,010000, 120   ,010000,010
     *,100000,001000, 130   ,010000,001000, 230   ,001000,001	     *,100000,001000, 130   ,010000,001000, 230   ,001000,001
     *,100000,000100, 140   ,010000,000100, 240   ,001000,000	     *,100000,000100, 140   ,010000,000100, 240   ,001000,000
     *,000100,000100, 440					     *,000100,000100, 440
     *,300000,000000,1111   ,210000,000000,1120   ,120000,000	     *,300000,000000,1111   ,210000,000000,1120   ,120000,000
     *,030000,000000,2221   ,201000,000000,1130   ,111000,000	     *,030000,000000,2221   ,201000,000000,1130   ,111000,000
     *,021000,000000,2230   ,102000,000000,1330   ,012000,000	     *,021000,000000,2230   ,102000,000000,1330   ,012000,000
     *,003000,000000,3331   ,200100,000000,1140   ,110100,000	     *,003000,000000,3331   ,200100,000000,1140   ,110100,000
     *,020100,000000,2240   ,101100,000000,1340   ,011100,000	     *,020100,000000,2240   ,101100,000000,1340   ,011100,000
     *,002100,000000,3340   ,100200,000000,1440   ,010200,000	     *,002100,000000,3340   ,100200,000000,1440   ,010200,000
     *,001200,000000,3440   ,000300,000000,4441/		     *,001200,000000,3440   ,000300,000000,4441/
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( IC(1) .EQ. 0  .AND.  IC(2) .EQ. 0 ) THEN		      IF ( IC(1) .EQ. 0  .AND.  IC(2) .EQ. 0 ) THEN
        IDTRA=0							        IDTRA=0
        RETURN							        RETURN
      ENDIF							      ENDIF
      DO 1 I=1,NIDT						      DO 1 I=1,NIDT
        IF ( IC(1).EQ.IDT(1,I) .AND. IC(2).EQ.IDT(2,I) ) THEN	        IF ( IC(1).EQ.IDT(1,I) .AND. IC(2).EQ.IDT(2,I) ) THEN
          IDTRA=IDT(3,I)					          IDTRA=IDT(3,I)
          GOTO 2						          GOTO 2
        ENDIF							        ENDIF
        IF ( IC(2).EQ.IDT(1,I) .AND. IC(1).EQ.IDT(2,I) ) THEN	        IF ( IC(2).EQ.IDT(1,I) .AND. IC(1).EQ.IDT(2,I) ) THEN
          IDTRA=-IDT(3,I)					          IDTRA=-IDT(3,I)
          GOTO 2						          GOTO 2
        ENDIF							        ENDIF
 1    CONTINUE							 1    CONTINUE
      IDTRA=0							      IDTRA=0
 2    CONTINUE							 2    CONTINUE
      IF ( IDTRA .NE. 0 ) THEN					      IF ( IDTRA .NE. 0 ) THEN
        ISI=SIGN(1,IDTRA)					        ISI=SIGN(1,IDTRA)
        JSPIN=0							        JSPIN=0
        IF ( MOD(IDTRA,10).EQ.0 .AND. IRES.EQ.1 )		        IF ( MOD(IDTRA,10).EQ.0 .AND. IRES.EQ.1 )
     *                                     CALL IDSPIN(1,IC,I	     *                                     CALL IDSPIN(1,IC,I
      ELSE							      ELSE
        ISI=1							        ISI=1
        JSPIN=0							        JSPIN=0
      ENDIF							      ENDIF
      IF     ( IMIX .EQ. 3 ) THEN				      IF     ( IMIX .EQ. 3 ) THEN
        IF     ( IDTRA .EQ. 220 ) THEN				        IF     ( IDTRA .EQ. 220 ) THEN
          IDTRA=110						          IDTRA=110
        ELSEIF ( IDTRA .EQ. 330 ) THEN				        ELSEIF ( IDTRA .EQ. 330 ) THEN
          IDTRA=220						          IDTRA=220
        ENDIF							        ENDIF
      ELSEIF ( IMIX .EQ. 2 ) THEN				      ELSEIF ( IMIX .EQ. 2 ) THEN
        IF     ( IDTRA .EQ. 220 ) THEN				        IF     ( IDTRA .EQ. 220 ) THEN
          IDTRA=110						          IDTRA=110
        ELSEIF ( IDTRA .EQ. 330 ) THEN				        ELSEIF ( IDTRA .EQ. 330 ) THEN
          IDTRA=110						          IDTRA=110
        ENDIF							        ENDIF
      ELSEIF ( IMIX .EQ. 1 ) THEN				      ELSEIF ( IMIX .EQ. 1 ) THEN
        CALL IDMIX(IC,JSPIN,ICM,IDTRAM)				        CALL IDMIX(IC,JSPIN,ICM,IDTRAM)
        IF ( IDTRAM .NE. 0 ) IDTRA=IDTRAM			        IF ( IDTRAM .NE. 0 ) IDTRA=IDTRAM
        IF ( JSPIN .EQ. 0 ) THEN				        IF ( JSPIN .EQ. 0 ) THEN
          IF ( RANGEN() .LT. PISPN ) THEN			          IF ( RANGEN() .LT. PISPN ) THEN
            IF     ( ABS(IDTRA). EQ. 1230 ) THEN		            IF     ( ABS(IDTRA). EQ. 1230 ) THEN
              IDTRA=ISI*2130					              IDTRA=ISI*2130
            ELSEIF ( ABS(IDTRA) .EQ. 1240 ) THEN		            ELSEIF ( ABS(IDTRA) .EQ. 1240 ) THEN
              IDTRA=ISI*2140					              IDTRA=ISI*2140
            ELSEIF ( ABS(IDTRA) .EQ. 1340 ) THEN		            ELSEIF ( ABS(IDTRA) .EQ. 1340 ) THEN
              IDTRA=ISI*3140					              IDTRA=ISI*3140
            ELSEIF ( ABS(IDTRA) .EQ. 2340 ) THEN		            ELSEIF ( ABS(IDTRA) .EQ. 2340 ) THEN
              IDTRA=ISI*3240					              IDTRA=ISI*3240
            ENDIF						            ENDIF
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      IF ( IDTRA .NE. 0 ) IDTRA=IDTRA+JSPIN*ISI			      IF ( IDTRA .NE. 0 ) IDTRA=IDTRA+JSPIN*ISI
      IF ( IDTRA .NE. 0 ) RETURN				      IF ( IDTRA .NE. 0 ) RETURN
      IF ( IER .NE. 1 ) RETURN					      IF ( IER .NE. 1 ) RETURN
      JERR=JERR+1						      JERR=JERR+1
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      WRITE(IFCH,*)'***** ERROR IN IDTRA: UNKNOWN CODE'		      WRITE(IFCH,*)'***** ERROR IN IDTRA: UNKNOWN CODE'
      WRITE(IFCH,*)'IC = ',IC					      WRITE(IFCH,*)'IC = ',IC
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      INTEGER FUNCTION IDTRAI(NUM,ID,IER)			      INTEGER FUNCTION IDTRAI(NUM,ID,IER)

C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NIDT=44)					      PARAMETER (NIDT=44)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      INTEGER IDT(3,NIDT)					      INTEGER IDT(3,NIDT)

      DATA IDT/							      DATA IDT/
     * 100000,000000,   1   ,010000,000000,   2   ,001000,000	     * 100000,000000,   1   ,010000,000000,   2   ,001000,000
     *,000100,000000,   4					     *,000100,000000,   4
     *,200000,000000,1100   ,110000,000000,1200   ,020000,000	     *,200000,000000,1100   ,110000,000000,1200   ,020000,000
     *,101000,000000,1300   ,011000,000000,2300   ,002000,000	     *,101000,000000,1300   ,011000,000000,2300   ,002000,000
     *,100100,000000,1400   ,010100,000000,2400   ,001100,000	     *,100100,000000,1400   ,010100,000000,2400   ,001100,000
     *,000200,000000,4400					     *,000200,000000,4400
     *,100000,100000, 110   ,100000,010000, 120   ,010000,010	     *,100000,100000, 110   ,100000,010000, 120   ,010000,010
     *,100000,001000, 130   ,010000,001000, 230   ,001000,001	     *,100000,001000, 130   ,010000,001000, 230   ,001000,001
     *,100000,000100, 140   ,010000,000100, 240   ,001000,000	     *,100000,000100, 140   ,010000,000100, 240   ,001000,000
     *,000100,000100, 440					     *,000100,000100, 440
     *,300000,000000,1111   ,210000,000000,1120   ,120000,000	     *,300000,000000,1111   ,210000,000000,1120   ,120000,000
     *,030000,000000,2221   ,201000,000000,1130   ,111000,000	     *,030000,000000,2221   ,201000,000000,1130   ,111000,000
     *,021000,000000,2230   ,102000,000000,1330   ,012000,000	     *,021000,000000,2230   ,102000,000000,1330   ,012000,000
     *,003000,000000,3331   ,200100,000000,1140   ,110100,000	     *,003000,000000,3331   ,200100,000000,1140   ,110100,000
     *,020100,000000,2240   ,101100,000000,1340   ,011100,000	     *,020100,000000,2240   ,101100,000000,1340   ,011100,000
     *,002100,000000,3340   ,100200,000000,1440   ,010200,000	     *,002100,000000,3340   ,100200,000000,1440   ,010200,000
     *,001200,000000,3440   ,000300,000000,4441/		     *,001200,000000,3440   ,000300,000000,4441/
C------------------------------------------------------------	C------------------------------------------------------------
      IDABS = ABS(ID)						      IDABS = ABS(ID)
      DO 1 I=1,NIDT						      DO 1 I=1,NIDT
        IF ( IDABS .EQ. IDT(3,I) ) THEN				        IF ( IDABS .EQ. IDT(3,I) ) THEN
          IF ( ID .LT. 0 ) THEN					          IF ( ID .LT. 0 ) THEN
            IDTRAI=IDT(3-NUM,I)					            IDTRAI=IDT(3-NUM,I)
          ELSE							          ELSE
            IDTRAI=IDT(NUM,I)					            IDTRAI=IDT(NUM,I)
          ENDIF							          ENDIF
          RETURN						          RETURN
        ENDIF							        ENDIF
1     CONTINUE							1     CONTINUE
      IDTRAI=0							      IDTRAI=0
      IF ( IER .NE. 1 ) RETURN					      IF ( IER .NE. 1 ) RETURN
      JERR=JERR+1						      JERR=JERR+1
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      WRITE(IFCH,*)'***** ERROR IN IDTRAI: UNKNOWN CODE'	      WRITE(IFCH,*)'***** ERROR IN IDTRAI: UNKNOWN CODE'
      WRITE(IFCH,*)'ID = ',ID					      WRITE(IFCH,*)'ID = ',ID
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDTRB(IB1,IB2,IB3,IB4,JC)			      SUBROUTINE IDTRB(IB1,IB2,IB3,IB4,JC)

C------------------------------------------------------------	C------------------------------------------------------------
C  ID TRANSFORMATION IB -> JC					C  ID TRANSFORMATION IB -> JC
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      INTEGER JC(NFLAV,2)					      INTEGER JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      JC(1,1)=IB1/10000						      JC(1,1)=IB1/10000
      JC(2,1)=IB2/10000						      JC(2,1)=IB2/10000
      JC(3,1)=IB3/10000						      JC(3,1)=IB3/10000
      JC(4,1)=IB4/10000						      JC(4,1)=IB4/10000
      JC(5,1)=0							      JC(5,1)=0
      JC(6,1)=0							      JC(6,1)=0
      JC(1,2)=MOD(IB1,10000)					      JC(1,2)=MOD(IB1,10000)
      JC(2,2)=MOD(IB2,10000)					      JC(2,2)=MOD(IB2,10000)
      JC(3,2)=MOD(IB3,10000)					      JC(3,2)=MOD(IB3,10000)
      JC(4,2)=MOD(IB4,10000)					      JC(4,2)=MOD(IB4,10000)
      JC(5,2)=0							      JC(5,2)=0
      JC(6,2)=0							      JC(6,2)=0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDTRBI(JC,IB1,IB2,IB3,IB4)			      SUBROUTINE IDTRBI(JC,IB1,IB2,IB3,IB4)

C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      INTEGER JC(NFLAV,2)					      INTEGER JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IB1=JC(1,1)*10000+JC(1,2)					      IB1=JC(1,1)*10000+JC(1,2)
      IB2=JC(2,1)*10000+JC(2,2)					      IB2=JC(2,1)*10000+JC(2,2)
      IB3=JC(3,1)*10000+JC(3,2)					      IB3=JC(3,1)*10000+JC(3,2)
      IB4=JC(4,1)*10000+JC(4,2)					      IB4=JC(4,1)*10000+JC(4,2)
      IB5=JC(5,1)*10000+JC(5,2)					      IB5=JC(5,1)*10000+JC(5,2)
      IB6=JC(6,1)*10000+JC(6,2)					      IB6=JC(6,1)*10000+JC(6,2)
      IF ( IB5 .NE. 0  .OR.  IB6 .NE. 0 ) THEN			      IF ( IB5 .NE. 0  .OR.  IB6 .NE. 0 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'***** ERROR IN IDTRBI: BOTTOM OR TOP QU	        WRITE(IFCH,*)'***** ERROR IN IDTRBI: BOTTOM OR TOP QU
        WRITE(IFCH,*)'JC:'					        WRITE(IFCH,*)'JC:'
        WRITE(IFCH,*)JC						        WRITE(IFCH,*)JC
        CALL UTSTOP('IDTRBI: BOTTOM OR TOP QUARKS            	        CALL UTSTOP('IDTRBI: BOTTOM OR TOP QUARKS            
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE IDTR4(ID,IC)					      SUBROUTINE IDTR4(ID,IC)

C------------------------------------------------------------	C------------------------------------------------------------
C  TRANSFORMS GENERALIZED PAIGE_ID -> WERNER_ID  (FOR < 4 FLV	C  TRANSFORMS GENERALIZED PAIGE_ID -> WERNER_ID  (FOR < 4 FLV
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      INTEGER IC(2)						      INTEGER IC(2)
C------------------------------------------------------------	C------------------------------------------------------------
      IDABS = ABS(ID)						      IDABS = ABS(ID)
      IF ( IDABS .LT. 100000000 ) THEN				      IF ( IDABS .LT. 100000000 ) THEN
        IX=IDABS/10						        IX=IDABS/10
        IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) GOTO 9999	        IF ( IX .LT. 1  .OR.  IX .GT. MXINDX ) GOTO 9999
        II=INDX(IX)						        II=INDX(IX)
        IF ( II .EQ. 0 ) GOTO 9998				        IF ( II .EQ. 0 ) GOTO 9998
        JJ=IDABS-10*IX + 2					        JJ=IDABS-10*IX + 2
        DO 28 IMX=1,MXMX					        DO 28 IMX=1,MXMX
          DO 27 IMA=2,MXMA					          DO 27 IMA=2,MXMA
            IF ( IDABS .EQ. IDMX(IMA,IMX) ) THEN		            IF ( IDABS .EQ. IDMX(IMA,IMX) ) THEN
              JJ=IMA						              JJ=IMA
              GOTO 29						              GOTO 29
            ENDIF						            ENDIF
27        CONTINUE						27        CONTINUE
28      CONTINUE						28      CONTINUE
29      IF ( ID .GT. 0 ) THEN					29      IF ( ID .GT. 0 ) THEN
          IC(1)=ICRE1(II,JJ)					          IC(1)=ICRE1(II,JJ)
          IC(2)=ICRE2(II,JJ)					          IC(2)=ICRE2(II,JJ)
        ELSE							        ELSE
          IC(2)=ICRE1(II,JJ)					          IC(2)=ICRE1(II,JJ)
          IC(1)=ICRE2(II,JJ)					          IC(1)=ICRE2(II,JJ)
        ENDIF							        ENDIF
        IF ( IC(1) .EQ. 100000  .AND.  IC(2) .EQ. 100000	        IF ( IC(1) .EQ. 100000  .AND.  IC(2) .EQ. 100000
     *                          .AND.  RANGEN() .LT. 0.5 ) TH	     *                          .AND.  RANGEN() .LT. 0.5 ) TH
          IC(1)=010000						          IC(1)=010000
          IC(2)=010000						          IC(2)=010000
        ENDIF							        ENDIF
      ELSEIF ( MOD(ID/100000000,10) .EQ. 8 ) THEN		      ELSEIF ( MOD(ID/100000000,10) .EQ. 8 ) THEN
        IC(1)=MOD(ID,100000000)/10000*100			        IC(1)=MOD(ID,100000000)/10000*100
        IC(2)=MOD(ID,10000)*100					        IC(2)=MOD(ID,10000)*100
      ELSE							      ELSE
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'***** ID: ',ID				        WRITE(IFCH,*)'***** ID: ',ID
        CALL UTSTOP('IDTR4: UNRECOGNIZED ID                  	        CALL UTSTOP('IDTR4: UNRECOGNIZED ID                  
      ENDIF							      ENDIF
      RETURN							      RETURN

9998  WRITE(IFCH,*)' '						9998  WRITE(IFCH,*)' '
      WRITE(IFCH,*)'ID: ',ID					      WRITE(IFCH,*)'ID: ',ID
      CALL UTSTOP('IDTR4: INDX=0.                          ')	      CALL UTSTOP('IDTR4: INDX=0.                          ')
      RETURN							      RETURN

9999  WRITE(IFCH,*)' '						9999  WRITE(IFCH,*)' '
      WRITE(IFCH,*)'ID: ',ID					      WRITE(IFCH,*)'ID: ',ID
      CALL UTSTOP('IDTR4: IX OUT OF RANGE.                 ')	      CALL UTSTOP('IDTR4: IX OUT OF RANGE.                 ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JAMBR1(NS,NSG,IRET)				      SUBROUTINE JAMBR1(NS,NSG,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  "AMOR" (KOCH+WERNER, 89)					C  "AMOR" (KOCH+WERNER, 89)
C  BREAKS STRING NS ACCORDING TO A-M MODEL.			C  BREAKS STRING NS ACCORDING TO A-M MODEL.
C  NS: POINTS TO THE CURRENT FRAGMENTING STRING.		C  NS: POINTS TO THE CURRENT FRAGMENTING STRING.
C  NSG: POINTS TO THE LAST PRODUCED SUBSTRING (SUCC INCREASED	C  NSG: POINTS TO THE LAST PRODUCED SUBSTRING (SUCC INCREASED
C      INPUT:							C      INPUT:
C  PSG(,NS): MOMENTUM OF STRING NS IN PP-CMS			C  PSG(,NS): MOMENTUM OF STRING NS IN PP-CMS
C  PJT(,2*NS-1),PJT(,2*NS): MOMENTUM OF END OF STRING NS IN P	C  PJT(,2*NS-1),PJT(,2*NS): MOMENTUM OF END OF STRING NS IN P
C      OUTPUT:							C      OUTPUT:
C  XORSG(,NSG): ORIGIN OF SUBSTRING NSG IN PP-CMS		C  XORSG(,NSG): ORIGIN OF SUBSTRING NSG IN PP-CMS
C  PJT(,2*NSG-1),PJT(,2*NSG): MOMENTUM OF END OF SUBSTRING NS	C  PJT(,2*NSG-1),PJT(,2*NSG): MOMENTUM OF END OF SUBSTRING NS
C  ICJT(,2*NSG-1),ICJT(,2*NSG): IC-CODE  OF END OF SUBSTRG NS	C  ICJT(,2*NSG-1),ICJT(,2*NSG): IC-CODE  OF END OF SUBSTRG NS
C  PSG(,NSG): MOMENTUM OF SUBSTRING NSG IN PP-CMS		C  PSG(,NSG): MOMENTUM OF SUBSTRING NSG IN PP-CMS
C  XBKPTL(,NPTLC-NPTL2): BREAKPOINT OF NS IN PP-CMS		C  XBKPTL(,NPTLC-NPTL2): BREAKPOINT OF NS IN PP-CMS
C  ISPTL(,NPTLC-NPTL2): 1 IF STRING NS BREAKS			C  ISPTL(,NPTLC-NPTL2): 1 IF STRING NS BREAKS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPC=500)					      PARAMETER (MXPC=500)
      PARAMETER (MXSG=500)					      PARAMETER (MXSG=500)
      PARAMETER (MXJT=2*MXSG)					      PARAMETER (MXJT=2*MXSG)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NPTF=129)					      PARAMETER (NPTF=129)
      COMMON /CDELRE/  DELRER					      COMMON /CDELRE/  DELRER
      COMMON /CJAMBR/  NPTLC,NPTL2				      COMMON /CJAMBR/  NPTLC,NPTL2
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      DOUBLE PRECISION XBKPTL					      DOUBLE PRECISION XBKPTL
      COMMON /CPC/     XBKPTL(2,MXPC),ISPTL(MXPC)		      COMMON /CPC/     XBKPTL(2,MXPC),ISPTL(MXPC)
      COMMON /CPTF/    FPTFS,FPTFSS,FPTFU,FPTFUS,FPTFUU		      COMMON /CPTF/    FPTFS,FPTFSS,FPTFU,FPTFUS,FPTFUU
     *                ,QPTFS(NPTF),QPTFSS(NPTF),QPTFU(NPTF),Q	     *                ,QPTFS(NPTF),QPTFSS(NPTF),QPTFU(NPTF),Q
     *                ,QPTFUU(NPTF),XPTF(NPTF)			     *                ,QPTFUU(NPTF),XPTF(NPTF)
      DOUBLE PRECISION PJT,PSG,ROTSG,XORSG			      DOUBLE PRECISION PJT,PSG,ROTSG,XORSG
      COMMON /CSG/     PJT(5,MXJT),PSG(5,MXSG),ROTSG(3,MXSG)	      COMMON /CSG/     PJT(5,MXJT),PSG(5,MXSG),ROTSG(3,MXSG)
     *                ,XORSG(4,MXSG)				     *                ,XORSG(4,MXSG)
     *                ,ICJT(2,MXJT),IORSG(MXSG),ISG(MXSG)	     *                ,ICJT(2,MXJT),IORSG(MXSG),ISG(MXSG)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS			      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS

      DOUBLE PRECISION DAUXI1,DAUXI2,ETA,EETA,ETAM,ETAP		      DOUBLE PRECISION DAUXI1,DAUXI2,ETA,EETA,ETAM,ETAP
     *                ,PM,PP,PT,PX,PY,P0M,P0P,XBK(4),XOR1(4),	     *                ,PM,PP,PT,PX,PY,P0M,P0P,XBK(4),XOR1(4),
      INTEGER          IC(2),ICM(2),ICMP(2),ICMS(2)		      INTEGER          IC(2),ICM(2),ICMP(2),ICMS(2)
     *                ,ICP(2),ICPM(2),ICPS(2),ICX(2),ICY(2)	     *                ,ICP(2),ICPM(2),ICPS(2),ICX(2),ICY(2)
     *                ,JC(NFLAV,2)				     *                ,JC(NFLAV,2)
     *                ,JCM(NFLAV,2),JCMP(NFLAV,2),JCMS(NFLAV,	     *                ,JCM(NFLAV,2),JCMP(NFLAV,2),JCMS(NFLAV,
     *                ,JCP(NFLAV,2),JCPM(NFLAV,2),JCPS(NFLAV,	     *                ,JCP(NFLAV,2),JCPM(NFLAV,2),JCPS(NFLAV,
     *                ,JCX(NFLAV,2),JCY(NFLAV,2)		     *                ,JCX(NFLAV,2),JCY(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      NCNT3=0							      NCNT3=0
      NSG0=NSG							      NSG0=NSG
9993  NSG=NSG0							9993  NSG=NSG0

      IRET=0							      IRET=0
      ICP(1)=ICJT(1,2*NS-1)					      ICP(1)=ICJT(1,2*NS-1)
      ICP(2)=ICJT(2,2*NS-1)					      ICP(2)=ICJT(2,2*NS-1)
      ICM(1)=ICJT(1,2*NS)					      ICM(1)=ICJT(1,2*NS)
      ICM(2)=ICJT(2,2*NS)					      ICM(2)=ICJT(2,2*NS)
      CALL IDDECO(ICP,JCP)					      CALL IDDECO(ICP,JCP)
      CALL IDDECO(ICM,JCM)					      CALL IDDECO(ICM,JCM)
      NP=0							      NP=0
      DO 7 NF=1,NFLAV						      DO 7 NF=1,NFLAV
        JC(NF,1)=JCP(NF,1)+JCM(NF,1)				        JC(NF,1)=JCP(NF,1)+JCM(NF,1)
        JC(NF,2)=JCP(NF,2)+JCM(NF,2)				        JC(NF,2)=JCP(NF,2)+JCM(NF,2)
        NP=NP+JCP(NF,1)-JCP(NF,2)				        NP=NP+JCP(NF,1)-JCP(NF,2)
7     CONTINUE							7     CONTINUE
      CALL IDENCO(JC,IC,IRETEN)					      CALL IDENCO(JC,IC,IRETEN)
      ID=IDTRA(IC,0,0,3)					      ID=IDTRA(IC,0,0,3)
      AMMS=UTAMNX(JCP,JCM)					      AMMS=UTAMNX(JCP,JCM)
      AM=PSG(5,NS)						      AM=PSG(5,NS)

C  SPLIT STRING							C  SPLIT STRING
C  ------------							C  ------------
      J1 = 2*NS							      J1 = 2*NS
      J2 = J1-1							      J2 = J1-1
      DAUXI1= PJT(4,J1)+PJT(4,J2)				      DAUXI1= PJT(4,J1)+PJT(4,J2)
      DAUXI2= PJT(3,J1)+PJT(3,J2)				      DAUXI2= PJT(3,J1)+PJT(3,J2)
      P0P = DAUXI1 + DAUXI2					      P0P = DAUXI1 + DAUXI2
      P0M = DAUXI1 - DAUXI2					      P0M = DAUXI1 - DAUXI2
9994  NCNT3=NCNT3+1						9994  NCNT3=NCNT3+1
      IF ( NCNT3 .GT. 100 ) THEN				      IF ( NCNT3 .GT. 100 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JAMBR1')					          CALL UTMSG('JAMBR1')
          WRITE(IFCH,*)'*****  SPLIT KINEM NOT POSSIBLE.'	          WRITE(IFCH,*)'*****  SPLIT KINEM NOT POSSIBLE.'
          WRITE(IFCH,112)					          WRITE(IFCH,112)
     *     (ICJT(J,2*NS-1),J=1,2),(ICJT(J,2*NS),J=1,2),PSG(5,	     *     (ICJT(J,2*NS-1),J=1,2),(ICJT(J,2*NS),J=1,2),PSG(5,
112       FORMAT(1X,2I8,4X,2I8,4X,F7.2)				112       FORMAT(1X,2I8,4X,2I8,4X,F7.2)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( NS .EQ. 1 ) THEN					        IF ( NS .EQ. 1 ) THEN
          IRET=9999						          IRET=9999
          RETURN						          RETURN
        ENDIF							        ENDIF
        IRET=9996						        IRET=9996
        RETURN							        RETURN
      ENDIF							      ENDIF
      DO 17 NF=1,NFLAV						      DO 17 NF=1,NFLAV
        JCPM(NF,1)=0						        JCPM(NF,1)=0
        JCPM(NF,2)=0						        JCPM(NF,2)=0
        JCMP(NF,1)=0						        JCMP(NF,1)=0
        JCMP(NF,2)=0						        JCMP(NF,2)=0
17    CONTINUE							17    CONTINUE

C  DETERMINE FLAVOUR						C  DETERMINE FLAVOUR
C  -----------------						C  -----------------
      NQU=0							      NQU=0
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,*)'ORDINARY STRING FRAGMENTATION'		        WRITE(IFCH,*)'ORDINARY STRING FRAGMENTATION'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      IF ( RANGEN() .LE. PDIQUA ) THEN				      IF ( RANGEN() .LE. PDIQUA ) THEN
        NQU=2							        NQU=2
      ELSE							      ELSE
        NQU=1							        NQU=1
      ENDIF							      ENDIF
      IF     ( MOD(NP+NQU,3) .EQ. 0 ) THEN			      IF     ( MOD(NP+NQU,3) .EQ. 0 ) THEN
        II=1							        II=1
      ELSEIF ( MOD(NP-NQU,3) .EQ. 0 ) THEN			      ELSEIF ( MOD(NP-NQU,3) .EQ. 0 ) THEN
        II=2							        II=2
      ELSE							      ELSE
        CALL UTSTOP('JAMBR1: NO SINGLET CONSTRUCTION POSSIBLE	        CALL UTSTOP('JAMBR1: NO SINGLET CONSTRUCTION POSSIBLE
      ENDIF							      ENDIF
      IFLTT=0							      IFLTT=0
      DO 8 N=1,NQU						      DO 8 N=1,NQU
        IFL=INT(RANGEN()/PUD)+1					        IFL=INT(RANGEN()/PUD)+1
        IFLTT=IFLTT*10+(IFL+1)/2				        IFLTT=IFLTT*10+(IFL+1)/2
        JCPM(IFL,II)=JCPM(IFL,II)+1				        JCPM(IFL,II)=JCPM(IFL,II)+1
        JCMP(IFL,3-II)=JCMP(IFL,3-II)+1				        JCMP(IFL,3-II)=JCMP(IFL,3-II)+1
8     CONTINUE							8     CONTINUE
      CALL IDENCO(JCPM,ICPM,IRETEN)				      CALL IDENCO(JCPM,ICPM,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('JAMBR1: IDENCO(JCPM... RET.CODE=1       	        CALL UTSTOP('JAMBR1: IDENCO(JCPM... RET.CODE=1       
      ENDIF							      ENDIF
      CALL IDENCO(JCMP,ICMP,IRETEN)				      CALL IDENCO(JCMP,ICMP,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('JAMBR1: IDENCO(JCMP... RET.CODE=1       	        CALL UTSTOP('JAMBR1: IDENCO(JCMP... RET.CODE=1       
      ENDIF							      ENDIF
      DO 25 NF=1,NFLAV						      DO 25 NF=1,NFLAV
        JCPS(NF,1)=JCP(NF,1)+JCPM(NF,1)				        JCPS(NF,1)=JCP(NF,1)+JCPM(NF,1)
        JCPS(NF,2)=JCP(NF,2)+JCPM(NF,2)				        JCPS(NF,2)=JCP(NF,2)+JCPM(NF,2)
        JCMS(NF,1)=JCM(NF,1)+JCMP(NF,1)				        JCMS(NF,1)=JCM(NF,1)+JCMP(NF,1)
        JCMS(NF,2)=JCM(NF,2)+JCMP(NF,2)				        JCMS(NF,2)=JCM(NF,2)+JCMP(NF,2)
25    CONTINUE							25    CONTINUE
      CALL IDENCO(JCPS,ICPS,IRETEN)				      CALL IDENCO(JCPS,ICPS,IRETEN)
      CALL IDENCO(JCMS,ICMS,IRETEN)				      CALL IDENCO(JCMS,ICMS,IRETEN)
      CALL IDCOMK(ICPS)						      CALL IDCOMK(ICPS)
      CALL IDCOMK(ICMS)						      CALL IDCOMK(ICMS)

C  CALCULATE P+,P-,PT OF STRING BREAKING			C  CALCULATE P+,P-,PT OF STRING BREAKING
C  -------------------------------------			C  -------------------------------------
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,109)ICM(1),ICMP(1),ICPM(1),ICP(1)		        WRITE(IFCH,109)ICM(1),ICMP(1),ICPM(1),ICP(1)
     *     ,ICM(2),ICMP(2),ICPM(2),ICP(2)			     *     ,ICM(2),ICMP(2),ICPM(2),ICP(2)
109     FORMAT(1X,'FLAVORS:',2(I11,I7)/9X,2(I11,I7)/)		109     FORMAT(1X,'FLAVORS:',2(I11,I7)/9X,2(I11,I7)/)
        WRITE(IFCH,*)'IFLTT:',IFLTT				        WRITE(IFCH,*)'IFLTT:',IFLTT
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      IDP=IDTRA(ICPS,0,0,3)					      IDP=IDTRA(ICPS,0,0,3)
      IDM=IDTRA(ICMS,0,0,3)					      IDM=IDTRA(ICMS,0,0,3)
      AMMP=UTAMNY(JCP,JCPM)					      AMMP=UTAMNY(JCP,JCPM)
      AMMM=UTAMNY(JCM,JCMP)					      AMMM=UTAMNY(JCM,JCMP)
      R = RANGEN()						      R = RANGEN()
      IF     ( IFLTT .EQ .1 ) THEN				      IF     ( IFLTT .EQ .1 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFU ,R*QPTFU(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFU ,R*QPTFU(NPTF))
C##       WRITE(IFCH,*)'JAMBR1:PT(OLD)=',PT			C##       WRITE(IFCH,*)'JAMBR1:PT(OLD)=',PT
        ELSE							        ELSE
          RPT = R*FPTFU						          RPT = R*FPTFU
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(1.+RPT*2./AUXIL))			          PT=SQRT(AUXIL*LOG(1.+RPT*2./AUXIL))
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 2 ) THEN				      ELSEIF ( IFLTT .EQ. 2 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFS ,R*QPTFS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFS ,R*QPTFS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFS						          RPT = R*FPTFS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(SMAS**2/AUXIL)+RPT*2./AUXIL)-	          PT=SQRT(AUXIL*LOG(EXP(SMAS**2/AUXIL)+RPT*2./AUXIL)-
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 11 ) THEN				      ELSEIF ( IFLTT .EQ. 11 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFUU,R*QPTFUU(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFUU,R*QPTFUU(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFUU					          RPT = R*FPTFUU
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(UUMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(UUMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 12  .OR.  IFLTT .EQ. 21 ) THEN	      ELSEIF ( IFLTT .EQ. 12  .OR.  IFLTT .EQ. 21 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFUS,R*QPTFUS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFUS,R*QPTFUS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFUS					          RPT = R*FPTFUS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(USMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(USMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 22 ) THEN				      ELSEIF ( IFLTT .EQ. 22 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFSS,R*QPTFSS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFSS,R*QPTFSS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFSS					          RPT = R*FPTFSS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(SSMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(SSMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      LO=1							      LO=1
      GOTO 48							      GOTO 48
47    LO=LO+1							47    LO=LO+1
      PT=RANGEN()*PT						      PT=RANGEN()*PT
48    CONTINUE							48    CONTINUE
      PHI=2.D0*PI*RANGEN()					      PHI=2.D0*PI*RANGEN()
      PX=PT*COS(PHI)						      PX=PT*COS(PHI)
      PY=PT*SIN(PHI)						      PY=PT*SIN(PHI)
      TMMP=    (PT**2+AMMP**2)					      TMMP=    (PT**2+AMMP**2)
      TMMM=    (PT**2+AMMM**2)					      TMMM=    (PT**2+AMMM**2)
      AREA=-LOG(RANGEN())/PAREA					      AREA=-LOG(RANGEN())/PAREA
      AREART = SQRT(AREA)					      AREART = SQRT(AREA)
      ETAM=LOG((TMMM   +AREA)/(AREART    *P0M))			      ETAM=LOG((TMMM   +AREA)/(AREART    *P0M))
      ETAP=LOG((AREART    *P0P)/(TMMP   +AREA))			      ETAP=LOG((AREART    *P0P)/(TMMP   +AREA))
      IF ( ETAM .GT. ETAP ) THEN				      IF ( ETAM .GT. ETAP ) THEN
        IF ( LO .LT. 5 ) GOTO 47				        IF ( LO .LT. 5 ) GOTO 47
        GOTO 9994						        GOTO 9994
      ENDIF							      ENDIF
      ETA=ETAM+RANGEN()*(ETAP-ETAM)				      ETA=ETAM+RANGEN()*(ETAP-ETAM)
      AMP=SQRT(P0P*AREART    *EXP(-ETA)-AREA-PT**2)		      AMP=SQRT(P0P*AREART    *EXP(-ETA)-AREA-PT**2)
      AMM=SQRT(P0M*AREART    *EXP( ETA)-AREA-PT**2)		      AMM=SQRT(P0M*AREART    *EXP( ETA)-AREA-PT**2)
      CALL IDRES(IDP,AMP,IDPR,IADJP)				      CALL IDRES(IDP,AMP,IDPR,IADJP)
      CALL IDRES(IDM,AMM,IDMR,IADJM)				      CALL IDRES(IDM,AMM,IDMR,IADJM)
      R=RANGEN()						      R=RANGEN()
      IF ( IDPR .EQ. 110  .AND. R .LT. 0.5 ) THEN		      IF ( IDPR .EQ. 110  .AND. R .LT. 0.5 ) THEN
        IDP=220							        IDP=220
        AMP=.549						        AMP=.549
        IF ( R .LT. 0.6666667 ) AMP=.958			        IF ( R .LT. 0.6666667 ) AMP=.958
        CALL IDRES(IDP,AMP,IDPR,IADJP)				        CALL IDRES(IDP,AMP,IDPR,IADJP)
        IADJP=1							        IADJP=1
      ENDIF							      ENDIF
      R=RANGEN()						      R=RANGEN()
      IF ( IDMR .EQ. 110 .AND. R .LT. 0.5 ) THEN		      IF ( IDMR .EQ. 110 .AND. R .LT. 0.5 ) THEN
        IDM=220							        IDM=220
        AMM=.549						        AMM=.549
        IF ( R .LT. 0.6666667 ) AMM=.958			        IF ( R .LT. 0.6666667 ) AMM=.958
        CALL IDRES(IDM,AMM,IDMR,IADJM)				        CALL IDRES(IDM,AMM,IDMR,IADJM)
        IADJM=1							        IADJM=1
      ENDIF							      ENDIF
      TMP2=(PT**2+AMP**2)					      TMP2=(PT**2+AMP**2)
      TMM2=(PT**2+AMM**2)					      TMM2=(PT**2+AMM**2)
      IF ( IADJP .EQ. 1  .AND.  IADJM .NE. 1 ) THEN		      IF ( IADJP .EQ. 1  .AND.  IADJM .NE. 1 ) THEN
        ETA=LOG((AREART  *P0P)/(TMP2+AREA))			        ETA=LOG((AREART  *P0P)/(TMP2+AREA))
        IF ( ETA .LT. ETAM ) GOTO 9994				        IF ( ETA .LT. ETAM ) GOTO 9994
        AMM=SQRT(P0M*AREART  *EXP(ETA)-AREA-PT**2)		        AMM=SQRT(P0M*AREART  *EXP(ETA)-AREA-PT**2)
        CALL IDRES(IDM,AMM,IDMR,IADJM)				        CALL IDRES(IDM,AMM,IDMR,IADJM)
        TMM2=(PT**2+AMM**2)					        TMM2=(PT**2+AMM**2)
      ENDIF							      ENDIF
      IF ( IADJP .NE. 1  .AND.  IADJM .EQ. 1 ) THEN		      IF ( IADJP .NE. 1  .AND.  IADJM .EQ. 1 ) THEN
        ETA=LOG((TMM2+AREA)/(AREART  *P0M))			        ETA=LOG((TMM2+AREA)/(AREART  *P0M))
        IF ( ETA .GT. ETAP ) GOTO 9994				        IF ( ETA .GT. ETAP ) GOTO 9994
        AMP=SQRT(P0P*AREART   *EXP(-ETA)-AREA-PT**2)		        AMP=SQRT(P0P*AREART   *EXP(-ETA)-AREA-PT**2)
        CALL IDRES(IDP,AMP,IDPR,IADJP)				        CALL IDRES(IDP,AMP,IDPR,IADJP)
        TMP2=(PT**2+AMP**2)					        TMP2=(PT**2+AMP**2)
      ENDIF							      ENDIF
      IF ( IADJP .EQ. 1  .AND.  IADJM .EQ. 1 ) THEN		      IF ( IADJP .EQ. 1  .AND.  IADJM .EQ. 1 ) THEN
        TM=(P0P*P0M-TMM2-TMP2)*0.5				        TM=(P0P*P0M-TMM2-TMP2)*0.5
        IF ( TM .LT. 0. ) GOTO 9994				        IF ( TM .LT. 0. ) GOTO 9994
        IF ( TM**2-TMP2*TMM2 .LT. 0. ) GOTO 9994		        IF ( TM**2-TMP2*TMM2 .LT. 0. ) GOTO 9994
        AREA=TM-SQRT(TM**2  -TMP2*TMM2)				        AREA=TM-SQRT(TM**2  -TMP2*TMM2)
        AREART = SQRT(AREA)					        AREART = SQRT(AREA)
        EETA=P0P*AREART/(TMP2+AREA)				        EETA=P0P*AREART/(TMP2+AREA)
        IF ( EETA .LE. 0.D0 ) GOTO 9994				        IF ( EETA .LE. 0.D0 ) GOTO 9994
        ETA=LOG(EETA)						        ETA=LOG(EETA)
      ENDIF							      ENDIF

      PP=AREART*EXP(ETA)					      PP=AREART*EXP(ETA)
      PM=AREART*EXP(-ETA)					      PM=AREART*EXP(-ETA)
      IF ( P0P-PP-PT**2/PM .LT. 0.D0   .OR.			      IF ( P0P-PP-PT**2/PM .LT. 0.D0   .OR.
     *     P0M-PM-PT**2/PP .LT. 0.D0 ) THEN			     *     P0M-PM-PT**2/PP .LT. 0.D0 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JAMBR1')					          CALL UTMSG('JAMBR1')
          WRITE(IFCH,*)'*****  NEGATIVE JET ENERGY. SPLIT AGA	          WRITE(IFCH,*)'*****  NEGATIVE JET ENERGY. SPLIT AGA
          IF ( P0P-PP-PT**2/PM .LT. 0.D0 )			          IF ( P0P-PP-PT**2/PM .LT. 0.D0 )
     *      WRITE(IFCH,*)'P0P: ',P0P,'   PP+PT**2/PM: ',PP+PT	     *      WRITE(IFCH,*)'P0P: ',P0P,'   PP+PT**2/PM: ',PP+PT
          IF ( P0M-PM-PT**2/PP .LT. 0.D0 )			          IF ( P0M-PM-PT**2/PP .LT. 0.D0 )
     *      WRITE(IFCH,*)'P0M: ',P0M,'   PM+PT**2/PP: ',PM+PT	     *      WRITE(IFCH,*)'P0M: ',P0M,'   PM+PT**2/PP: ',PM+PT
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 9994						        GOTO 9994
      ENDIF							      ENDIF

C  DETERMINE BREAK PNT AND NEW ORIGINS				C  DETERMINE BREAK PNT AND NEW ORIGINS
C  -----------------------------------				C  -----------------------------------
      XOR1(1)=0.D0						      XOR1(1)=0.D0
      XOR1(2)=0.D0						      XOR1(2)=0.D0
      XOR1(3)=PP*0.5D0/TENSN					      XOR1(3)=PP*0.5D0/TENSN
      XOR1(4)=PP*0.5D0/TENSN					      XOR1(4)=PP*0.5D0/TENSN
      IF ( ISH .GE. 93 ) WRITE(IFCH,118)XOR1			      IF ( ISH .GE. 93 ) WRITE(IFCH,118)XOR1
118   FORMAT(' NEW ORIGIN +: ',13X,4F7.2)			118   FORMAT(' NEW ORIGIN +: ',13X,4F7.2)
      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *             ,XOR1(1),XOR1(2),XOR1(3))			     *             ,XOR1(1),XOR1(2),XOR1(3))
      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),	      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),
     *             ,XOR1(1),XOR1(2),XOR1(3),XOR1(4))		     *             ,XOR1(1),XOR1(2),XOR1(3),XOR1(4))
      XOR1(1)=XOR1(1)+XORSG(1,NS)				      XOR1(1)=XOR1(1)+XORSG(1,NS)
      XOR1(2)=XOR1(2)+XORSG(2,NS)				      XOR1(2)=XOR1(2)+XORSG(2,NS)
      XOR1(3)=XOR1(3)+XORSG(3,NS)				      XOR1(3)=XOR1(3)+XORSG(3,NS)
      XOR1(4)=XOR1(4)+XORSG(4,NS)				      XOR1(4)=XOR1(4)+XORSG(4,NS)
      IF ( ISH .GE. 93 ) WRITE(IFCH,117)XOR1			      IF ( ISH .GE. 93 ) WRITE(IFCH,117)XOR1
      XBK(1)=0.D0						      XBK(1)=0.D0
      XBK(2)=0.D0						      XBK(2)=0.D0
      XBK(3)=0.5D0/TENSN*(PP-PM)				      XBK(3)=0.5D0/TENSN*(PP-PM)
      XBK(4)=0.5D0/TENSN*(PP+PM)				      XBK(4)=0.5D0/TENSN*(PP+PM)
      IF ( ISH .GE. 93 ) WRITE(IFCH,116)XBK			      IF ( ISH .GE. 93 ) WRITE(IFCH,116)XBK
116   FORMAT(' BREAKING PNT: ',13X,4F7.2)			116   FORMAT(' BREAKING PNT: ',13X,4F7.2)
      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *             ,XBK(1),XBK(2),XBK(3))			     *             ,XBK(1),XBK(2),XBK(3))
      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),	      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),
     *             ,XBK(1),XBK(2),XBK(3),XBK(4))		     *             ,XBK(1),XBK(2),XBK(3),XBK(4))
      XBK(1)=XBK(1)+XORSG(1,NS)					      XBK(1)=XBK(1)+XORSG(1,NS)
      XBK(2)=XBK(2)+XORSG(2,NS)					      XBK(2)=XBK(2)+XORSG(2,NS)
      XBK(3)=XBK(3)+XORSG(3,NS)					      XBK(3)=XBK(3)+XORSG(3,NS)
      XBK(4)=XBK(4)+XORSG(4,NS)					      XBK(4)=XBK(4)+XORSG(4,NS)
      IF ( ISH .GE. 93 ) WRITE(IFCH,117)XBK			      IF ( ISH .GE. 93 ) WRITE(IFCH,117)XBK
117   FORMAT(28X,4F7.2/)					117   FORMAT(28X,4F7.2/)
      XOR2(1)=0.D0						      XOR2(1)=0.D0
      XOR2(2)=0.D0						      XOR2(2)=0.D0
      XOR2(3)=-PM*0.5D0/TENSN					      XOR2(3)=-PM*0.5D0/TENSN
      XOR2(4)= PM*0.5D0/TENSN					      XOR2(4)= PM*0.5D0/TENSN
      IF ( ISH .GE. 93 ) WRITE(IFCH,119)XOR2			      IF ( ISH .GE. 93 ) WRITE(IFCH,119)XOR2
119   FORMAT(' NEW ORIGIN -: ',13X,4F7.2)			119   FORMAT(' NEW ORIGIN -: ',13X,4F7.2)
      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *              ,XOR2(1),XOR2(2),XOR2(3))			     *              ,XOR2(1),XOR2(2),XOR2(3))
      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),	      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),
     *              ,XOR2(1),XOR2(2),XOR2(3),XOR2(4))		     *              ,XOR2(1),XOR2(2),XOR2(3),XOR2(4))
      XOR2(1)=XOR2(1)+XORSG(1,NS)				      XOR2(1)=XOR2(1)+XORSG(1,NS)
      XOR2(2)=XOR2(2)+XORSG(2,NS)				      XOR2(2)=XOR2(2)+XORSG(2,NS)
      XOR2(3)=XOR2(3)+XORSG(3,NS)				      XOR2(3)=XOR2(3)+XORSG(3,NS)
      XOR2(4)=XOR2(4)+XORSG(4,NS)				      XOR2(4)=XOR2(4)+XORSG(4,NS)
      IF ( ISH .GE. 93 ) WRITE(IFCH,117)XOR2			      IF ( ISH .GE. 93 ) WRITE(IFCH,117)XOR2

C  STORE THE TWO SUBSTRINGS					C  STORE THE TWO SUBSTRINGS
C  ------------------------					C  ------------------------
      NSGB=NSG							      NSGB=NSG
      DO 9998 M=1,2						      DO 9998 M=1,2
        NSG=NSG+1						        NSG=NSG+1
        IF ( NSG .GT. MXSG ) THEN				        IF ( NSG .GT. MXSG ) THEN
          CALL UTSTOP('JAMBR1: NSG>MXSG                      	          CALL UTSTOP('JAMBR1: NSG>MXSG                      
        ENDIF							        ENDIF
        ISG(NSG)=NPTLC						        ISG(NSG)=NPTLC
        IF ( M .EQ. 1 ) THEN					        IF ( M .EQ. 1 ) THEN
          XORSG(1,NSG)=XOR1(1)					          XORSG(1,NSG)=XOR1(1)
          XORSG(2,NSG)=XOR1(2)					          XORSG(2,NSG)=XOR1(2)
          XORSG(3,NSG)=XOR1(3)					          XORSG(3,NSG)=XOR1(3)
          XORSG(4,NSG)=XOR1(4)					          XORSG(4,NSG)=XOR1(4)
          PJT(1,2*NSG-1)=0.D0					          PJT(1,2*NSG-1)=0.D0
          PJT(2,2*NSG-1)=0.D0					          PJT(2,2*NSG-1)=0.D0
          PJT(3,2*NSG-1)=(P0P-PP-PT**2/PM)*0.5D0		          PJT(3,2*NSG-1)=(P0P-PP-PT**2/PM)*0.5D0
          PJT(4,2*NSG-1)=(P0P-PP-PT**2/PM)*0.5D0		          PJT(4,2*NSG-1)=(P0P-PP-PT**2/PM)*0.5D0
          PJT(5,2*NSG-1)=0.D0					          PJT(5,2*NSG-1)=0.D0
          ICJT(1,2*NSG-1)=ICJT(1,2*NS-1)			          ICJT(1,2*NSG-1)=ICJT(1,2*NS-1)
          ICJT(2,2*NSG-1)=ICJT(2,2*NS-1)			          ICJT(2,2*NSG-1)=ICJT(2,2*NS-1)
          PJT(1,2*NSG)=PX					          PJT(1,2*NSG)=PX
          PJT(2,2*NSG)=PY					          PJT(2,2*NSG)=PY
          PJT(3,2*NSG)=(PT**2/PM-PM)*0.5D0			          PJT(3,2*NSG)=(PT**2/PM-PM)*0.5D0
          PJT(4,2*NSG)=(PT**2/PM+PM)*0.5D0			          PJT(4,2*NSG)=(PT**2/PM+PM)*0.5D0
          PJT(5,2*NSG)=0.D0					          PJT(5,2*NSG)=0.D0
          ICJT(1,2*NSG)=ICPM(1)					          ICJT(1,2*NSG)=ICPM(1)
          ICJT(2,2*NSG)=ICPM(2)					          ICJT(2,2*NSG)=ICPM(2)
          DO 11 NF=1,NFLAV					          DO 11 NF=1,NFLAV
            JC(NF,1)=JCPS(NF,1)					            JC(NF,1)=JCPS(NF,1)
            JC(NF,2)=JCPS(NF,2)					            JC(NF,2)=JCPS(NF,2)
11        CONTINUE						11        CONTINUE
        ELSE							        ELSE
          XORSG(1,NSG)=XOR2(1)					          XORSG(1,NSG)=XOR2(1)
          XORSG(2,NSG)=XOR2(2)					          XORSG(2,NSG)=XOR2(2)
          XORSG(3,NSG)=XOR2(3)					          XORSG(3,NSG)=XOR2(3)
          XORSG(4,NSG)=XOR2(4)					          XORSG(4,NSG)=XOR2(4)
          PJT(1,2*NSG-1)=-PX					          PJT(1,2*NSG-1)=-PX
          PJT(2,2*NSG-1)=-PY					          PJT(2,2*NSG-1)=-PY
          PJT(3,2*NSG-1)=(PP-PT**2/PP)*0.5D0			          PJT(3,2*NSG-1)=(PP-PT**2/PP)*0.5D0
          PJT(4,2*NSG-1)=(PP+PT**2/PP)*0.5D0			          PJT(4,2*NSG-1)=(PP+PT**2/PP)*0.5D0
          PJT(5,2*NSG-1)=0.D0					          PJT(5,2*NSG-1)=0.D0
          ICJT(1,2*NSG-1)=ICMP(1)				          ICJT(1,2*NSG-1)=ICMP(1)
          ICJT(2,2*NSG-1)=ICMP(2)				          ICJT(2,2*NSG-1)=ICMP(2)
          DO 12 NF=1,NFLAV					          DO 12 NF=1,NFLAV
            JC(NF,1)=JCMS(NF,1)					            JC(NF,1)=JCMS(NF,1)
            JC(NF,2)=JCMS(NF,2)					            JC(NF,2)=JCMS(NF,2)
12        CONTINUE						12        CONTINUE
          PJT(1,2*NSG)=0.D0					          PJT(1,2*NSG)=0.D0
          PJT(2,2*NSG)=0.D0					          PJT(2,2*NSG)=0.D0
          PJT(3,2*NSG)=-(P0M-PM-PT**2/PP)*0.5D0			          PJT(3,2*NSG)=-(P0M-PM-PT**2/PP)*0.5D0
          PJT(4,2*NSG)= (P0M-PM-PT**2/PP)*0.5D0			          PJT(4,2*NSG)= (P0M-PM-PT**2/PP)*0.5D0
          PJT(5,2*NSG)=0.D0					          PJT(5,2*NSG)=0.D0
          ICJT(1,2*NSG)=ICJT(1,2*NS)				          ICJT(1,2*NSG)=ICJT(1,2*NS)
          ICJT(2,2*NSG)=ICJT(2,2*NS)				          ICJT(2,2*NSG)=ICJT(2,2*NS)
        ENDIF							        ENDIF
        ICX(1)=ICJT(1,2*NSG-1)					        ICX(1)=ICJT(1,2*NSG-1)
        ICX(2)=ICJT(2,2*NSG-1)					        ICX(2)=ICJT(2,2*NSG-1)
        ICY(1)=ICJT(1,2*NSG)					        ICY(1)=ICJT(1,2*NSG)
        ICY(2)=ICJT(2,2*NSG)					        ICY(2)=ICJT(2,2*NSG)
        CALL IDDECO(ICX,JCX)					        CALL IDDECO(ICX,JCX)
        CALL IDDECO(ICY,JCY)					        CALL IDDECO(ICY,JCY)
        DO 28 N=1,NFLAV						        DO 28 N=1,NFLAV
          DO 29 I=1,2						          DO 29 I=1,2
            K=JCX(N,I)+JCY(N,I)-JC(N,I)				            K=JCX(N,I)+JCY(N,I)-JC(N,I)
            IF ( K .LE. 0 ) GOTO 28				            IF ( K .LE. 0 ) GOTO 28
            DO 19 L=1,K						            DO 19 L=1,K
              JX=JCX(N,I)					              JX=JCX(N,I)
              JY=JCY(N,I)					              JY=JCY(N,I)
              IF     ( JX .EQ. 0  .AND.  JY .GT. 0 ) THEN	              IF     ( JX .EQ. 0  .AND.  JY .GT. 0 ) THEN
                JCY(N,I)=JCY(N,I)-1				                JCY(N,I)=JCY(N,I)-1
              ELSEIF ( JX .GT. 0  .AND.  JY .EQ. 0 ) THEN	              ELSEIF ( JX .GT. 0  .AND.  JY .EQ. 0 ) THEN
                JCX(N,I)=JCX(N,I)-1				                JCX(N,I)=JCX(N,I)-1
              ELSEIF ( JX .GT. 0  .AND.  JY .GT. 0 ) THEN	              ELSEIF ( JX .GT. 0  .AND.  JY .GT. 0 ) THEN
                IF ( RANGEN() .LT. 0.5 ) THEN			                IF ( RANGEN() .LT. 0.5 ) THEN
                  JCX(N,I)=JCX(N,I)-1				                  JCX(N,I)=JCX(N,I)-1
                ELSE						                ELSE
                  JCY(N,I)=JCY(N,I)-1				                  JCY(N,I)=JCY(N,I)-1
                ENDIF						                ENDIF
              ELSE						              ELSE
                WRITE(IFCH,*)('*',LP=1,71)			                WRITE(IFCH,*)('*',LP=1,71)
                WRITE(IFCH,*)'*****  IC;  ',IC			                WRITE(IFCH,*)'*****  IC;  ',IC
                WRITE(IFCH,*)'*****  ICX: ',ICX			                WRITE(IFCH,*)'*****  ICX: ',ICX
                WRITE(IFCH,*)'*****  ICY: ',ICY			                WRITE(IFCH,*)'*****  ICY: ',ICY
                WRITE(IFCH,*)'*****  N,I,K,L: ',N,I,K,L		                WRITE(IFCH,*)'*****  N,I,K,L: ',N,I,K,L
                WRITE(IFCH,*)'*****  JX,JY: ',JX,JY		                WRITE(IFCH,*)'*****  JX,JY: ',JX,JY
                WRITE(IFCH,*)('*',LP=1,71)			                WRITE(IFCH,*)('*',LP=1,71)
                CALL UTSTOP('JAMBR1: ERROR DURING JET COMPACT	                CALL UTSTOP('JAMBR1: ERROR DURING JET COMPACT
              ENDIF						              ENDIF
19          CONTINUE						19          CONTINUE
29        CONTINUE						29        CONTINUE
28      CONTINUE						28      CONTINUE
        CALL IDENCO(JCX,ICX,IRETEN)				        CALL IDENCO(JCX,ICX,IRETEN)
        IF ( IRETEN .EQ. 1 ) THEN				        IF ( IRETEN .EQ. 1 ) THEN
          CALL UTSTOP('JAMBR1: IDENCO(JCX... RET.CODE=1      	          CALL UTSTOP('JAMBR1: IDENCO(JCX... RET.CODE=1      
        ENDIF							        ENDIF
        CALL IDENCO(JCY,ICY,IRETEN)				        CALL IDENCO(JCY,ICY,IRETEN)
        IF ( IRETEN .EQ. 1 ) THEN				        IF ( IRETEN .EQ. 1 ) THEN
          CALL UTSTOP('JAMBR1: IDENCO(JCY... RET.CODE=1      	          CALL UTSTOP('JAMBR1: IDENCO(JCY... RET.CODE=1      
        ENDIF							        ENDIF
        ICJT(1,2*NSG-1)=ICX(1)					        ICJT(1,2*NSG-1)=ICX(1)
        ICJT(2,2*NSG-1)=ICX(2)					        ICJT(2,2*NSG-1)=ICX(2)
        ICJT(1,2*NSG)  =ICY(1)					        ICJT(1,2*NSG)  =ICY(1)
        ICJT(2,2*NSG)  =ICY(2)					        ICJT(2,2*NSG)  =ICY(2)
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,108)NSG,NS					          WRITE(IFCH,108)NSG,NS
     *       ,(ICJT(J,2*NSG-1),J=1,2),(SNGL(PJT(J,2*NSG-1)),J	     *       ,(ICJT(J,2*NSG-1),J=1,2),(SNGL(PJT(J,2*NSG-1)),J
108       FORMAT(1X,I5,I4,I9,I7,1P,5E10.2)			108       FORMAT(1X,I5,I4,I9,I7,1P,5E10.2)
          WRITE(IFCH,108)NSG,NS					          WRITE(IFCH,108)NSG,NS
     *       ,(ICJT(J,2*NSG  ),J=1,2),(SNGL(PJT(J,2*NSG  )),J	     *       ,(ICJT(J,2*NSG  ),J=1,2),(SNGL(PJT(J,2*NSG  )),J
        ENDIF							        ENDIF
        PSG(1,NSG)=PJT(1,2*NSG-1)+PJT(1,2*NSG)			        PSG(1,NSG)=PJT(1,2*NSG-1)+PJT(1,2*NSG)
        PSG(2,NSG)=PJT(2,2*NSG-1)+PJT(2,2*NSG)			        PSG(2,NSG)=PJT(2,2*NSG-1)+PJT(2,2*NSG)
        PSG(3,NSG)=PJT(3,2*NSG-1)+PJT(3,2*NSG)			        PSG(3,NSG)=PJT(3,2*NSG-1)+PJT(3,2*NSG)
        PSG(4,NSG)=PJT(4,2*NSG-1)+PJT(4,2*NSG)			        PSG(4,NSG)=PJT(4,2*NSG-1)+PJT(4,2*NSG)
        PSG(5,NSG)=						        PSG(5,NSG)=
     *     SQRT(PSG(4,NSG)**2-PSG(3,NSG)**2-PSG(2,NSG)**2-PSG	     *     SQRT(PSG(4,NSG)**2-PSG(3,NSG)**2-PSG(2,NSG)**2-PSG
        IF ( ISH .GE. 93 ) WRITE(IFCH,110)NSG,NS,(PSG(J,NSG),	        IF ( ISH .GE. 93 ) WRITE(IFCH,110)NSG,NS,(PSG(J,NSG),
110     FORMAT(1X,I5,I4,16X,1P,5E10.2)				110     FORMAT(1X,I5,I4,16X,1P,5E10.2)
        CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	        CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *             ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG))		     *             ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG))
        CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS	        CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS
     *          ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG),PSG(4,NSG))	     *          ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG),PSG(4,NSG))
        IORSG(NSG)=NS						        IORSG(NSG)=NS
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,102)NSG,IORSG(NSG),(PSG(J,NSG),J=1,5)	          WRITE(IFCH,102)NSG,IORSG(NSG),(PSG(J,NSG),J=1,5)
102       FORMAT(1X,I5,I4,16X,1P,5E10.2)			102       FORMAT(1X,I5,I4,16X,1P,5E10.2)
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF

C-C   DO 56 I=1,2						C-C   DO 56 I=1,2
C-C     ICPZ(I)=ICJT(I,2*NSG-1)					C-C     ICPZ(I)=ICJT(I,2*NSG-1)
C-C56 ICMZ(I)=ICJT(I,2*NSG)					C-C56 ICMZ(I)=ICJT(I,2*NSG)
C-C   CALL IDDECO(ICPZ,JCPZ)					C-C   CALL IDDECO(ICPZ,JCPZ)
C-C   CALL IDDECO(ICMZ,JCMZ)					C-C   CALL IDDECO(ICMZ,JCMZ)
C-C   DO 57 NF=1,NFLAV						C-C   DO 57 NF=1,NFLAV
C-C     JCZ(NF,1)=JCPZ(NF,1)+JCMZ(NF,1)				C-C     JCZ(NF,1)=JCPZ(NF,1)+JCMZ(NF,1)
C-C57 JCZ(NF,2)=JCPZ(NF,2)+JCMZ(NF,2)				C-C57 JCZ(NF,2)=JCPZ(NF,2)+JCMZ(NF,2)
C-C   CALL IDENCO(JCZ,ICZ,IRETEN)				C-C   CALL IDENCO(JCZ,ICZ,IRETEN)
C-C   IDZ=IDTRA(ICZ,0,0,3)					C-C   IDZ=IDTRA(ICZ,0,0,3)
C-C   AMZ=PSG(5,NSG)						C-C   AMZ=PSG(5,NSG)
C-C   CALL IDRES(IDZ,AMZ,IDRZ,IADJ)				C-C   CALL IDRES(IDZ,AMZ,IDRZ,IADJ)
C-C   IF ( IDRZ.EQ.110 .AND. RANGEN().LT.0.5 ) GOTO 9993	C-C   IF ( IDRZ.EQ.110 .AND. RANGEN().LT.0.5 ) GOTO 9993

9998  CONTINUE							9998  CONTINUE
      XBKPTL(1,NPTLC-NPTL2)=XBK(3)				      XBKPTL(1,NPTLC-NPTL2)=XBK(3)
      XBKPTL(2,NPTLC-NPTL2)=XBK(4)				      XBKPTL(2,NPTLC-NPTL2)=XBK(4)
      ISPTL(NPTLC-NPTL2)=1					      ISPTL(NPTLC-NPTL2)=1

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JAMBR2(NS,NSG,IRET)				      SUBROUTINE JAMBR2(NS,NSG,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  "SAMBA" (SCHOLTEN+WERNER, MAR 92)				C  "SAMBA" (SCHOLTEN+WERNER, MAR 92)
C  BREAKS STRING NS ACCORDING TO A-M MODEL.			C  BREAKS STRING NS ACCORDING TO A-M MODEL.
C  NS: POINTS TO THE CURRENT FRAGMENTING STRING.		C  NS: POINTS TO THE CURRENT FRAGMENTING STRING.
C  NSG: POINTS TO THE LAST PRODUCED SUBSTRING (SUCC INCREASED	C  NSG: POINTS TO THE LAST PRODUCED SUBSTRING (SUCC INCREASED
C     INPUT:							C     INPUT:
C  PSG(,NS): MOMENTUM OF STRING NS IN PP-CMS			C  PSG(,NS): MOMENTUM OF STRING NS IN PP-CMS
C  PJT(,2*NS-1),PJT(,2*NS): MOMENTUM OF END OF STRING NS IN P	C  PJT(,2*NS-1),PJT(,2*NS): MOMENTUM OF END OF STRING NS IN P
C     OUTPUT:							C     OUTPUT:
C  XORSG(,NSG): ORIGIN OF SUBSTRING NSG IN PP-CMS		C  XORSG(,NSG): ORIGIN OF SUBSTRING NSG IN PP-CMS
C  PJT(,2*NSG-1),PJT(,2*NSG): MOMENTUM OF END OF SUBSTRING NS	C  PJT(,2*NSG-1),PJT(,2*NSG): MOMENTUM OF END OF SUBSTRING NS
C  ICJT(,2*NSG-1),ICJT(,2*NSG): IC-CODE  OF END OF SUBSTRG NS	C  ICJT(,2*NSG-1),ICJT(,2*NSG): IC-CODE  OF END OF SUBSTRG NS
C  PSG(,NSG): MOMENTUM OF SUBSTRING NSG IN PP-CMS		C  PSG(,NSG): MOMENTUM OF SUBSTRING NSG IN PP-CMS
C  XBKPTL(,NPTLC-NPTL2): BREAKPOINT OF NS IN PP-CMS		C  XBKPTL(,NPTLC-NPTL2): BREAKPOINT OF NS IN PP-CMS
C  ISPTL(,NPTLC-NPTL2): 1 IF STRING NS BREAKS			C  ISPTL(,NPTLC-NPTL2): 1 IF STRING NS BREAKS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPC=500)					      PARAMETER (MXPC=500)
      PARAMETER (MXSG=500)					      PARAMETER (MXSG=500)
      PARAMETER (MXJT=2*MXSG)					      PARAMETER (MXJT=2*MXSG)
      PARAMETER (NBRM=99)					      PARAMETER (NBRM=99)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NPTF=129)					      PARAMETER (NPTF=129)
      DOUBLE PRECISION XBKPTL					      DOUBLE PRECISION XBKPTL
      COMMON /CDELRE/  DELRER					      COMMON /CDELRE/  DELRER
      COMMON /CJAMBR/  NPTLC,NPTL2				      COMMON /CJAMBR/  NPTLC,NPTL2
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPC/     XBKPTL(2,MXPC),ISPTL(MXPC)		      COMMON /CPC/     XBKPTL(2,MXPC),ISPTL(MXPC)
      COMMON /CPTF/    FPTFS,FPTFSS,FPTFU,FPTFUS,FPTFUU		      COMMON /CPTF/    FPTFS,FPTFSS,FPTFU,FPTFUS,FPTFUU
     *                ,QPTFS(NPTF),QPTFSS(NPTF),QPTFU(NPTF),Q	     *                ,QPTFS(NPTF),QPTFSS(NPTF),QPTFU(NPTF),Q
     *                ,QPTFUU(NPTF),XPTF(NPTF)			     *                ,QPTFUU(NPTF),XPTF(NPTF)
      DOUBLE PRECISION PJT,PSG,ROTSG,XORSG			      DOUBLE PRECISION PJT,PSG,ROTSG,XORSG
      COMMON /CSG/     PJT(5,MXJT),PSG(5,MXSG),ROTSG(3,MXSG)	      COMMON /CSG/     PJT(5,MXJT),PSG(5,MXSG),ROTSG(3,MXSG)
     *                ,XORSG(4,MXSG)				     *                ,XORSG(4,MXSG)
     *                ,ICJT(2,MXJT),IORSG(MXSG),ISG(MXSG)	     *                ,ICJT(2,MXJT),IORSG(MXSG),ISG(MXSG)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS			      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS

      DOUBLE PRECISION A,AMAM,AMAX,ANEW,DA,DALFA,DATWID		      DOUBLE PRECISION A,AMAM,AMAX,ANEW,DA,DALFA,DATWID
     *                ,DAUXIL,DR,DY,DYST,DYT,DY1,DY2,PHI,PM,P	     *                ,DAUXIL,DR,DY,DYST,DYT,DY1,DY2,PHI,PM,P
     *                ,PW(4),PX,PY,P0M,P0P,RA,RMX,RMY,XBK(4)	     *                ,PW(4),PX,PY,P0M,P0P,RA,RMX,RMY,XBK(4)
     *                ,XBR,XOR2(4),XP,X2,YBR,YP,YTD,YNEW	     *                ,XBR,XOR2(4),XP,X2,YBR,YP,YTD,YNEW
      REAL     PXBRAK(100),PYBRAK(100),XBREAK(100),YBREAK(100	      REAL     PXBRAK(100),PYBRAK(100),XBREAK(100),YBREAK(100
      INTEGER  ICM(2),ICMP(2),ICMPBR(2,100),ICMZ(2)		      INTEGER  ICM(2),ICMP(2),ICMPBR(2,100),ICMZ(2)
     *        ,ICP(2),ICPM(2),ICPMBR(2,100),ICPZ(2)		     *        ,ICP(2),ICPM(2),ICPMBR(2,100),ICPZ(2)
     *        ,ICZ(2),ITRD(100),JC(NFLAV,2)			     *        ,ICZ(2),ITRD(100),JC(NFLAV,2)
     *        ,JCM(NFLAV,2),JCMP(NFLAV,2),JCMS(NFLAV,2),JCMZ(	     *        ,JCM(NFLAV,2),JCMP(NFLAV,2),JCMS(NFLAV,2),JCMZ(
     *        ,JCP(NFLAV,2),JCPM(NFLAV,2),JCPZ(NFLAV,2),JCZ(N	     *        ,JCP(NFLAV,2),JCPM(NFLAV,2),JCPZ(NFLAV,2),JCZ(N
      LOGICAL  LAST						      LOGICAL  LAST
C------------------------------------------------------------	C------------------------------------------------------------
      NCNT3=0							      NCNT3=0
      NSG0=NSG							      NSG0=NSG
9993  NSG=NSG0							9993  NSG=NSG0

C  INITIALIZATION						C  INITIALIZATION
C  --------------						C  --------------

      IRET=0							      IRET=0
      ICP(1)=ICJT(1,2*NS-1)					      ICP(1)=ICJT(1,2*NS-1)
      ICP(2)=ICJT(2,2*NS-1)					      ICP(2)=ICJT(2,2*NS-1)
      ICM(1)=ICJT(1,2*NS)					      ICM(1)=ICJT(1,2*NS)
      ICM(2)=ICJT(2,2*NS)					      ICM(2)=ICJT(2,2*NS)
      ICPMBR(1,1)=ICM(1)					      ICPMBR(1,1)=ICM(1)
      ICPMBR(2,1)=ICM(2)					      ICPMBR(2,1)=ICM(2)

      CALL IDDECO(ICP,JCP)					      CALL IDDECO(ICP,JCP)
      CALL IDDECO(ICM,JCM)					      CALL IDDECO(ICM,JCM)
      NP=0							      NP=0
      DO 7 NF=1,NFLAV						      DO 7 NF=1,NFLAV
        NP=NP+JCP(NF,1)-JCP(NF,2)				        NP=NP+JCP(NF,1)-JCP(NF,2)
 7    CONTINUE							 7    CONTINUE
      AMMS=UTAMNX(JCP,JCM)					      AMMS=UTAMNX(JCP,JCM)
      AM=PSG(5,NS)						      AM=PSG(5,NS)
C								C
      J = 2*NS							      J = 2*NS
      DAUXIL= PJT(3,J-1)+PJT(3,J)				      DAUXIL= PJT(3,J-1)+PJT(3,J)
      P0P=PJT(4,J-1)+PJT(4,J)+DAUXIL				      P0P=PJT(4,J-1)+PJT(4,J)+DAUXIL
      P0M=PJT(4,J-1)+PJT(4,J)-DAUXIL				      P0M=PJT(4,J-1)+PJT(4,J)-DAUXIL
      XT=P0M							      XT=P0M
      YT=P0P							      YT=P0P
C								C
      DALFA=DBLE(PAREA)						      DALFA=DBLE(PAREA)
C  INITIALIZE							C  INITIALIZE
      XBREAK(1)=XT						      XBREAK(1)=XT
      YBREAK(1)=0.						      YBREAK(1)=0.
      PXBRAK(1)=0.						      PXBRAK(1)=0.
      PYBRAK(1)=0.						      PYBRAK(1)=0.

C  REDO								C  REDO
C  ----								C  ----

      NCNT3=0							      NCNT3=0
9994  NCNT3=NCNT3+1						9994  NCNT3=NCNT3+1
      IBR=1							      IBR=1
      XP=XT							      XP=XT
      YP=0.D0							      YP=0.D0
      YTD=YT							      YTD=YT
      IF ( NCNT3 .GT. 100 ) THEN				      IF ( NCNT3 .GT. 100 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JAMBR2')					          CALL UTMSG('JAMBR2')
          WRITE(IFCH,*)'*****  SPLIT KINEM NOT POSSIBLE.'	          WRITE(IFCH,*)'*****  SPLIT KINEM NOT POSSIBLE.'
          WRITE(IFCH,112)					          WRITE(IFCH,112)
     *     (ICJT(J,2*NS-1),J=1,2),(ICJT(J,2*NS),J=1,2),PSG(5,	     *     (ICJT(J,2*NS-1),J=1,2),(ICJT(J,2*NS),J=1,2),PSG(5,
112       FORMAT(1X,2I8,4X,2I8,4X,F7.2)				112       FORMAT(1X,2I8,4X,2I8,4X,F7.2)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( NS .EQ. 1 ) THEN					        IF ( NS .EQ. 1 ) THEN
          IRET=9999						          IRET=9999
          RETURN						          RETURN
        ENDIF							        ENDIF
        IRET=9996						        IRET=9996
        RETURN							        RETURN
      ENDIF							      ENDIF

C  SEARCH FOR BREAKPOINTS					C  SEARCH FOR BREAKPOINTS
C  ----------------------					C  ----------------------

 9    CONTINUE							 9    CONTINUE
      DO 17 NF=1,NFLAV						      DO 17 NF=1,NFLAV
        JCPM(NF,1)=0						        JCPM(NF,1)=0
        JCPM(NF,2)=0						        JCPM(NF,2)=0
        JCMP(NF,1)=0						        JCMP(NF,1)=0
        JCMP(NF,2)=0						        JCMP(NF,2)=0
17    CONTINUE							17    CONTINUE

C  ORDINARY STRINGS						C  ORDINARY STRINGS
C  ----------------						C  ----------------
C     NQU=0							C     NQU=0
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'ORDINARY STRING FRAGMENTATION'		        WRITE(IFCH,*)'ORDINARY STRING FRAGMENTATION'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      IF ( RANGEN() .LE. PDIQUA ) THEN				      IF ( RANGEN() .LE. PDIQUA ) THEN
        NQU=2							        NQU=2
      ELSE							      ELSE
        NQU=1							        NQU=1
      ENDIF							      ENDIF
      IF     ( MOD(NP+NQU,3) .EQ. 0 ) THEN			      IF     ( MOD(NP+NQU,3) .EQ. 0 ) THEN
        II=1							        II=1
      ELSEIF ( MOD(NP-NQU,3) .EQ. 0 ) THEN			      ELSEIF ( MOD(NP-NQU,3) .EQ. 0 ) THEN
        II=2							        II=2
      ELSE							      ELSE
        CALL UTSTOP('JAMBR2: NO SINGLET CONSTRUCTION POSSIBLE	        CALL UTSTOP('JAMBR2: NO SINGLET CONSTRUCTION POSSIBLE
      ENDIF							      ENDIF
      IFLTT=0							      IFLTT=0
      DO 18 N=1,NQU						      DO 18 N=1,NQU
        IFL=INT(RANGEN()/PUD)+1					        IFL=INT(RANGEN()/PUD)+1
        IFLTT=IFLTT*10+(IFL+1)/2				        IFLTT=IFLTT*10+(IFL+1)/2
        JCPM(IFL,II)=JCPM(IFL,II)+1				        JCPM(IFL,II)=JCPM(IFL,II)+1
        JCMP(IFL,3-II)=JCMP(IFL,3-II)+1				        JCMP(IFL,3-II)=JCMP(IFL,3-II)+1
18    CONTINUE							18    CONTINUE
      CALL IDENCO(JCPM,ICPM,IRETEN)				      CALL IDENCO(JCPM,ICPM,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('JAMBR2: IDENCO(JCPM... RET.CODE=1       	        CALL UTSTOP('JAMBR2: IDENCO(JCPM... RET.CODE=1       
      ENDIF							      ENDIF
      CALL IDENCO(JCMP,ICMP,IRETEN)				      CALL IDENCO(JCMP,ICMP,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('JAMBR2: IDENCO(JCMP... RET.CODE=1       	        CALL UTSTOP('JAMBR2: IDENCO(JCMP... RET.CODE=1       
      ENDIF							      ENDIF

C  CALCULATE PT OF STRING BREAKING				C  CALCULATE PT OF STRING BREAKING
C  -------------------------------------			C  -------------------------------------
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,109)ICM(1),ICMP(1),ICPM(1),ICP(1)		        WRITE(IFCH,109)ICM(1),ICMP(1),ICPM(1),ICP(1)
     *                ,ICM(2),ICMP(2),ICPM(2),ICP(2)		     *                ,ICM(2),ICMP(2),ICPM(2),ICP(2)
109     FORMAT(1X,'FLAVORS:',2(I11,I7)/9X,2(I11,I7)/)		109     FORMAT(1X,'FLAVORS:',2(I11,I7)/9X,2(I11,I7)/)
        WRITE(IFCH,*)'IFLTT:',IFLTT				        WRITE(IFCH,*)'IFLTT:',IFLTT
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      AMMP=UTAMNY(JCP,JCPM)					      AMMP=UTAMNY(JCP,JCPM)
      AMMM=UTAMNY(JCMP,JCM)					      AMMM=UTAMNY(JCMP,JCM)
      R = RANGEN()						      R = RANGEN()
      IF     ( IFLTT .EQ. 1 ) THEN				      IF     ( IFLTT .EQ. 1 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFU ,R*QPTFU(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFU ,R*QPTFU(NPTF))
C##       WRITE(IFCH,*)'JAMBR2:PT(OLD)=',PT			C##       WRITE(IFCH,*)'JAMBR2:PT(OLD)=',PT
        ELSE							        ELSE
          RPT = R*FPTFU						          RPT = R*FPTFU
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(1.+RPT*2./AUXIL))			          PT=SQRT(AUXIL*LOG(1.+RPT*2./AUXIL))
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 2 ) THEN				      ELSEIF ( IFLTT .EQ. 2 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFS ,R*QPTFS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFS ,R*QPTFS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFS						          RPT = R*FPTFS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(SMAS **2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(SMAS **2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 11 ) THEN				      ELSEIF ( IFLTT .EQ. 11 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFUU,R*QPTFUU(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFUU,R*QPTFUU(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFUU					          RPT = R*FPTFUU
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(UUMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(UUMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 12  .OR.  IFLTT .EQ. 21 ) THEN	      ELSEIF ( IFLTT .EQ. 12  .OR.  IFLTT .EQ. 21 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFUS,R*QPTFUS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFUS,R*QPTFUS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFUS					          RPT = R*FPTFUS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(USMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(USMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 22 ) THEN				      ELSEIF ( IFLTT .EQ. 22 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFSS,R*QPTFSS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFSS,R*QPTFSS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFSS					          RPT = R*FPTFSS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(SSMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(SSMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      IF ( IBR .EQ. 1 ) THEN					      IF ( IBR .EQ. 1 ) THEN
        RMX=AMMM**2+PT**2					        RMX=AMMM**2+PT**2
      ELSE							      ELSE
        RMX=0.001D0						        RMX=0.001D0
      ENDIF							      ENDIF
      RMY=AMMP**2+PT**2						      RMY=AMMP**2+PT**2
      IF ( RMY .GT. XP*(YTD-YP) ) GOTO 8			      IF ( RMY .GT. XP*(YTD-YP) ) GOTO 8

C  SINGLE ARTRU-MENNESSIER BREAK (SAMB)				C  SINGLE ARTRU-MENNESSIER BREAK (SAMB)
C  ------------------------------------				C  ------------------------------------
C  IN: XP,YP,YTD,RMX,RMY					C  IN: XP,YP,YTD,RMX,RMY
C  IN: DALFA							C  IN: DALFA
C  OUT: XBR,YBR							C  OUT: XBR,YBR

      DYT=YTD-YP						      DYT=YTD-YP
C  Y-STEPPING RANGE						C  Y-STEPPING RANGE
      AMAM=1.D0+(RMX-RMY)/(XP*DYT)				      AMAM=1.D0+(RMX-RMY)/(XP*DYT)
      A=(1.D0-4.D0*RMX/(AMAM*AMAM*XP*DYT))			      A=(1.D0-4.D0*RMX/(AMAM*AMAM*XP*DYT))
      IF ( A .LT. 0.D0 ) GOTO 8					      IF ( A .LT. 0.D0 ) GOTO 8
      A=SQRT(A)							      A=SQRT(A)
      DY1=DYT*AMAM*(1.D0-A)*0.5D0				      DY1=DYT*AMAM*(1.D0-A)*0.5D0
      DY2=DYT*AMAM*(1.D0+A)*0.5D0				      DY2=DYT*AMAM*(1.D0+A)*0.5D0
      DYST=0.0001D0*(DYT-DY2)					      DYST=0.0001D0*(DYT-DY2)
 3    CONTINUE							 3    CONTINUE
      DR=DBLE(1.-RANGEN())					      DR=DBLE(1.-RANGEN())
      AMAX=XP*DYT*A*AMAM+RMX*LOG(DY1/DY2)+RMY*LOG((DYT-DY2)/(	      AMAX=XP*DYT*A*AMAM+RMX*LOG(DY1/DY2)+RMY*LOG((DYT-DY2)/(
      RA=-LOG(DR)/DALFA						      RA=-LOG(DR)/DALFA
      IF ( RA .GT. AMAX  .AND. IBR .GT. 1 ) GOTO 8		      IF ( RA .GT. AMAX  .AND. IBR .GT. 1 ) GOTO 8
      RA=MOD(RA,AMAX)						      RA=MOD(RA,AMAX)
      DY=DYT*SQRT(RMX)/(SQRT(RMX)+SQRT(RMY))			      DY=DYT*SQRT(RMX)/(SQRT(RMX)+SQRT(RMY))
      DATWID=XP*(DY-DY1)+RMX*LOG(DY1/DY)+RMY*LOG((DYT-DY)/(DY	      DATWID=XP*(DY-DY1)+RMX*LOG(DY1/DY)+RMY*LOG((DYT-DY)/(DY
      ANEW=RA-DATWID						      ANEW=RA-DATWID
      ICOUNT=0							      ICOUNT=0
      IF ( ANEW .GT. 0.D0 ) GOTO 1				      IF ( ANEW .GT. 0.D0 ) GOTO 1
 2    CONTINUE							 2    CONTINUE
      DA=XP - RMX/DY - RMY/(DYT-DY)				      DA=XP - RMX/DY - RMY/(DYT-DY)
      YNEW=DY+ANEW/DA						      YNEW=DY+ANEW/DA
      DY=INT(YNEW/DYST)*DYST					      DY=INT(YNEW/DYST)*DYST
      IF ( DY .LT. DY1 ) THEN					      IF ( DY .LT. DY1 ) THEN
        WRITE(IFCH,*) 'DY,DY1',DY,DY1				        WRITE(IFCH,*) 'DY,DY1',DY,DY1
        GOTO 4							        GOTO 4
      ENDIF							      ENDIF
      ANEW=RA-XP*(DY-DY1)-RMX*LOG(DY1/DY)-RMY*LOG((DYT-DY)/(D	      ANEW=RA-XP*(DY-DY1)-RMX*LOG(DY1/DY)-RMY*LOG((DYT-DY)/(D
      IF ( ANEW .LT. 0.D0 ) GOTO 2				      IF ( ANEW .LT. 0.D0 ) GOTO 2
      GOTO 4							      GOTO 4
 1    CONTINUE							 1    CONTINUE
      DA=XP - RMX/DY - RMY/(DYT-DY)				      DA=XP - RMX/DY - RMY/(DYT-DY)
      YNEW=DY+ANEW/DA						      YNEW=DY+ANEW/DA
      DY=(INT(YNEW/DYST)+1)*DYST				      DY=(INT(YNEW/DYST)+1)*DYST
      ANEW=RA-XP*(DY-DY1)-RMX*LOG(DY1/DY)-RMY*LOG((DYT-DY)/(D	      ANEW=RA-XP*(DY-DY1)-RMX*LOG(DY1/DY)-RMY*LOG((DYT-DY)/(D
      IF ( ANEW .GT. 0.D0 ) GOTO 1				      IF ( ANEW .GT. 0.D0 ) GOTO 1
      DY=DY-DYST						      DY=DY-DYST
      ANEW=RA-XP*(DY-DY1)-RMX*LOG(DY1/DY)-RMY*LOG((DYT-DY)/(D	      ANEW=RA-XP*(DY-DY1)-RMX*LOG(DY1/DY)-RMY*LOG((DYT-DY)/(D
 4    CONTINUE							 4    CONTINUE
      YBR=MIN( DY+RANGEN()*DYST, DY2 )				      YBR=MIN( DY+RANGEN()*DYST, DY2 )
      X2=(XP-RMX/YBR)						      X2=(XP-RMX/YBR)
      XBR=MIN( ANEW/DYST+RMY/(DYT-YBR), X2 )			      XBR=MIN( ANEW/DYST+RMY/(DYT-YBR), X2 )
C  BETTER: SOLVE FOR YBR FROM ANEW=0				C  BETTER: SOLVE FOR YBR FROM ANEW=0
C  FIND XBR FROM HOMOGENEOUS (NOT EXP) DISTR, X1<X<X2		C  FIND XBR FROM HOMOGENEOUS (NOT EXP) DISTR, X1<X<X2
C        X1=RMY/(DYT-YBR)					C        X1=RMY/(DYT-YBR)
      YBR=YBR+YP						      YBR=YBR+YP
C								C
C  END SAMB							C  END SAMB
C								C
      IF ( IBR .GE. NBRM ) THEN					      IF ( IBR .GE. NBRM ) THEN
        CALL UTSTOP('JAMBR2: IBR>NBRM                        	        CALL UTSTOP('JAMBR2: IBR>NBRM                        
      ENDIF							      ENDIF
      IBR=IBR+1							      IBR=IBR+1
      XBREAK(IBR)=XBR						      XBREAK(IBR)=XBR
      YBREAK(IBR)=YBR						      YBREAK(IBR)=YBR
      PHI=2.D0*PI*RANGEN()					      PHI=2.D0*PI*RANGEN()
      PXBRAK(IBR)=PT*COS(PHI)					      PXBRAK(IBR)=PT*COS(PHI)
      PYBRAK(IBR)=PT*SIN(PHI)					      PYBRAK(IBR)=PT*SIN(PHI)
      ICPMBR(1,IBR)=ICPM(1)					      ICPMBR(1,IBR)=ICPM(1)
      ICPMBR(2,IBR)=ICPM(2)					      ICPMBR(2,IBR)=ICPM(2)
      ICMPBR(1,IBR)=ICMP(1)					      ICMPBR(1,IBR)=ICMP(1)
      ICMPBR(2,IBR)=ICMP(2)					      ICMPBR(2,IBR)=ICMP(2)
      XP=XBR							      XP=XBR
      YP=YBR							      YP=YBR
      AMLEFT=SQRT(YBR*(XT-XBR))					      AMLEFT=SQRT(YBR*(XT-XBR))
      AMRIGT=SQRT(XBR*(YT-YBR))					      AMRIGT=SQRT(XBR*(YT-YBR))
      GOTO 9							      GOTO 9
 8    CONTINUE							 8    CONTINUE

      IF ( IBR .EQ. 1 ) GOTO 9994				      IF ( IBR .EQ. 1 ) GOTO 9994

C  INITIALIZE TAIL END						C  INITIALIZE TAIL END
C  -------------------						C  -------------------
      XBREAK(IBR+1)=0.						      XBREAK(IBR+1)=0.
      YBREAK(IBR+1)=YT						      YBREAK(IBR+1)=YT
      PXBRAK(IBR+1)=0.						      PXBRAK(IBR+1)=0.
      PYBRAK(IBR+1)=0.						      PYBRAK(IBR+1)=0.
      ICMPBR(1,IBR+1)=ICP(1)					      ICMPBR(1,IBR+1)=ICP(1)
      ICMPBR(2,IBR+1)=ICP(2)					      ICMPBR(2,IBR+1)=ICP(2)

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'ICMPBR(1/2,)  X/YBREAK  PX/YBREAK:'	        WRITE(IFCH,*)'ICMPBR(1/2,)  X/YBREAK  PX/YBREAK:'
        DO 52 IB=1,IBR+1					        DO 52 IB=1,IBR+1
          WRITE(IFCH,100)ICMPBR(1,IB),ICMPBR(2,IB)		          WRITE(IFCH,100)ICMPBR(1,IB),ICMPBR(2,IB)
     *            ,XBREAK(IB),YBREAK(IB),PXBRAK(IB),PYBRAK(IB	     *            ,XBREAK(IB),YBREAK(IB),PXBRAK(IB),PYBRAK(IB
100       FORMAT(1X,I10,I10,2E11.3,7X,2E11.3)			100       FORMAT(1X,I10,I10,2E11.3,7X,2E11.3)
          WRITE(IFCH,100)ICPMBR(1,IB),ICPMBR(2,IB)		          WRITE(IFCH,100)ICPMBR(1,IB),ICPMBR(2,IB)
52      CONTINUE						52      CONTINUE
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF

C  TIME ORDER BREAKPOINTS					C  TIME ORDER BREAKPOINTS
C  ----------------------					C  ----------------------

      T1=0.							      T1=0.
      DO 203 J=2,IBR						      DO 203 J=2,IBR
        T2=2.							        T2=2.
        DO 20 I=2,IBR						        DO 20 I=2,IBR
C         T=XBREAK(I)/XT+YBREAK(I)/YT				C         T=XBREAK(I)/XT+YBREAK(I)/YT
          T=XBREAK(I)*YBREAK(I)/(XT*YT)				          T=XBREAK(I)*YBREAK(I)/(XT*YT)
          IF ( T .LE. T1  .OR.  T .GT. T2 ) GOTO 20		          IF ( T .LE. T1  .OR.  T .GT. T2 ) GOTO 20
          T2=T							          T2=T
          NT=I							          NT=I
20      CONTINUE						20      CONTINUE
        T1=T2							        T1=T2
        ITRD(J)=NT						        ITRD(J)=NT
203   CONTINUE							203   CONTINUE

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'ITRD:'					        WRITE(IFCH,*)'ITRD:'
        WRITE(IFCH,*)(ITRD(IB),IB=2,IBR)			        WRITE(IFCH,*)(ITRD(IB),IB=2,IBR)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF

C  CHECK ACCEPTANCE CRITERIUM					C  CHECK ACCEPTANCE CRITERIUM
C  --------------------------					C  --------------------------

      NBR=0							      NBR=0
      DO 12 J=2,IBR						      DO 12 J=2,IBR
        I=ITRD(J)						        I=ITRD(J)
        XBRI=XBREAK(I)						        XBRI=XBREAK(I)
        YBRI=YBREAK(I)						        YBRI=YBREAK(I)
C  FIND NEIGHBORING EARLIER BREAK POINTS			C  FIND NEIGHBORING EARLIER BREAK POINTS
        IR=IBR+1						        IR=IBR+1
        IL=1							        IL=1
        DO 204 JN=2,J						        DO 204 JN=2,J
          IN=ITRD(JN)						          IN=ITRD(JN)
          IF ( IN .GT. I  .AND.  IN .LT. IR ) IR=IN		          IF ( IN .GT. I  .AND.  IN .LT. IR ) IR=IN
          IF ( IN .LT. I  .AND.  IN .GT. IL ) IL=IN		          IF ( IN .LT. I  .AND.  IN .GT. IL ) IL=IN
204     CONTINUE						204     CONTINUE
        PML=(XBREAK(IL)-XBRI)					        PML=(XBREAK(IL)-XBRI)
        PPL=(YBRI-YBREAK(IL))					        PPL=(YBRI-YBREAK(IL))
        PMR=(XBRI-XBREAK(IR))					        PMR=(XBRI-XBREAK(IR))
        PPR=(YBREAK(IR)-YBRI)					        PPR=(YBREAK(IR)-YBRI)
        PX=PXBRAK(I)						        PX=PXBRAK(I)
        PY=PYBRAK(I)						        PY=PYBRAK(I)
        PXL=PX-PXBRAK(IL)					        PXL=PX-PXBRAK(IL)
        PYL=PY-PYBRAK(IL)					        PYL=PY-PYBRAK(IL)
        AMMM=PML*PPL-(PXL*PXL+PYL*PYL)				        AMMM=PML*PPL-(PXL*PXL+PYL*PYL)
        PXR=PXBRAK(IR)-PX					        PXR=PXBRAK(IR)-PX
        PYR=PYBRAK(IR)-PY					        PYR=PYBRAK(IR)-PY
        AMMP=PMR*PPR-(PXR*PXR+PYR*PYR)				        AMMP=PMR*PPR-(PXR*PXR+PYR*PYR)
        IF ( AMMP .LE. 0. ) GOTO 13				        IF ( AMMP .LE. 0. ) GOTO 13
        IF ( AMMM .LE. 0. ) GOTO 13				        IF ( AMMM .LE. 0. ) GOTO 13
        AMMP=SQRT(AMMP)						        AMMP=SQRT(AMMP)
        AMMM=SQRT(AMMM)						        AMMM=SQRT(AMMM)
        AMP=AMMP						        AMP=AMMP
        AMM=AMMM						        AMM=AMMM
        CALL UTRESM(ICMPBR(1,IR),ICMPBR(2,IR)			        CALL UTRESM(ICMPBR(1,IR),ICMPBR(2,IR)
     *             ,ICPMBR(1,I),ICPMBR(2,I),AMP,IDPR,IADJP,IR	     *             ,ICPMBR(1,I),ICPMBR(2,I),AMP,IDPR,IADJP,IR
        CALL UTRESM(ICPMBR(1,IL),ICPMBR(2,IL)			        CALL UTRESM(ICPMBR(1,IL),ICPMBR(2,IL)
     *             ,ICMPBR(1,I),ICMPBR(2,I),AMM,IDMR,IADJM,IR	     *             ,ICMPBR(1,I),ICMPBR(2,I),AMM,IDMR,IADJM,IR
        IF ( AMP .GT. AMMP ) GOTO 13				        IF ( AMP .GT. AMMP ) GOTO 13
        IF ( AMM .GT. AMMM ) GOTO 13				        IF ( AMM .GT. AMMM ) GOTO 13
        PT2=PX*PX+PY*PY						        PT2=PX*PX+PY*PY
        PTL2=PXBRAK(IL)**2+PYBRAK(IL)**2			        PTL2=PXBRAK(IL)**2+PYBRAK(IL)**2
        PTR2=PXBRAK(IR)**2+PYBRAK(IR)**2			        PTR2=PXBRAK(IR)**2+PYBRAK(IR)**2
        D=(PML*PPL-PTL2-PT2)*0.5				        D=(PML*PPL-PTL2-PT2)*0.5
        D=D*D-PT2*PTL2						        D=D*D-PT2*PTL2
        IF ( D .LE. 0. ) GOTO 13				        IF ( D .LE. 0. ) GOTO 13
        D=(PMR*PPR-PTR2-PT2)*0.5				        D=(PMR*PPR-PTR2-PT2)*0.5
        D=D*D-PT2*PTR2						        D=D*D-PT2*PTR2
        IF ( D .LE. 0. ) GOTO 13				        IF ( D .LE. 0. ) GOTO 13
        NBR=NBR+1						        NBR=NBR+1
        GOTO 12							        GOTO 12
13      CONTINUE						13      CONTINUE
        ITRD(J)=-1						        ITRD(J)=-1
        XBREAK(I)=-1.						        XBREAK(I)=-1.
        YBREAK(I)=-1.						        YBREAK(I)=-1.
12    CONTINUE							12    CONTINUE
      IF ( NBR .EQ. 0 ) GOTO 9994				      IF ( NBR .EQ. 0 ) GOTO 9994

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'ICMPBR(1/2,)  X/YBREAK  PX/YBREAK:'	        WRITE(IFCH,*)'ICMPBR(1/2,)  X/YBREAK  PX/YBREAK:'
        DO 53 IB=1,IBR+1					        DO 53 IB=1,IBR+1
          WRITE(IFCH,100)ICMPBR(1,IB),ICMPBR(2,IB)		          WRITE(IFCH,100)ICMPBR(1,IB),ICMPBR(2,IB)
     *         ,XBREAK(IB),YBREAK(IB),PXBRAK(IB),PYBRAK(IB)	     *         ,XBREAK(IB),YBREAK(IB),PXBRAK(IB),PYBRAK(IB)
          WRITE(IFCH,100)ICPMBR(1,IB),ICPMBR(2,IB)		          WRITE(IFCH,100)ICPMBR(1,IB),ICPMBR(2,IB)
53      CONTINUE						53      CONTINUE
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF

C  BUILD NEW STRINGS						C  BUILD NEW STRINGS
C  -----------------						C  -----------------
      NBREAK=0							      NBREAK=0
      TAUAVE=0.							      TAUAVE=0.
      IL=1							      IL=1
      IN=IL							      IN=IL
      IR=1							      IR=1
      LAST=.FALSE.						      LAST=.FALSE.
11    CONTINUE							11    CONTINUE
      IR=IR+1							      IR=IR+1
      IF ( IR .EQ. IBR+1 ) LAST=.TRUE.				      IF ( IR .EQ. IBR+1 ) LAST=.TRUE.
      IF ( XBREAK(IR) .LT. 0. ) GOTO 11				      IF ( XBREAK(IR) .LT. 0. ) GOTO 11
      IF ( IN .EQ. 1 ) GOTO 14					      IF ( IN .EQ. 1 ) GOTO 14
15    CONTINUE							15    CONTINUE
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'IL IN IR:  ',IL,IN,IR			        WRITE(IFCH,*)'IL IN IR:  ',IL,IN,IR
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      PML=XBREAK(IL)-XBREAK(IN)					      PML=XBREAK(IL)-XBREAK(IN)
      PPL=YBREAK(IN)-YBREAK(IL)					      PPL=YBREAK(IN)-YBREAK(IL)
      PMR=(XBREAK(IN)-XBREAK(IR))				      PMR=(XBREAK(IN)-XBREAK(IR))
      PPR=(YBREAK(IR)-YBREAK(IN))				      PPR=(YBREAK(IR)-YBREAK(IN))
      PX=PXBRAK(IN)						      PX=PXBRAK(IN)
      PY=PYBRAK(IN)						      PY=PYBRAK(IN)
      PXL=PX-PXBRAK(IL)						      PXL=PX-PXBRAK(IL)
      PYL=PY-PYBRAK(IL)						      PYL=PY-PYBRAK(IL)
      PTL2=(PXL*PXL+PYL*PYL)					      PTL2=(PXL*PXL+PYL*PYL)
      AMM=SQRT(PML*PPL-PTL2)					      AMM=SQRT(PML*PPL-PTL2)
      PXR=PXBRAK(IR)-PX						      PXR=PXBRAK(IR)-PX
      PYR=PYBRAK(IR)-PY						      PYR=PYBRAK(IR)-PY
      PTR2=(PXR*PXR+PYR*PYR)					      PTR2=(PXR*PXR+PYR*PYR)
      AMP=SQRT(PMR*PPR-PTR2)					      AMP=SQRT(PMR*PPR-PTR2)
      CALL UTRESM(ICMPBR(1,IR),ICMPBR(2,IR)			      CALL UTRESM(ICMPBR(1,IR),ICMPBR(2,IR)
     *           ,ICPMBR(1,IN),ICPMBR(2,IN),AMP,IDPR,IADJP,IR	     *           ,ICPMBR(1,IN),ICPMBR(2,IN),AMP,IDPR,IADJP,IR
      CALL UTRESM(ICPMBR(1,IL),ICPMBR(2,IL)			      CALL UTRESM(ICPMBR(1,IL),ICPMBR(2,IL)
     *           ,ICMPBR(1,IN),ICMPBR(2,IN),AMM,IDMR,IADJM,IR	     *           ,ICMPBR(1,IN),ICMPBR(2,IN),AMM,IDMR,IADJM,IR
      AREA=PPL*PMR						      AREA=PPL*PMR
      P0P=PPL+PPR						      P0P=PPL+PPR
      P0M=PML+PMR						      P0M=PML+PMR
      TMM2=(PTL2+AMM**2)					      TMM2=(PTL2+AMM**2)
      TMP2=(PTR2+AMP**2)					      TMP2=(PTR2+AMP**2)
      IF(ISH.GE.90)THEN						      IF(ISH.GE.90)THEN
        IF ( TMP2 .GT. PPR*PMR+1.E-4 ) THEN			        IF ( TMP2 .GT. PPR*PMR+1.E-4 ) THEN
          CALL UTMSG('JAMBR2')					          CALL UTMSG('JAMBR2')
          WRITE(IFCH,*)'*****  TMP*TMP.GT.PPR*PMR'		          WRITE(IFCH,*)'*****  TMP*TMP.GT.PPR*PMR'
          WRITE(IFCH,*)'TMP*TMP PPR*PMR: ',TMP2,PPR*PMR		          WRITE(IFCH,*)'TMP*TMP PPR*PMR: ',TMP2,PPR*PMR
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( TMM2. GT. PPL*PML+1.E-4 ) THEN			        IF ( TMM2. GT. PPL*PML+1.E-4 ) THEN
          CALL UTMSG('JAMBR2')					          CALL UTMSG('JAMBR2')
          WRITE(IFCH,*)'*****  TMM*TMM.GT.PPL*PML'		          WRITE(IFCH,*)'*****  TMM*TMM.GT.PPL*PML'
          WRITE(IFCH,*)'TMM*TMM PPL*PML: ',TMM2,PPL*PML		          WRITE(IFCH,*)'TMM*TMM PPL*PML: ',TMM2,PPL*PML
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      ETA=0.5*LOG(PPL/PMR)					      ETA=0.5*LOG(PPL/PMR)
C ------ ADJUST P NOT M						C ------ ADJUST P NOT M
      IF     ( IADJP .EQ. 1  .AND.  IADJM .NE. 1 ) THEN		      IF     ( IADJP .EQ. 1  .AND.  IADJM .NE. 1 ) THEN
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'ADJUST P NOT M'	        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'ADJUST P NOT M'
        ETANEW=LOG((SQRT(AREA)*P0P)/(TMP2+AREA))		        ETANEW=LOG((SQRT(AREA)*P0P)/(TMP2+AREA))
        IF ( ETANEW .LT. ETA-1.E-4 ) THEN			        IF ( ETANEW .LT. ETA-1.E-4 ) THEN
          CALL UTMSG('JAMBR2')					          CALL UTMSG('JAMBR2')
          WRITE(IFCH,*)'*****  ETANEW.LT.ETA'			          WRITE(IFCH,*)'*****  ETANEW.LT.ETA'
          WRITE(IFCH,*)'ETANEW ETA: ',ETANEW,ETA		          WRITE(IFCH,*)'ETANEW ETA: ',ETANEW,ETA
          CALL UTMSGF						          CALL UTMSGF
          ETANEW=ETA						          ETANEW=ETA
        ENDIF							        ENDIF
        XBREAK(IN)=SQRT(AREA)*EXP(-ETANEW)+XBREAK(IR)		        XBREAK(IN)=SQRT(AREA)*EXP(-ETANEW)+XBREAK(IR)
        YBREAK(IN)=SQRT(AREA)*EXP(ETANEW)+YBREAK(IL)		        YBREAK(IN)=SQRT(AREA)*EXP(ETANEW)+YBREAK(IL)
C ------ ADJUST M NOT P						C ------ ADJUST M NOT P
      ELSEIF ( IADJM .EQ. 1  .AND.  IADJP .NE. 1 ) THEN		      ELSEIF ( IADJM .EQ. 1  .AND.  IADJP .NE. 1 ) THEN
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'ADJUST M NOT P'	        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'ADJUST M NOT P'
        ETANEW=-LOG((SQRT(AREA)*P0M)/(TMM2+AREA))		        ETANEW=-LOG((SQRT(AREA)*P0M)/(TMM2+AREA))
        IF ( ETANEW .GT. ETA+1.E-4 ) THEN			        IF ( ETANEW .GT. ETA+1.E-4 ) THEN
          IF(ISH.GE.90)THEN					          IF(ISH.GE.90)THEN
            CALL UTMSG('JAMBR2')				            CALL UTMSG('JAMBR2')
            WRITE(IFCH,*)'*****  ETANEW.GT.ETA'			            WRITE(IFCH,*)'*****  ETANEW.GT.ETA'
            WRITE(IFCH,*)'ETANEW ETA: ',ETANEW,ETA		            WRITE(IFCH,*)'ETANEW ETA: ',ETANEW,ETA
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          ETANEW=ETA						          ETANEW=ETA
        ENDIF							        ENDIF
        XBREAK(IN)=SQRT(AREA)*EXP(-ETANEW)+XBREAK(IR)		        XBREAK(IN)=SQRT(AREA)*EXP(-ETANEW)+XBREAK(IR)
        YBREAK(IN)=SQRT(AREA)*EXP(ETANEW)+YBREAK(IL)		        YBREAK(IN)=SQRT(AREA)*EXP(ETANEW)+YBREAK(IL)
C ------ ADJUST BOTH						C ------ ADJUST BOTH
      ELSEIF ( IADJP .EQ. 1  .AND.  IADJM .EQ. 1 ) THEN		      ELSEIF ( IADJP .EQ. 1  .AND.  IADJM .EQ. 1 ) THEN
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'ADJUST BOTH'		        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'ADJUST BOTH'
        D=(P0P*P0M-TMP2-TMM2)**2-4*TMP2*TMM2			        D=(P0P*P0M-TMP2-TMM2)**2-4*TMP2*TMM2
        IF ( D .LT. 0. ) THEN					        IF ( D .LT. 0. ) THEN
          IF(ISH.GE.90)THEN					          IF(ISH.GE.90)THEN
            CALL UTMSG('JAMBR2')				            CALL UTMSG('JAMBR2')
            WRITE(IFCH,*)'***** NEGATIVE D'			            WRITE(IFCH,*)'***** NEGATIVE D'
            WRITE(IFCH,*)'D: ',D				            WRITE(IFCH,*)'D: ',D
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          D=0.							          D=0.
        ENDIF							        ENDIF
        D=SQRT(D)						        D=SQRT(D)
        T=P0P*P0M-TMP2+TMM2					        T=P0P*P0M-TMP2+TMM2
        P1=(T+D)/(2.*P0M)					        P1=(T+D)/(2.*P0M)
        P2=(T-D)/(2.*P0M)					        P2=(T-D)/(2.*P0M)
        IF ( (P1+P2)*0.5 .GT. PPL ) THEN			        IF ( (P1+P2)*0.5 .GT. PPL ) THEN
          P=P2							          P=P2
        ELSE							        ELSE
          P=P1							          P=P1
        ENDIF							        ENDIF
        XBREAK(IN)=P0M-TMM2/P+XBREAK(IR)			        XBREAK(IN)=P0M-TMM2/P+XBREAK(IR)
        YBREAK(IN)=P+YBREAK(IL)					        YBREAK(IN)=P+YBREAK(IL)
      ENDIF							      ENDIF
C  ------							C  ------
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'X/YBREAK:',XBREAK(IN),YBREAK(IN)		        WRITE(IFCH,*)'X/YBREAK:',XBREAK(IN),YBREAK(IN)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF

C  WRITE SG							C  WRITE SG
C  --------							C  --------
      NBREAK=NBREAK+1						      NBREAK=NBREAK+1
      TAUAVE=TAUAVE+XBREAK(IN)*YBREAK(IN)			      TAUAVE=TAUAVE+XBREAK(IN)*YBREAK(IN)
      MM=1							      MM=1
      IF ( LAST ) MM=2						      IF ( LAST ) MM=2
      DO 9998 M=1,MM						      DO 9998 M=1,MM
        NSG=NSG+1						        NSG=NSG+1
        IF ( NSG .GT. MXSG ) THEN				        IF ( NSG .GT. MXSG ) THEN
          CALL UTSTOP('JAMBR2: NSG>MXSG                      	          CALL UTSTOP('JAMBR2: NSG>MXSG                      
        ENDIF							        ENDIF
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'NSG LAST:  ',NSG,LAS	        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'NSG LAST:  ',NSG,LAS
        ISG(NSG)=NPTLC						        ISG(NSG)=NPTLC
        IF ( M .EQ. 2 ) THEN					        IF ( M .EQ. 2 ) THEN
          IL=IN							          IL=IN
          IN=IR							          IN=IR
        ENDIF							        ENDIF
        XOR2(1)=0.D0						        XOR2(1)=0.D0
        XOR2(2)=0.D0						        XOR2(2)=0.D0
        XOR2(3)=(YBREAK(IL)-XBREAK(IN))*0.5D0/TENSN		        XOR2(3)=(YBREAK(IL)-XBREAK(IN))*0.5D0/TENSN
        XOR2(4)=(YBREAK(IL)+XBREAK(IN))*0.5D0/TENSN		        XOR2(4)=(YBREAK(IL)+XBREAK(IN))*0.5D0/TENSN
        IF ( ISH .GE. 92 ) WRITE(IFCH,119)XOR2			        IF ( ISH .GE. 92 ) WRITE(IFCH,119)XOR2
119     FORMAT(/' ORIGIN: ',13X,4F7.2/)				119     FORMAT(/' ORIGIN: ',13X,4F7.2/)
        CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	        CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *              ,XOR2(1),XOR2(2),XOR2(3))			     *              ,XOR2(1),XOR2(2),XOR2(3))
        CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS	        CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS
     *              ,XOR2(1),XOR2(2),XOR2(3),XOR2(4))		     *              ,XOR2(1),XOR2(2),XOR2(3),XOR2(4))
        XOR2(1)=XOR2(1)+XORSG(1,NS)				        XOR2(1)=XOR2(1)+XORSG(1,NS)
        XORSG(1,NSG)=XOR2(1)					        XORSG(1,NSG)=XOR2(1)
        XOR2(2)=XOR2(2)+XORSG(2,NS)				        XOR2(2)=XOR2(2)+XORSG(2,NS)
        XORSG(2,NSG)=XOR2(2)					        XORSG(2,NSG)=XOR2(2)
        XOR2(3)=XOR2(3)+XORSG(3,NS)				        XOR2(3)=XOR2(3)+XORSG(3,NS)
        XORSG(3,NSG)=XOR2(3)					        XORSG(3,NSG)=XOR2(3)
        XOR2(4)=XOR2(4)+XORSG(4,NS)				        XOR2(4)=XOR2(4)+XORSG(4,NS)
        XORSG(4,NSG)=XOR2(4)					        XORSG(4,NSG)=XOR2(4)
C       IF ( ISH .GE. 92 ) WRITE(IFCH,117)XOR2			C       IF ( ISH .GE. 92 ) WRITE(IFCH,117)XOR2
        PP=YBREAK(IN)-YBREAK(IL)				        PP=YBREAK(IN)-YBREAK(IL)
        PM=XBREAK(IL)-XBREAK(IN)				        PM=XBREAK(IL)-XBREAK(IN)
        PSG(1,NSG)=PXBRAK(IN)-PXBRAK(IL)			        PSG(1,NSG)=PXBRAK(IN)-PXBRAK(IL)
        PSG(2,NSG)=PYBRAK(IN)-PYBRAK(IL)			        PSG(2,NSG)=PYBRAK(IN)-PYBRAK(IL)
        PSG(3,NSG)=(PP-PM)*0.5D0				        PSG(3,NSG)=(PP-PM)*0.5D0
        PSG(4,NSG)=(PP+PM)*0.5D0				        PSG(4,NSG)=(PP+PM)*0.5D0
        SS=PSG(4,NSG)**2-PSG(3,NSG)**2-PSG(2,NSG)**2-PSG(1,NS	        SS=PSG(4,NSG)**2-PSG(3,NSG)**2-PSG(2,NSG)**2-PSG(1,NS
        PSG(5,NSG)=SQRT(SS)					        PSG(5,NSG)=SQRT(SS)
        IF ( ISH .GE. 92 ) WRITE(IFCH,110)NSG,NS,(PSG(J,NSG),	        IF ( ISH .GE. 92 ) WRITE(IFCH,110)NSG,NS,(PSG(J,NSG),
110     FORMAT(1X,I5,I4,16X,1P,5E10.2)				110     FORMAT(1X,I5,I4,16X,1P,5E10.2)
        PW(1)=PSG(1,NSG)					        PW(1)=PSG(1,NSG)
        PW(2)=PSG(2,NSG)					        PW(2)=PSG(2,NSG)
        PW(3)=PSG(3,NSG)					        PW(3)=PSG(3,NSG)
        PW(4)=PSG(4,NSG)					        PW(4)=PSG(4,NSG)
        CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	        CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *              ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG))		     *              ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG))
        CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS	        CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS
     *              ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG),PSG(4,N	     *              ,PSG(1,NSG),PSG(2,NSG),PSG(3,NSG),PSG(4,N
        IORSG(NSG)=NS						        IORSG(NSG)=NS
        IF ( ISH .GE. 92 ) THEN					        IF ( ISH .GE. 92 ) THEN
          WRITE(IFCH,102)NSG,IORSG(NSG),(PSG(J,NSG),J=1,5)	          WRITE(IFCH,102)NSG,IORSG(NSG),(PSG(J,NSG),J=1,5)
102       FORMAT(1X,I5,I4,16X,1P,5E10.2)			102       FORMAT(1X,I5,I4,16X,1P,5E10.2)
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF

C  WRITE JT							C  WRITE JT
C  --------							C  --------
        ICJT(1,2*NSG-1)=ICMPBR(1,IN)				        ICJT(1,2*NSG-1)=ICMPBR(1,IN)
        ICJT(2,2*NSG-1)=ICMPBR(2,IN)				        ICJT(2,2*NSG-1)=ICMPBR(2,IN)
        DO 41 NF=1,NFLAV					        DO 41 NF=1,NFLAV
CDH ########  JCMS IST NICHT GESETZT!!!!			CDH ########  JCMS IST NICHT GESETZT!!!!
          JC(NF,1)=JCMS(NF,1)					          JC(NF,1)=JCMS(NF,1)
          JC(NF,2)=JCMS(NF,2)					          JC(NF,2)=JCMS(NF,2)
41      CONTINUE						41      CONTINUE
        ICJT(1,2*NSG)=ICPMBR(1,IL)				        ICJT(1,2*NSG)=ICPMBR(1,IL)
        ICJT(2,2*NSG)=ICPMBR(2,IL)				        ICJT(2,2*NSG)=ICPMBR(2,IL)
        IF ( M .EQ. 2 ) THEN					        IF ( M .EQ. 2 ) THEN
          IDX=IADJP						          IDX=IADJP
        ELSE							        ELSE
          IDX=IADJM						          IDX=IADJM
        ENDIF							        ENDIF
        IF ( IDX .EQ. 0 ) THEN					        IF ( IDX .EQ. 0 ) THEN
          PJT(1,2*NSG-1)=PXBRAK(IN)				          PJT(1,2*NSG-1)=PXBRAK(IN)
          PJT(2,2*NSG-1)=PYBRAK(IN)				          PJT(2,2*NSG-1)=PYBRAK(IN)
          PTJR2=PXBRAK(IN)**2+PYBRAK(IN)**2			          PTJR2=PXBRAK(IN)**2+PYBRAK(IN)**2
          PTJL2=PXBRAK(IL)**2+PYBRAK(IL)**2			          PTJL2=PXBRAK(IL)**2+PYBRAK(IL)**2
          AA=PM*PP-PTJL2-PTJR2					          AA=PM*PP-PTJL2-PTJR2
          AUXIL=SQRT(AA*AA*0.25-PTJL2*PTJR2)			          AUXIL=SQRT(AA*AA*0.25-PTJL2*PTJR2)
          PRM=(AA*0.5+PTJR2-AUXIL)/PP				          PRM=(AA*0.5+PTJR2-AUXIL)/PP
          PLP=(AA*0.5+PTJL2-AUXIL)/PM				          PLP=(AA*0.5+PTJL2-AUXIL)/PM
          PJT(3,2*NSG-1)=(PP-PLP-PRM)*0.5D0			          PJT(3,2*NSG-1)=(PP-PLP-PRM)*0.5D0
          PJT(4,2*NSG-1)=(PP-PLP+PRM)*0.5D0			          PJT(4,2*NSG-1)=(PP-PLP+PRM)*0.5D0
          PJT(5,2*NSG-1)=0.D0					          PJT(5,2*NSG-1)=0.D0
          PJT(1,2*NSG)=-PXBRAK(IL)				          PJT(1,2*NSG)=-PXBRAK(IL)
          PJT(2,2*NSG)=-PYBRAK(IL)				          PJT(2,2*NSG)=-PYBRAK(IL)
          PJT(3,2*NSG)=(PLP-PM+PRM)*0.5D0			          PJT(3,2*NSG)=(PLP-PM+PRM)*0.5D0
          PJT(4,2*NSG)=(PLP+PM-PRM)*0.5D0			          PJT(4,2*NSG)=(PLP+PM-PRM)*0.5D0
          PJT(5,2*NSG)=0.D0					          PJT(5,2*NSG)=0.D0
          IF ( ISH .GE. 92 ) THEN				          IF ( ISH .GE. 92 ) THEN
            WRITE(IFCH,108)NSG,NS				            WRITE(IFCH,108)NSG,NS
     *          ,(ICJT(J,2*NSG-1),J=1,2),(SNGL(PJT(J,2*NSG-1)	     *          ,(ICJT(J,2*NSG-1),J=1,2),(SNGL(PJT(J,2*NSG-1)
108         FORMAT(2X,I3,I4,2X,2I7,5(E10.2))			108         FORMAT(2X,I3,I4,2X,2I7,5(E10.2))
            WRITE(IFCH,108)NSG,NS				            WRITE(IFCH,108)NSG,NS
     *          ,(ICJT(J,2*NSG  ),J=1,2),(SNGL(PJT(J,2*NSG  )	     *          ,(ICJT(J,2*NSG  ),J=1,2),(SNGL(PJT(J,2*NSG  )
          ENDIF							          ENDIF
          ERR=    (PW(1)-PJT(1,2*NSG-1)-PJT(1,2*NSG))**2	          ERR=    (PW(1)-PJT(1,2*NSG-1)-PJT(1,2*NSG))**2
          ERR=ERR+(PW(2)-PJT(2,2*NSG-1)-PJT(2,2*NSG))**2	          ERR=ERR+(PW(2)-PJT(2,2*NSG-1)-PJT(2,2*NSG))**2
          ERR=ERR+(PW(3)-PJT(3,2*NSG-1)-PJT(3,2*NSG))**2	          ERR=ERR+(PW(3)-PJT(3,2*NSG-1)-PJT(3,2*NSG))**2
          ERR=ERR+(PW(4)-PJT(4,2*NSG-1)-PJT(4,2*NSG))**2	          ERR=ERR+(PW(4)-PJT(4,2*NSG-1)-PJT(4,2*NSG))**2
        ENDIF							        ENDIF
        ICPZ(1)=ICJT(1,2*NSG-1)					        ICPZ(1)=ICJT(1,2*NSG-1)
        ICPZ(2)=ICJT(2,2*NSG-1)					        ICPZ(2)=ICJT(2,2*NSG-1)
        ICMZ(1)=ICJT(1,2*NSG)					        ICMZ(1)=ICJT(1,2*NSG)
        ICMZ(2)=ICJT(2,2*NSG)					        ICMZ(2)=ICJT(2,2*NSG)
        CALL IDDECO(ICPZ,JCPZ)					        CALL IDDECO(ICPZ,JCPZ)
        CALL IDDECO(ICMZ,JCMZ)					        CALL IDDECO(ICMZ,JCMZ)
        DO 57 NF=1,NFLAV					        DO 57 NF=1,NFLAV
          JCZ(NF,1)=JCPZ(NF,1)+JCMZ(NF,1)			          JCZ(NF,1)=JCPZ(NF,1)+JCMZ(NF,1)
          JCZ(NF,2)=JCPZ(NF,2)+JCMZ(NF,2)			          JCZ(NF,2)=JCPZ(NF,2)+JCMZ(NF,2)
57      CONTINUE						57      CONTINUE
        CALL IDENCO(JCZ,ICZ,IRETEN)				        CALL IDENCO(JCZ,ICZ,IRETEN)
        IDZ=IDTRA(ICZ,0,0,3)					        IDZ=IDTRA(ICZ,0,0,3)
        AMZ=PSG(5,NSG)						        AMZ=PSG(5,NSG)
        CALL IDRES(IDZ,AMZ,IDRZ,IADJ)				        CALL IDRES(IDZ,AMZ,IDRZ,IADJ)
        IF ( IDRZ .EQ. 110  .AND.  RANGEN() .LT. 0.5 ) GOTO 9	        IF ( IDRZ .EQ. 110  .AND.  RANGEN() .LT. 0.5 ) GOTO 9
9998  CONTINUE							9998  CONTINUE

14    CONTINUE							14    CONTINUE
      IF ( LAST ) GOTO 10					      IF ( LAST ) GOTO 10
      IL=IN							      IL=IN
      IN=IR							      IN=IR
      GOTO 11							      GOTO 11
10    CONTINUE							10    CONTINUE
C								C
C  DETERMINE BREAK PNT						C  DETERMINE BREAK PNT
C  -----------------------------------				C  -----------------------------------
      TAUAVE=TAUAVE/NBREAK					      TAUAVE=TAUAVE/NBREAK
      XBK(1)=0.D0						      XBK(1)=0.D0
      XBK(2)=0.D0						      XBK(2)=0.D0
      AUXIL1=SQRT(TAUAVE*YT/XT)					      AUXIL1=SQRT(TAUAVE*YT/XT)
      AUXIL2=SQRT(TAUAVE*XT/YT)					      AUXIL2=SQRT(TAUAVE*XT/YT)
      XBK(3)=(AUXIL1-AUXIL2)*0.5D0/TENSN			      XBK(3)=(AUXIL1-AUXIL2)*0.5D0/TENSN
      XBK(4)=(AUXIL1+AUXIL2)*0.5D0/TENSN			      XBK(4)=(AUXIL1+AUXIL2)*0.5D0/TENSN
      IF ( ISH .GE. 92 ) WRITE(IFCH,116) XBK			      IF ( ISH .GE. 92 ) WRITE(IFCH,116) XBK
116   FORMAT(' BREAKING PNT: ',13X,4F7.2)			116   FORMAT(' BREAKING PNT: ',13X,4F7.2)
      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	      CALL UTROT2(-1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *             ,XBK(1),XBK(2),XBK(3))			     *             ,XBK(1),XBK(2),XBK(3))
      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),	      CALL UTLOB2(-1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS),
     *             ,XBK(1),XBK(2),XBK(3),XBK(4))		     *             ,XBK(1),XBK(2),XBK(3),XBK(4))
      XBK(1)=XBK(1)+XORSG(1,NS)					      XBK(1)=XBK(1)+XORSG(1,NS)
      XBK(2)=XBK(2)+XORSG(2,NS)					      XBK(2)=XBK(2)+XORSG(2,NS)
      XBK(3)=XBK(3)+XORSG(3,NS)					      XBK(3)=XBK(3)+XORSG(3,NS)
      XBK(4)=XBK(4)+XORSG(4,NS)					      XBK(4)=XBK(4)+XORSG(4,NS)
      IF ( ISH .GE. 92 ) WRITE(IFCH,117)XBK			      IF ( ISH .GE. 92 ) WRITE(IFCH,117)XBK
117   FORMAT(28X,4F7.2/)					117   FORMAT(28X,4F7.2/)
C								C
      XBKPTL(1,NPTLC-NPTL2)=XBK(3)				      XBKPTL(1,NPTLC-NPTL2)=XBK(3)
      XBKPTL(2,NPTLC-NPTL2)=XBK(4)				      XBKPTL(2,NPTLC-NPTL2)=XBK(4)
      ISPTL(NPTLC-NPTL2)=1					      ISPTL(NPTLC-NPTL2)=1
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JAMFRA(JS,NEWEVT)				      SUBROUTINE JAMFRA(JS,NEWEVT)

C------------------------------------------------------------	C------------------------------------------------------------
C  FRAGMENTS STRING JS ACCORDING TO A-M MODEL.			C  FRAGMENTS STRING JS ACCORDING TO A-M MODEL.
C  VERSION MAR-92 (CALLS JAMBR1 OR JAMBR2)			C  VERSION MAR-92 (CALLS JAMBR1 OR JAMBR2)
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPC=500)					      PARAMETER (MXPC=500)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSG=500)					      PARAMETER (MXSG=500)
      PARAMETER (MXJT=2*MXSG)					      PARAMETER (MXJT=2*MXSG)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CDELRE/  DELRER					      COMMON /CDELRE/  DELRER
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CJAMBR/  NPTLC,NPTL2				      COMMON /CJAMBR/  NPTLC,NPTL2
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      DOUBLE PRECISION XBKPTL					      DOUBLE PRECISION XBKPTL
      COMMON /CPC/     XBKPTL(2,MXPC),ISPTL(MXPC)		      COMMON /CPC/     XBKPTL(2,MXPC),ISPTL(MXPC)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      DOUBLE PRECISION PJT,PSG,ROTSG,XORSG			      DOUBLE PRECISION PJT,PSG,ROTSG,XORSG
      COMMON /CSG/     PJT(5,MXJT),PSG(5,MXSG),ROTSG(3,MXSG)	      COMMON /CSG/     PJT(5,MXJT),PSG(5,MXSG),ROTSG(3,MXSG)
     *                ,XORSG(4,MXSG)				     *                ,XORSG(4,MXSG)
     *                ,ICJT(2,MXJT),IORSG(MXSG),ISG(MXSG)	     *                ,ICJT(2,MXJT),IORSG(MXSG),ISG(MXSG)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION ARM(4),ARP(4),TOR,ZOR			      DOUBLE PRECISION ARM(4),ARP(4),TOR,ZOR
      INTEGER          IC(2),ICJ1(2),ICJ2(2)			      INTEGER          IC(2),ICJ1(2),ICJ2(2)
     *                ,ICM(2),ICP(2),ICUM(2),ICUP(2)		     *                ,ICM(2),ICP(2),ICUM(2),ICUP(2)
     *                ,JC(NFLAV,2) ,JCJ1(NFLAV,2),JCJ2(NFLAV,	     *                ,JC(NFLAV,2) ,JCJ1(NFLAV,2),JCJ2(NFLAV,
     *                ,JCM(NFLAV,2),JCP(NFLAV,2)		     *                ,JCM(NFLAV,2),JCP(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      DELREC=0.600						      DELREC=0.600
      DELREX=0.050						      DELREX=0.050
      NEWEVT=0							      NEWEVT=0

      PSG(1,1)=PSTR(1,JS)					      PSG(1,1)=PSTR(1,JS)
      PSG(2,1)=PSTR(2,JS)					      PSG(2,1)=PSTR(2,JS)
      PSG(3,1)=PSTR(3,JS)					      PSG(3,1)=PSTR(3,JS)
      PSG(4,1)=PSTR(4,JS)					      PSG(4,1)=PSTR(4,JS)
      PSG(5,1)=PSTR(5,JS)					      PSG(5,1)=PSTR(5,JS)
      ROTSG(1,1)=ROTSTR(1,JS)					      ROTSG(1,1)=ROTSTR(1,JS)
      ROTSG(2,1)=ROTSTR(2,JS)					      ROTSG(2,1)=ROTSTR(2,JS)
      ROTSG(3,1)=ROTSTR(3,JS)					      ROTSG(3,1)=ROTSTR(3,JS)
      XORSG(1,1)=XORSTR(1,JS)					      XORSG(1,1)=XORSTR(1,JS)
      XORSG(2,1)=XORSTR(2,JS)					      XORSG(2,1)=XORSTR(2,JS)
      XORSG(3,1)=XORSTR(3,JS)					      XORSG(3,1)=XORSTR(3,JS)
      XORSG(4,1)=XORSTR(4,JS)					      XORSG(4,1)=XORSTR(4,JS)
      SQRTS=ABS(PSTR(5,JS))					      SQRTS=ABS(PSTR(5,JS))
      S=PSTR(5,JS)**2						      S=PSTR(5,JS)**2
      ISG(1)=IORSTR(JS)						      ISG(1)=IORSTR(JS)
      IORSG(1)=0						      IORSG(1)=0
      PJT(1,1)=0.D0						      PJT(1,1)=0.D0
      PJT(1,2)=0.D0						      PJT(1,2)=0.D0
      PJT(2,1)=0.D0						      PJT(2,1)=0.D0
      PJT(2,2)=0.D0						      PJT(2,2)=0.D0
      PJT(3,1)=SQRTS*0.5D0					      PJT(3,1)=SQRTS*0.5D0
      PJT(3,2)=-SQRTS*0.5D0					      PJT(3,2)=-SQRTS*0.5D0
      PJT(4,1)=SQRTS*0.5D0					      PJT(4,1)=SQRTS*0.5D0
      PJT(4,2)=SQRTS*0.5D0					      PJT(4,2)=SQRTS*0.5D0
      PJT(5,1)=0.D0						      PJT(5,1)=0.D0
      PJT(5,2)=0.D0						      PJT(5,2)=0.D0
      IF ( ROTSTR(3,JS) .LT. 0. ) THEN				      IF ( ROTSTR(3,JS) .LT. 0. ) THEN
        ICJT(1,1)=ICSTR(3,JS)					        ICJT(1,1)=ICSTR(3,JS)
        ICJT(2,1)=ICSTR(4,JS)					        ICJT(2,1)=ICSTR(4,JS)
        ICJT(1,2)=ICSTR(1,JS)					        ICJT(1,2)=ICSTR(1,JS)
        ICJT(2,2)=ICSTR(2,JS)					        ICJT(2,2)=ICSTR(2,JS)
      ELSE							      ELSE
        ICJT(1,1)=ICSTR(1,JS)					        ICJT(1,1)=ICSTR(1,JS)
        ICJT(2,1)=ICSTR(2,JS)					        ICJT(2,1)=ICSTR(2,JS)
        ICJT(1,2)=ICSTR(3,JS)					        ICJT(1,2)=ICSTR(3,JS)
        ICJT(2,2)=ICSTR(4,JS)					        ICJT(2,2)=ICSTR(4,JS)
      ENDIF							      ENDIF
      ICJ1(1)=ICJT(1,1)						      ICJ1(1)=ICJT(1,1)
      ICJ1(2)=ICJT(2,1)						      ICJ1(2)=ICJT(2,1)
      ICJ2(1)=ICJT(1,2)						      ICJ2(1)=ICJT(1,2)
      ICJ2(2)=ICJT(2,2)						      ICJ2(2)=ICJT(2,2)
      CALL IDDECO(ICJ1,JCJ1)					      CALL IDDECO(ICJ1,JCJ1)
      CALL IDDECO(ICJ2,JCJ2)					      CALL IDDECO(ICJ2,JCJ2)
      NQJ1=0							      NQJ1=0
      NQJ2=0							      NQJ2=0
      DO 4 NF=1,NFLAV						      DO 4 NF=1,NFLAV
        NQJ1=NQJ1+JCJ1(NF,1)-JCJ1(NF,2)				        NQJ1=NQJ1+JCJ1(NF,1)-JCJ1(NF,2)
        NQJ2=NQJ2+JCJ2(NF,1)-JCJ2(NF,2)				        NQJ2=NQJ2+JCJ2(NF,1)-JCJ2(NF,2)
4     CONTINUE							4     CONTINUE
      IF ( NQJ1 .GE. 0 ) THEN					      IF ( NQJ1 .GE. 0 ) THEN
        IF ( NQJ2 .GE. 0 ) THEN					        IF ( NQJ2 .GE. 0 ) THEN
          ISI = 0						          ISI = 0
        ELSE							        ELSE
          ISI = 1						          ISI = 1
        ENDIF							        ENDIF
      ELSE							      ELSE
        IF ( NQJ2 .GE. 0 ) THEN					        IF ( NQJ2 .GE. 0 ) THEN
          ISI = 2						          ISI = 2
        ELSE							        ELSE
          ISI = 3						          ISI = 3
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      NQJSTR=ISI*1000000+ABS(NQJ1)*1000+ABS(NQJ2)		      NQJSTR=ISI*1000000+ABS(NQJ1)*1000+ABS(NQJ2)

C  ENTRY STRING FRAGMENTATION					C  ENTRY STRING FRAGMENTATION
C  --------------------------					C  --------------------------
      NPTL2=NPTL						      NPTL2=NPTL
      NCNT2=0							      NCNT2=0
9996  NCNT2=NCNT2+1						9996  NCNT2=NCNT2+1
      NPTL=NPTL2						      NPTL=NPTL2
      NSG=1							      NSG=1
      IF ( NCNT2 .GT. 1000 ) GOTO 1001				      IF ( NCNT2 .GT. 1000 ) GOTO 1001

C  ENTRY SUBSTRING PROCESSING					C  ENTRY SUBSTRING PROCESSING
C  --------------------------					C  --------------------------
      NS=0							      NS=0
9999  NS=NS+1							9999  NS=NS+1
      IF ( NS .GT. NSG ) GOTO 9997				      IF ( NS .GT. NSG ) GOTO 9997
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'ENTRY SUBSTRING PROCESSING'		        WRITE(IFCH,*)'ENTRY SUBSTRING PROCESSING'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,107)NS					        WRITE(IFCH,107)NS
     *        ,(ICJT(J,2*NS-1 ),J=1,2),(SNGL(PJT(J,2*NS-1 )),	     *        ,(ICJT(J,2*NS-1 ),J=1,2),(SNGL(PJT(J,2*NS-1 )),
107     FORMAT(2X,I3,3X,3X,2I7,5(E10.2))			107     FORMAT(2X,I3,3X,3X,2I7,5(E10.2))
        WRITE(IFCH,107)NS					        WRITE(IFCH,107)NS
     *        ,(ICJT(J,2*NS   ),J=1,2),(SNGL(PJT(J,2*NS   )),	     *        ,(ICJT(J,2*NS   ),J=1,2),(SNGL(PJT(J,2*NS   )),
        WRITE(IFCH,101)NS,(PSG(J,NS),J=1,5)			        WRITE(IFCH,101)NS,(PSG(J,NS),J=1,5)
101     FORMAT(2X,I3,23X,5(E10.2)/)				101     FORMAT(2X,I3,23X,5(E10.2)/)
114     FORMAT(' LEFT BREAKING PNT: ',8X,4F7.2/)		114     FORMAT(' LEFT BREAKING PNT: ',8X,4F7.2/)
      ENDIF							      ENDIF

C  DETERMINE ID AND MIN.MASS					C  DETERMINE ID AND MIN.MASS
C  -------------------------					C  -------------------------
      DELRER=DELREX+RANGEN()*(DELREM-DELREX)			      DELRER=DELREX+RANGEN()*(DELREM-DELREX)
      ICP(1)=ICJT(1,2*NS-1)					      ICP(1)=ICJT(1,2*NS-1)
      ICP(2)=ICJT(2,2*NS-1)					      ICP(2)=ICJT(2,2*NS-1)
      ICM(1)=ICJT(1,2*NS)					      ICM(1)=ICJT(1,2*NS)
      ICM(2)=ICJT(2,2*NS)					      ICM(2)=ICJT(2,2*NS)
      CALL IDCOMK(ICP)						      CALL IDCOMK(ICP)
      CALL IDCOMK(ICM)						      CALL IDCOMK(ICM)
      ICJT(1,2*NS-1)=ICP(1)					      ICJT(1,2*NS-1)=ICP(1)
      ICJT(2,2*NS-1)=ICP(2)					      ICJT(2,2*NS-1)=ICP(2)
      ICJT(1,2*NS)=ICM(1)					      ICJT(1,2*NS)=ICM(1)
      ICJT(2,2*NS)=ICM(2)					      ICJT(2,2*NS)=ICM(2)
      CALL IDDECO(ICP,JCP)					      CALL IDDECO(ICP,JCP)
      CALL IDDECO(ICM,JCM)					      CALL IDDECO(ICM,JCM)
      AMMS=UTAMNX(JCM,JCP)					      AMMS=UTAMNX(JCM,JCP)
      NUBAR=0							      NUBAR=0
      DO 7 NF=1,NFLAV						      DO 7 NF=1,NFLAV
        JC(NF,1)=JCP(NF,1)+JCM(NF,1)				        JC(NF,1)=JCP(NF,1)+JCM(NF,1)
        JC(NF,2)=JCP(NF,2)+JCM(NF,2)				        JC(NF,2)=JCP(NF,2)+JCM(NF,2)
        IF ( NF .GT. 4  .AND.  (JC(NF,1).NE.0 .OR. JC(NF,2).N	        IF ( NF .GT. 4  .AND.  (JC(NF,1).NE.0 .OR. JC(NF,2).N
          CALL UTSTOP('JAMFRA: FLAVOUR > 4                   	          CALL UTSTOP('JAMFRA: FLAVOUR > 4                   
        ENDIF							        ENDIF
        NUBAR=NUBAR+JC(NF,1)-JC(NF,2)				        NUBAR=NUBAR+JC(NF,1)-JC(NF,2)
7     CONTINUE							7     CONTINUE
      IF ( NS .EQ. 1 ) NUMBAR=NUBAR				      IF ( NS .EQ. 1 ) NUMBAR=NUBAR
      CALL IDENCO(JC,IC,IRETEN)					      CALL IDENCO(JC,IC,IRETEN)
      CALL IDCOMK(IC)						      CALL IDCOMK(IC)
      ID=IDTRA(IC,0,0,3)					      ID=IDTRA(IC,0,0,3)
      IDK=ID							      IDK=ID
      AM=PSG(5,NS)						      AM=PSG(5,NS)
      IREMN=0							      IREMN=0
      IF ( ICP(1)+ICP(2) .EQ. 0  .OR.  ICM(1)+ICM(2) .EQ. 0 )	      IF ( ICP(1)+ICP(2) .EQ. 0  .OR.  ICM(1)+ICM(2) .EQ. 0 )
      IF ( AM .GT. AMMS+DELRER  .AND.  IREMN .EQ. 0 ) ID=0	      IF ( AM .GT. AMMS+DELRER  .AND.  IREMN .EQ. 0 ) ID=0

C  MASS ADJUSTMENT => FRAGMENT AGAIN				C  MASS ADJUSTMENT => FRAGMENT AGAIN
C  ---------------------------------				C  ---------------------------------
      AMC=PSG(5,NS)						      AMC=PSG(5,NS)
      CALL IDRES(ID,AMC,IDR,IADJ)				      CALL IDRES(ID,AMC,IDR,IADJ)
      IF ( ABS(AMC-PSG(5,NS)) .GT. 1.E-3 ) THEN			      IF ( ABS(AMC-PSG(5,NS)) .GT. 1.E-3 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JAMFRA')					          CALL UTMSG('JAMFRA')
          WRITE(IFCH,*)'*****  MASS CHANGED. FRAGMENT AGAIN.'	          WRITE(IFCH,*)'*****  MASS CHANGED. FRAGMENT AGAIN.'
          WRITE(IFCH,*)'MASS BEFORE, AFTER: ',PSG(5,NS),AMC	          WRITE(IFCH,*)'MASS BEFORE, AFTER: ',PSG(5,NS),AMC
          WRITE(IFCH,*)'IC,ID,IDR: ',IC,ID,IDR			          WRITE(IFCH,*)'IC,ID,IDR: ',IC,ID,IDR
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 9996						        GOTO 9996
      ENDIF							      ENDIF

C  IF MASS < MIN.MASS ==> AGAIN					C  IF MASS < MIN.MASS ==> AGAIN
C  ----------------------------					C  ----------------------------
C-C   IF ( IDR.EQ.0.AND.AM.LT.AMMS-1.E-3 ) THEN			C-C   IF ( IDR.EQ.0.AND.AM.LT.AMMS-1.E-3 ) THEN
C-C     IF ( ISH .GE. 90 ) THEN					C-C     IF ( ISH .GE. 90 ) THEN
C-C       CALL UTMSG('JAMFRA')					C-C       CALL UTMSG('JAMFRA')
C-C       WRITE(IFCH,*)'*****  MASS < MIN MASS. ',AM,AMMS	C-C       WRITE(IFCH,*)'*****  MASS < MIN MASS. ',AM,AMMS
C-C       WRITE(IFCH,*)'IDK,ID,IDR,PSG(5,NS):'			C-C       WRITE(IFCH,*)'IDK,ID,IDR,PSG(5,NS):'
C-C       WRITE(IFCH,*)IDK,ID,IDR,PSG(5,NS)			C-C       WRITE(IFCH,*)IDK,ID,IDR,PSG(5,NS)
C-C       WRITE(IFCH,*)'P_JET:'					C-C       WRITE(IFCH,*)'P_JET:'
C-C       WRITE(IFCH,107)NS					C-C       WRITE(IFCH,107)NS
C-C  *       ,(ICJT(J,2*NS-1 ),J=1,2),(SNGL(PJT(J,2*NS-1 )),J	C-C  *       ,(ICJT(J,2*NS-1 ),J=1,2),(SNGL(PJT(J,2*NS-1 )),J
C-C       WRITE(IFCH,107)NS					C-C       WRITE(IFCH,107)NS
C-C  *       ,(ICJT(J,2*NS   ),J=1,2),(SNGL(PJT(J,2*NS   )),J	C-C  *       ,(ICJT(J,2*NS   ),J=1,2),(SNGL(PJT(J,2*NS   )),J
C-C       WRITE(IFCH,*)'P_STR:'					C-C       WRITE(IFCH,*)'P_STR:'
C-C       WRITE(IFCH,101)NS,(PSG(J,NS),J=1,5)			C-C       WRITE(IFCH,101)NS,(PSG(J,NS),J=1,5)
C-C       CALL UTMSGF						C-C       CALL UTMSGF
C-C     ENDIF							C-C     ENDIF
C-C     IF ( NS .EQ. 1 ) GOTO 1001				C-C     IF ( NS .EQ. 1 ) GOTO 1001
C-C     GOTO 9996						C-C     GOTO 9996
C-C   ENDIF							C-C   ENDIF

C  WRITE ON /CPTL/ (1)						C  WRITE ON /CPTL/ (1)
C  -------------------						C  -------------------
      IORI=ISG(NS)						      IORI=ISG(NS)
      NPTLB=NPTL						      NPTLB=NPTL
9995  NPTL=NPTL+1						9995  NPTL=NPTL+1
      NPTLC=NPTL						      NPTLC=NPTL
      IF ( NPTL .GT. MXPTL ) THEN				      IF ( NPTL .GT. MXPTL ) THEN
        CALL UTSTOP('JAMFRA: NPTL>MXPTL                      	        CALL UTSTOP('JAMFRA: NPTL>MXPTL                      
      ENDIF							      ENDIF
      IF ( NPTL-NPTL2 .GT. MXPC ) THEN				      IF ( NPTL-NPTL2 .GT. MXPC ) THEN
        CALL UTSTOP('JAMFRA: NPTL-NPTL2>MXPC                 	        CALL UTSTOP('JAMFRA: NPTL-NPTL2>MXPC                 
      ENDIF							      ENDIF

      PPTL(1,NPTL)=PSG(1,NS)					      PPTL(1,NPTL)=PSG(1,NS)
      PPTL(2,NPTL)=PSG(2,NS)					      PPTL(2,NPTL)=PSG(2,NS)
      PPTL(3,NPTL)=PSG(3,NS)					      PPTL(3,NPTL)=PSG(3,NS)
      PPTL(4,NPTL)=PSG(4,NS)					      PPTL(4,NPTL)=PSG(4,NS)
      PPTL(5,NPTL)=PSG(5,NS)					      PPTL(5,NPTL)=PSG(5,NS)
      XORPTL(1,NPTL)=XORSG(1,NS)				      XORPTL(1,NPTL)=XORSG(1,NS)
      XORPTL(2,NPTL)=XORSG(2,NS)				      XORPTL(2,NPTL)=XORSG(2,NS)
      XORPTL(3,NPTL)=XORSG(3,NS)				      XORPTL(3,NPTL)=XORSG(3,NS)
      XORPTL(4,NPTL)=XORSG(4,NS)				      XORPTL(4,NPTL)=XORSG(4,NS)
      XBKPTL(1,NPTL-NPTL2)=AINFIN				      XBKPTL(1,NPTL-NPTL2)=AINFIN
      XBKPTL(2,NPTL-NPTL2)=AINFIN				      XBKPTL(2,NPTL-NPTL2)=AINFIN
      TIVPTL(1,NPTL)=-AINFIN					      TIVPTL(1,NPTL)=-AINFIN
      TIVPTL(2,NPTL)=AINFIN					      TIVPTL(2,NPTL)=AINFIN
      IFRPTL(1,NPTL)=0						      IFRPTL(1,NPTL)=0
      IFRPTL(2,NPTL)=0						      IFRPTL(2,NPTL)=0
      ICLPTL(NPTL)=0						      ICLPTL(NPTL)=0
      ISPTL(NPTL-NPTL2)=0					      ISPTL(NPTL-NPTL2)=0
      IORPTL(NPTL)=IORI						      IORPTL(NPTL)=IORI
      JORPTL(NPTL)=0						      JORPTL(NPTL)=0
      IF     ( NPTL .GT. NPTL2+1 ) THEN				      IF     ( NPTL .GT. NPTL2+1 ) THEN
        NQJPTL(NPTL)=-NQJSTR					        NQJPTL(NPTL)=-NQJSTR
      ELSEIF ( NPTL .EQ. NPTL2+1 ) THEN				      ELSEIF ( NPTL .EQ. NPTL2+1 ) THEN
        NQJPTL(NPTL)= NQJSTR					        NQJPTL(NPTL)= NQJSTR
      ENDIF							      ENDIF
      IDPTL(NPTL)=IDR						      IDPTL(NPTL)=IDR
      IF ( IDR .EQ. 0 ) THEN					      IF ( IDR .EQ. 0 ) THEN
        IF ( IC(1) .EQ. 0  .AND.  IC(2) .EQ. 0 ) THEN		        IF ( IC(1) .EQ. 0  .AND.  IC(2) .EQ. 0 ) THEN
          IDPTL(NPTL)=700000000					          IDPTL(NPTL)=700000000
          CALL IDTRBI(JC,IBPTL(1,NPTL),IBPTL(2,NPTL)		          CALL IDTRBI(JC,IBPTL(1,NPTL),IBPTL(2,NPTL)
     *                ,IBPTL(3,NPTL),IBPTL(4,NPTL))		     *                ,IBPTL(3,NPTL),IBPTL(4,NPTL))
        ELSE							        ELSE
          IB5=JC(5,1)*10000+JC(5,2)				          IB5=JC(5,1)*10000+JC(5,2)
          IB6=JC(6,1)*10000+JC(6,2)				          IB6=JC(6,1)*10000+JC(6,2)
          IF ( IB5 .NE. 0  .OR.  IB6 .NE. 0 ) THEN		          IF ( IB5 .NE. 0  .OR.  IB6 .NE. 0 ) THEN
            WRITE(IFCH,*)' '					            WRITE(IFCH,*)' '
            WRITE(IFCH,*)'***** ERROR IN JAMFRA: BOTTOM OR TO	            WRITE(IFCH,*)'***** ERROR IN JAMFRA: BOTTOM OR TO
            WRITE(IFCH,*)'JC:'					            WRITE(IFCH,*)'JC:'
            WRITE(IFCH,*)JC					            WRITE(IFCH,*)JC
            CALL UTSTOP('JAMFRA: BOTTOM OR TOP QUARKS        	            CALL UTSTOP('JAMFRA: BOTTOM OR TOP QUARKS        
          ENDIF							          ENDIF
          IDPTL(NPTL)=800000000+IC(1)*100+IC(2)/100		          IDPTL(NPTL)=800000000+IC(1)*100+IC(2)/100
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,115)NPTL,IORPTL(NPTL),IDPTL(NPTL)		        WRITE(IFCH,115)NPTL,IORPTL(NPTL),IDPTL(NPTL)
     *                 ,(PPTL(J,NPTL),J=1,5)			     *                 ,(PPTL(J,NPTL),J=1,5)
115     FORMAT(1X,'/CPTL/',I6,I7,I10,5(E10.2))			115     FORMAT(1X,'/CPTL/',I6,I7,I10,5(E10.2))
        IF ( IDPTL(NPTL) .EQ. 700000000 )			        IF ( IDPTL(NPTL) .EQ. 700000000 )
     *                               WRITE(IFCH,*)(IBPTL(I,NP	     *                               WRITE(IFCH,*)(IBPTL(I,NP
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '			        IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      IF ( IDR .NE. 0 ) GOTO 9999				      IF ( IDR .NE. 0 ) GOTO 9999

      NQP=0							      NQP=0
      NQM=0							      NQM=0
      NAP=0							      NAP=0
      NAM=0							      NAM=0
      DO 23 NF=1,NFLAV						      DO 23 NF=1,NFLAV
        NQP=NQP+JCP(NF,1)					        NQP=NQP+JCP(NF,1)
        NQM=NQM+JCM(NF,1)					        NQM=NQM+JCM(NF,1)
        NAP=NAP+JCP(NF,2)					        NAP=NAP+JCP(NF,2)
        NAM=NAM+JCM(NF,2)					        NAM=NAM+JCM(NF,2)
23    CONTINUE							23    CONTINUE
      NP=NQP-NAP						      NP=NQP-NAP
      NM=NQM-NAM						      NM=NQM-NAM
      JP=NQP+NAP						      JP=NQP+NAP
      JM=NQM+NAM						      JM=NQM+NAM

C  QUARK-CLUSTER						C  QUARK-CLUSTER
C  -------------						C  -------------
      IF ( ICP(1)+ICP(2) .EQ. 0  .OR.  ICM(1)+ICM(2) .EQ. 0 )	      IF ( ICP(1)+ICP(2) .EQ. 0  .OR.  ICM(1)+ICM(2) .EQ. 0 )
      IF ( AM .GT. AMMS+DELRER ) GOTO 77			      IF ( AM .GT. AMMS+DELRER ) GOTO 77
      IF ( IDK .EQ. 0  .AND.  AM .GT. AMMS+DELREC ) GOTO 77	      IF ( IDK .EQ. 0  .AND.  AM .GT. AMMS+DELREC ) GOTO 77
      IF ( IDK .NE. 0  .AND.  AM .GT. AMMS+DELREX ) GOTO 77	      IF ( IDK .NE. 0  .AND.  AM .GT. AMMS+DELREX ) GOTO 77
78    CONTINUE							78    CONTINUE
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'QUARK-CLUSTER'				        WRITE(IFCH,*)'QUARK-CLUSTER'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      IF ( ICP(1)+ICP(2) .EQ. 0  .AND. ICM(1)+ICM(2) .EQ. 0 )	      IF ( ICP(1)+ICP(2) .EQ. 0  .AND. ICM(1)+ICM(2) .EQ. 0 )
        CALL UTSTOP('JAMFRA: ZERO STRING.                    	        CALL UTSTOP('JAMFRA: ZERO STRING.                    
      ENDIF							      ENDIF
      GOTO 9999							      GOTO 9999
77    CONTINUE							77    CONTINUE

C  JET TRAFOS							C  JET TRAFOS
C  ----------							C  ----------
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'JET TRAFOS'				        WRITE(IFCH,*)'JET TRAFOS'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      ARP(1)=PJT(1,2*NS-1)					      ARP(1)=PJT(1,2*NS-1)
      ARP(2)=PJT(2,2*NS-1)					      ARP(2)=PJT(2,2*NS-1)
      ARP(3)=PJT(3,2*NS-1)					      ARP(3)=PJT(3,2*NS-1)
      ARP(4)=PJT(4,2*NS-1)					      ARP(4)=PJT(4,2*NS-1)
      ARM(1)=PJT(1,2*NS)					      ARM(1)=PJT(1,2*NS)
      ARM(2)=PJT(2,2*NS)					      ARM(2)=PJT(2,2*NS)
      ARM(3)=PJT(3,2*NS)					      ARM(3)=PJT(3,2*NS)
      ARM(4)=PJT(4,2*NS)					      ARM(4)=PJT(4,2*NS)
      IF ( ISH .GE. 90 ) CALL UTCHM(ARP,ARM,1)			      IF ( ISH .GE. 90 ) CALL UTCHM(ARP,ARM,1)
      NSO=IORSG(NS)						      NSO=IORSG(NS)
      IF ( NSO .GT. 0 ) THEN					      IF ( NSO .GT. 0 ) THEN
        CALL UTROT2(-1,ROTSG(1,NSO),ROTSG(2,NSO),ROTSG(3,NSO)	        CALL UTROT2(-1,ROTSG(1,NSO),ROTSG(2,NSO),ROTSG(3,NSO)
     *             ,ARP(1),ARP(2),ARP(3))			     *             ,ARP(1),ARP(2),ARP(3))
        CALL UTLOB2(-1,PSG(1,NSO),PSG(2,NSO),PSG(3,NSO),PSG(4	        CALL UTLOB2(-1,PSG(1,NSO),PSG(2,NSO),PSG(3,NSO),PSG(4
     *              ,PSG(5,NSO),ARP(1),ARP(2),ARP(3),ARP(4))	     *              ,PSG(5,NSO),ARP(1),ARP(2),ARP(3),ARP(4))
        CALL UTROT2(-1,ROTSG(1,NSO),ROTSG(2,NSO),ROTSG(3,NSO)	        CALL UTROT2(-1,ROTSG(1,NSO),ROTSG(2,NSO),ROTSG(3,NSO)
     *               ,ARM(1),ARM(2),ARM(3))			     *               ,ARM(1),ARM(2),ARM(3))
        CALL UTLOB2(-1,PSG(1,NSO),PSG(2,NSO),PSG(3,NSO),PSG(4	        CALL UTLOB2(-1,PSG(1,NSO),PSG(2,NSO),PSG(3,NSO),PSG(4
     *               ,PSG(5,NSO),ARM(1),ARM(2),ARM(3),ARM(4))	     *               ,PSG(5,NSO),ARM(1),ARM(2),ARM(3),ARM(4))
        IF ( ISH .GE. 90 ) CALL UTCHM(ARP,ARM,2)		        IF ( ISH .GE. 90 ) CALL UTCHM(ARP,ARM,2)
        CALL UTLOB2(1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS)	        CALL UTLOB2(1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS)
     *              ,ARP(1),ARP(2),ARP(3),ARP(4))		     *              ,ARP(1),ARP(2),ARP(3),ARP(4))
        CALL UTLOB2(1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS)	        CALL UTLOB2(1,PSG(1,NS),PSG(2,NS),PSG(3,NS),PSG(4,NS)
     *               ,ARM(1),ARM(2),ARM(3),ARM(4))		     *               ,ARM(1),ARM(2),ARM(3),ARM(4))
        IF ( ISH .GE. 90 ) CALL UTCHM(ARP,ARM,3)		        IF ( ISH .GE. 90 ) CALL UTCHM(ARP,ARM,3)
        ROTSG(1,NS)=(ARP(1)-ARM(1))*0.5D0			        ROTSG(1,NS)=(ARP(1)-ARM(1))*0.5D0
        ROTSG(2,NS)=(ARP(2)-ARM(2))*0.5D0			        ROTSG(2,NS)=(ARP(2)-ARM(2))*0.5D0
        ROTSG(3,NS)=(ARP(3)-ARM(3))*0.5D0			        ROTSG(3,NS)=(ARP(3)-ARM(3))*0.5D0
        CALL UTROT2(1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	        CALL UTROT2(1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *              ,ARP(1),ARP(2),ARP(3))			     *              ,ARP(1),ARP(2),ARP(3))
        CALL UTROT2(1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)	        CALL UTROT2(1,ROTSG(1,NS),ROTSG(2,NS),ROTSG(3,NS)
     *              ,ARM(1),ARM(2),ARM(3))			     *              ,ARM(1),ARM(2),ARM(3))
      ENDIF							      ENDIF
      ICUP(1)=ICJT(1,2*NS-1)					      ICUP(1)=ICJT(1,2*NS-1)
      ICUP(2)=ICJT(2,2*NS-1)					      ICUP(2)=ICJT(2,2*NS-1)
      ICUM(1)=ICJT(1,2*NS)					      ICUM(1)=ICJT(1,2*NS)
      ICUM(2)=ICJT(2,2*NS)					      ICUM(2)=ICJT(2,2*NS)
      IF ( ARP(3) .LT. 0.D0 ) THEN				      IF ( ARP(3) .LT. 0.D0 ) THEN
        ICJT(1,2*NS-1)=ICUM(1)					        ICJT(1,2*NS-1)=ICUM(1)
        ICJT(2,2*NS-1)=ICUM(2)					        ICJT(2,2*NS-1)=ICUM(2)
        PJT(1,2*NS-1)=ARM(1)					        PJT(1,2*NS-1)=ARM(1)
        PJT(2,2*NS-1)=ARM(2)					        PJT(2,2*NS-1)=ARM(2)
        PJT(3,2*NS-1)=ARM(3)					        PJT(3,2*NS-1)=ARM(3)
        PJT(4,2*NS-1)=ARM(4)					        PJT(4,2*NS-1)=ARM(4)
        ICJT(1,2*NS)=ICUP(1)					        ICJT(1,2*NS)=ICUP(1)
        ICJT(2,2*NS)=ICUP(2)					        ICJT(2,2*NS)=ICUP(2)
        PJT(1,2*NS)=ARP(1)					        PJT(1,2*NS)=ARP(1)
        PJT(2,2*NS)=ARP(2)					        PJT(2,2*NS)=ARP(2)
        PJT(3,2*NS)=ARP(3)					        PJT(3,2*NS)=ARP(3)
        PJT(4,2*NS)=ARP(4)					        PJT(4,2*NS)=ARP(4)
      ELSE							      ELSE
        ICJT(1,2*NS-1)=ICUP(1)					        ICJT(1,2*NS-1)=ICUP(1)
        ICJT(2,2*NS-1)=ICUP(2)					        ICJT(2,2*NS-1)=ICUP(2)
        PJT(1,2*NS-1)=ARP(1)					        PJT(1,2*NS-1)=ARP(1)
        PJT(2,2*NS-1)=ARP(2)					        PJT(2,2*NS-1)=ARP(2)
        PJT(3,2*NS-1)=ARP(3)					        PJT(3,2*NS-1)=ARP(3)
        PJT(4,2*NS-1)=ARP(4)					        PJT(4,2*NS-1)=ARP(4)
        ICJT(1,2*NS)=ICUM(1)					        ICJT(1,2*NS)=ICUM(1)
        ICJT(2,2*NS)=ICUM(2)					        ICJT(2,2*NS)=ICUM(2)
        PJT(1,2*NS)=ARM(1)					        PJT(1,2*NS)=ARM(1)
        PJT(2,2*NS)=ARM(2)					        PJT(2,2*NS)=ARM(2)
        PJT(3,2*NS)=ARM(3)					        PJT(3,2*NS)=ARM(3)
        PJT(4,2*NS)=ARM(4)					        PJT(4,2*NS)=ARM(4)
      ENDIF							      ENDIF
      S=PSG(5,NS)**2						      S=PSG(5,NS)**2
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN

        AUXIL=100.*ABS( SNGL(PJT(3,2*NS-1)-PJT(3,2*NS))-ABS(P	        AUXIL=100.*ABS( SNGL(PJT(3,2*NS-1)-PJT(3,2*NS))-ABS(P
        IF ( AUXIL .GT. 1.  .AND.  AUXIL .GT. ABS(PSG(5,NS)) 	        IF ( AUXIL .GT. 1.  .AND.  AUXIL .GT. ABS(PSG(5,NS)) 
          CALL UTMSG('JAMFRA')					          CALL UTMSG('JAMFRA')
          WRITE(IFCH,*)'*****  PZ1-PZ2-SQRT(S) NONZERO'		          WRITE(IFCH,*)'*****  PZ1-PZ2-SQRT(S) NONZERO'
          WRITE(IFCH,*)'VALUE:   '				          WRITE(IFCH,*)'VALUE:   '
     *                 ,SNGL(PJT(3,2*NS-1)-PJT(3,2*NS))-SQRT(	     *                 ,SNGL(PJT(3,2*NS-1)-PJT(3,2*NS))-SQRT(
          WRITE(IFCH,*)'SQRT(S): ',SQRT(S)			          WRITE(IFCH,*)'SQRT(S): ',SQRT(S)
          WRITE(IFCH,*)(SNGL(PJT(I,2*NS-1)),I=1,4)		          WRITE(IFCH,*)(SNGL(PJT(I,2*NS-1)),I=1,4)
          WRITE(IFCH,*)(SNGL(PJT(I,2*NS)),I=1,4)		          WRITE(IFCH,*)(SNGL(PJT(I,2*NS)),I=1,4)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ISH .GE. 92 ) THEN					        IF ( ISH .GE. 92 ) THEN
          WRITE(IFCH,103)NS,NSO					          WRITE(IFCH,103)NS,NSO
     *      ,(ICJT(J,2*NS-1 ),J=1,2),(SNGL(PJT(J,2*NS-1 )),J=	     *      ,(ICJT(J,2*NS-1 ),J=1,2),(SNGL(PJT(J,2*NS-1 )),J=
103       FORMAT(2X,I3,I3,3X,2I7,5(E10.2))			103       FORMAT(2X,I3,I3,3X,2I7,5(E10.2))
          WRITE(IFCH,104)					          WRITE(IFCH,104)
     *       (ICJT(J,2*NS   ),J=1,2),(SNGL(PJT(J,2*NS   )),J=	     *       (ICJT(J,2*NS   ),J=1,2),(SNGL(PJT(J,2*NS   )),J=
104       FORMAT(2X,9X,2I7,5(E10.2)/)				104       FORMAT(2X,9X,2I7,5(E10.2)/)
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      IF     ( IOPBRK .EQ. 1 ) THEN				      IF     ( IOPBRK .EQ. 1 ) THEN
        CALL JAMBR1(NS,NSG,IRET)				        CALL JAMBR1(NS,NSG,IRET)
      ELSEIF ( IOPBRK .EQ. 2 ) THEN				      ELSEIF ( IOPBRK .EQ. 2 ) THEN
        CALL JAMBR2(NS,NSG,IRET)				        CALL JAMBR2(NS,NSG,IRET)
      ENDIF							      ENDIF
      IF ( IRET .EQ. 9996 ) GOTO 9996				      IF ( IRET .EQ. 9996 ) GOTO 9996
      GOTO 9999							      GOTO 9999

C  WRITE ON /CPTL/ (2)						C  WRITE ON /CPTL/ (2)
C  -------------------						C  -------------------
9997  CONTINUE							9997  CONTINUE
      IF ( NPTL .LE. NPTL2 ) THEN				      IF ( NPTL .LE. NPTL2 ) THEN
        CALL UTSTOP('JAMFRA: NPTL<=NPTL2                     	        CALL UTSTOP('JAMFRA: NPTL<=NPTL2                     
      ENDIF							      ENDIF
      IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '			      IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '
      DO 67 I=NPTL2+1,NPTL					      DO 67 I=NPTL2+1,NPTL
        ISTPTL(I)=ISPTL(I-NPTL2)				        ISTPTL(I)=ISPTL(I-NPTL2)
        IO=IORPTL(I)						        IO=IORPTL(I)
        IF ( IO .GT. 0 ) THEN					        IF ( IO .GT. 0 ) THEN
          IF ( IFRPTL(1,IO) .EQ. 0 ) IFRPTL(1,IO)=I		          IF ( IFRPTL(1,IO) .EQ. 0 ) IFRPTL(1,IO)=I
          IFRPTL(2,IO)=I					          IFRPTL(2,IO)=I
        ELSE							        ELSE
          IORPTL(I)=0						          IORPTL(I)=0
        ENDIF							        ENDIF
        ZOR=XORSG(3,1)						        ZOR=XORSG(3,1)
        TOR=XORSG(4,1)						        TOR=XORSG(4,1)
        R=RANGEN()						        R=RANGEN()
        TAURAN=-TAUREA*LOG(R)					        TAURAN=-TAUREA*LOG(R)
        CALL UTTAIX(I,TAURAN,ZOR,TOR,ZIS,TIS)			        CALL UTTAIX(I,TAURAN,ZOR,TOR,ZIS,TIS)
        TIVPTL(1,I)=MAX(TIS,XORPTL(4,I))			        TIVPTL(1,I)=MAX(TIS,XORPTL(4,I))
        IF     ( ISTPTL(I) .NE. 0 ) THEN			        IF     ( ISTPTL(I) .NE. 0 ) THEN
          TAUBR=SQRT						          TAUBR=SQRT
     *          ((XBKPTL(2,I-NPTL2)-TOR)**2-(XBKPTL(1,I-NPTL2	     *          ((XBKPTL(2,I-NPTL2)-TOR)**2-(XBKPTL(1,I-NPTL2
          CALL UTTAIX(I,TAUBR,ZOR,TOR,ZIS,TIS)			          CALL UTTAIX(I,TAUBR,ZOR,TOR,ZIS,TIS)
          TIVPTL(2,I)=TIS					          TIVPTL(2,I)=TIS
        ELSEIF ( IO .GT. 0 ) THEN				        ELSEIF ( IO .GT. 0 ) THEN
          TAUBR=SQRT						          TAUBR=SQRT
     *         ((XBKPTL(2,IO-NPTL2)-TOR)**2-(XBKPTL(1,IO-NPTL	     *         ((XBKPTL(2,IO-NPTL2)-TOR)**2-(XBKPTL(1,IO-NPTL
          CALL UTTAIX(I,TAUBR,XORSG(3,1),XORSG(4,1),ZISBR,TIS	          CALL UTTAIX(I,TAUBR,XORSG(3,1),XORSG(4,1),ZISBR,TIS
          CALL IDTAU(IDPTL(I),PPTL(4,I),PPTL(5,I),TAUGM)	          CALL IDTAU(IDPTL(I),PPTL(4,I),PPTL(5,I),TAUGM)
          TIVPTL(2,I)=TISBR+TAUGM				          TIVPTL(2,I)=TISBR+TAUGM
        ELSE							        ELSE
          CALL IDTAU(IDPTL(I),PPTL(4,I),PPTL(5,I),TAUGM)	          CALL IDTAU(IDPTL(I),PPTL(4,I),PPTL(5,I),TAUGM)
          TIVPTL(2,I)=XORPTL(4,I)+TAUGM				          TIVPTL(2,I)=XORPTL(4,I)+TAUGM
        ENDIF							        ENDIF
        IF ( ISH .GE. 92 ) WRITE(IFCH,120)I,IORPTL(I),IDPTL(I	        IF ( ISH .GE. 92 ) WRITE(IFCH,120)I,IORPTL(I),IDPTL(I
     *               ,(SNGL(XBKPTL(J,I-NPTL2)),J=1,2)		     *               ,(SNGL(XBKPTL(J,I-NPTL2)),J=1,2)
     *               ,(XORPTL(J,I),J=3,4),(TIVPTL(J,I),J=1,2)	     *               ,(XORPTL(J,I),J=3,4),(TIVPTL(J,I),J=1,2)
120     FORMAT(1X,'/CPTL/',I6,I7,I10				120     FORMAT(1X,'/CPTL/',I6,I7,I10
     *         ,E10.2,E10.2,E10.2,E10.2,E10.2,E10.2)		     *         ,E10.2,E10.2,E10.2,E10.2,E10.2,E10.2)
67    CONTINUE							67    CONTINUE

1000  RETURN							1000  RETURN

1001  NEWEVT=1							1001  NEWEVT=1
      GOTO 1000							      GOTO 1000

      END							      END
C============================================================	C============================================================

      SUBROUTINE JCENTD						      SUBROUTINE JCENTD

C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KPARX=15)					      PARAMETER (KPARX=15)
      PARAMETER (NQUAX=12)					      PARAMETER (NQUAX=12)
      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)			      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)
      REAL ENTROX(1+KPARX,1+NQUAX)				      REAL ENTROX(1+KPARX,1+NQUAX)

      DATA (ENTROX( 1,1+N),N=0,12)/				      DATA (ENTROX( 1,1+N),N=0,12)/
     *.00000E+00,.00000E+00,.00000E+00,.00000E+00,.00000E+00,	     *.00000E+00,.00000E+00,.00000E+00,.00000E+00,.00000E+00,
     *.00000E+00,.00000E+00,.00000E+00,.00000E+00,.00000E+00,	     *.00000E+00,.00000E+00,.00000E+00,.00000E+00,.00000E+00,
     *.00000E+00/						     *.00000E+00/
      DATA (ENTROX( 4,1+N),N=0,12)/				      DATA (ENTROX( 4,1+N),N=0,12)/
     *.40254E+01,.59349E+01,.74855E+01,.87464E+01,.98267E+01,	     *.40254E+01,.59349E+01,.74855E+01,.87464E+01,.98267E+01,
     *.11611E+02,.12368E+02,.13058E+02,.13691E+02,.14277E+02,	     *.11611E+02,.12368E+02,.13058E+02,.13691E+02,.14277E+02,
     *.15332E+02/						     *.15332E+02/
      DATA (ENTROX( 7,1+N),N=0,12)/				      DATA (ENTROX( 7,1+N),N=0,12)/
     *.61944E+01,.89306E+01,.11114E+02,.12969E+02,.14595E+02,	     *.61944E+01,.89306E+01,.11114E+02,.12969E+02,.14595E+02,
     *.17380E+02,.18599E+02,.19728E+02,.20780E+02,.21767E+02,	     *.17380E+02,.18599E+02,.19728E+02,.20780E+02,.21767E+02,
     *.23574E+02/						     *.23574E+02/
      DATA (ENTROX(10,1+N),N=0,12)/				      DATA (ENTROX(10,1+N),N=0,12)/
     *.68876E+01,.10183E+02,.12855E+02,.15159E+02,.17201E+02,	     *.68876E+01,.10183E+02,.12855E+02,.15159E+02,.17201E+02,
     *.20734E+02,.22296E+02,.23751E+02,.25115E+02,.26400E+02,	     *.20734E+02,.22296E+02,.23751E+02,.25115E+02,.26400E+02,
     *.28771E+02/						     *.28771E+02/
      DATA (ENTROX(13,1+N),N=0,12)/				      DATA (ENTROX(13,1+N),N=0,12)/
     *.61944E+01,.99602E+01,.13068E+02,.15784E+02,.18208E+02,	     *.61944E+01,.99602E+01,.13068E+02,.15784E+02,.18208E+02,
     *.22425E+02,.24295E+02,.26041E+02,.27681E+02,.29228E+02,	     *.22425E+02,.24295E+02,.26041E+02,.27681E+02,.29228E+02,
     *.32092E+02/						     *.32092E+02/
      DATA (ENTROX(16,1+N),N=0,12)/				      DATA (ENTROX(16,1+N),N=0,12)/
     *.40254E+01,.82375E+01,.11781E+02,.14923E+02,.17745E+02,	     *.40254E+01,.82375E+01,.11781E+02,.14923E+02,.17745E+02,
     *.22669E+02,.24853E+02,.26890E+02,.28803E+02,.30609E+02,	     *.22669E+02,.24853E+02,.26890E+02,.28803E+02,.30609E+02,
     *.33948E+02/						     *.33948E+02/
C------------------------------------------------------------	C------------------------------------------------------------
      KPH=KPARX							      KPH=KPARX
      NQH=NQUAX							      NQH=NQUAX
      DO 2 N=1,1+NQUAX						      DO 2 N=1,1+NQUAX
        DO 1 K=1,1+KPARX					        DO 1 K=1,1+KPARX
          ENTRO(K,N)=ENTROX(K,N)				          ENTRO(K,N)=ENTROX(K,N)
1       CONTINUE						1       CONTINUE
2     CONTINUE							2     CONTINUE

      IF ( KPH .NE. 15 ) THEN					      IF ( KPH .NE. 15 ) THEN
        CALL UTSTOP('ICENTD: INSUFFICIENT INITIALIZATION;   K	        CALL UTSTOP('ICENTD: INSUFFICIENT INITIALIZATION;   K
      ENDIF							      ENDIF
      IF ( NQH .NE. 12 ) THEN					      IF ( NQH .NE. 12 ) THEN
        CALL UTSTOP('ICENTD: INSUFFICIENT INITIALIZATION;   N	        CALL UTSTOP('ICENTD: INSUFFICIENT INITIALIZATION;   N
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JCENTP						      SUBROUTINE JCENTP

C------------------------------------------------------------	C------------------------------------------------------------
C  PLOTS ENTRO(,) AND FTN SJCENT				C  PLOTS ENTRO(,) AND FTN SJCENT
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KPARX=15)					      PARAMETER (KPARX=15)
      PARAMETER (NQUAX=12)					      PARAMETER (NQUAX=12)
      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)			      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)
      COMMON /CJCENT/  IGX,NSYMX				      COMMON /CJCENT/  IGX,NSYMX
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      XPLOT(101),YPLOT(101)				      REAL      XPLOT(101),YPLOT(101)
      INTEGER   IPLOT(5)					      INTEGER   IPLOT(5)
      CHARACTER TEXT*50						      CHARACTER TEXT*50
      DATA      IPLOT/0,0,0,1,1/				      DATA      IPLOT/0,0,0,1,1/
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 13 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 13 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .LT. 95 ) GOTO 1000				      IF ( ISH .LT. 95 ) GOTO 1000

      IF ( IPLOT(1) .EQ. 1 ) THEN				      IF ( IPLOT(1) .EQ. 1 ) THEN
        TEXT='TITLE IG=     NSYM=     K= 3,6,9,12,15$       '	        TEXT='TITLE IG=     NSYM=     K= 3,6,9,12,15$       '
        WRITE(TEXT(10:11),122)IGX				        WRITE(TEXT(10:11),122)IGX
        WRITE(TEXT(20:21),122)NSYMX				        WRITE(TEXT(20:21),122)NSYMX
122     FORMAT(I2)						122     FORMAT(I2)
        DO 54 KX=1,5						        DO 54 KX=1,5
          K=3*KX						          K=3*KX
          DO 55 N=1,13						          DO 55 N=1,13
            XPLOT(N)=N-1					            XPLOT(N)=N-1
            YPLOT(N)=ENTRO(1+K,N)				            YPLOT(N)=ENTRO(1+K,N)
55        CONTINUE						55        CONTINUE
          CALL UTHIST(0.,12.,0.,40.,1+12,XPLOT,YPLOT,'LIN','L	          CALL UTHIST(0.,12.,0.,40.,1+12,XPLOT,YPLOT,'LIN','L
     *      ,'XAXIS ENERGY / OMEGA            $              	     *      ,'XAXIS ENERGY / OMEGA            $              
     *      ,'YAXIS ENTROPY                   $              	     *      ,'YAXIS ENTROPY                   $              
54      CONTINUE						54      CONTINUE
      ENDIF							      ENDIF

      IF ( IPLOT(2) .EQ. 1 ) THEN				      IF ( IPLOT(2) .EQ. 1 ) THEN
        TEXT='TITLE IG=     NSYM=     K= 3,6,9,12,15$       '	        TEXT='TITLE IG=     NSYM=     K= 3,6,9,12,15$       '
        WRITE(TEXT(10:11),122)IGX				        WRITE(TEXT(10:11),122)IGX
        WRITE(TEXT(20:21),122)NSYMX				        WRITE(TEXT(20:21),122)NSYMX
        DO 64 KX=1,5						        DO 64 KX=1,5
          K=3*KX						          K=3*KX
          DO 65 N=1,13						          DO 65 N=1,13
            XPLOT(N)=(N-1.)/FLOAT(K)				            XPLOT(N)=(N-1.)/FLOAT(K)
            YPLOT(N)=ENTRO(1+K,N)/K				            YPLOT(N)=ENTRO(1+K,N)/K
65        CONTINUE						65        CONTINUE
          CALL UTHIST(0.,5.,0.,6.,1+12,XPLOT,YPLOT,'LIN','LIN	          CALL UTHIST(0.,5.,0.,6.,1+12,XPLOT,YPLOT,'LIN','LIN
     *      ,'XAXIS ENERGY / OMEGA / PARTICLE $              	     *      ,'XAXIS ENERGY / OMEGA / PARTICLE $              
     *      ,'YAXIS ENTROPY / PARTICLE        $              	     *      ,'YAXIS ENTROPY / PARTICLE        $              
64      CONTINUE						64      CONTINUE
      ENDIF							      ENDIF

      IF ( IPLOT(3) .EQ. 1 ) THEN				      IF ( IPLOT(3) .EQ. 1 ) THEN
        DO 62 KX=1,10						        DO 62 KX=1,10
          K=3*KX						          K=3*KX
          DO 63 N=0,100						          DO 63 N=0,100
            X=N*0.05						            X=N*0.05
            XPLOT(1+N)=X					            XPLOT(1+N)=X
            YPLOT(1+N)=SJCENT(K,K,K*X)/K			            YPLOT(1+N)=SJCENT(K,K,K*X)/K
63        CONTINUE						63        CONTINUE
          CALL UTHIST(0.,5.,0.,6.,101,XPLOT,YPLOT,'LIN','LINL	          CALL UTHIST(0.,5.,0.,6.,101,XPLOT,YPLOT,'LIN','LINL
     *        ,'XAXIS ENERGY / OMEGA / PARTICLE $            	     *        ,'XAXIS ENERGY / OMEGA / PARTICLE $            
     *        ,'YAXIS ENTROPY / PARTICLE        $            	     *        ,'YAXIS ENTROPY / PARTICLE        $            
     *        ,'TITLE INTER(EXTRA)POLATED       $            	     *        ,'TITLE INTER(EXTRA)POLATED       $            
62      CONTINUE						62      CONTINUE
      ENDIF							      ENDIF

      IF ( IPLOT(4) .EQ. 1 ) THEN				      IF ( IPLOT(4) .EQ. 1 ) THEN
        DO 58 KX=1,10						        DO 58 KX=1,10
          K=3*KX						          K=3*KX
          DO 59 N=0,100						          DO 59 N=0,100
            X=N*0.5						            X=N*0.5
            XPLOT(1+N)=X					            XPLOT(1+N)=X
            YPLOT(1+N)=SJCENT(K,K,X)				            YPLOT(1+N)=SJCENT(K,K,X)
59        CONTINUE						59        CONTINUE
          CALL UTHIST(0.,50.,0.,80.,101,XPLOT,YPLOT,'LIN','LI	          CALL UTHIST(0.,50.,0.,80.,101,XPLOT,YPLOT,'LIN','LI
     *      ,'XAXIS ENERGY / OMEGA            $              	     *      ,'XAXIS ENERGY / OMEGA            $              
     *      ,'YAXIS ENTROPY                   $              	     *      ,'YAXIS ENTROPY                   $              
     *      ,'TITLE INTER(EXTRA)POLATED  KU=K $              	     *      ,'TITLE INTER(EXTRA)POLATED  KU=K $              
58      CONTINUE						58      CONTINUE
      ENDIF							      ENDIF

      IF ( IPLOT(5) .EQ. 1 ) THEN				      IF ( IPLOT(5) .EQ. 1 ) THEN
        DO 48 KX=1,10						        DO 48 KX=1,10
          K=3*KX						          K=3*KX
          DO 49 N=0,100						          DO 49 N=0,100
            X=N*0.5						            X=N*0.5
            XPLOT(1+N)=X					            XPLOT(1+N)=X
            YPLOT(1+N)=SJCENT(K,0,X)				            YPLOT(1+N)=SJCENT(K,0,X)
49        CONTINUE						49        CONTINUE
          CALL UTHIST(0.,50.,0.,80.,101,XPLOT,YPLOT,'LIN','LI	          CALL UTHIST(0.,50.,0.,80.,101,XPLOT,YPLOT,'LIN','LI
     *      ,'XAXIS ENERGY / OMEGA            $              	     *      ,'XAXIS ENERGY / OMEGA            $              
     *      ,'YAXIS ENTROPY                   $              	     *      ,'YAXIS ENTROPY                   $              
     *      ,'TITLE INTER(EXTRA)POLATED  KU=0 $              	     *      ,'TITLE INTER(EXTRA)POLATED  KU=0 $              
48      CONTINUE						48      CONTINUE
      ENDIF							      ENDIF

1000  CONTINUE							1000  CONTINUE
      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JCENTR(NSYM,IG,IDI,INIT)			      SUBROUTINE JCENTR(NSYM,IG,IDI,INIT)

C------------------------------------------------------------	C------------------------------------------------------------
C  FILLS ARRAY DEGEN(1+K,1+N) CONTAINING			C  FILLS ARRAY DEGEN(1+K,1+N) CONTAINING
C    THE NUMBER OF MIXED SYMMETRIC (BOX OF WIDTH NSYM)		C    THE NUMBER OF MIXED SYMMETRIC (BOX OF WIDTH NSYM)
C    K-PARTICLE STATES WITH ENERGY N (UNITS OF OMEGA), BASED 	C    K-PARTICLE STATES WITH ENERGY N (UNITS OF OMEGA), BASED 
C    OSCILLATOR (DIM: IDI) WAVEFUNCTIONS (ADDIT. DEGENERACY: 	C    OSCILLATOR (DIM: IDI) WAVEFUNCTIONS (ADDIT. DEGENERACY: 
C  FILLS ARRAY ENTRO(1+K,1+N) = LOG( DEGEN(1+K,1+N) )  .	C  FILLS ARRAY ENTRO(1+K,1+N) = LOG( DEGEN(1+K,1+N) )  .
C  ENTRO(,) WRITTEN IN FORM OF DATA FOR JCENTD IF ISH=95	C  ENTRO(,) WRITTEN IN FORM OF DATA FOR JCENTD IF ISH=95
C    (ISHSUB=12.. SELECTS THIS).				C    (ISHSUB=12.. SELECTS THIS).
C  INIT MUST BE SET 1 FOR THE FIRST CALL OF JCENTR		C  INIT MUST BE SET 1 FOR THE FIRST CALL OF JCENTR
C    (INIT=1 CALLS UTTUCL, UTPART, UTOVEL)			C    (INIT=1 CALLS UTTUCL, UTPART, UTOVEL)
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (IOVMAX=100)					      PARAMETER (IOVMAX=100)
      PARAMETER (ITAMAX=1000)					      PARAMETER (ITAMAX=1000)
      PARAMETER (JOVMAX=100)					      PARAMETER (JOVMAX=100)
      PARAMETER (KPARX=15)					      PARAMETER (KPARX=15)
      PARAMETER (KTUMAX=100)					      PARAMETER (KTUMAX=100)
      PARAMETER (NQUAX=12)					      PARAMETER (NQUAX=12)
      PARAMETER (JPAMAX=NQUAX*NQUAX*NQUAX)			      PARAMETER (JPAMAX=NQUAX*NQUAX*NQUAX)
      PARAMETER (KKPMAX=NQUAX*NQUAX*2)				      PARAMETER (KKPMAX=NQUAX*NQUAX*2)
      PARAMETER (NSYMAX=20)					      PARAMETER (NSYMAX=20)
      PARAMETER (NTUMAX=100)					      PARAMETER (NTUMAX=100)
      PARAMETER (NYMAX=1000)					      PARAMETER (NYMAX=1000)
      COMMON /CDEGEN/  DEGEN(1+KPARX,1+NQUAX)			      COMMON /CDEGEN/  DEGEN(1+KPARX,1+NQUAX)
      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)			      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)
      COMMON /CJCENT/  IGX,NSYMX				      COMMON /CJCENT/  IGX,NSYMX
      COMMON /COVEL/   OVEL(1+IOVMAX,1+JOVMAX)			      COMMON /COVEL/   OVEL(1+IOVMAX,1+JOVMAX)
      COMMON /CPARTA/  PARTA(NQUAX),IPART(NQUAX,JPAMAX)		      COMMON /CPARTA/  PARTA(NQUAX),IPART(NQUAX,JPAMAX)
      DOUBLE PRECISION TUCL					      DOUBLE PRECISION TUCL
      COMMON /CTUCL/   TUCL(1+KTUMAX,1+NTUMAX)			      COMMON /CTUCL/   TUCL(1+KTUMAX,1+NTUMAX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      YOFA(ITAMAX)					      REAL      YOFA(ITAMAX)
      INTEGER   IYO(NYMAX,KPARX),IYOL(ITAMAX),IYOM(ITAMAX),IY	      INTEGER   IYO(NYMAX,KPARX),IYOL(ITAMAX),IYOM(ITAMAX),IY
     *         ,IYOR(NSYMAX),IYOX(KPARX),IYOZ(ITAMAX,NSYMAX,2	     *         ,IYOR(NSYMAX),IYOX(KPARX),IYOZ(ITAMAX,NSYMAX,2
     *         ,JYO(NYMAX),KKK(KPARX)				     *         ,JYO(NYMAX),KKK(KPARX)
      CHARACTER CIGA*7						      CHARACTER CIGA*7
      CHARACTER*1 CYOX(1+NQUAX,KPARX),DELI(1+KPARX,1+NQUAX)	      CHARACTER*1 CYOX(1+NQUAX,KPARX),DELI(1+KPARX,1+NQUAX)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( INIT .EQ. 1 ) THEN					      IF ( INIT .EQ. 1 ) THEN
        CALL UTTUCL						        CALL UTTUCL
        CALL UTPART						        CALL UTPART
        CALL UTOVEL						        CALL UTOVEL
      ENDIF							      ENDIF

      WRITE(IFMT,*)'EXECUTE SR JCENTR ...'			      WRITE(IFMT,*)'EXECUTE SR JCENTR ...'
      IF ( NSYM .GE. NSYMAX ) THEN				      IF ( NSYM .GE. NSYMAX ) THEN
        CALL UTSTOP('JCENTR: DIMENSION NSYMAX TOO SMALL      	        CALL UTSTOP('JCENTR: DIMENSION NSYMAX TOO SMALL      
      ENDIF							      ENDIF
      IF ( MOD(KPARX,NSYM) .NE. 0 ) THEN			      IF ( MOD(KPARX,NSYM) .NE. 0 ) THEN
        CALL UTSTOP('JCENTR: KPARX SHOULD BE MULTIPLE OF NSYM	        CALL UTSTOP('JCENTR: KPARX SHOULD BE MULTIPLE OF NSYM
      ENDIF							      ENDIF
      MMAX=1+(KPARX-1)/NSYM					      MMAX=1+(KPARX-1)/NSYM
      IZERO=0							      IZERO=0
      NSYMX=NSYM						      NSYMX=NSYM
      IGX=IG							      IGX=IG

C  LOOP OVER ENERGY						C  LOOP OVER ENERGY
C  ----------------						C  ----------------
      DO 6000 N=0,NQUAX						      DO 6000 N=0,NQUAX
        WRITE(IFMT,*)'SR JCENTR: N=',N				        WRITE(IFMT,*)'SR JCENTR: N=',N
        IF ( N .EQ. 0 ) THEN					        IF ( N .EQ. 0 ) THEN
          KKP=1							          KKP=1
        ELSE							        ELSE
          KKP=-IPART(N,1)					          KKP=-IPART(N,1)
          IF ( KKP .GT. KKPMAX ) THEN				          IF ( KKP .GT. KKPMAX ) THEN
            CALL UTSTOP('JCENTR: DIMENSION KKPMAX TOO SMALL  	            CALL UTSTOP('JCENTR: DIMENSION KKPMAX TOO SMALL  
          ENDIF							          ENDIF
          IF ( -IPART(N,1) .NE. NINT(PARTA(N)) ) THEN		          IF ( -IPART(N,1) .NE. NINT(PARTA(N)) ) THEN
            CALL UTSTOP('JCENTR: # OF PARTITIONS DISAGREE    	            CALL UTSTOP('JCENTR: # OF PARTITIONS DISAGREE    
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,103)('-',IC=1,79),N,KKP,('-',IC=1,79)	          WRITE(IFCH,103)('-',IC=1,79),N,KKP,('-',IC=1,79)
103       FORMAT(/1X,79A1/7X,'N = ',I2,				103       FORMAT(/1X,79A1/7X,'N = ',I2,
     *                       '   --->   ',I4,' PARTITION(S)'/	     *                       '   --->   ',I4,' PARTITION(S)'/
          JJ=2							          JJ=2
          DO 8 KK=1,KKP						          DO 8 KK=1,KKP
            IF     ( N .EQ. 0 ) THEN				            IF     ( N .EQ. 0 ) THEN
              WRITE(IFCH,102)KK,IZERO				              WRITE(IFCH,102)KK,IZERO
            ELSEIF ( N .GT. 0 ) THEN				            ELSEIF ( N .GT. 0 ) THEN
              LL=-IPART(N,JJ)					              LL=-IPART(N,JJ)
              WRITE(IFCH,102)KK,(IPART(N,I),I=JJ+1,JJ+MIN(20,	              WRITE(IFCH,102)KK,(IPART(N,I),I=JJ+1,JJ+MIN(20,
102           FORMAT(2X,I2,'. PARTITION:',3X,20I3)		102           FORMAT(2X,I2,'. PARTITION:',3X,20I3)
            ENDIF						            ENDIF
            JJ=JJ+LL+1						            JJ=JJ+LL+1
 8        CONTINUE						 8        CONTINUE
        ENDIF							        ENDIF

C  ZERO PARTICLES						C  ZERO PARTICLES
C  --------------						C  --------------
        DEGEN(1,1+N)=1.						        DEGEN(1,1+N)=1.
        ENTRO(1,1+N)=0.						        ENTRO(1,1+N)=0.
        IF ( N .EQ. NQUAX ) THEN				        IF ( N .EQ. NQUAX ) THEN
          DELI(1,1+N)='/'					          DELI(1,1+N)='/'
        ELSE							        ELSE
          DELI(1,1+N)=','					          DELI(1,1+N)=','
        ENDIF							        ENDIF

C  LOOP OVER PARTICLE NUMBER					C  LOOP OVER PARTICLE NUMBER
C  -------------------------					C  -------------------------
        DO 6001 KX=1,KPARX/3					        DO 6001 KX=1,KPARX/3
          K=3*KX						          K=3*KX
          IF ( K .GT. KPARX ) THEN				          IF ( K .GT. KPARX ) THEN
            CALL UTSTOP('JCENTR: DIMENSION KPARX TOO SMALL   	            CALL UTSTOP('JCENTR: DIMENSION KPARX TOO SMALL   
          ENDIF							          ENDIF
          DEGEN(1+K,1+N)=0.					          DEGEN(1+K,1+N)=0.
          IF ( N .EQ. NQUAX ) THEN				          IF ( N .EQ. NQUAX ) THEN
            DELI(1+K,1+N)='/'					            DELI(1+K,1+N)='/'
          ELSE							          ELSE
            DELI(1+K,1+N)=','					            DELI(1+K,1+N)=','
          ENDIF							          ENDIF
          KKK(K)=KKP						          KKK(K)=KKP
          MMAXK=1+(K-1)/NSYM					          MMAXK=1+(K-1)/NSYM
          IF ( K .LT. KPARX ) THEN				          IF ( K .LT. KPARX ) THEN
            DO 5 L=K+1,KPARX					            DO 5 L=K+1,KPARX
              DO 5 NY=1,NYMAX					              DO 5 NY=1,NYMAX
                IYO(NY,L)=-1					                IYO(NY,L)=-1
 5          CONTINUE						 5          CONTINUE
          ENDIF							          ENDIF
          IF ( ISH.GE.93 ) WRITE(IFCH,100)('-',IC=1,11),K,('-	          IF ( ISH.GE.93 ) WRITE(IFCH,100)('-',IC=1,11),K,('-
100       FORMAT(/1X,11A1/3X,'K = ',I2/1X,11A1/)		100       FORMAT(/1X,11A1/3X,'K = ',I2/1X,11A1/)

C  LOOP OVER PARTITIONS						C  LOOP OVER PARTITIONS
C  --------------------						C  --------------------
          JJ=2							          JJ=2
          DO 6002 KK=1,KKP					          DO 6002 KK=1,KKP
            IF     ( N .GT. 0 ) THEN				            IF     ( N .GT. 0 ) THEN
              LL=-IPART(N,JJ)					              LL=-IPART(N,JJ)
            ELSEIF ( N .EQ. 0 ) THEN				            ELSEIF ( N .EQ. 0 ) THEN
              LL=1						              LL=1
            ENDIF						            ENDIF
            IF ( LL .GT. K ) THEN				            IF ( LL .GT. K ) THEN
              KKK(K)=KK-1					              KKK(K)=KK-1
              GOTO 6003						              GOTO 6003
            ENDIF						            ENDIF
            IF ( ISH .GE. 93 ) THEN				            IF ( ISH .GE. 93 ) THEN
              IF     ( N .EQ. 0 ) THEN				              IF     ( N .EQ. 0 ) THEN
                WRITE(IFCH,102)KK,IZERO				                WRITE(IFCH,102)KK,IZERO
              ELSEIF ( N .GT. 0 ) THEN				              ELSEIF ( N .GT. 0 ) THEN
                WRITE(IFCH,102)KK,(IPART(N,I),I=JJ+1,JJ+MIN(2	                WRITE(IFCH,102)KK,(IPART(N,I),I=JJ+1,JJ+MIN(2
              ENDIF						              ENDIF
              WRITE(IFCH,*)' '					              WRITE(IFCH,*)' '
            ENDIF						            ENDIF

C  CONSTRUCT YOUNG TABLEAUS					C  CONSTRUCT YOUNG TABLEAUS
C  ------------------------					C  ------------------------
            NY1=1						            NY1=1
            NY2=1						            NY2=1
            JYO(NY1)=1						            JYO(NY1)=1
            DO 46 L=1,K						            DO 46 L=1,K
              IYO(NY1,L)=0					              IYO(NY1,L)=0
46          CONTINUE						46          CONTINUE
            IF ( N .GT. 0 ) THEN				            IF ( N .GT. 0 ) THEN
              IYO(NY1,K)=IPART(N,JJ+1)				              IYO(NY1,K)=IPART(N,JJ+1)
              NY1=NY1-1						              NY1=NY1-1
45            NY1=NY1+1						45            NY1=NY1+1
              IF ( JYO(NY1) .EQ. LL ) GOTO 51			              IF ( JYO(NY1) .EQ. LL ) GOTO 51
              DO 43 LX=1,NSYM					              DO 43 LX=1,NSYM
                L=NSYM+1-LX					                L=NSYM+1-LX
                DO 44 MX=1,MMAXK				                DO 44 MX=1,MMAXK
                  M=MMAXK+1-MX					                  M=MMAXK+1-MX
                  IF ( IYO(NY1,(M-1)*NSYM+L) .EQ. 0 ) THEN	                  IF ( IYO(NY1,(M-1)*NSYM+L) .EQ. 0 ) THEN
                    IF ( L.EQ.NSYM .OR. (L.NE.NSYM.AND.		                    IF ( L.EQ.NSYM .OR. (L.NE.NSYM.AND.
     *                           IYO(NY1,(M-1)*NSYM+L+1).NE.0	     *                           IYO(NY1,(M-1)*NSYM+L+1).NE.0
                      NY2=NY2+1					                      NY2=NY2+1
                      IF ( NY2 .GT. NYMAX ) THEN		                      IF ( NY2 .GT. NYMAX ) THEN
                        CALL UTSTOP				                        CALL UTSTOP
     *                    ('JCENTR: DIMENSION NYMAX TOO SMALL	     *                    ('JCENTR: DIMENSION NYMAX TOO SMALL
                      ENDIF					                      ENDIF
                      JY=JYO(NY1)+1				                      JY=JYO(NY1)+1
                      JYO(NY2)=JY				                      JYO(NY2)=JY
                      DO 50 LP=1,K				                      DO 50 LP=1,K
                        IYO(NY2,LP)=IYO(NY1,LP)			                        IYO(NY2,LP)=IYO(NY1,LP)
50                    CONTINUE					50                    CONTINUE
                      IYO(NY2,(M-1)*NSYM+L)=IPART(N,JJ+JY)	                      IYO(NY2,(M-1)*NSYM+L)=IPART(N,JJ+JY)
                      IF ( NY2 .GT. 1 ) THEN			                      IF ( NY2 .GT. 1 ) THEN
                        DO 47 NY3=1,NY2-1			                        DO 47 NY3=1,NY2-1
                          IF ( JYO(NY3) .NE. JYO(NY2) ) GOTO 	                          IF ( JYO(NY3) .NE. JYO(NY2) ) GOTO 
                          DO 48 LP=1,K				                          DO 48 LP=1,K
                            IF ( IYO(NY3,LP) .NE. IYO(NY2,LP)	                            IF ( IYO(NY3,LP) .NE. IYO(NY2,LP)
48                        CONTINUE				48                        CONTINUE
                          NY2=NY2-1				                          NY2=NY2-1
                          GOTO 49				                          GOTO 49
47                      CONTINUE				47                      CONTINUE
49                      CONTINUE				49                      CONTINUE
                      ENDIF					                      ENDIF
                    ENDIF					                    ENDIF
                    GOTO 43					                    GOTO 43
                  ENDIF						                  ENDIF
44              CONTINUE					44              CONTINUE
43            CONTINUE						43            CONTINUE
              GOTO 45						              GOTO 45
51            CONTINUE						51            CONTINUE
            ENDIF						            ENDIF

C  LOOP OVER YOUNG TABLEAUS					C  LOOP OVER YOUNG TABLEAUS
C  ------------------------					C  ------------------------
            DO 6005 NY=NY1,NY2					            DO 6005 NY=NY1,NY2

              IF ( ISH .GE. 93  .AND.  NSYM .EQ. 3 ) THEN	              IF ( ISH .GE. 93  .AND.  NSYM .EQ. 3 ) THEN
                WRITE(IFCH,117)NY-NY1+1,((IYO(NY,(M-1)*NSYM+I	                WRITE(IFCH,117)NY-NY1+1,((IYO(NY,(M-1)*NSYM+I
     *                                               I=1,NSYM	     *                                               I=1,NSYM
117             FORMAT(2X,I2,'. TABLEAU:',5X,3I2)		117             FORMAT(2X,I2,'. TABLEAU:',5X,3I2)
                IF ( MMAXK .GT. 1 ) WRITE(IFCH,110)		                IF ( MMAXK .GT. 1 ) WRITE(IFCH,110)
     *               ((IYO(NY,(M-1)*NSYM+I),I=1,NSYM),M=2,MMA	     *               ((IYO(NY,(M-1)*NSYM+I),I=1,NSYM),M=2,MMA
110             FORMAT(19X,3I2)					110             FORMAT(19X,3I2)
                WRITE(IFCH,*)' '				                WRITE(IFCH,*)' '
              ENDIF						              ENDIF

C  SELECT NN-SUBTABLEAUS					C  SELECT NN-SUBTABLEAUS
C  ---------------------					C  ---------------------
              DITAB=1						              DITAB=1
              DO 6004 NN=0,N					              DO 6004 NN=0,N
                IGA=IG*NINT(EXP(TUCL(1+IDI,1+NN)))		                IGA=IG*NINT(EXP(TUCL(1+IDI,1+NN)))

                DO 15 L=1,KPARX					                DO 15 L=1,KPARX
                  IYOX(L)=-1					                  IYOX(L)=-1
15              CONTINUE					15              CONTINUE
                DO 11 M=1,MMAXK					                DO 11 M=1,MMAXK
                  MEMP=M-1					                  MEMP=M-1
                  MS=(M-1)*NSYM					                  MS=(M-1)*NSYM
                  DO 11 I=1,NSYM				                  DO 11 I=1,NSYM
                    IF ( IYO(NY,MS+I) .EQ. NN ) GOTO 12		                    IF ( IYO(NY,MS+I) .EQ. NN ) GOTO 12
11              CONTINUE					11              CONTINUE
12              CONTINUE					12              CONTINUE
                MMAXKS=MMAXK-MEMP				                MMAXKS=MMAXK-MEMP
                DO 13 L=MS+1,K					                DO 13 L=MS+1,K
                  IF ( IYO(NY,L) .EQ. NN ) IYOX(L-MS)=IYO(NY,	                  IF ( IYO(NY,L) .EQ. NN ) IYOX(L-MS)=IYO(NY,
13              CONTINUE					13              CONTINUE
                IF ( NSYM .GT. 1 ) THEN				                IF ( NSYM .GT. 1 ) THEN
                  DO 17 I=1,NSYM-1				                  DO 17 I=1,NSYM-1
                    DO 16 M=1,MMAXK				                    DO 16 M=1,MMAXK
                      MS=(M-1)*NSYM				                      MS=(M-1)*NSYM
                      IF ( IYOX(MS+1) .NE. -1 ) GOTO 18		                      IF ( IYOX(MS+1) .NE. -1 ) GOTO 18
16                  CONTINUE					16                  CONTINUE
                    DO 19 M=1,MMAXK				                    DO 19 M=1,MMAXK
                      MS=(M-1)*NSYM				                      MS=(M-1)*NSYM
                      DO 20 L=1,NSYM-1				                      DO 20 L=1,NSYM-1
                        IYOX(MS+L)=IYOX(MS+L+1)			                        IYOX(MS+L)=IYOX(MS+L+1)
20                    CONTINUE					20                    CONTINUE
                      IYOX(MS+NSYM)=-1				                      IYOX(MS+NSYM)=-1
19                  CONTINUE					19                  CONTINUE
17                CONTINUE					17                CONTINUE
18                CONTINUE					18                CONTINUE
                ENDIF						                ENDIF
                DO 38 L=1,KPARX					                DO 38 L=1,KPARX
                  CYOX(1+NN,L)=' '				                  CYOX(1+NN,L)=' '
                  IF ( IYOX(L) .GE. 0 ) CYOX(1+NN,L)='X'	                  IF ( IYOX(L) .GE. 0 ) CYOX(1+NN,L)='X'
38              CONTINUE					38              CONTINUE

C  SKIP FOR EMPTY TABLEAUS					C  SKIP FOR EMPTY TABLEAUS
C  -----------------------					C  -----------------------
                DO 21 L=1,K					                DO 21 L=1,K
                  IF ( IYOX(L) .NE. -1 ) GOTO 22		                  IF ( IYOX(L) .NE. -1 ) GOTO 22
21              CONTINUE					21              CONTINUE
                GOTO 6004					                GOTO 6004
22              CONTINUE					22              CONTINUE

C  PRINT							C  PRINT
C  -----							C  -----
                IF ( ISH .GE. 93  .AND.  NSYM .EQ .3 ) THEN	                IF ( ISH .GE. 93  .AND.  NSYM .EQ .3 ) THEN
                  IF ( IGA.GE.  1.AND.IGA.LT.  10 ) WRITE(CIG	                  IF ( IGA.GE.  1.AND.IGA.LT.  10 ) WRITE(CIG
107               FORMAT('GL(',I1,')  ')			107               FORMAT('GL(',I1,')  ')
                  IF ( IGA.GT. 10.AND.IGA.LT. 100 ) WRITE(CIG	                  IF ( IGA.GT. 10.AND.IGA.LT. 100 ) WRITE(CIG
108               FORMAT('GL(',I2,') ')				108               FORMAT('GL(',I2,') ')
                  IF ( IGA.GT.100.AND.IGA.LT.1000 ) WRITE(CIG	                  IF ( IGA.GT.100.AND.IGA.LT.1000 ) WRITE(CIG
109               FORMAT('GL(',I3,')')				109               FORMAT('GL(',I3,')')
                  WRITE(IFCH,116)NN,((CYOX(1+NN,(M-1)*NSYM+I)	                  WRITE(IFCH,116)NN,((CYOX(1+NN,(M-1)*NSYM+I)
     *                                        ,I=1,NSYM),M=1,	     *                                        ,I=1,NSYM),M=1,
116               FORMAT(2X,I2,'-SUBTABLEAU:',3X,3(1X,A1),3X,	116               FORMAT(2X,I2,'-SUBTABLEAU:',3X,3(1X,A1),3X,
                  IF ( MMAXKS .GT. 1 ) THEN			                  IF ( MMAXKS .GT. 1 ) THEN
                    DO 39 M=2,MMAXKS				                    DO 39 M=2,MMAXKS
                      WRITE(IFCH,106)(CYOX(1+NN,(M-1)*NSYM+I)	                      WRITE(IFCH,106)(CYOX(1+NN,(M-1)*NSYM+I)
106                   FORMAT(19X,3(1X,A1))			106                   FORMAT(19X,3(1X,A1))
39                  CONTINUE					39                  CONTINUE
                  ENDIF						                  ENDIF
                  IF ( ISH .GE. 94 ) WRITE(IFCH,*)' '		                  IF ( ISH .GE. 94 ) WRITE(IFCH,*)' '
                ENDIF						                ENDIF

C  REDUCTIONS OF TABLEAUS 1+IYOX()				C  REDUCTIONS OF TABLEAUS 1+IYOX()
C  -------------------------------				C  -------------------------------
                DISUTA=0.					                DISUTA=0.
                N1=1						                N1=1
                N3=1						                N3=1
                N300=1						                N300=1
                DO 24 I=1,NSYM					                DO 24 I=1,NSYM
                  MA=0						                  MA=0
                  ME=0						                  ME=0
                  DO 25 M=1,MMAXK				                  DO 25 M=1,MMAXK
                    IF ( 1+IYOX((M-1)*NSYM+I) .LE. 0 ) GOTO 2	                    IF ( 1+IYOX((M-1)*NSYM+I) .LE. 0 ) GOTO 2
                    IF ( MA .EQ. 0 ) MA=M			                    IF ( MA .EQ. 0 ) MA=M
                    ME=M					                    ME=M
25                CONTINUE					25                CONTINUE
                  IYOZ(N1,I,1)=MA				                  IYOZ(N1,I,1)=MA
                  IYOZ(N1,I,2)=ME				                  IYOZ(N1,I,2)=ME
24              CONTINUE					24              CONTINUE
                IYOL(N1)=0					                IYOL(N1)=0
                YOFA(N1)=1.					                YOFA(N1)=1.
                IYOO(N1)=0					                IYOO(N1)=0
                IYOM(N1)=1					                IYOM(N1)=1
                N1=N1-1						                N1=N1-1
5000            N1=N1+1						5000            N1=N1+1
                N30=N3						                N30=N3
                IF ( N1.GT.1 .AND. IYOL(N1).GT.IYOL(N1-1) ) N	                IF ( N1.GT.1 .AND. IYOL(N1).GT.IYOL(N1-1) ) N
                N2=N1						                N2=N1
                DO 26 I=1,NSYM					                DO 26 I=1,NSYM
                  IYOR(I)=MAX(0,IYOZ(N1,I,2)-1)			                  IYOR(I)=MAX(0,IYOZ(N1,I,2)-1)
26              CONTINUE					26              CONTINUE
                LEV=IYOL(N1)					                LEV=IYOL(N1)
                FAC=YOFA(N1)					                FAC=YOFA(N1)
                IF ( IGA-1.LE.IOVMAX .AND. LEV.LE.JOVMAX	                IF ( IGA-1.LE.IOVMAX .AND. LEV.LE.JOVMAX
     *                                    .AND. LEV.LE.IGA-1 	     *                                    .AND. LEV.LE.IGA-1 
                  FACX=EXP(OVEL(IGA,1+LEV))			                  FACX=EXP(OVEL(IGA,1+LEV))
                  IF ( ABS(FACX-FAC) .GT. 1.E-5*FAC ) THEN	                  IF ( ABS(FACX-FAC) .GT. 1.E-5*FAC ) THEN
                    WRITE(IFCH,*)' '				                    WRITE(IFCH,*)' '
                    WRITE(IFCH,*)'N=',N,'    K=',K,'    KK=',	                    WRITE(IFCH,*)'N=',N,'    K=',K,'    KK=',
     *                                                ,'    N	     *                                                ,'    N
                    WRITE(IFCH,*)'FACX=',FACX,'     FAC=',FAC	                    WRITE(IFCH,*)'FACX=',FACX,'     FAC=',FAC
                    CALL UTSTOP					                    CALL UTSTOP
     *                     ('JCENTR: BINOMIALS DIFFER        	     *                     ('JCENTR: BINOMIALS DIFFER        
                  ENDIF						                  ENDIF
                ENDIF						                ENDIF
                IF ( LEV .GT. IGA-1 ) GOTO 5003			                IF ( LEV .GT. IGA-1 ) GOTO 5003
                IHEIM=0						                IHEIM=0
                DO 32 I=1,NSYM					                DO 32 I=1,NSYM
                  IHEI=IYOZ(N1,I,2)-IYOZ(N1,I,1)		                  IHEI=IYOZ(N1,I,2)-IYOZ(N1,I,1)
                  IF ( IHEI .GT. IHEIM ) IHEIM=IHEI		                  IF ( IHEI .GT. IHEIM ) IHEIM=IHEI
32              CONTINUE					32              CONTINUE
                IF ( IHEIM .EQ. 0 ) DISUTA=DISUTA+FAC*IYOM(N1	                IF ( IHEIM .EQ. 0 ) DISUTA=DISUTA+FAC*IYOM(N1
                IF ( ISH.GE.94 .AND. NSYM.EQ.3 ) THEN		                IF ( ISH.GE.94 .AND. NSYM.EQ.3 ) THEN
                  WRITE(IFCH,112)N1,(IYOZ(N1,I,1),I=1,NSYM),I	                  WRITE(IFCH,112)N1,(IYOZ(N1,I,1),I=1,NSYM),I
     *                ,LEV,FAC,IYOM(N1),IHEIM,DISUTA		     *                ,LEV,FAC,IYOM(N1),IHEIM,DISUTA
     *                ,(IYOZ(N1,I,2),I=1,NSYM)			     *                ,(IYOZ(N1,I,2),I=1,NSYM)
112               FORMAT(3X,I3,2X,3I2,2X,'ORI:',I3,3X		112               FORMAT(3X,I3,2X,3I2,2X,'ORI:',I3,3X
     *                ,'LEV:',I2,3X,'FAC:',F8.1			     *                ,'LEV:',I2,3X,'FAC:',F8.1
     *                ,3X,'MUL:',I2,3X,'HEI:',I2,3X,'SUM:',F8	     *                ,3X,'MUL:',I2,3X,'HEI:',I2,3X,'SUM:',F8
                ENDIF						                ENDIF
                N2=N2-1						                N2=N2-1
5001            N2=N2+1						5001            N2=N2+1
                DO 27 I=1,NSYM					                DO 27 I=1,NSYM
                  IF ( IYOZ(N2,I,2)-1 .LT. IYOR(I) ) GOTO 27	                  IF ( IYOZ(N2,I,2)-1 .LT. IYOR(I) ) GOTO 27
                  IF ( I.LT.NSYM  .AND.				                  IF ( I.LT.NSYM  .AND.
     *                         IYOZ(N2,I,2)-1.LT.IYOZ(N2,I+1,	     *                         IYOZ(N2,I,2)-1.LT.IYOZ(N2,I+1,
                  N3=N3+1					                  N3=N3+1
                  IF ( N3 .GT. ITAMAX ) THEN			                  IF ( N3 .GT. ITAMAX ) THEN
                    CALL UTSTOP					                    CALL UTSTOP
     *                      ('JCENTR: DIMENSION ITAMAX TOO SM	     *                      ('JCENTR: DIMENSION ITAMAX TOO SM
                  ENDIF						                  ENDIF
                  IYOL(N3)=IYOL(N1)+1				                  IYOL(N3)=IYOL(N1)+1
                  YOFA(N3)=( YOFA(N1)*(IGA-IYOL(N3)) )/IYOL(N	                  YOFA(N3)=( YOFA(N1)*(IGA-IYOL(N3)) )/IYOL(N
                  IYOO(N3)=N1					                  IYOO(N3)=N1
                  IYOM(N3)=IYOM(N1)				                  IYOM(N3)=IYOM(N1)
                  DO 28 J=1,NSYM				                  DO 28 J=1,NSYM
                    IYOZ(N3,J,1)=IYOZ(N2,J,1)			                    IYOZ(N3,J,1)=IYOZ(N2,J,1)
                    IYOZ(N3,J,2)=IYOZ(N2,J,2)			                    IYOZ(N3,J,2)=IYOZ(N2,J,2)
28                CONTINUE					28                CONTINUE
                  IYOZ(N3,I,2)=IYOZ(N3,I,2)-1			                  IYOZ(N3,I,2)=IYOZ(N3,I,2)-1
                  IF ( IYOZ(N3,I,2) .LT. IYOZ(N3,I,1) ) THEN	                  IF ( IYOZ(N3,I,2) .LT. IYOZ(N3,I,1) ) THEN
                    IYOZ(N3,I,1)=0				                    IYOZ(N3,I,1)=0
                    IYOZ(N3,I,2)=0				                    IYOZ(N3,I,2)=0
                  ENDIF						                  ENDIF
                  IF ( N30+1 .LT. N3 ) THEN			                  IF ( N30+1 .LT. N3 ) THEN
                    DO 30 NCH=N30+1,N3-1			                    DO 30 NCH=N30+1,N3-1
                      DO 31 IJ=1,NSYM				                      DO 31 IJ=1,NSYM
                        IF ( IYOZ(NCH,IJ,1).NE.IYOZ(N3,IJ,1) 	                        IF ( IYOZ(NCH,IJ,1).NE.IYOZ(N3,IJ,1) 
     *                      IYOZ(NCH,IJ,2).NE.IYOZ(N3,IJ,2) )	     *                      IYOZ(NCH,IJ,2).NE.IYOZ(N3,IJ,2) )
31                    CONTINUE					31                    CONTINUE
                      N3=N3-1					                      N3=N3-1
                      GOTO 27					                      GOTO 27
30                  CONTINUE					30                  CONTINUE
                  ENDIF						                  ENDIF
                  IF ( ISH .GE. 95  .AND.  NSYM .EQ. 3 ) THEN	                  IF ( ISH .GE. 95  .AND.  NSYM .EQ. 3 ) THEN
                    WRITE(IFCH,113)N1,(IYOZ(N1,IJ,1),IJ=1,NSY	                    WRITE(IFCH,113)N1,(IYOZ(N1,IJ,1),IJ=1,NSY
     *           ,(IYOZ(N2,IJ,1),IJ=1,NSYM),N3,(IYOZ(N3,IJ,1)	     *           ,(IYOZ(N2,IJ,1),IJ=1,NSYM),N3,(IYOZ(N3,IJ,1)
     *           ,(IYOZ(N1,IJ,2),IJ=1,NSYM)			     *           ,(IYOZ(N1,IJ,2),IJ=1,NSYM)
     *           ,(IYOZ(N2,IJ,2),IJ=1,NSYM),(IYOZ(N3,IJ,2),IJ	     *           ,(IYOZ(N2,IJ,2),IJ=1,NSYM),(IYOZ(N3,IJ,2),IJ
113                 FORMAT(3X,'N1: ',I2,3X,3I2,4X,'N2: ',I2,3	113                 FORMAT(3X,'N1: ',I2,3X,3I2,4X,'N2: ',I2,3
     *                 ,'N3: ',I2,3X,3I2/12X,3I2,13X,3I2,13X,	     *                 ,'N3: ',I2,3X,3I2/12X,3I2,13X,3I2,13X,
                  ENDIF						                  ENDIF
27              CONTINUE					27              CONTINUE
                IF ( N2 .EQ. N1 ) N2=N30			                IF ( N2 .EQ. N1 ) N2=N30
                IF ( N2 .LT. N3 ) GOTO 5001			                IF ( N2 .LT. N3 ) GOTO 5001
                IF ( N30 .LT. N3  .AND.  N300 .LT. N30 ) THEN	                IF ( N30 .LT. N3  .AND.  N300 .LT. N30 ) THEN
                  N3S=N3					                  N3S=N3
                  N3M=N3					                  N3M=N3
                  N3=N30					                  N3=N30
                  DO 33 NCH3=N30+1,N3S				                  DO 33 NCH3=N30+1,N3S
                    N3=N3+1					                    N3=N3+1
                    DO 34 NCH=N300+1,N30			                    DO 34 NCH=N300+1,N30
                      DO 35 IJ=1,NSYM				                      DO 35 IJ=1,NSYM
                        IF ( IYOZ(NCH,IJ,1).NE.IYOZ(N3,IJ,1) 	                        IF ( IYOZ(NCH,IJ,1).NE.IYOZ(N3,IJ,1) 
     *                       IYOZ(NCH,IJ,2).NE.IYOZ(N3,IJ,2) 	     *                       IYOZ(NCH,IJ,2).NE.IYOZ(N3,IJ,2) 
35                    CONTINUE					35                    CONTINUE
                      IYOM(NCH)=IYOM(NCH)+IYOM(N3)		                      IYOM(NCH)=IYOM(NCH)+IYOM(N3)
                      N3=N3-1					                      N3=N3-1
                      N3M=N3M-1					                      N3M=N3M-1
                      IF ( N3+1 .LE. N3M ) THEN			                      IF ( N3+1 .LE. N3M ) THEN
                        DO 36 NM=N3+1,N3M			                        DO 36 NM=N3+1,N3M
                          IYOL(NM)=IYOL(NM+1)			                          IYOL(NM)=IYOL(NM+1)
                          YOFA(NM)=YOFA(NM+1)			                          YOFA(NM)=YOFA(NM+1)
                          IYOO(NM)=IYOO(NM+1)			                          IYOO(NM)=IYOO(NM+1)
                          IYOM(NM)=IYOM(NM+1)			                          IYOM(NM)=IYOM(NM+1)
                          DO 37 J=1,NSYM			                          DO 37 J=1,NSYM
                            IYOZ(NM,J,1)=IYOZ(NM+1,J,1)		                            IYOZ(NM,J,1)=IYOZ(NM+1,J,1)
                            IYOZ(NM,J,2)=IYOZ(NM+1,J,2)		                            IYOZ(NM,J,2)=IYOZ(NM+1,J,2)
37                        CONTINUE				37                        CONTINUE
36                      CONTINUE				36                      CONTINUE
                      ENDIF					                      ENDIF
                      GOTO 33					                      GOTO 33
34                  CONTINUE					34                  CONTINUE
33                CONTINUE					33                CONTINUE
                ENDIF						                ENDIF
                IF ( N1 .LT. N3 ) GOTO 5000			                IF ( N1 .LT. N3 ) GOTO 5000
5003            CONTINUE					5003            CONTINUE

                DIALT=-99999.					                DIALT=-99999.
                IF ( IYOZ(1,1,1) .EQ. 1 ) THEN			                IF ( IYOZ(1,1,1) .EQ. 1 ) THEN
                  DIALT=1.					                  DIALT=1.
                  DO 40 I=1,NSYM				                  DO 40 I=1,NSYM
                    IF     ( IYOZ(1,I,1) .GT. 1 ) THEN		                    IF     ( IYOZ(1,I,1) .GT. 1 ) THEN
                      CALL UTSTOP				                      CALL UTSTOP
     *                     ('JCENTR: IYOZ(,,1).GT.1          	     *                     ('JCENTR: IYOZ(,,1).GT.1          
                    ELSEIF ( IYOZ(1,I,1) .EQ. 0 ) THEN		                    ELSEIF ( IYOZ(1,I,1) .EQ. 0 ) THEN
                      GOTO 40					                      GOTO 40
                    ENDIF					                    ENDIF
                    DO 41 M=1,IYOZ(1,I,2)			                    DO 41 M=1,IYOZ(1,I,2)
                      HAK=IYOZ(1,I,2)-M+1			                      HAK=IYOZ(1,I,2)-M+1
                      IF ( I .LT. NSYM ) THEN			                      IF ( I .LT. NSYM ) THEN
                        DO 42 J=I+1,NSYM			                        DO 42 J=I+1,NSYM
                          IF ( IYOZ(1,J,2) .GE. M ) HAK=HAK+1	                          IF ( IYOZ(1,J,2) .GE. M ) HAK=HAK+1
42                      CONTINUE				42                      CONTINUE
                      ENDIF					                      ENDIF
                      DIALT=DIALT*(IGA+I-M)/HAK			                      DIALT=DIALT*(IGA+I-M)/HAK
41                  CONTINUE					41                  CONTINUE
40                CONTINUE					40                CONTINUE
                ENDIF						                ENDIF

                IF ( DIALT.NE.-99999.  .AND.			                IF ( DIALT.NE.-99999.  .AND.
     *                   ABS(DIALT-DISUTA).GT.1.E-5*DIALT ) T	     *                   ABS(DIALT-DISUTA).GT.1.E-5*DIALT ) T
                  WRITE(IFCH,*)' '				                  WRITE(IFCH,*)' '
                  WRITE(IFCH,*)'N=',N,'    K=',K,'    KK=',KK	                  WRITE(IFCH,*)'N=',N,'    K=',K,'    KK=',KK
     *                                                   ,'  	     *                                                   ,'  
                  WRITE(IFCH,*)'DISUTA=',DISUTA,'     DIALT='	                  WRITE(IFCH,*)'DISUTA=',DISUTA,'     DIALT='
                  CALL UTSTOP					                  CALL UTSTOP
     *                   ('JCENTR: DIMENSIONS DIFFER         	     *                   ('JCENTR: DIMENSIONS DIFFER         
                ENDIF						                ENDIF

                IF ( ISH .GE. 93 ) WRITE(IFCH,118)DISUTA	                IF ( ISH .GE. 93 ) WRITE(IFCH,118)DISUTA
118             FORMAT(28X,'SUBTAB.-DIMENSION:',F8.1/)		118             FORMAT(28X,'SUBTAB.-DIMENSION:',F8.1/)

                DITAB=DITAB*DISUTA				                DITAB=DITAB*DISUTA

6004          CONTINUE						6004          CONTINUE

              IF ( ISH .GE. 93 ) WRITE(IFCH,119)DITAB		              IF ( ISH .GE. 93 ) WRITE(IFCH,119)DITAB
119           FORMAT(35X,'TABLEAU-DIMENSION:',F11.1/)		119           FORMAT(35X,'TABLEAU-DIMENSION:',F11.1/)

              DEGEN(1+K,1+N)=DEGEN(1+K,1+N)+DITAB		              DEGEN(1+K,1+N)=DEGEN(1+K,1+N)+DITAB

6005        CONTINUE						6005        CONTINUE

            JJ=JJ+LL+1						            JJ=JJ+LL+1
6002      CONTINUE						6002      CONTINUE
6003      CONTINUE						6003      CONTINUE
          IF ( KKK(K) .EQ. 0 ) THEN				          IF ( KKK(K) .EQ. 0 ) THEN
            CALL UTSTOP('JCENTR: NO ALLOWED PARTITION        	            CALL UTSTOP('JCENTR: NO ALLOWED PARTITION        
          ENDIF							          ENDIF
          ENTRO(1+K,1+N)=-9999999.				          ENTRO(1+K,1+N)=-9999999.
          IF ( DEGEN(1+K,1+N) .GT. 0. )				          IF ( DEGEN(1+K,1+N) .GT. 0. )
     *                         ENTRO(1+K,1+N)=LOG(DEGEN(1+K,1	     *                         ENTRO(1+K,1+N)=LOG(DEGEN(1+K,1
          IF ( ISH .GE. 93 ) WRITE(IFCH,120)DEGEN(1+K,1+N)	          IF ( ISH .GE. 93 ) WRITE(IFCH,120)DEGEN(1+K,1+N)
120       FORMAT(49X,'DEGENERACY:',F11.1/)			120       FORMAT(49X,'DEGENERACY:',F11.1/)

6001    CONTINUE						6001    CONTINUE
6000  CONTINUE							6000  CONTINUE

      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
121     FORMAT(1X,79A1)						121     FORMAT(1X,79A1)
        WRITE(IFCH,*)'   DEGENERACY(K,N)         IG=',IG,'   	        WRITE(IFCH,*)'   DEGENERACY(K,N)         IG=',IG,'   
     *                ,'NSYM=',NSYM				     *                ,'NSYM=',NSYM
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   K:','   3','   6','   9','   12'	        WRITE(IFCH,*)'   K:','   3','   6','   9','   12'
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        DO 52 N=0,NQUAX						        DO 52 N=0,NQUAX
          WRITE(IFCH,*)N,(DEGEN(1+3*K,1+N),K=1,4)		          WRITE(IFCH,*)N,(DEGEN(1+3*K,1+N),K=1,4)
52      CONTINUE						52      CONTINUE
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   ENTROPY(K,N)            IG=',IG,'   	        WRITE(IFCH,*)'   ENTROPY(K,N)            IG=',IG,'   
     *                ,'NSYM=',NSYM				     *                ,'NSYM=',NSYM
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   K:','   3','   6','   9','   12'	        WRITE(IFCH,*)'   K:','   3','   6','   9','   12'
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        DO 53 N=0,NQUAX						        DO 53 N=0,NQUAX
          WRITE(IFCH,*)N,(ENTRO(1+3*K,1+N),K=1,4)		          WRITE(IFCH,*)N,(ENTRO(1+3*K,1+N),K=1,4)
53      CONTINUE						53      CONTINUE
      ENDIF							      ENDIF

      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 12 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 12 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 95 ) THEN					      IF ( ISH .GE. 95 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   ENTROPY(K,N)            IG=',IG	        WRITE(IFCH,*)'   ENTROPY(K,N)            IG=',IG
     *                ,'          NSYM=',NSYM			     *                ,'          NSYM=',NSYM
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,125)KPARX					        WRITE(IFCH,125)KPARX
125     FORMAT(6X,'IF(KPARX.NE.',I2,')'/5X,			125     FORMAT(6X,'IF(KPARX.NE.',I2,')'/5X,
     *      56H*CALL UTSTOP('JCENTD: INSUFFICIENT INITIALIZAT	     *      56H*CALL UTSTOP('JCENTD: INSUFFICIENT INITIALIZAT
        WRITE(IFCH,126)NQUAX					        WRITE(IFCH,126)NQUAX
126     FORMAT(6X,'IF(NQUAX.NE.',I2,')'/5X,			126     FORMAT(6X,'IF(NQUAX.NE.',I2,')'/5X,
     *      56H*CALL UTSTOP('JCENTD: INSUFFICIENT INITIALIZAT	     *      56H*CALL UTSTOP('JCENTD: INSUFFICIENT INITIALIZAT
        DO 58 KX=0,KPARX/3					        DO 58 KX=0,KPARX/3
          K=3*KX						          K=3*KX
          WRITE(IFCH,123)K+1,NQUAX				          WRITE(IFCH,123)K+1,NQUAX
123       FORMAT(6X,'DATA (ENTRO(',I2,',1+N),N=0,',I2,')/')	123       FORMAT(6X,'DATA (ENTRO(',I2,',1+N),N=0,',I2,')/')
          WRITE(IFCH,124)(ENTRO(1+K,1+N),DELI(1+K,1+N), N=0,N	          WRITE(IFCH,124)(ENTRO(1+K,1+N),DELI(1+K,1+N), N=0,N
124       FORMAT(10(5X,'*',6(E10.5,A1)/))			124       FORMAT(10(5X,'*',6(E10.5,A1)/))
58      CONTINUE						58      CONTINUE
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JCLUDE(IP,IRET)				      SUBROUTINE JCLUDE(IP,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  DECAYS CLUSTER IP FROM /CPTL/ .				C  DECAYS CLUSTER IP FROM /CPTL/ .
C  REQIRES JCENTR OR JCENTD TO BE CALLED BEFORE.		C  REQIRES JCENTR OR JCENTD TO BE CALLED BEFORE.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (IOMAX=54)					      PARAMETER (IOMAX=54)
      PARAMETER (IOMAXM=25)					      PARAMETER (IOMAXM=25)
      PARAMETER (MOXMAX=30)					      PARAMETER (MOXMAX=30)
      PARAMETER (MOMAX=MOXMAX*IOMAX)				      PARAMETER (MOMAX=MOXMAX*IOMAX)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /CENTEX/  ENTEXP					      COMMON /CENTEX/  ENTEXP
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CSCAL/   SCAL					      COMMON /CSCAL/   SCAL
      COMMON /CSJCGA/  AMEGAM,AMNULL,ASUHA(7),ENTRPY,NOPHA,NS	      COMMON /CSJCGA/  AMEGAM,AMNULL,ASUHA(7),ENTRPY,NOPHA,NS
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      COMMON /CUTINV/  LUTINV					      COMMON /CUTINV/  LUTINV
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION PA(5),PE(5),PPT(5)			      DOUBLE PRECISION PA(5),PE(5),PPT(5)
      REAL             OO(1+MOMAX),PA0(5),POL(IOMAX)		      REAL             OO(1+MOMAX),PA0(5),POL(IOMAX)
     *                ,QO(1+MOMAX),U(3),XO(1+MOMAX),YO(1+MOMA	     *                ,QO(1+MOMAX),U(3),XO(1+MOMAX),YO(1+MOMA
      INTEGER          ICA(2),IDOL(IOMAX),IDOLIS(IOMAX),IFOLI	      INTEGER          ICA(2),IDOL(IOMAX),IDOLIS(IOMAX),IFOLI
     *                ,JCA(NFLAV,2),JCA0(NFLAV,2),JCE(NFLAV,2	     *                ,JCA(NFLAV,2),JCA0(NFLAV,2),JCE(NFLAV,2
     *                ,JCO(NFLAV,2),KO(1+MOMAX)			     *                ,JCO(NFLAV,2),KO(1+MOMAX)
      DATA IDOLIS/						      DATA IDOLIS/
     *             110,  120,-120,  220, 130, -130, 230, -230	     *             110,  120,-120,  220, 130, -130, 230, -230
     *           ,1120,-1120,1220,-1220,1130,-1130,1230,-1230	     *           ,1120,-1120,1220,-1220,1130,-1130,1230,-1230
     *           ,2230,-2230,1330,-1330,2330,-2330		     *           ,2230,-2230,1330,-1330,2330,-2330
     *           ,1111,-1111,2221,-2221,3331,-3331		     *           ,1111,-1111,2221,-2221,3331,-3331
     *            ,111,  121,-121,  221, 131, -131, 231, -231	     *            ,111,  121,-121,  221, 131, -131, 231, -231
     *           ,1121,-1121,1221,-1221,1131,-1131,1231,-1231	     *           ,1121,-1121,1221,-1221,1131,-1131,1231,-1231
     *           ,2231,-2231,1331,-1331,2331,-2331/		     *           ,2231,-2231,1331,-1331,2331,-2331/
      DATA IFOLIS/9*1,16*2,6*4,9*3,14*4/			      DATA IFOLIS/9*1,16*2,6*4,9*3,14*4/
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 1 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 1 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)('-',L=1,79)				        WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)'   CLUSTER DECAY OF',IP,IDPTL(IP),PPTL(	        WRITE(IFCH,*)'   CLUSTER DECAY OF',IP,IDPTL(IP),PPTL(
        WRITE(IFCH,*)('-',L=1,79)				        WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      DELPOX=.01						      DELPOX=.01
      NPTLB=NPTL						      NPTLB=NPTL
      LOOP=0							      LOOP=0
      IRET=0							      IRET=0
      IPOXRA=0							      IPOXRA=0
      ISTPFL=0							      ISTPFL=0
      EBAMIN=1.5						      EBAMIN=1.5
      LOOPMX=20							      LOOPMX=20
      NOPHAX=20							      NOPHAX=20

C  ORIGINAL CLUSTER --> PA,JCA					C  ORIGINAL CLUSTER --> PA,JCA
C  ---------------------------					C  ---------------------------

6010  CONTINUE							6010  CONTINUE
      PA(1)=PPTL(1,IP)						      PA(1)=PPTL(1,IP)
      PA(2)=PPTL(2,IP)						      PA(2)=PPTL(2,IP)
      PA(3)=PPTL(3,IP)						      PA(3)=PPTL(3,IP)
      PA(4)=PPTL(4,IP)						      PA(4)=PPTL(4,IP)
      PA(5)=PPTL(5,IP)						      PA(5)=PPTL(5,IP)
      CALL IDQUAC(IP,NDU,NDU,NDU,JCA)				      CALL IDQUAC(IP,NDU,NDU,NDU,JCA)
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'INITIAL JCA:'				        WRITE(IFCH,*)'INITIAL JCA:'
        WRITE(IFCH,*)JCA					        WRITE(IFCH,*)JCA
      ENDIF							      ENDIF
      CALL IDCOMJ(JCA)						      CALL IDCOMJ(JCA)
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'INITIAL JCA AFTER COMPACTIFICATION:'	        WRITE(IFCH,*)'INITIAL JCA AFTER COMPACTIFICATION:'
        WRITE(IFCH,*)JCA					        WRITE(IFCH,*)JCA
      ENDIF							      ENDIF

      PA0(1)=PA(1)						      PA0(1)=PA(1)
      PA0(2)=PA(2)						      PA0(2)=PA(2)
      PA0(3)=PA(3)						      PA0(3)=PA(3)
      PA0(4)=PA(4)						      PA0(4)=PA(4)
      PA0(5)=PA(5)						      PA0(5)=PA(5)
      NQN=0							      NQN=0
      DO 2 NF=1,NFLAV						      DO 2 NF=1,NFLAV
        NQN=NQN+JCA(NF,1)-JCA(NF,2)				        NQN=NQN+JCA(NF,1)-JCA(NF,2)
        JCA0(NF,1)=JCA(NF,1)					        JCA0(NF,1)=JCA(NF,1)
        JCA0(NF,2)=JCA(NF,2)					        JCA0(NF,2)=JCA(NF,2)
 2    CONTINUE							 2    CONTINUE
      NBA=ABS(NQN)/3						      NBA=ABS(NQN)/3
      IF ( NBA .GT. 0 ) THEN					      IF ( NBA .GT. 0 ) THEN
        EBA=PA(5)/NBA						        EBA=PA(5)/NBA
      ELSE							      ELSE
        EBA=AINFIN						        EBA=AINFIN
      ENDIF							      ENDIF
      ISH00=ISH							      ISH00=ISH

C  INITIALIZATION FOR REDO					C  INITIALIZATION FOR REDO
C  -----------------------					C  -----------------------

6001  LOOP=LOOP+1						6001  LOOP=LOOP+1
      IF ( ISH00 .EQ. 90 ) THEN					      IF ( ISH00 .EQ. 90 ) THEN
        IF ( LOOP .EQ. LOOPMX ) THEN				        IF ( LOOP .EQ. LOOPMX ) THEN
          ISH=92						          ISH=92
          WRITE(IFCH,117)('-',L=1,75),LOOP,ISH			          WRITE(IFCH,117)('-',L=1,75),LOOP,ISH
117       FORMAT(//1X,75A1/1X,I2,'. ATTEMPT TO DECAY THIS CLU	117       FORMAT(//1X,75A1/1X,I2,'. ATTEMPT TO DECAY THIS CLU
     *          /1X,'ISH SET TO: ',I2)				     *          /1X,'ISH SET TO: ',I2)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( LOOP .GT. LOOPMX ) THEN				      IF ( LOOP .GT. LOOPMX ) THEN
        ISH=ISH00						        ISH=ISH00
        GOTO 1001						        GOTO 1001
      ENDIF							      ENDIF
      NOPHA=0							      NOPHA=0
      ISMALL=0							      ISMALL=0
      NPTL=NPTLB						      NPTL=NPTLB
      PA(1)=PA0(1)						      PA(1)=PA0(1)
      PA(2)=PA0(2)						      PA(2)=PA0(2)
      PA(3)=PA0(3)						      PA(3)=PA0(3)
      PA(4)=PA0(4)						      PA(4)=PA0(4)
      PA(5)=PA0(5)						      PA(5)=PA0(5)
      DO 3 NF=1,NFLAV						      DO 3 NF=1,NFLAV
        JCA(NF,1)=JCA0(NF,1)					        JCA(NF,1)=JCA0(NF,1)
        JCA(NF,2)=JCA0(NF,2)					        JCA(NF,2)=JCA0(NF,2)
 3    CONTINUE							 3    CONTINUE

C  LOOP OVER SEQUENTIAL DECAYS					C  LOOP OVER SEQUENTIAL DECAYS
C  ---------------------------					C  ---------------------------

6002  NPTL=NPTL+1						6002  NPTL=NPTL+1
      IF ( NPTL .GT. MXPTL ) THEN				      IF ( NPTL .GT. MXPTL ) THEN
        CALL UTSTOP('JCLUDE: NPTL>MXPTL                      	        CALL UTSTOP('JCLUDE: NPTL>MXPTL                      
      ENDIF							      ENDIF
      ISJCA=0							      ISJCA=0
      DO 210 NF=1,NFLAV						      DO 210 NF=1,NFLAV
        ISJCA=ISJCA+ABS(JCA(NF,1))+ABS(JCA(NF,2))		        ISJCA=ISJCA+ABS(JCA(NF,1))+ABS(JCA(NF,2))
210   CONTINUE							210   CONTINUE
      IF ( ISJCA .EQ. 0 ) THEN					      IF ( ISJCA .EQ. 0 ) THEN
        JCA(1,1)=1						        JCA(1,1)=1
        JCA(1,2)=1						        JCA(1,2)=1
      ENDIF							      ENDIF
      CALL IDCOMJ(JCA)						      CALL IDCOMJ(JCA)
      CALL IDENCO(JCA,ICA,IRETEN)				      CALL IDENCO(JCA,ICA,IRETEN)
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,100)(PA(K),K=1,5)				        WRITE(IFCH,100)(PA(K),K=1,5)
100     FORMAT(1X,'PA:',20X,5(E10.3,1X))			100     FORMAT(1X,'PA:',20X,5(E10.3,1X))
        WRITE(IFCH,116)JCA					        WRITE(IFCH,116)JCA
116     FORMAT(1X,'JCA: ',6I5/6X,6I5)				116     FORMAT(1X,'JCA: ',6I5/6X,6I5)
      ENDIF							      ENDIF

      KAU=JCA(1,1)-JCA(1,2)					      KAU=JCA(1,1)-JCA(1,2)
      KAD=JCA(2,1)-JCA(2,2)					      KAD=JCA(2,1)-JCA(2,2)
      KAS=JCA(3,1)-JCA(3,2)					      KAS=JCA(3,1)-JCA(3,2)
      KAC=JCA(4,1)-JCA(4,2)					      KAC=JCA(4,1)-JCA(4,2)
      AMICL=UTAMNU(KAU,KAD,KAS,KAC,5)				      AMICL=UTAMNU(KAU,KAD,KAS,KAC,5)

      IF ( NOPHA.EQ.NOPHAX .OR. NOPHA.GT.1.AND.PA(5).GT.2.*AM	      IF ( NOPHA.EQ.NOPHAX .OR. NOPHA.GT.1.AND.PA(5).GT.2.*AM
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JCLUDE')					          CALL UTMSG('JCLUDE')
          IF     ( ISMALL .EQ. 0 ) THEN				          IF     ( ISMALL .EQ. 0 ) THEN
            WRITE(IFCH,*)'*****  NO PHASE SPACE --> REDO DECA	            WRITE(IFCH,*)'*****  NO PHASE SPACE --> REDO DECA
          ELSEIF ( ISMALL .EQ. 1 ) THEN				          ELSEIF ( ISMALL .EQ. 1 ) THEN
            WRITE(IFCH,*)'*****  SMALL PHASE SP --> REDO DECA	            WRITE(IFCH,*)'*****  SMALL PHASE SP --> REDO DECA
          ELSE							          ELSE
            WRITE(IFCH,*)'***** SMALL/NO PHASE SPACE --> REDO	            WRITE(IFCH,*)'***** SMALL/NO PHASE SPACE --> REDO
            WRITE(IFCH,*)'ISMALL=',ISMALL			            WRITE(IFCH,*)'ISMALL=',ISMALL
          ENDIF							          ENDIF
          WRITE(IFCH,*)'NT=',NTC,'   LOOP=',LOOP,'   NOPHA=',	          WRITE(IFCH,*)'NT=',NTC,'   LOOP=',LOOP,'   NOPHA=',
          IF ( ISMALL .EQ. 1 )					          IF ( ISMALL .EQ. 1 )
     *            WRITE(IFCH,*)'YO_HIT=',YOHIT,'   YO_MAX=',Y	     *            WRITE(IFCH,*)'YO_HIT=',YOHIT,'   YO_MAX=',Y
          WRITE(IFCH,*)'M_MIN=',AMICL,'   M=',PA(5)		          WRITE(IFCH,*)'M_MIN=',AMICL,'   M=',PA(5)
          WRITE(IFCH,100)(PA(K),K=1,5)				          WRITE(IFCH,100)(PA(K),K=1,5)
          WRITE(IFCH,116)JCA					          WRITE(IFCH,116)JCA
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 6001						        GOTO 6001
      ENDIF							      ENDIF

      IF ( NOPHA .GT. 1 ) THEN					      IF ( NOPHA .GT. 1 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JCLUDE')					          CALL UTMSG('JCLUDE')
          IF     ( ISMALL .EQ. 0 ) THEN				          IF     ( ISMALL .EQ. 0 ) THEN
            WRITE(IFCH,*)'*****  NO PHASE SPACE --> INCRS MAS	            WRITE(IFCH,*)'*****  NO PHASE SPACE --> INCRS MAS
          ELSEIF ( ISMALL .EQ. 1 ) THEN				          ELSEIF ( ISMALL .EQ. 1 ) THEN
            WRITE(IFCH,*)'*****  SMALL PHASE SP --> INCRS MAS	            WRITE(IFCH,*)'*****  SMALL PHASE SP --> INCRS MAS
          ELSE							          ELSE
            WRITE(IFCH,*)'***** SMALL/NO PHASE SPACE --> INCR	            WRITE(IFCH,*)'***** SMALL/NO PHASE SPACE --> INCR
            WRITE(IFCH,*)'ISMALL=',ISMALL			            WRITE(IFCH,*)'ISMALL=',ISMALL
          ENDIF							          ENDIF
          WRITE(IFCH,*)'NT=',NTC,'   LOOP=',LOOP,'   NOPHA=',	          WRITE(IFCH,*)'NT=',NTC,'   LOOP=',LOOP,'   NOPHA=',
          IF ( ISMALL .EQ. 1 )					          IF ( ISMALL .EQ. 1 )
     *             WRITE(IFCH,*)'YO_HIT=',YOHIT,'   YO_MAX=',	     *             WRITE(IFCH,*)'YO_HIT=',YOHIT,'   YO_MAX=',
          WRITE(IFCH,*)'M_MIN=',AMICL,'   M=',PA(5)		          WRITE(IFCH,*)'M_MIN=',AMICL,'   M=',PA(5)
          WRITE(IFCH,100)(PA(K),K=1,5)				          WRITE(IFCH,100)(PA(K),K=1,5)
          WRITE(IFCH,116)JCA					          WRITE(IFCH,116)JCA
        ENDIF							        ENDIF
        PA(5)=PA(5)*1.05					        PA(5)=PA(5)*1.05
        PA(4)=SQRT(PA(1)**2+PA(2)**2+PA(3)**2+PA(5)**2)		        PA(4)=SQRT(PA(1)**2+PA(2)**2+PA(3)**2+PA(5)**2)
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          WRITE(IFCH,100)(PA(K),K=1,5)				          WRITE(IFCH,100)(PA(K),K=1,5)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      IDAR=0							      IDAR=0
      IF ( NOPHA .EQ. 0 ) THEN					      IF ( NOPHA .EQ. 0 ) THEN
        ICH=0							        ICH=0
        IF ( IRETEN .EQ. 0 ) THEN				        IF ( IRETEN .EQ. 0 ) THEN
          IDA=IDTRA(ICA,0,0,3)					          IDA=IDTRA(ICA,0,0,3)
        ELSE							        ELSE
          IDA=0							          IDA=0
        ENDIF							        ENDIF
        AMA=PA(5)						        AMA=PA(5)
        CALL IDRES(IDA,AMA,IDAR,IADJ)				        CALL IDRES(IDA,AMA,IDAR,IADJ)
        IF ( IDAR .NE. 0  .AND.  EBA .LT. EBAMIN ) THEN		        IF ( IDAR .NE. 0  .AND.  EBA .LT. EBAMIN ) THEN
          AMA=0.						          AMA=0.
          CALL IDRES(IDA,AMA,IDAR,IADJ)				          CALL IDRES(IDA,AMA,IDAR,IADJ)
          IF ( MOD(IDAR,10) .NE. 0  .AND. LOOP .LT. LOOPMX/2 	          IF ( MOD(IDAR,10) .NE. 0  .AND. LOOP .LT. LOOPMX/2 
        ENDIF							        ENDIF
        IF ( IDAR .NE. IDPTL(IP) ) ICH=1			        IF ( IDAR .NE. IDPTL(IP) ) ICH=1
      ENDIF							      ENDIF

      IF ( IDAR .NE. 0 ) THEN					      IF ( IDAR .NE. 0 ) THEN
        IF ( NPTL .GT. NPTLB+1  .OR.  ICH .EQ. 1 ) THEN		        IF ( NPTL .GT. NPTLB+1  .OR.  ICH .EQ. 1 ) THEN
          IDPTL(NPTL)=IDAR					          IDPTL(NPTL)=IDAR
          PA(5)=AMA						          PA(5)=AMA
          PA(4)=SQRT(AMA**2+PA(1)**2+PA(2)**2+PA(3)**2)		          PA(4)=SQRT(AMA**2+PA(1)**2+PA(2)**2+PA(3)**2)
          PPTL(1,NPTL)=PA(1)					          PPTL(1,NPTL)=PA(1)
          PPTL(2,NPTL)=PA(2)					          PPTL(2,NPTL)=PA(2)
          PPTL(3,NPTL)=PA(3)					          PPTL(3,NPTL)=PA(3)
          PPTL(4,NPTL)=PA(4)					          PPTL(4,NPTL)=PA(4)
          PPTL(5,NPTL)=PA(5)					          PPTL(5,NPTL)=PA(5)
          IF ( ISH .GE. 92 )					          IF ( ISH .GE. 92 )
     *            WRITE(IFCH,101)NPTL,IDPTL(NPTL),(PPTL(K,NPT	     *            WRITE(IFCH,101)NPTL,IDPTL(NPTL),(PPTL(K,NPT
101       FORMAT(1X,'/CPTL/',I6,I11,2X,5(E10.3,1X))		101       FORMAT(1X,'/CPTL/',I6,I11,2X,5(E10.3,1X))
        ELSE							        ELSE
          NPTL=NPTL-1						          NPTL=NPTL-1
        ENDIF							        ENDIF
        GOTO 7001						        GOTO 7001
      ENDIF							      ENDIF

      AMA=PA(5)							      AMA=PA(5)

C  LOOP OVER HADRONS						C  LOOP OVER HADRONS
C  -----------------						C  -----------------

      MO=1							      MO=1
      PO=0.							      PO=0.
      XO(1)=0.							      XO(1)=0.
      QO(1)=0.							      QO(1)=0.
      YO(1)=0.							      YO(1)=0.
      OO(1)=0.							      OO(1)=0.
      KO(1)=0							      KO(1)=0
      IOM=0							      IOM=0
      QOL=0.							      QOL=0.
      IF ( ISH .GE. 92 ) WRITE(IFCH,106)			      IF ( ISH .GE. 92 ) WRITE(IFCH,106)
106   FORMAT(' PARTIAL DECAY WIDTHS:')				106   FORMAT(' PARTIAL DECAY WIDTHS:')

      DO 6003 IO=1,IOMAX					      DO 6003 IO=1,IOMAX
        IF ( EBA .LT. EBAMIN  .AND.  IO .GT. IOMAXM ) GOTO 60	        IF ( EBA .LT. EBAMIN  .AND.  IO .GT. IOMAXM ) GOTO 60

        IDO=IDOLIS(IO)						        IDO=IDOLIS(IO)
        IOM=IOM+1						        IOM=IOM+1
        POL(IOM)=PO						        POL(IOM)=PO
        IDOL(IOM)=IDO						        IDOL(IOM)=IDO
        CALL IDMASS(IDO,AMO)					        CALL IDMASS(IDO,AMO)
        IDPTL(NPTL)=IDO						        IDPTL(NPTL)=IDO
        CALL IDQUAC(NPTL,NDU,NDU,NDU,JCO)			        CALL IDQUAC(NPTL,NDU,NDU,NDU,JCO)
        DO 22 NF=1,NFLAV					        DO 22 NF=1,NFLAV
          JCE(NF,1)=JCA(NF,1)-JCO(NF,1)				          JCE(NF,1)=JCA(NF,1)-JCO(NF,1)
          JCE(NF,2)=JCA(NF,2)-JCO(NF,2)				          JCE(NF,2)=JCA(NF,2)-JCO(NF,2)
          IF ( JCE(NF,1) .LT. 0 ) THEN				          IF ( JCE(NF,1) .LT. 0 ) THEN
            JCE(NF,2)=JCE(NF,2)-JCE(NF,1)			            JCE(NF,2)=JCE(NF,2)-JCE(NF,1)
            JCE(NF,1)=0						            JCE(NF,1)=0
          ENDIF							          ENDIF
          IF ( JCE(NF,2) .LT. 0 ) THEN				          IF ( JCE(NF,2) .LT. 0 ) THEN
            JCE(NF,1)=JCE(NF,1)-JCE(NF,2)			            JCE(NF,1)=JCE(NF,1)-JCE(NF,2)
            JCE(NF,2)=0						            JCE(NF,2)=0
          ENDIF							          ENDIF
22      CONTINUE						22      CONTINUE
        DO 13 I=5,NFLAV						        DO 13 I=5,NFLAV
          IF ( JCE(I,1).NE.0 .OR. JCE(I,2).NE.0 .OR. ISTPFL.G	          IF ( JCE(I,1).NE.0 .OR. JCE(I,2).NE.0 .OR. ISTPFL.G
            IF ( ISTPFL .EQ. 2 ) THEN				            IF ( ISTPFL .EQ. 2 ) THEN
              CALL UTSTOP('JCLUDE: MORE THAN 4 FLAVOURS      	              CALL UTSTOP('JCLUDE: MORE THAN 4 FLAVOURS      
            ENDIF						            ENDIF
            ISTPFL=ISTPFL+1					            ISTPFL=ISTPFL+1
            ISH=93						            ISH=93
            IF ( ISTPFL .EQ. 2 ) GOTO 6010			            IF ( ISTPFL .EQ. 2 ) GOTO 6010
            GOTO 6001						            GOTO 6001
          ENDIF							          ENDIF
13      CONTINUE						13      CONTINUE
        KEU=JCE(1,1)-JCE(1,2)					        KEU=JCE(1,1)-JCE(1,2)
        KED=JCE(2,1)-JCE(2,2)					        KED=JCE(2,1)-JCE(2,2)
        KES=JCE(3,1)-JCE(3,2)					        KES=JCE(3,1)-JCE(3,2)
        KEC=JCE(4,1)-JCE(4,2)					        KEC=JCE(4,1)-JCE(4,2)

C  LOOP OVER HADRON MOMENTA					C  LOOP OVER HADRON MOMENTA
C  ------------------------					C  ------------------------

        IF ( MO+MOXMAX .GT. 1+MOMAX ) THEN			        IF ( MO+MOXMAX .GT. 1+MOMAX ) THEN
          CALL UTSTOP('JCLUDE: DIMENSION MOMAX TOO SMALL     	          CALL UTSTOP('JCLUDE: DIMENSION MOMAX TOO SMALL     
        ENDIF							        ENDIF
        POX=0.							        POX=0.
        MOM=MO							        MOM=MO
        POM=PO							        POM=PO
        QOM=QO(MO)						        QOM=QO(MO)
        GAMXM=0.						        GAMXM=0.
        POXM=0.							        POXM=0.
        GAMY=0.							        GAMY=0.
        DELPO=DELPOX						        DELPO=DELPOX
        YOINT=0.						        YOINT=0.

        DO 6004 MOX=1,MOXMAX					        DO 6004 MOX=1,MOXMAX

          MO=MO+1						          MO=MO+1
          DELPO=DELPO*1.2					          DELPO=DELPO*1.2
          POX=POX+DELPO						          POX=POX+DELPO
          PO=PO+DELPO						          PO=PO+DELPO
          XO(MO)=PO						          XO(MO)=PO
          IF ( MOX .GT. 1 ) THEN				          IF ( MOX .GT. 1 ) THEN
            KO(MO)=0						            KO(MO)=0
          ELSE							          ELSE
            KO(MO)=IDO						            KO(MO)=IDO
          ENDIF							          ENDIF
          GAMX=SJCGAM(KEU,KED,KES,KEC,AMA,AMO,POX,MOX)		          GAMX=SJCGAM(KEU,KED,KES,KEC,AMA,AMO,POX,MOX)
          YO(MO)=IFOLIS(IO)*DELPO*GAMX				          YO(MO)=IFOLIS(IO)*DELPO*GAMX
          OO(MO)=ENTEXP						          OO(MO)=ENTEXP
          YOINT=YOINT+IFOLIS(IO)*DELPO*(GAMX+GAMY)*0.5		          YOINT=YOINT+IFOLIS(IO)*DELPO*(GAMX+GAMY)*0.5
          IF ( GAMX .EQ. 0. ) THEN				          IF ( GAMX .EQ. 0. ) THEN
            I6005=1						            I6005=1
          ELSE							          ELSE
            IF ( GAMX .LT. 1.E-2*GAMXM  .AND.  GAMXM .GT. 0.	            IF ( GAMX .LT. 1.E-2*GAMXM  .AND.  GAMXM .GT. 0.
     *        .AND.  MOX .GT. 1 ) THEN				     *        .AND.  MOX .GT. 1 ) THEN
              I6005=1						              I6005=1
            ELSE						            ELSE
              I6005=0						              I6005=0
            ENDIF						            ENDIF
          ENDIF							          ENDIF
          IF ( ISH.GE.93 .AND. (I6005.EQ.0 .OR. MOX.GT.1) ) T	          IF ( ISH.GE.93 .AND. (I6005.EQ.0 .OR. MOX.GT.1) ) T
            IF ( MOX .EQ. 1 )					            IF ( MOX .EQ. 1 )
     *         WRITE(IFCH,109)KEU,KED,KES,NSUHA,AMA,ASUHA,AMN	     *         WRITE(IFCH,109)KEU,KED,KES,NSUHA,AMA,ASUHA,AMN
109         FORMAT(/' U_D_S:',3I3,'  N:',7I5,11X,'  A:',F10.2	109         FORMAT(/' U_D_S:',3I3,'  N:',7I5,11X,'  A:',F10.2
     *             /18X,'M:',7F5.2,'  M0:',F6.2,'  O:',I5,F5.	     *             /18X,'M:',7F5.2,'  M0:',F6.2,'  O:',I5,F5.
     *             /'   MO     XO   POX      EO AMA-EO     EN	     *             /'   MO     XO   POX      EO AMA-EO     EN
     *             ,'  GAMX         YO         OO ')		     *             ,'  GAMX         YO         OO ')
            WRITE(IFCH,105)MO,XO(MO),POX,SQRT(POX**2+AMO**2)	            WRITE(IFCH,105)MO,XO(MO),POX,SQRT(POX**2+AMO**2)
     *                    ,AMA-SQRT(POX**2+AMO**2),ENTRPY,GAM	     *                    ,AMA-SQRT(POX**2+AMO**2),ENTRPY,GAM
     *                    ,YO(MO),OO(MO)			     *                    ,YO(MO),OO(MO)
105         FORMAT(1X,I5,1X,F6.2,F6.2,2X,F6.2,F6.2		105         FORMAT(1X,I5,1X,F6.2,F6.2,2X,F6.2,F6.2
     *             ,E12.3,E11.3,E11.3,E11.3)			     *             ,E12.3,E11.3,E11.3,E11.3)
          ENDIF							          ENDIF
          IF ( I6005 .EQ. 1 ) GOTO 6005				          IF ( I6005 .EQ. 1 ) GOTO 6005
          IF ( GAMX .GT. GAMXM ) THEN				          IF ( GAMX .GT. GAMXM ) THEN
            GAMXM=GAMX						            GAMXM=GAMX
            POXM=POX						            POXM=POX
          ENDIF							          ENDIF
          GAMY=GAMX						          GAMY=GAMX

6004    CONTINUE						6004    CONTINUE

        IF ( ISH .GE. 90  .AND.  IPOXRA .EQ. 0 ) THEN		        IF ( ISH .GE. 90  .AND.  IPOXRA .EQ. 0 ) THEN
          IPOXRA=1						          IPOXRA=1
          CALL UTMSG('JCLUDE')					          CALL UTMSG('JCLUDE')
          WRITE(IFCH,*)'*****  POX-RANGE TOO SMALL'		          WRITE(IFCH,*)'*****  POX-RANGE TOO SMALL'
          WRITE(IFCH,100)(PA(K),K=1,5)				          WRITE(IFCH,100)(PA(K),K=1,5)
          WRITE(IFCH,*)'JCA:'					          WRITE(IFCH,*)'JCA:'
          WRITE(IFCH,*)JCA					          WRITE(IFCH,*)JCA
          WRITE(IFCH,*)'POX= ',POX, '   GAMX= ',GAMX		          WRITE(IFCH,*)'POX= ',POX, '   GAMX= ',GAMX
          WRITE(IFCH,*)'POXM=',POXM,'   GAMXM=',GAMXM		          WRITE(IFCH,*)'POXM=',POXM,'   GAMXM=',GAMXM
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF

6005    CONTINUE						6005    CONTINUE

        IF ( YOINT .EQ. 0. ) THEN				        IF ( YOINT .EQ. 0. ) THEN
          IF ( ISH .GE. 94 ) THEN				          IF ( ISH .GE. 94 ) THEN
            WRITE(IFCH,*)' '					            WRITE(IFCH,*)' '
            WRITE(IFCH,*)'NO PHASE SPACE FOR',IDO		            WRITE(IFCH,*)'NO PHASE SPACE FOR',IDO
          ENDIF							          ENDIF
          MO=MOM						          MO=MOM
          PO=POM						          PO=POM
          IOM=IOM-1						          IOM=IOM-1
        ELSE							        ELSE
          IF ( ISH .GE. 92 ) WRITE(IFCH,107)IDO,POXM,YOINT,OO	          IF ( ISH .GE. 92 ) WRITE(IFCH,107)IDO,POXM,YOINT,OO
107       FORMAT(' IDO,POXM,YOINT,OO:',I6,3X,F5.2,E12.3,E12.3	107       FORMAT(' IDO,POXM,YOINT,OO:',I6,3X,F5.2,E12.3,E12.3
        ENDIF							        ENDIF

6003  CONTINUE							6003  CONTINUE
      IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '			      IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '

C  NO PHASE SPACE						C  NO PHASE SPACE
C  --------------						C  --------------
      IF ( IOM .EQ. 0 ) THEN					      IF ( IOM .EQ. 0 ) THEN
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'NO PHASE SPACE'	        IF ( ISH .GE. 92 ) WRITE(IFCH,*)'NO PHASE SPACE'
        NPTL=NPTL-1						        NPTL=NPTL-1
        NOPHA=NOPHA+1						        NOPHA=NOPHA+1
        GOTO 6002						        GOTO 6002
      ENDIF							      ENDIF

C  DETERMINE QO(M)						C  DETERMINE QO(M)
C  ---------------						C  ---------------
      OOMAX=0.							      OOMAX=0.
      DO 211 M=1,MO						      DO 211 M=1,MO
        IF ( OO(M) .GT. OOMAX ) OOMAX=OO(M)			        IF ( OO(M) .GT. OOMAX ) OOMAX=OO(M)
  211 CONTINUE							  211 CONTINUE
      OOX=OOMAX-10.						      OOX=OOMAX-10.
      DO 212 M=1,MO						      DO 212 M=1,MO
        IF ( OO(M) .LT. OOX ) THEN				        IF ( OO(M) .LT. OOX ) THEN
          YO(M)=0.						          YO(M)=0.
        ELSE							        ELSE
          YO(M)=YO(M)*EXP(OO(M)-OOX)				          YO(M)=YO(M)*EXP(OO(M)-OOX)
        ENDIF							        ENDIF
  212 CONTINUE							  212 CONTINUE
      QO(1)=0.							      QO(1)=0.
      DO 213 M=2,MO						      DO 213 M=2,MO
        IF ( KO(M) .NE. 0 ) YOM=0.				        IF ( KO(M) .NE. 0 ) YOM=0.
        QO(M)=QO(M-1)+(YOM+YO(M))*0.5				        QO(M)=QO(M-1)+(YOM+YO(M))*0.5
        YOM=YO(M)						        YOM=YO(M)
  213 CONTINUE							  213 CONTINUE
      YOMAX=0.							      YOMAX=0.
      DO 214 M=1,MO						      DO 214 M=1,MO
        IF ( YO(M) .GT. YOMAX ) YOMAX=YO(M)			        IF ( YO(M) .GT. YOMAX ) YOMAX=YO(M)
  214 CONTINUE							  214 CONTINUE

      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        IDO=0							        IDO=0
        XOX=0.							        XOX=0.
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'ACCUMULATED DECAY PROBABILITIES:'		        WRITE(IFCH,*)'ACCUMULATED DECAY PROBABILITIES:'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        DO 215 M=1,MO						        DO 215 M=1,MO
          IF ( KO(M) .NE. 0 ) THEN				          IF ( KO(M) .NE. 0 ) THEN
            WRITE(IFCH,*)' '					            WRITE(IFCH,*)' '
            IDO=KO(M)						            IDO=KO(M)
          ENDIF							          ENDIF
          WRITE(IFCH,110)M,IDO,XO(M)-XOX,QO(M)			          WRITE(IFCH,110)M,IDO,XO(M)-XOX,QO(M)
110       FORMAT(1X,'M,IDO,XO,QO: ',I6,I6,3X,F6.2,E12.3)	110       FORMAT(1X,'M,IDO,XO,QO: ',I6,I6,3X,F6.2,E12.3)
          IF ( M .LT. MO  .AND.  KO(M+1) .NE. 0 ) XOX=XO(M)	          IF ( M .LT. MO  .AND.  KO(M+1) .NE. 0 ) XOX=XO(M)
  215   CONTINUE						  215   CONTINUE
      ENDIF							      ENDIF

C  SELECT RANDOMLY HADRON+MOMENTUM				C  SELECT RANDOMLY HADRON+MOMENTUM
C  -------------------------------				C  -------------------------------

      LO=0							      LO=0
24    LO=LO+1							24    LO=LO+1
      IF ( LO .GT. 10 ) THEN					      IF ( LO .GT. 10 ) THEN
        IF ( ISH.GE.92 ) WRITE(IFCH,*)'SMALL PHASE SPACE:',YO	        IF ( ISH.GE.92 ) WRITE(IFCH,*)'SMALL PHASE SPACE:',YO
        NPTL=NPTL-1						        NPTL=NPTL-1
        NOPHA=NOPHA+1						        NOPHA=NOPHA+1
        ISMALL=1						        ISMALL=1
        GOTO 6002						        GOTO 6002
      ENDIF							      ENDIF

      XOS=UTINVT(MO,XO,QO,RANGEN()*QO(MO))			      XOS=UTINVT(MO,XO,QO,RANGEN()*QO(MO))
      MHIT=LUTINV						      MHIT=LUTINV
      DO 28 I=2,IOM						      DO 28 I=2,IOM
        IX=I-1							        IX=I-1
        IF ( XOS .LT. POL(I) ) GOTO 29				        IF ( XOS .LT. POL(I) ) GOTO 29
28    CONTINUE							28    CONTINUE
      IX=IOM							      IX=IOM
29    CONTINUE							29    CONTINUE
      POS=XOS-POL(IX)						      POS=XOS-POL(IX)
      IDS=IDOL(IX)						      IDS=IDOL(IX)
      CALL IDMASS(IDS,AMS)					      CALL IDMASS(IDS,AMS)
      IDPTL(NPTL)=IDS						      IDPTL(NPTL)=IDS

      CALL IDQUAC(NPTL,NDU,NDU,NDU,JCO)				      CALL IDQUAC(NPTL,NDU,NDU,NDU,JCO)
      DO 26 NF=1,NFLAV						      DO 26 NF=1,NFLAV
        JCE(NF,1)=JCA(NF,1)-JCO(NF,1)				        JCE(NF,1)=JCA(NF,1)-JCO(NF,1)
        JCE(NF,2)=JCA(NF,2)-JCO(NF,2)				        JCE(NF,2)=JCA(NF,2)-JCO(NF,2)
        IF ( JCE(NF,1) .LT. 0 ) THEN				        IF ( JCE(NF,1) .LT. 0 ) THEN
          JCE(NF,2)=JCE(NF,2)-JCE(NF,1)				          JCE(NF,2)=JCE(NF,2)-JCE(NF,1)
          JCE(NF,1)=0						          JCE(NF,1)=0
        ENDIF							        ENDIF
        IF ( JCE(NF,2) .LT. 0 ) THEN				        IF ( JCE(NF,2) .LT. 0 ) THEN
          JCE(NF,1)=JCE(NF,1)-JCE(NF,2)				          JCE(NF,1)=JCE(NF,1)-JCE(NF,2)
          JCE(NF,2)=0						          JCE(NF,2)=0
        ENDIF							        ENDIF
26    CONTINUE							26    CONTINUE
      DO 27 I=5,NFLAV						      DO 27 I=5,NFLAV
        IF ( JCE(I,1) .NE. 0  .OR. JCE(I,2) .NE. 0 ) THEN	        IF ( JCE(I,1) .NE. 0  .OR. JCE(I,2) .NE. 0 ) THEN
          CALL UTSTOP('JCLUDE: FLAVOUR > 4                   	          CALL UTSTOP('JCLUDE: FLAVOUR > 4                   
        ENDIF							        ENDIF
27    CONTINUE							27    CONTINUE

      KEU=JCE(1,1)-JCE(1,2)					      KEU=JCE(1,1)-JCE(1,2)
      KED=JCE(2,1)-JCE(2,2)					      KED=JCE(2,1)-JCE(2,2)
      KES=JCE(3,1)-JCE(3,2)					      KES=JCE(3,1)-JCE(3,2)
      KEC=JCE(4,1)-JCE(4,2)					      KEC=JCE(4,1)-JCE(4,2)
      GAMXHT=SJCGAM(KEU,KED,KES,KEC,AMA,AMS,POS,1)		      GAMXHT=SJCGAM(KEU,KED,KES,KEC,AMA,AMS,POS,1)
      YOHIT=GAMXHT*(XO(MHIT+1)-XO(MHIT))*4.			      YOHIT=GAMXHT*(XO(MHIT+1)-XO(MHIT))*4.
      IF ( YOHIT .LT. 1.E-5  .AND.  YOHIT .LT. 1.E-5*YOMAX ) 	      IF ( YOHIT .LT. 1.E-5  .AND.  YOHIT .LT. 1.E-5*YOMAX ) 

      PPTL(5,NPTL)=AMS						      PPTL(5,NPTL)=AMS
      U(3)=2.*RANGEN()-1.					      U(3)=2.*RANGEN()-1.
      PHI=2.*PI*RANGEN()					      PHI=2.*PI*RANGEN()
      U(1)=SQRT(1.-U(3)**2)*COS(PHI)				      U(1)=SQRT(1.-U(3)**2)*COS(PHI)
      U(2)=SQRT(1.-U(3)**2)*SIN(PHI)				      U(2)=SQRT(1.-U(3)**2)*SIN(PHI)
      PPT(1)=POS*U(1)						      PPT(1)=POS*U(1)
      PPTL(1,NPTL)=PPT(1)					      PPTL(1,NPTL)=PPT(1)
      PPT(2)=POS*U(2)						      PPT(2)=POS*U(2)
      PPTL(2,NPTL)=PPT(2)					      PPTL(2,NPTL)=PPT(2)
      PPT(3)=POS*U(3)						      PPT(3)=POS*U(3)
      PPTL(3,NPTL)=PPT(3)					      PPTL(3,NPTL)=PPT(3)
      PPT(4)=SQRT(PPTL(5,NPTL)**2+POS**2)			      PPT(4)=SQRT(PPTL(5,NPTL)**2+POS**2)
      PPTL(4,NPTL)=PPT(4)					      PPTL(4,NPTL)=PPT(4)
      IF ( ISH .GE. 93 )					      IF ( ISH .GE. 93 )
     *    WRITE(IFCH,101)NPTL,IDPTL(NPTL),(PPTL(K,NPTL),K=1,5	     *    WRITE(IFCH,101)NPTL,IDPTL(NPTL),(PPTL(K,NPTL),K=1,5
      CALL UTLOB2(-1,PA(1),PA(2),PA(3),PA(4),PA(5)		      CALL UTLOB2(-1,PA(1),PA(2),PA(3),PA(4),PA(5)
     *        ,PPT(1),PPT(2),PPT(3),PPT(4))			     *        ,PPT(1),PPT(2),PPT(3),PPT(4))
      PPTL(1,NPTL)=PPT(1)					      PPTL(1,NPTL)=PPT(1)
      PPTL(2,NPTL)=PPT(2)					      PPTL(2,NPTL)=PPT(2)
      PPTL(3,NPTL)=PPT(3)					      PPTL(3,NPTL)=PPT(3)
      PPTL(4,NPTL)=PPT(4)					      PPTL(4,NPTL)=PPT(4)
      IF ( ISH .GE. 92 )					      IF ( ISH .GE. 92 )
     *        WRITE(IFCH,101)NPTL,IDPTL(NPTL),(PPTL(K,NPTL),K	     *        WRITE(IFCH,101)NPTL,IDPTL(NPTL),(PPTL(K,NPTL),K

      PE(5)=AMEGAM						      PE(5)=AMEGAM
      PE(1)=-POS*U(1)						      PE(1)=-POS*U(1)
      PE(2)=-POS*U(2)						      PE(2)=-POS*U(2)
      PE(3)=-POS*U(3)						      PE(3)=-POS*U(3)
      PE(4)=SQRT(PE(5)**2+POS**2)				      PE(4)=SQRT(PE(5)**2+POS**2)
      CALL UTLOB2(-1,PA(1),PA(2),PA(3),PA(4),PA(5)		      CALL UTLOB2(-1,PA(1),PA(2),PA(3),PA(4),PA(5)
     *            ,PE(1),PE(2),PE(3),PE(4))			     *            ,PE(1),PE(2),PE(3),PE(4))

      PA(1)=PE(1)						      PA(1)=PE(1)
      PA(2)=PE(2)						      PA(2)=PE(2)
      PA(3)=PE(3)						      PA(3)=PE(3)
      PA(4)=PE(4)						      PA(4)=PE(4)
      PA(5)=PE(5)						      PA(5)=PE(5)
      DO 23 NF=1,NFLAV						      DO 23 NF=1,NFLAV
        JCA(NF,1)=JCE(NF,1)					        JCA(NF,1)=JCE(NF,1)
        JCA(NF,2)=JCE(NF,2)					        JCA(NF,2)=JCE(NF,2)
23    CONTINUE							23    CONTINUE
      NOPHA=0							      NOPHA=0

      GOTO 6002							      GOTO 6002

7001  CONTINUE							7001  CONTINUE

C  CHECK ENERGY CONSERVATION					C  CHECK ENERGY CONSERVATION
C  -------------------------					C  -------------------------
      IF ( NPTL .LE. NPTLB ) GOTO 1000				      IF ( NPTL .LE. NPTLB ) GOTO 1000

      IFAIL=1							      IFAIL=1
      IF ( NPTL .GT. NPTLB+1 ) THEN				      IF ( NPTL .GT. NPTLB+1 ) THEN
        ISHRSC=ISH						        ISHRSC=ISH
        ISH=0							        ISH=0
        CALL JRESCL(NPTLB+1,NPTL,PA0,IFAIL)			        CALL JRESCL(NPTLB+1,NPTL,PA0,IFAIL)
        ISH=ISHRSC						        ISH=ISHRSC
C-C     IF ( IFAIL.NE.0 .AND. ISH.GE.90 ) THEN			C-C     IF ( IFAIL.NE.0 .AND. ISH.GE.90 ) THEN
C-C       CALL UTMSG('JCLUDE')					C-C       CALL UTMSG('JCLUDE')
C-C       WRITE(IFCH,*)'*****  IFAIL_JRESCL=',IFAIL		C-C       WRITE(IFCH,*)'*****  IFAIL_JRESCL=',IFAIL
C-C       CALL UTMSGF						C-C       CALL UTMSGF
C-C     ENDIF							C-C     ENDIF
      ENDIF							      ENDIF

C-C   DO 114 N=NPTLB+1,NPTL					C-C   DO 114 N=NPTLB+1,NPTL
C-C     P=PPTL(3,N)						C-C     P=PPTL(3,N)
C-C     E=PPTL(4,N)						C-C     E=PPTL(4,N)
C-C     Y=100.							C-C     Y=100.
C-C     DY=3.							C-C     DY=3.
C-C     IF ( E-P.NE.0. .AND. E+P.NE.0. ) Y=.5*LOG((E+P)/(E-P)	C-C     IF ( E-P.NE.0. .AND. E+P.NE.0. ) Y=.5*LOG((E+P)/(E-P)
C-C     IDA=ABS(IDPTL(N))					C-C     IDA=ABS(IDPTL(N))
C-C     IF ( IDA.GT.1000 .AND. MOD(IDA,10).NE.0 .AND. Y.LT.10	C-C     IF ( IDA.GT.1000 .AND. MOD(IDA,10).NE.0 .AND. Y.LT.10
C-C       WRITE(6,*)('-',K=1,69)				C-C       WRITE(6,*)('-',K=1,69)
C-C       P=PPTL(3,IP)						C-C       P=PPTL(3,IP)
C-C       E=PPTL(4,IP)						C-C       E=PPTL(4,IP)
C-C       Y=100.						C-C       Y=100.
C-C       DY=3.							C-C       DY=3.
C-C       IF ( E-P.NE.0. .AND. E+P.NE.0. ) Y=.5*LOG((E+P)/(E-	C-C       IF ( E-P.NE.0. .AND. E+P.NE.0. ) Y=.5*LOG((E+P)/(E-
C-C       WRITE(6,115)IP,IDPTL(IP)				C-C       WRITE(6,115)IP,IDPTL(IP)
C-C  *         ,(PPTL(K,IP),K=3,5),Y				C-C  *         ,(PPTL(K,IP),K=3,5),Y
C-C       WRITE(6,*)'-------> '					C-C       WRITE(6,*)'-------> '
C-C       DO 113 M=NPTLB+1,NPTL					C-C       DO 113 M=NPTLB+1,NPTL
C-C         P=PPTL(3,M)						C-C         P=PPTL(3,M)
C-C         E=PPTL(4,M)						C-C         E=PPTL(4,M)
C-C         Y=100.						C-C         Y=100.
C-C         DY=3.						C-C         DY=3.
C-C         IF ( E-P.NE.0. .AND. E+P.NE.0. ) Y=.5*LOG((E+P)/(	C-C         IF ( E-P.NE.0. .AND. E+P.NE.0. ) Y=.5*LOG((E+P)/(
C-C         WRITE(6,115)M,IDPTL(M)				C-C         WRITE(6,115)M,IDPTL(M)
C-C  *            ,(PPTL(K,M),K=3,5),Y				C-C  *            ,(PPTL(K,M),K=3,5),Y
C113      CONTINUE						C113      CONTINUE
C-C     ENDIF							C-C     ENDIF
C114  CONTINUE							C114  CONTINUE
 115  FORMAT(1X,'/CPTL/',I6,I10					 115  FORMAT(1X,'/CPTL/',I6,I10
     *,3(E10.2),2(E10.2))					     *,3(E10.2),2(E10.2))

      IF ( ISH .GE. 0 ) THEN					      IF ( ISH .GE. 0 ) THEN
        PX=0.							        PX=0.
        PY=0.							        PY=0.
        PZ=0.							        PZ=0.
        E=0.							        E=0.
        DO 10 N=NPTLB+1,NPTL					        DO 10 N=NPTLB+1,NPTL
          PX=PX+PPTL(1,N)					          PX=PX+PPTL(1,N)
          PY=PY+PPTL(2,N)					          PY=PY+PPTL(2,N)
          PZ=PZ+PPTL(3,N)					          PZ=PZ+PPTL(3,N)
          E=E+  PPTL(4,N)					          E=E+  PPTL(4,N)
10      CONTINUE						10      CONTINUE
      ENDIF							      ENDIF

      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( ISH .GE. 92 ) THEN					        IF ( ISH .GE. 92 ) THEN
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'CHECK ENERGY CONSERVATION'		          WRITE(IFCH,*)'CHECK ENERGY CONSERVATION'
          DO 11 N=NPTLB+1,NPTL					          DO 11 N=NPTLB+1,NPTL
            WRITE(IFCH,101)N,IDPTL(N),(PPTL(K,N),K=1,5)		            WRITE(IFCH,101)N,IDPTL(N),(PPTL(K,N),K=1,5)
11        CONTINUE						11        CONTINUE
          AM=SQRT(E**2-PX**2-PY**2-PZ**2)			          AM=SQRT(E**2-PX**2-PY**2-PZ**2)
          WRITE(IFCH,103)PX,PY,PZ,E,AM				          WRITE(IFCH,103)PX,PY,PZ,E,AM
103       FORMAT(1X,'P_SUM:  ',15X,5(E10.3,1X))			103       FORMAT(1X,'P_SUM:  ',15X,5(E10.3,1X))
          WRITE(IFCH,104)(PA0(K),K=1,5)				          WRITE(IFCH,104)(PA0(K),K=1,5)
104       FORMAT(1X,'P_CLU:  ',15X,5(E10.3,1X))			104       FORMAT(1X,'P_CLU:  ',15X,5(E10.3,1X))
        ENDIF							        ENDIF

        IF ( IFAIL.EQ.0 .AND.					        IF ( IFAIL.EQ.0 .AND.
     *   (ABS(PX-PA0(1)).GT.1.E-2*ABS(PX).AND.ABS(PX-PA0(1)).	     *   (ABS(PX-PA0(1)).GT.1.E-2*ABS(PX).AND.ABS(PX-PA0(1)).
     *.OR.ABS(PY-PA0(2)).GT.1.E-2*ABS(PY).AND.ABS(PY-PA0(2)).	     *.OR.ABS(PY-PA0(2)).GT.1.E-2*ABS(PY).AND.ABS(PY-PA0(2)).
     *.OR.ABS(PZ-PA0(3)).GT.1.E-2*ABS(PZ).AND.ABS(PZ-PA0(3)).	     *.OR.ABS(PZ-PA0(3)).GT.1.E-2*ABS(PZ).AND.ABS(PZ-PA0(3)).
     *.OR.ABS(E -PA0(4)).GT.1.E-2*ABS(E ).AND.ABS(E -PA0(4)).	     *.OR.ABS(E -PA0(4)).GT.1.E-2*ABS(E ).AND.ABS(E -PA0(4)).
     *.OR.							     *.OR.
     *       IFAIL.NE.0 .AND.					     *       IFAIL.NE.0 .AND.
     *   (ABS(PX-PA0(1)).GT.1.E-2*ABS(PX).AND.ABS(PX-PA0(1)).	     *   (ABS(PX-PA0(1)).GT.1.E-2*ABS(PX).AND.ABS(PX-PA0(1)).
     *.OR.ABS(PY-PA0(2)).GT.1.E-2*ABS(PY).AND.ABS(PY-PA0(2)).	     *.OR.ABS(PY-PA0(2)).GT.1.E-2*ABS(PY).AND.ABS(PY-PA0(2)).
     *.OR.ABS(PZ-PA0(3)).GT.1.E-2*ABS(PZ).AND.ABS(PZ-PA0(3)).	     *.OR.ABS(PZ-PA0(3)).GT.1.E-2*ABS(PZ).AND.ABS(PZ-PA0(3)).
     *.OR.ABS(E -PA0(4)).GT.35.E-1*ABS(E ).AND.ABS(E -PA0(4))	     *.OR.ABS(E -PA0(4)).GT.35.E-1*ABS(E ).AND.ABS(E -PA0(4))
     *   ) THEN							     *   ) THEN
          CALL UTMSG('JCLUDE')					          CALL UTMSG('JCLUDE')
          WRITE(IFCH,*)'*****  P_SUM /= P_CLU'			          WRITE(IFCH,*)'*****  P_SUM /= P_CLU'
          WRITE(IFCH,*)'IFAIL_JRESCL:',IFAIL,'   SCAL:',SCAL	          WRITE(IFCH,*)'IFAIL_JRESCL:',IFAIL,'   SCAL:',SCAL
          DO 30 N=NPTLB+1,NPTL					          DO 30 N=NPTLB+1,NPTL
            WRITE(IFCH,101)N,IDPTL(N),(PPTL(K,N),K=1,5)		            WRITE(IFCH,101)N,IDPTL(N),(PPTL(K,N),K=1,5)
30        CONTINUE						30        CONTINUE
          WRITE(IFCH,103)PX,PY,PZ,E				          WRITE(IFCH,103)PX,PY,PZ,E
          WRITE(IFCH,104)(PA0(K),K=1,4)				          WRITE(IFCH,104)(PA0(K),K=1,4)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

1000  CONTINUE							1000  CONTINUE
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)('-',L=1,25)				        WRITE(IFCH,*)('-',L=1,25)
        WRITE(IFCH,*)'   RETURN FROM JCLUDE   '			        WRITE(IFCH,*)'   RETURN FROM JCLUDE   '
        WRITE(IFCH,*)('-',L=1,25)				        WRITE(IFCH,*)('-',L=1,25)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN

1001  IRET=1							1001  IRET=1
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('JCLUDE')					        CALL UTMSG('JCLUDE')
        WRITE(IFCH,*)'*****  CLUSTER DECAY NOT POSSIBLE  --> 	        WRITE(IFCH,*)'*****  CLUSTER DECAY NOT POSSIBLE  --> 
        WRITE(IFCH,100)(PA0(K),K=1,5)				        WRITE(IFCH,100)(PA0(K),K=1,5)
        WRITE(IFCH,*)'JCA:'					        WRITE(IFCH,*)'JCA:'
        WRITE(IFCH,*)JCA0					        WRITE(IFCH,*)JCA0
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JDECA(I,IRET)					      SUBROUTINE JDECA(I,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  DECAYS I (CALLS JDECAY)					C  DECAYS I (CALLS JDECAY)
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /CCLUDE/  KCLUDE					      COMMON /CCLUDE/  KCLUDE
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION TOR,ZOR					      DOUBLE PRECISION TOR,ZOR
      INTEGER          JCDU(NFLAV,2)				      INTEGER          JCDU(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 5 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 5 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,*)('-',L=1,79)				        WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)'ENTRY JDECA. DECAY OF',I,IDPTL(I),PPTL(	        WRITE(IFCH,*)'ENTRY JDECA. DECAY OF',I,IDPTL(I),PPTL(
      ENDIF							      ENDIF
CDH   CALL IDMASS(111,AMRHO0)					CDH   CALL IDMASS(111,AMRHO0)
CDH   CALL IDMASS(221,AMOMEG)					CDH   CALL IDMASS(221,AMOMEG)
      IOI=IORPTL(I)						      IOI=IORPTL(I)
      IF ( .NOT.( IOI.GT.0 .AND. ABS(IDPTL(IOI)).LT.10000	      IF ( .NOT.( IOI.GT.0 .AND. ABS(IDPTL(IOI)).LT.10000
     *                    .AND. JORPTL(I).EQ.0 ) ) THEN		     *                    .AND. JORPTL(I).EQ.0 ) ) THEN
        IF ( IDPTL(I) .EQ. 111 ) IDPTL(I)=221			        IF ( IDPTL(I) .EQ. 111 ) IDPTL(I)=221
        IF ( IDPTL(I) .EQ. 221 .AND. RANGEN() .GT. 0.5 ) IDPT	        IF ( IDPTL(I) .EQ. 221 .AND. RANGEN() .GT. 0.5 ) IDPT
      ENDIF							      ENDIF
      IF ( MOD(NDECAY        ,10) .EQ.1 ) GOTO 1000		      IF ( MOD(NDECAY        ,10) .EQ.1 ) GOTO 1000
      IDA=ABS(IDPTL(I))						      IDA=ABS(IDPTL(I))
      IF ( MOD(NDECAY/10     ,10) .EQ.1 .AND. IDA .EQ.  20 ) 	      IF ( MOD(NDECAY/10     ,10) .EQ.1 .AND. IDA .EQ.  20 ) 
      IF ( MOD(NDECAY/100    ,10) .EQ.1 .AND. IDA .EQ.2130 ) 	      IF ( MOD(NDECAY/100    ,10) .EQ.1 .AND. IDA .EQ.2130 ) 
      IF ( MOD(NDECAY/1000   ,10) .EQ.1 ) THEN			      IF ( MOD(NDECAY/1000   ,10) .EQ.1 ) THEN
        IF ( IDA .EQ.1130 ) GOTO 1000				        IF ( IDA .EQ.1130 ) GOTO 1000
        IF ( IDA .EQ.2230 ) GOTO 1000				        IF ( IDA .EQ.2230 ) GOTO 1000
      ENDIF							      ENDIF
      IF ( MOD(NDECAY/10000  ,10) .EQ.1 ) THEN			      IF ( MOD(NDECAY/10000  ,10) .EQ.1 ) THEN
        IF ( IDA .EQ.2330 ) GOTO 1000				        IF ( IDA .EQ.2330 ) GOTO 1000
        IF ( IDA .EQ.1330 ) GOTO 1000				        IF ( IDA .EQ.1330 ) GOTO 1000
      ENDIF							      ENDIF
      IF ( MOD(NDECAY/100000 ,10) .EQ.1 .AND. IDA .EQ.3331 ) 	      IF ( MOD(NDECAY/100000 ,10) .EQ.1 .AND. IDA .EQ.3331 ) 
      IF ( MOD(NDECAY/1000000,10) .EQ.1 .AND. IDA .EQ. 110 ) 	      IF ( MOD(NDECAY/1000000,10) .EQ.1 .AND. IDA .EQ. 110 ) 
      IF ( MOD(NDECAX        ,10) .EQ.1 .AND. IDA .EQ. 441 ) 	      IF ( MOD(NDECAX        ,10) .EQ.1 .AND. IDA .EQ. 441 ) 
      IF ( MOD(NDECAX/10     ,10) .EQ.1 .AND. IDA .EQ. 230 ) 	      IF ( MOD(NDECAX/10     ,10) .EQ.1 .AND. IDA .EQ. 230 ) 
      IF ( MOD(NDECAX/100    ,10) .EQ.1 ) THEN			      IF ( MOD(NDECAX/100    ,10) .EQ.1 ) THEN
        IF ( IDA .EQ.1111 ) GOTO 1000				        IF ( IDA .EQ.1111 ) GOTO 1000
        IF ( IDA .EQ.1121 ) GOTO 1000				        IF ( IDA .EQ.1121 ) GOTO 1000
        IF ( IDA .EQ.1221 ) GOTO 1000				        IF ( IDA .EQ.1221 ) GOTO 1000
        IF ( IDA .EQ.2221 ) GOTO 1000				        IF ( IDA .EQ.2221 ) GOTO 1000
      ENDIF							      ENDIF

      IF ( MOD(NDECAX/1000   ,10) .EQ.1 ) THEN			      IF ( MOD(NDECAX/1000   ,10) .EQ.1 ) THEN
        IF ( IDA .EQ. 111 ) GOTO 1000				        IF ( IDA .EQ. 111 ) GOTO 1000
        IF ( IDA .EQ. 121 ) GOTO 1000				        IF ( IDA .EQ. 121 ) GOTO 1000
        IF ( IDA .EQ. 221 ) GOTO 1000				        IF ( IDA .EQ. 221 ) GOTO 1000
        IF ( IDA .EQ. 331 ) GOTO 1000				        IF ( IDA .EQ. 331 ) GOTO 1000
      ENDIF							      ENDIF
      IF ( MOD(NDECAX/10000  ,10) .EQ.1 .AND. IDA .EQ. 220 ) 	      IF ( MOD(NDECAX/10000  ,10) .EQ.1 .AND. IDA .EQ. 220 ) 
      IF ( MOD(NDECAX/100000 ,10) .EQ.1 .AND. IDA .EQ. 330 ) 	      IF ( MOD(NDECAX/100000 ,10) .EQ.1 .AND. IDA .EQ. 330 ) 
      IF ( MOD(NDECAX/1000000,10) .EQ.1 ) THEN			      IF ( MOD(NDECAX/1000000,10) .EQ.1 ) THEN
        IF ( IDA .EQ. 112 ) GOTO 1000				        IF ( IDA .EQ. 112 ) GOTO 1000
        IF ( IDA .EQ. 122 ) GOTO 1000				        IF ( IDA .EQ. 122 ) GOTO 1000
      ENDIF							      ENDIF
      IF ( MOD(NDECAW        ,10) .EQ.1 .AND. IDA .EQ. 332 ) 	      IF ( MOD(NDECAW        ,10) .EQ.1 .AND. IDA .EQ. 332 ) 
      IF ( MOD(NDECAW/10     ,10) .EQ.1 ) THEN			      IF ( MOD(NDECAW/10     ,10) .EQ.1 ) THEN
        IF ( IDA .EQ. 131 ) GOTO 1000				        IF ( IDA .EQ. 131 ) GOTO 1000
        IF ( IDA .EQ.-131 ) GOTO 1000				        IF ( IDA .EQ.-131 ) GOTO 1000
        IF ( IDA .EQ. 231 ) GOTO 1000				        IF ( IDA .EQ. 231 ) GOTO 1000
        IF ( IDA .EQ.-231 ) GOTO 1000				        IF ( IDA .EQ.-231 ) GOTO 1000
      ENDIF							      ENDIF
      T=TIVPTL(2,I)						      T=TIVPTL(2,I)
      NPTLB=NPTL						      NPTLB=NPTL
      IF ( NPTL .GT. MXPTL-10 ) THEN				      IF ( NPTL .GT. MXPTL-10 ) THEN
        CALL UTSTOP('JDECA: MXPTL TOO SMALL                  	        CALL UTSTOP('JDECA: MXPTL TOO SMALL                  
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0
      CALL JDECAY(I,IRET)					      CALL JDECAY(I,IRET)
      IF ( ISHSUB/100 .EQ. 5 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 5 ) ISH=MOD(ISHSUB,100)
      IF ( IRET .EQ. 1 ) GOTO 1000				      IF ( IRET .EQ. 1 ) GOTO 1000
      IF ( NPTL .LE. NPTLB ) GOTO 1000				      IF ( NPTL .LE. NPTLB ) GOTO 1000
      ISH00=ISH							      ISH00=ISH
      IF ( ISHSUB/100.EQ.14 .AND. KCLUDE.EQ.1 ) ISH=MOD(ISHSU	      IF ( ISHSUB/100.EQ.14 .AND. KCLUDE.EQ.1 ) ISH=MOD(ISHSU
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,101)SNGL(TTAUS)				        WRITE(IFCH,101)SNGL(TTAUS)
101     FORMAT(1X,'DECAY  AT TAU =',E10.3)			101     FORMAT(1X,'DECAY  AT TAU =',E10.3)
        WRITE(IFCH,115)I,IDPTL(I)				        WRITE(IFCH,115)I,IDPTL(I)
     *                 ,(PPTL(K,I),K=3,5),(TIVPTL(K,I),K=1,2)	     *                 ,(PPTL(K,I),K=3,5),(TIVPTL(K,I),K=1,2)
115     FORMAT(1X,'/CPTL/',I6,I10				115     FORMAT(1X,'/CPTL/',I6,I10
     *           ,1X,3(E10.2),1X,2(E10.2))			     *           ,1X,3(E10.2),1X,2(E10.2))
      ENDIF							      ENDIF
      ISTPTL(I)=1						      ISTPTL(I)=1
      IFRPTL(1,I)=NPTLB+1					      IFRPTL(1,I)=NPTLB+1
      IFRPTL(2,I)=NPTL						      IFRPTL(2,I)=NPTL
      X=XORPTL(1,I)+(T-XORPTL(4,I))*PPTL(1,I)/PPTL(4,I)		      X=XORPTL(1,I)+(T-XORPTL(4,I))*PPTL(1,I)/PPTL(4,I)
      Y=XORPTL(2,I)+(T-XORPTL(4,I))*PPTL(2,I)/PPTL(4,I)		      Y=XORPTL(2,I)+(T-XORPTL(4,I))*PPTL(2,I)/PPTL(4,I)
      Z=XORPTL(3,I)+(T-XORPTL(4,I))*PPTL(3,I)/PPTL(4,I)		      Z=XORPTL(3,I)+(T-XORPTL(4,I))*PPTL(3,I)/PPTL(4,I)
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)				      IF ( ISH .GE. 93 ) WRITE(IFCH,*)
     *            'LOOP OVER DECAY PRODUCTS ',NPTLB+1,' - ',N	     *            'LOOP OVER DECAY PRODUCTS ',NPTLB+1,' - ',N
      DO 20 N=NPTLB+1,NPTL					      DO 20 N=NPTLB+1,NPTL
        IF ( ISH .GE. 93 ) WRITE(IFCH,*)'PARTICLE: ',N,IDPTL(	        IF ( ISH .GE. 93 ) WRITE(IFCH,*)'PARTICLE: ',N,IDPTL(
        IORPTL(N)=I						        IORPTL(N)=I
        JORPTL(N)=0						        JORPTL(N)=0
        ISTPTL(N)=0						        ISTPTL(N)=0
        IFRPTL(1,N)=0						        IFRPTL(1,N)=0
        IFRPTL(2,N)=0						        IFRPTL(2,N)=0
        XORPTL(1,N)=X						        XORPTL(1,N)=X
        XORPTL(2,N)=Y						        XORPTL(2,N)=Y
        XORPTL(3,N)=Z						        XORPTL(3,N)=Z
        XORPTL(4,N)=T						        XORPTL(4,N)=T
        NQJPTL(N)=NQJPTL(I)					        NQJPTL(N)=NQJPTL(I)
        IO=N							        IO=N
 1      IO=IORPTL(IO)						 1      IO=IORPTL(IO)
        IF ( ISH .GE. 93 ) WRITE(IFCH,*)'IO = ',IO		        IF ( ISH .GE. 93 ) WRITE(IFCH,*)'IO = ',IO
        IF ( IORPTL(IO) .GT. 0 ) GOTO 1				        IF ( IORPTL(IO) .GT. 0 ) GOTO 1
        IF ( ISH.GE. 93 ) WRITE(IFCH,*)'ORIGIN: ',IO,IDPTL(IO	        IF ( ISH.GE. 93 ) WRITE(IFCH,*)'ORIGIN: ',IO,IDPTL(IO
        ZOR=XORPTL(3,IO)					        ZOR=XORPTL(3,IO)
        TOR=XORPTL(4,IO)					        TOR=XORPTL(4,IO)
        CALL IDQUAC(IO,NQ,NDU,NDU,JCDU)				        CALL IDQUAC(IO,NQ,NDU,NDU,JCDU)
        R=RANGEN()						        R=RANGEN()
        TAURAN=-TAUREA*LOG(R)					        TAURAN=-TAUREA*LOG(R)
        CALL UTTAIX(N,TAURAN,ZOR,TOR,ZIS,TIS)			        CALL UTTAIX(N,TAURAN,ZOR,TOR,ZIS,TIS)
        TIVPTL(1,N)=MAX(T,TIS)					        TIVPTL(1,N)=MAX(T,TIS)
        CALL IDTAU(IDPTL(N),PPTL(4,N),PPTL(5,N),TAUGM)		        CALL IDTAU(IDPTL(N),PPTL(4,N),PPTL(5,N),TAUGM)
        TIVPTL(2,N)=T+TAUGM					        TIVPTL(2,N)=T+TAUGM
        ICLPTL(N)=1						        ICLPTL(N)=1
        IF ( ISH .GE. 91 ) WRITE(IFCH,115)N,IDPTL(N)		        IF ( ISH .GE. 91 ) WRITE(IFCH,115)N,IDPTL(N)
     *                    ,(PPTL(K,N),K=3,5),(TIVPTL(K,N),K=1	     *                    ,(PPTL(K,N),K=3,5),(TIVPTL(K,N),K=1
20    CONTINUE							20    CONTINUE
      ISH=ISH00							      ISH=ISH00

1000  CONTINUE							1000  CONTINUE
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)		      IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)
      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JDECAY(IP,IRET)				      SUBROUTINE JDECAY(IP,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  DECAYS PARTICLE IP FROM /CPTL/				C  DECAYS PARTICLE IP FROM /CPTL/
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CCLUDE/  KCLUDE					      COMMON /CCLUDE/  KCLUDE
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /WCO/     WGAM2,WMASS2				      COMMON /WCO/     WGAM2,WMASS2

      REAL    BETA(3),PGEN(5,5),PREST(4,5)			      REAL    BETA(3),PGEN(5,5),PREST(4,5)
     *       ,REDUCE(5),RND(5),U(3)				     *       ,REDUCE(5),RND(5),U(3)
      DATA REDUCE/1.,1.,2.,5.,15./,TWOME/1.022006E-3/		      DATA REDUCE/1.,1.,2.,5.,15./,TWOME/1.022006E-3/
C------------------------------------------------------------	C------------------------------------------------------------
C  FCTN DEFINITIONS						C  FCTN DEFINITIONS
      DOT(I1,I2)=PREST(4,I1)*PREST(4,I2)-PREST(1,I1)*PREST(1,	      DOT(I1,I2)=PREST(4,I1)*PREST(4,I2)-PREST(1,I1)*PREST(1,
     *          -PREST(2,I1)*PREST(2,I2)-PREST(3,I1)*PREST(3,	     *          -PREST(2,I1)*PREST(2,I2)-PREST(3,I1)*PREST(3,
C  CHARGED W PROPAGATOR.					C  CHARGED W PROPAGATOR.
      WPROP(Z)=(Z-WMASS2**2)**2+(WMASS2*WGAM2)**2		      WPROP(Z)=(Z-WMASS2**2)**2+(WMASS2*WGAM2)**2
C------------------------------------------------------------	C------------------------------------------------------------

      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 4 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 4 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,*)('-',L=1,79)				        WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)'DECAY OF',IP,IDPTL(IP),PPTL(5,IP)		        WRITE(IFCH,*)'DECAY OF',IP,IDPTL(IP),PPTL(5,IP)
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0

      IRET=0							      IRET=0
      KCLUDE=0							      KCLUDE=0

C  NO K_LONG DECAY						C  NO K_LONG DECAY
C  ---------------						C  ---------------
      IF ( IDPTL(IP) .EQ. -20 ) GOTO 1000			      IF ( IDPTL(IP) .EQ. -20 ) GOTO 1000

C  CLUSTER DECAY						C  CLUSTER DECAY
C  -------------						C  -------------
      IF ( ABS(IDPTL(IP)) .GT. 100000000 ) THEN			      IF ( ABS(IDPTL(IP)) .GT. 100000000 ) THEN
        KCLUDE=1						        KCLUDE=1
        CALL JCLUDE(IP,IRET)					        CALL JCLUDE(IP,IRET)
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF

      IF ( ISHSUB/100 .EQ. 4 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 4 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'ORDINARY DECAY'		      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'ORDINARY DECAY'

C  SELECT DECAY MODE						C  SELECT DECAY MODE
C  -----------------						C  -----------------
      NTRY=0							      NTRY=0
 2    NTRY=NTRY+1						 2    NTRY=NTRY+1
      IF ( NTRY .GT. 100 ) THEN					      IF ( NTRY .GT. 100 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JDECAY')					          CALL UTMSG('JDECAY')
          WRITE(IFCH,*)'*****  DECAY NOT POSSIBLE. IRET = 1.'	          WRITE(IFCH,*)'*****  DECAY NOT POSSIBLE. IRET = 1.'
          WRITE(IFCH,*)'ID,MASS: ',IDPTL(IP),PPTL(5,IP)		          WRITE(IFCH,*)'ID,MASS: ',IDPTL(IP),PPTL(5,IP)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IRET=1							        IRET=1
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF
      IDLV1=IDPTL(IP)						      IDLV1=IDPTL(IP)
      AMSS=PPTL(5,IP)						      AMSS=PPTL(5,IP)
 1    CONTINUE							 1    CONTINUE
      IPOINT=LOOK(IABS(IDLV1))-1				      IPOINT=LOOK(IABS(IDLV1))-1
      IF ( IPOINT .LT. 0 ) GOTO 1000				      IF ( IPOINT .LT. 0 ) GOTO 1000
      TRY=RANGEN()						      TRY=RANGEN()
100   IPOINT=IPOINT+1						100   IPOINT=IPOINT+1
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'IPOINT,CBR,TRY'		      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'IPOINT,CBR,TRY'
     *                                ,IPOINT,CBR(IPOINT),TRY	     *                                ,IPOINT,CBR(IPOINT),TRY
      IF ( TRY .GT. CBR(IPOINT) ) GOTO 100			      IF ( TRY .GT. CBR(IPOINT) ) GOTO 100
      NADD=0							      NADD=0
      SUM=0.							      SUM=0.
      NSTART=NPTL+1						      NSTART=NPTL+1
      DO 110 I=1,5						      DO 110 I=1,5
        IF ( MODE(I,IPOINT) .EQ. 0 ) GOTO 110			        IF ( MODE(I,IPOINT) .EQ. 0 ) GOTO 110
        IF ( NPTL+NADD+1 .GT. MXPTL ) GOTO 9999			        IF ( NPTL+NADD+1 .GT. MXPTL ) GOTO 9999
        NADD=NADD+1						        NADD=NADD+1
        NEW=NPTL+NADD						        NEW=NPTL+NADD
        IDPTL(NEW)=MODE(I,IPOINT)				        IDPTL(NEW)=MODE(I,IPOINT)
        IDLV1=IDPTL(NEW)					        IDLV1=IDPTL(NEW)
        CALL IDMASS(IDLV1,PPTL(5,NEW))				        CALL IDMASS(IDLV1,PPTL(5,NEW))
        SUM=SUM+PPTL(5,NEW)					        SUM=SUM+PPTL(5,NEW)
110   CONTINUE							110   CONTINUE
      IF ( NADD .NE. 1  .AND.  SUM+1.E-2 .GE. AMSS ) GOTO 2	      IF ( NADD .NE. 1  .AND.  SUM+1.E-2 .GE. AMSS ) GOTO 2
      NADD1=NADD-1						      NADD1=NADD-1
      DO 120 J=1,5						      DO 120 J=1,5
        PGEN(J,1)=PPTL(J,IP)					        PGEN(J,1)=PPTL(J,IP)
120   CONTINUE							120   CONTINUE
      PGEN(5,NADD)=PPTL(5,NPTL+NADD)				      PGEN(5,NADD)=PPTL(5,NPTL+NADD)
      IF ( NADD .EQ. 1 ) GOTO 700				      IF ( NADD .EQ. 1 ) GOTO 700
      IF ( NADD .EQ. 2 ) GOTO 400				      IF ( NADD .EQ. 2 ) GOTO 400

C  USE KROLL-WADA DISTRIBUTION FOR DALITZ DECAYS.		C  USE KROLL-WADA DISTRIBUTION FOR DALITZ DECAYS.
C  ----------------------------------------------		C  ----------------------------------------------
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'>= 3 BODY DECAY'		      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'>= 3 BODY DECAY'
      IF ( .NOT. ( (IDPTL(IP).EQ.110 .OR. IDPTL(IP).EQ.220) .	      IF ( .NOT. ( (IDPTL(IP).EQ.110 .OR. IDPTL(IP).EQ.220) .
     *             ABS(IDPTL(NPTL+2)).EQ.12 ) ) GOTO 130	     *             ABS(IDPTL(NPTL+2)).EQ.12 ) ) GOTO 130
      NTRY=0							      NTRY=0
125   NTRY=NTRY+1						125   NTRY=NTRY+1
      IF ( NTRY .GT. 10 ) THEN					      IF ( NTRY .GT. 10 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JDECAY')					          CALL UTMSG('JDECAY')
          WRITE(IFCH,*)'*****  NTRY > 10. IRET = 1.'		          WRITE(IFCH,*)'*****  NTRY > 10. IRET = 1.'
          WRITE(IFCH,*)'AMEE,REE,WTEE',AMEE,REE,WTEE		          WRITE(IFCH,*)'AMEE,REE,WTEE',AMEE,REE,WTEE
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IRET=1							        IRET=1
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF
      AMEE=TWOME*(PPTL(5,IP)/TWOME)**RANGEN()			      AMEE=TWOME*(PPTL(5,IP)/TWOME)**RANGEN()
      REE=(TWOME/AMEE)**2					      REE=(TWOME/AMEE)**2
      WTEE=(1.-(AMEE/PPTL(5,IP))**2)**3*SQRT(1.-REE)*(1.+.5*R	      WTEE=(1.-(AMEE/PPTL(5,IP))**2)**3*SQRT(1.-REE)*(1.+.5*R
      IF ( WTEE .LT. RANGEN() ) GOTO 125			      IF ( WTEE .LT. RANGEN() ) GOTO 125
      PGEN(5,2)=AMEE						      PGEN(5,2)=AMEE
      GOTO 400							      GOTO 400
130   CONTINUE							130   CONTINUE

C  CALCULATE MAXIMUM PHASE-SPACE WEIGHT				C  CALCULATE MAXIMUM PHASE-SPACE WEIGHT
C  ------------------------------------				C  ------------------------------------
      WTMAX=1./REDUCE(NADD)					      WTMAX=1./REDUCE(NADD)
      SUM1=PGEN(5,1)						      SUM1=PGEN(5,1)
      SUM2=SUM-PPTL(5,NPTL+1)					      SUM2=SUM-PPTL(5,NPTL+1)
      DO 200 I=1,NADD1						      DO 200 I=1,NADD1
        WTMAX=WTMAX*UTPCM(SUM1,SUM2,PPTL(5,NPTL+I))		        WTMAX=WTMAX*UTPCM(SUM1,SUM2,PPTL(5,NPTL+I))
        SUM1=SUM1-PPTL(5,NPTL+I)				        SUM1=SUM1-PPTL(5,NPTL+I)
        SUM2=SUM2-PPTL(5,NPTL+I+1)				        SUM2=SUM2-PPTL(5,NPTL+I+1)
200   CONTINUE							200   CONTINUE

C  GENERATE UNIFORM NADD-BODY PHASE SPACE			C  GENERATE UNIFORM NADD-BODY PHASE SPACE
C  --------------------------------------			C  --------------------------------------
      NTRY=0							      NTRY=0
300   NTRY=NTRY+1						300   NTRY=NTRY+1
      IF ( NTRY .GT. 10000 ) THEN				      IF ( NTRY .GT. 10000 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JDECAY')					          CALL UTMSG('JDECAY')
          WRITE(IFCH,*)'*****  INFINITE LOOP (2). IRET = 1.'	          WRITE(IFCH,*)'*****  INFINITE LOOP (2). IRET = 1.'
          WRITE(IFCH,*)'IP,IDPTL(IP),PPTL(5,IP):'		          WRITE(IFCH,*)'IP,IDPTL(IP),PPTL(5,IP):'
     *                 ,IP,IDPTL(IP),PPTL(5,IP)			     *                 ,IP,IDPTL(IP),PPTL(5,IP)
          WRITE(IFCH,*)'WT,WTMAX:',WT,WTMAX			          WRITE(IFCH,*)'WT,WTMAX:',WT,WTMAX
          WRITE(IFCH,*)'I,PGEN(5,I),PPTL(5,NPTL+I),IDPTL(NPTL	          WRITE(IFCH,*)'I,PGEN(5,I),PPTL(5,NPTL+I),IDPTL(NPTL
          DO 305 I=1,NADD					          DO 305 I=1,NADD
            WRITE(IFCH,*)I,PGEN(5,I),PPTL(5,NPTL+I),IDPTL(NPT	            WRITE(IFCH,*)I,PGEN(5,I),PPTL(5,NPTL+I),IDPTL(NPT
305       CONTINUE						305       CONTINUE
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IRET=1							        IRET=1
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF
      RND(1)=1.							      RND(1)=1.
      DO 310 I=2,NADD1						      DO 310 I=2,NADD1
        RNEW=RANGEN()						        RNEW=RANGEN()
        I1=I-1							        I1=I-1
        DO 320 JJ1=1,I1						        DO 320 JJ1=1,I1
          J=I-JJ1						          J=I-JJ1
          JSAVE=J+1						          JSAVE=J+1
          IF ( RNEW .LE. RND(J) ) GOTO 315			          IF ( RNEW .LE. RND(J) ) GOTO 315
          RND(JSAVE)=RND(J)					          RND(JSAVE)=RND(J)
320     CONTINUE						320     CONTINUE
315     RND(JSAVE)=RNEW						315     RND(JSAVE)=RNEW
310   CONTINUE							310   CONTINUE
      RND(NADD)=0.						      RND(NADD)=0.
      WT=1.							      WT=1.
      SUM1=SUM							      SUM1=SUM
      DO 330 I=2,NADD						      DO 330 I=2,NADD
        SUM1=SUM1-PPTL(5,NPTL+I-1)				        SUM1=SUM1-PPTL(5,NPTL+I-1)
        PGEN(5,I)=SUM1+RND(I)*(PGEN(5,1)-SUM)			        PGEN(5,I)=SUM1+RND(I)*(PGEN(5,1)-SUM)
        A=PGEN(5,I-1)						        A=PGEN(5,I-1)
        B=PGEN(5,I)						        B=PGEN(5,I)
        C=PPTL(5,NPTL+I-1)					        C=PPTL(5,NPTL+I-1)
        WT=WT*UTPCM(A,B,C)					        WT=WT*UTPCM(A,B,C)
330   CONTINUE							330   CONTINUE
      IF ( WT .LT. RANGEN()*WTMAX ) GOTO 300			      IF ( WT .LT. RANGEN()*WTMAX ) GOTO 300

C  CARRY OUT TWO-BODY DECAYS IN PGEN FRAMES			C  CARRY OUT TWO-BODY DECAYS IN PGEN FRAMES
C  ----------------------------------------			C  ----------------------------------------
400   CONTINUE							400   CONTINUE
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'2 BODY DECAY'		      IF ( ISH .GE. 93 ) WRITE(IFCH,*)'2 BODY DECAY'
      DO 410 I=1,NADD1						      DO 410 I=1,NADD1
        QCM=UTPCM(PGEN(5,I),PGEN(5,I+1),PPTL(5,NPTL+I))		        QCM=UTPCM(PGEN(5,I),PGEN(5,I+1),PPTL(5,NPTL+I))
        U(3)=2.*RANGEN()-1.					        U(3)=2.*RANGEN()-1.
        PHI=2.*PI*RANGEN()					        PHI=2.*PI*RANGEN()
        U(1)=SQRT(1.-U(3)**2)*COS(PHI)				        U(1)=SQRT(1.-U(3)**2)*COS(PHI)
        U(2)=SQRT(1.-U(3)**2)*SIN(PHI)				        U(2)=SQRT(1.-U(3)**2)*SIN(PHI)
        PPTL(1,NPTL+I)=QCM*U(1)					        PPTL(1,NPTL+I)=QCM*U(1)
        PGEN(1,I+1)=-PPTL(1,NPTL+I)				        PGEN(1,I+1)=-PPTL(1,NPTL+I)
        PPTL(2,NPTL+I)=QCM*U(2)					        PPTL(2,NPTL+I)=QCM*U(2)
        PGEN(2,I+1)=-PPTL(2,NPTL+I)				        PGEN(2,I+1)=-PPTL(2,NPTL+I)
        PPTL(3,NPTL+I)=QCM*U(3)					        PPTL(3,NPTL+I)=QCM*U(3)
        PGEN(3,I+1)=-PPTL(3,NPTL+I)				        PGEN(3,I+1)=-PPTL(3,NPTL+I)
        PPTL(4,NPTL+I)=SQRT(QCM**2+PPTL(5,NPTL+I)**2)		        PPTL(4,NPTL+I)=SQRT(QCM**2+PPTL(5,NPTL+I)**2)
        PGEN(4,I+1)=SQRT(QCM**2+PGEN(5,I+1)**2)			        PGEN(4,I+1)=SQRT(QCM**2+PGEN(5,I+1)**2)
410   CONTINUE							410   CONTINUE
      PPTL(1,NPTL+NADD)=PGEN(1,NADD)				      PPTL(1,NPTL+NADD)=PGEN(1,NADD)
      PPTL(2,NPTL+NADD)=PGEN(2,NADD)				      PPTL(2,NPTL+NADD)=PGEN(2,NADD)
      PPTL(3,NPTL+NADD)=PGEN(3,NADD)				      PPTL(3,NPTL+NADD)=PGEN(3,NADD)
      PPTL(4,NPTL+NADD)=PGEN(4,NADD)				      PPTL(4,NPTL+NADD)=PGEN(4,NADD)

C  BOOST PGEN FRAMES TO LAB FRAME				C  BOOST PGEN FRAMES TO LAB FRAME
C       ALSO SAVE MOMENTA IN REST FRAME (LAST FRAME)		C       ALSO SAVE MOMENTA IN REST FRAME (LAST FRAME)
C  -------------------------------------------------		C  -------------------------------------------------
      DO 500 II=1,NADD1						      DO 500 II=1,NADD1
        I=NADD-II						        I=NADD-II
        BETA(1)=1./PGEN(4,I)*PGEN(1,I)				        BETA(1)=1./PGEN(4,I)*PGEN(1,I)
        BETA(2)=1./PGEN(4,I)*PGEN(2,I)				        BETA(2)=1./PGEN(4,I)*PGEN(2,I)
        BETA(3)=1./PGEN(4,I)*PGEN(3,I)				        BETA(3)=1./PGEN(4,I)*PGEN(3,I)
        GAMMA=PGEN(4,I)/PGEN(5,I)				        GAMMA=PGEN(4,I)/PGEN(5,I)
        DO 520 K=I,NADD						        DO 520 K=I,NADD
          K1=NPTL+K						          K1=NPTL+K
          BP=BETA(1)*PPTL(1,K1)+BETA(2)*PPTL(2,K1)+BETA(3)*PP	          BP=BETA(1)*PPTL(1,K1)+BETA(2)*PPTL(2,K1)+BETA(3)*PP
          AUXIL=GAMMA*(PPTL(4,K1)+BP*GAMMA/(GAMMA+1.))		          AUXIL=GAMMA*(PPTL(4,K1)+BP*GAMMA/(GAMMA+1.))
          PREST(1,K)=PPTL(1,K1)					          PREST(1,K)=PPTL(1,K1)
          PPTL(1,K1)=PPTL(1,K1)+BETA(1)*AUXIL			          PPTL(1,K1)=PPTL(1,K1)+BETA(1)*AUXIL
          PREST(2,K)=PPTL(2,K1)					          PREST(2,K)=PPTL(2,K1)
          PPTL(2,K1)=PPTL(2,K1)+BETA(2)*AUXIL			          PPTL(2,K1)=PPTL(2,K1)+BETA(2)*AUXIL
          PREST(3,K)=PPTL(3,K1)					          PREST(3,K)=PPTL(3,K1)
          PPTL(3,K1)=PPTL(3,K1)+BETA(3)*AUXIL			          PPTL(3,K1)=PPTL(3,K1)+BETA(3)*AUXIL
          PREST(4,K)=PPTL(4,K1)					          PREST(4,K)=PPTL(4,K1)
          PPTL(4,K1)=GAMMA*(PPTL(4,K1)+BP)			          PPTL(4,K1)=GAMMA*(PPTL(4,K1)+BP)
520     CONTINUE						520     CONTINUE
500   CONTINUE							500   CONTINUE

C  MATRIX ELEMENTS						C  MATRIX ELEMENTS
C  ---------------						C  ---------------
      IF ( NADD .EQ. 3 ) THEN					      IF ( NADD .EQ. 3 ) THEN
        IF ( IDPTL(IP) .EQ. 221  .OR.  IDPTL(IP) .EQ. 331 ) G	        IF ( IDPTL(IP) .EQ. 221  .OR.  IDPTL(IP) .EQ. 331 ) G
        IF ( ABS(IDPTL(NPTL+1)) .LT. 20   .AND.			        IF ( ABS(IDPTL(NPTL+1)) .LT. 20   .AND.
     *             IDPTL(NPTL+1) .NE. 10 ) GOTO 620		     *             IDPTL(NPTL+1) .NE. 10 ) GOTO 620
      ENDIF							      ENDIF
      GOTO 800							      GOTO 800

C  OMEG AND PHI DECAY						C  OMEG AND PHI DECAY
C       USE VECTORS IN REST FRAME				C       USE VECTORS IN REST FRAME
C  ------------------------------				C  ------------------------------
610   WT=(PPTL(5,NPTL+1)*PPTL(5,NPTL+2)*PPTL(5,NPTL+3))**2	610   WT=(PPTL(5,NPTL+1)*PPTL(5,NPTL+2)*PPTL(5,NPTL+3))**2
     *                 -(PPTL(5,NPTL+1)*DOT(2,3))**2		     *                 -(PPTL(5,NPTL+1)*DOT(2,3))**2
     *                 -(PPTL(5,NPTL+2)*DOT(1,3))**2		     *                 -(PPTL(5,NPTL+2)*DOT(1,3))**2
     *                 -(PPTL(5,NPTL+3)*DOT(1,2))**2		     *                 -(PPTL(5,NPTL+3)*DOT(1,2))**2
     *                +2.*DOT(1,2)*DOT(2,3)*DOT(1,3)		     *                +2.*DOT(1,2)*DOT(2,3)*DOT(1,3)
      IF ( WT .LT. RANGEN()*PPTL(5,IP)**6/108. ) GOTO 300	      IF ( WT .LT. RANGEN()*PPTL(5,IP)**6/108. ) GOTO 300
      GOTO 800							      GOTO 800

C  SEMILEPTONIC AND QUARK DECAYS				C  SEMILEPTONIC AND QUARK DECAYS
C       USE VECTORS IN REST FRAME, WHERE IP HAS (M,0,0,0)	C       USE VECTORS IN REST FRAME, WHERE IP HAS (M,0,0,0)
C       INCLUDE W PROPAGATOR					C       INCLUDE W PROPAGATOR
C  ------------------------------------------------------	C  ------------------------------------------------------
620   WT=(PPTL(5,IP)*PREST(4,2))*DOT(1,3)			620   WT=(PPTL(5,IP)*PREST(4,2))*DOT(1,3)
      S12=PPTL(5,NPTL+1)**2+PPTL(5,NPTL+2)**2+2.*DOT(1,2)	      S12=PPTL(5,NPTL+1)**2+PPTL(5,NPTL+2)**2+2.*DOT(1,2)
      S12MAX=PPTL(5,IP)**2					      S12MAX=PPTL(5,IP)**2
      WT=WT*WPROP(S12MAX)/WPROP(S12)				      WT=WT*WPROP(S12MAX)/WPROP(S12)
      IF ( WT .LT. RANGEN()*PPTL(5,IP)**4/16. ) GOTO 300	      IF ( WT .LT. RANGEN()*PPTL(5,IP)**4/16. ) GOTO 300
      GOTO 800							      GOTO 800

C  ONE-PARTICLE DECAYS						C  ONE-PARTICLE DECAYS
C  -------------------						C  -------------------
700   CONTINUE							700   CONTINUE
      DO 710 J=1,5						      DO 710 J=1,5
        PPTL(J,NPTL+1)=PPTL(J,IP)				        PPTL(J,NPTL+1)=PPTL(J,IP)
710   CONTINUE							710   CONTINUE

C  SWAP PARTICLES AND ANTIPARTICLES IF IDPTL(IP)<0		C  SWAP PARTICLES AND ANTIPARTICLES IF IDPTL(IP)<0
C  -----------------------------------------------		C  -----------------------------------------------
800   CONTINUE							800   CONTINUE
      IF ( IDPTL(IP).GE.0 .OR. ABS(IDPTL(IP)).EQ.20 ) GOTO 90	      IF ( IDPTL(IP).GE.0 .OR. ABS(IDPTL(IP)).EQ.20 ) GOTO 90
      DO 810 I=1,NADD						      DO 810 I=1,NADD
        IDABS=ABS(IDPTL(NPTL+I))				        IDABS=ABS(IDPTL(NPTL+I))
        IFL1=IDABS/1000						        IFL1=IDABS/1000
        IFL2=MOD(IDABS/100,10)					        IFL2=MOD(IDABS/100,10)
        IFL3=MOD(IDABS/10,10)					        IFL3=MOD(IDABS/10,10)
        IF ( IFL1.EQ.0 .AND. IFL2.NE.0 .AND. IFL2.EQ.IFL3 ) G	        IF ( IFL1.EQ.0 .AND. IFL2.NE.0 .AND. IFL2.EQ.IFL3 ) G
        IF ( IDABS.EQ.9  .OR. IDABS.EQ.10 .OR. IDABS.EQ.20 ) 	        IF ( IDABS.EQ.9  .OR. IDABS.EQ.10 .OR. IDABS.EQ.20 ) 
        IF ( IDABS.EQ.29 .OR. IDABS.EQ.30 .OR. IDABS.EQ.40 ) 	        IF ( IDABS.EQ.29 .OR. IDABS.EQ.30 .OR. IDABS.EQ.40 ) 
        IDPTL(NPTL+I)=-IDPTL(NPTL+I)				        IDPTL(NPTL+I)=-IDPTL(NPTL+I)
810   CONTINUE							810   CONTINUE

900   CONTINUE							900   CONTINUE
      NPTL=NPTL+NADD						      NPTL=NPTL+NADD
      IF ( NPTL .GT. MXPTL ) THEN				      IF ( NPTL .GT. MXPTL ) THEN
        CALL UTSTOP('JDECAY: NPTL>MXPTL                      	        CALL UTSTOP('JDECAY: NPTL>MXPTL                      
      ENDIF							      ENDIF
      NQK=0							      NQK=0
      IF ( ABS(IDPTL(NPTL)).LT.10 .OR. MOD(IDPTL(NPTL),100).E	      IF ( ABS(IDPTL(NPTL)).LT.10 .OR. MOD(IDPTL(NPTL),100).E
        CALL UTSTOP('JDECAY: DECAY PTCL IS PARTON            	        CALL UTSTOP('JDECAY: DECAY PTCL IS PARTON            
      ENDIF							      ENDIF

1000  CONTINUE							1000  CONTINUE
      IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)		      IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)
      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN

9999  CALL UTSTOP('JDECAY: MXPTL TOO SMALL                 ')	9999  CALL UTSTOP('JDECAY: MXPTL TOO SMALL                 ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JDECIN(LPRINT)					      SUBROUTINE JDECIN(LPRINT)

C------------------------------------------------------------	C------------------------------------------------------------
C  SETS UP /DKYTAB/						C  SETS UP /DKYTAB/
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (NDECTB=1171)					      PARAMETER (NDECTB=1171)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      LOGICAL          NODCAY,NOETA,NOEVOL,NOHADR,NONUNU,NOPI	      LOGICAL          NODCAY,NOETA,NOEVOL,NOHADR,NONUNU,NOPI
      COMMON /NODCAY/  NODCAY,NOETA,NOEVOL,NOHADR,NONUNU,NOPI	      COMMON /NODCAY/  NODCAY,NOETA,NOEVOL,NOHADR,NONUNU,NOPI
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /WCO/     WGAM2,WMASS2				      COMMON /WCO/     WGAM2,WMASS2

      REAL        DECTAB(7,NDECTB)				      REAL        DECTAB(7,NDECTB)
      INTEGER     IMODE(6)					      INTEGER     IMODE(6)
      CHARACTER*8 IBLANK,IDLABL,LMODE(6),LRES			      CHARACTER*8 IBLANK,IDLABL,LMODE(6),LRES
      LOGICAL     LPRINT					      LOGICAL     LPRINT

      DATA IBLANK/' '/						      DATA IBLANK/' '/
      DATA ((DECTAB(I,J),I=1,7),J=  1, 18)/			      DATA ((DECTAB(I,J),I=1,7),J=  1, 18)/
     *  110., .98850,  10.,  10.,   0.,   0.,   0.		     *  110., .98850,  10.,  10.,   0.,   0.,   0.
     *, 110.,1.00000,  10.,  12., -12.,   0.,   0.		     *, 110.,1.00000,  10.,  12., -12.,   0.,   0.
     *, 220., .38000,  10.,  10.,   0.,   0.,   0.		     *, 220., .38000,  10.,  10.,   0.,   0.,   0.
     *, 220., .71000, 110., 110., 110.,   0.,   0.		     *, 220., .71000, 110., 110., 110.,   0.,   0.
     *, 220., .94600, 120.,-120., 110.,   0.,   0.		     *, 220., .94600, 120.,-120., 110.,   0.,   0.
     *, 220., .99500, 120.,-120.,  10.,   0.,   0.		     *, 220., .99500, 120.,-120.,  10.,   0.,   0.
     *, 220.,1.00000,  10.,  12., -12.,   0.,   0.		     *, 220.,1.00000,  10.,  12., -12.,   0.,   0.
     *, 330., .44100, 220., 120.,-120.,   0.,   0.		     *, 330., .44100, 220., 120.,-120.,   0.,   0.
     *, 330., .66100, 220., 110., 110.,   0.,   0.		     *, 330., .66100, 220., 110., 110.,   0.,   0.
     *, 330., .95900, 111.,  10.,   0.,   0.,   0.		     *, 330., .95900, 111.,  10.,   0.,   0.,   0.
     *, 330., .98000, 221.,  10.,   0.,   0.,   0.		     *, 330., .98000, 221.,  10.,   0.,   0.,   0.
     *, 330.,1.00000,  10.,  10.,   0.,   0.,   0.		     *, 330.,1.00000,  10.,  10.,   0.,   0.,   0.
     *, 121.,1.00000, 120., 110.,   0.,   0.,   0.		     *, 121.,1.00000, 120., 110.,   0.,   0.,   0.
     *, 111., .99989, 120.,-120.,   0.,   0.,   0.		     *, 111., .99989, 120.,-120.,   0.,   0.,   0.
     *, 111., .99993,  12., -12.,   0.,   0.,   0.		     *, 111., .99993,  12., -12.,   0.,   0.,   0.
     *, 111.,1.00000,  14., -14.,   0.,   0.,   0.		     *, 111.,1.00000,  14., -14.,   0.,   0.,   0.
     *, 221., .89900, 120.,-120., 110.,   0.,   0.		     *, 221., .89900, 120.,-120., 110.,   0.,   0.
     *, 221., .91200, 120.,-120.,   0.,   0.,   0./		     *, 221., .91200, 120.,-120.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J= 19, 36)/			      DATA ((DECTAB(I,J),I=1,7),J= 19, 36)/
     *  221., .99992, 110.,  10.,   0.,   0.,   0.		     *  221., .99992, 110.,  10.,   0.,   0.,   0.
     *, 221.,1.00000,  12., -12.,   0.,   0.,   0.		     *, 221.,1.00000,  12., -12.,   0.,   0.,   0.
     *, 331., .48600, 130.,-130.,   0.,   0.,   0.		     *, 331., .48600, 130.,-130.,   0.,   0.,   0.
     *, 331., .83700, 230.,-230.,   0.,   0.,   0.		     *, 331., .83700, 230.,-230.,   0.,   0.,   0.
     *, 331., .98400, 120.,-120., 110.,   0.,   0.		     *, 331., .98400, 120.,-120., 110.,   0.,   0.
     *, 331., .99944, 220.,  10.,   0.,   0.,   0.		     *, 331., .99944, 220.,  10.,   0.,   0.,   0.
     *, 331., .99975,  12., -12.,   0.,   0.,   0.		     *, 331., .99975,  12., -12.,   0.,   0.,   0.
     *, 331.,1.00000,  14., -14.,   0.,   0.,   0.		     *, 331.,1.00000,  14., -14.,   0.,   0.,   0.
     *, 230., .50000,  20.,   0.,   0.,   0.,   0.		     *, 230., .50000,  20.,   0.,   0.,   0.,   0.
     *, 230.,1.00000, -20.,   0.,   0.,   0.,   0.		     *, 230.,1.00000, -20.,   0.,   0.,   0.,   0.
     *, 131., .66670, 230., 120.,   0.,   0.,   0.		     *, 131., .66670, 230., 120.,   0.,   0.,   0.
     *, 131.,1.00000, 130., 110.,   0.,   0.,   0.		     *, 131.,1.00000, 130., 110.,   0.,   0.,   0.
     *, 231., .66670, 130.,-120.,   0.,   0.,   0.		     *, 231., .66670, 130.,-120.,   0.,   0.,   0.
     *, 231.,1.00000, 230., 110.,   0.,   0.,   0.		     *, 231.,1.00000, 230., 110.,   0.,   0.,   0.
     *, 240., .11000,  12., -11., 230.,   0.,   0.		     *, 240., .11000,  12., -11., 230.,   0.,   0.
     *, 240., .17000,  12., -11., 231.,   0.,   0.		     *, 240., .17000,  12., -11., 231.,   0.,   0.
     *, 240., .28000,  14., -13., 230.,   0.,   0.		     *, 240., .28000,  14., -13., 230.,   0.,   0.
     *, 240., .34000,  14., -13., 231.,   0.,   0./		     *, 240., .34000,  14., -13., 231.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J= 37, 54)/			      DATA ((DECTAB(I,J),I=1,7),J= 37, 54)/
     *  240., .37800, 230.,-120.,   0.,   0.,   0.		     *  240., .37800, 230.,-120.,   0.,   0.,   0.
     *, 240., .56300, 230.,-121.,   0.,   0.,   0.		     *, 240., .56300, 230.,-121.,   0.,   0.,   0.
     *, 240., .60800, 231.,-120.,   0.,   0.,   0.		     *, 240., .60800, 231.,-120.,   0.,   0.,   0.
     *, 240., .62100, 230.,-120., 110.,   0.,   0.		     *, 240., .62100, 230.,-120., 110.,   0.,   0.
     *, 240., .71000, 130.,-120.,-120.,   0.,   0.		     *, 240., .71000, 130.,-120.,-120.,   0.,   0.
     *, 240., .80100, 230.,-120.,-120., 120.,   0.		     *, 240., .80100, 230.,-120.,-120., 120.,   0.
     *, 240., .87900, 130.,-120.,-120., 110.,   0.		     *, 240., .87900, 130.,-120.,-120., 110.,   0.
     *, 240., .95400, 230.,-120., 110., 110.,   0.		     *, 240., .95400, 230.,-120., 110., 110.,   0.
     *, 240., .96600, 230.,-130.,   0.,   0.,   0.		     *, 240., .96600, 230.,-130.,   0.,   0.,   0.
     *, 240., .97600, 331.,-120.,   0.,   0.,   0.		     *, 240., .97600, 331.,-120.,   0.,   0.,   0.
     *, 240., .98800,-130., 231.,   0.,   0.,   0.		     *, 240., .98800,-130., 231.,   0.,   0.,   0.
     *, 240.,1.00000,-131., 230.,   0.,   0.,   0.		     *, 240.,1.00000,-131., 230.,   0.,   0.,   0.
     *, 140., .04500,  12., -11., 130.,   0.,   0.		     *, 140., .04500,  12., -11., 130.,   0.,   0.
     *, 140., .07500,  12., -11., 131.,   0.,   0.		     *, 140., .07500,  12., -11., 131.,   0.,   0.
     *, 140., .12000,  14., -13., 130.,   0.,   0.		     *, 140., .12000,  14., -13., 130.,   0.,   0.
     *, 140., .15000,  14., -13., 131.,   0.,   0.		     *, 140., .15000,  14., -13., 131.,   0.,   0.
     *, 140., .20300, 130.,-120.,   0.,   0.,   0.		     *, 140., .20300, 130.,-120.,   0.,   0.,   0.
     *, 140., .22700, 230., 110.,   0.,   0.,   0./		     *, 140., .22700, 230., 110.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J= 55, 72)/			      DATA ((DECTAB(I,J),I=1,7),J= 55, 72)/
     *  140., .24700, 230., 220.,   0.,   0.,   0.		     *  140., .24700, 230., 220.,   0.,   0.,   0.
     *, 140., .28900, 230., 221.,   0.,   0.,   0.		     *, 140., .28900, 230., 221.,   0.,   0.,   0.
     *, 140., .45100, 130.,-121.,   0.,   0.,   0.		     *, 140., .45100, 130.,-121.,   0.,   0.,   0.
     *, 140., .53600, 131.,-120.,   0.,   0.,   0.		     *, 140., .53600, 131.,-120.,   0.,   0.,   0.
     *, 140., .56200, 231., 110.,   0.,   0.,   0.		     *, 140., .56200, 231., 110.,   0.,   0.,   0.
     *, 140., .57600, 230., 111.,   0.,   0.,   0.		     *, 140., .57600, 230., 111.,   0.,   0.,   0.
     *, 140., .58700, 130.,-120., 110.,   0.,   0.		     *, 140., .58700, 130.,-120., 110.,   0.,   0.
     *, 140., .60300, 230.,-120., 120.,   0.,   0.		     *, 140., .60300, 230.,-120., 120.,   0.,   0.
     *, 140., .72700, 130.,-120.,-120., 120.,   0.		     *, 140., .72700, 130.,-120.,-120., 120.,   0.
     *, 140., .87600, 230.,-120., 120., 110.,   0.		     *, 140., .87600, 230.,-120., 120., 110.,   0.
     *, 140., .96900, 130.,-120., 110., 110.,   0.		     *, 140., .96900, 130.,-120., 110., 110.,   0.
     *, 140.,1.00000, 230., 110., 110., 110.,   0.		     *, 140.,1.00000, 230., 110., 110., 110.,   0.
     *, 340., .03250,  12., -11., 220.,   0.,   0.		     *, 340., .03250,  12., -11., 220.,   0.,   0.
     *, 340., .06500,  12., -11., 331.,   0.,   0.		     *, 340., .06500,  12., -11., 331.,   0.,   0.
     *, 340., .09750,  14., -13., 220.,   0.,   0.		     *, 340., .09750,  14., -13., 220.,   0.,   0.
     *, 340., .13000,  14., -13., 331.,   0.,   0.		     *, 340., .13000,  14., -13., 331.,   0.,   0.
     *, 340., .17900,-130., 230.,   0.,   0.,   0.		     *, 340., .17900,-130., 230.,   0.,   0.,   0.
     *, 340., .22800,-120., 220.,   0.,   0.,   0./		     *, 340., .22800,-120., 220.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J= 73, 90)/			      DATA ((DECTAB(I,J),I=1,7),J= 73, 90)/
     *  340., .33800,-131., 230.,   0.,   0.,   0.		     *  340., .33800,-131., 230.,   0.,   0.,   0.
     *, 340., .44800,-130., 231.,   0.,   0.,   0.		     *, 340., .44800,-130., 231.,   0.,   0.,   0.
     *, 340., .55800,-120., 331.,   0.,   0.,   0.		     *, 340., .55800,-120., 331.,   0.,   0.,   0.
     *, 340., .57500,-130., 230., 110.,   0.,   0.		     *, 340., .57500,-130., 230., 110.,   0.,   0.
     *, 340., .59200,-230., 230.,-120.,   0.,   0.		     *, 340., .59200,-230., 230.,-120.,   0.,   0.
     *, 340., .69400,-130., 230.,-120., 120.,   0.		     *, 340., .69400,-130., 230.,-120., 120.,   0.
     *, 340., .79600,-130., 230., 110., 110.,   0.		     *, 340., .79600,-130., 230., 110., 110.,   0.
     *, 340., .89800,-130., 130.,-120., 110.,   0.		     *, 340., .89800,-130., 130.,-120., 110.,   0.
     *, 340.,1.00000,-230., 230.,-120., 110.,   0.		     *, 340.,1.00000,-230., 230.,-120., 110.,   0.
     *, 241., .64000, 140.,-120.,   0.,   0.,   0.		     *, 241., .64000, 140.,-120.,   0.,   0.,   0.
     *, 241., .92000, 240., 110.,   0.,   0.,   0.		     *, 241., .92000, 240., 110.,   0.,   0.,   0.
     *, 241.,1.00000, 240.,  10.,   0.,   0.,   0.		     *, 241.,1.00000, 240.,  10.,   0.,   0.,   0.
     *, 141., .55000, 140., 110.,   0.,   0.,   0.		     *, 141., .55000, 140., 110.,   0.,   0.,   0.
     *, 141.,1.00000, 140.,  10.,   0.,   0.,   0.		     *, 141.,1.00000, 140.,  10.,   0.,   0.,   0.
     *, 341.,1.00000, 340.,  10.,   0.,   0.,   0.		     *, 341.,1.00000, 340.,  10.,   0.,   0.,   0.
     *, 441., .07400,  12., -12.,   0.,   0.,   0.		     *, 441., .07400,  12., -12.,   0.,   0.,   0.
     *, 441., .14800,  14., -14.,   0.,   0.,   0.		     *, 441., .14800,  14., -14.,   0.,   0.,   0.
     *, 441., .15210,-121., 120.,   0.,   0.,   0./		     *, 441., .15210,-121., 120.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J= 91,108)/			      DATA ((DECTAB(I,J),I=1,7),J= 91,108)/
     *  441., .15620, 111., 110.,   0.,   0.,   0.		     *  441., .15620, 111., 110.,   0.,   0.,   0.
     *, 441., .16020, 121.,-120.,   0.,   0.,   0.		     *, 441., .16020, 121.,-120.,   0.,   0.,   0.
     *, 441., .16300,-121., 111., 120.,   0.,   0.		     *, 441., .16300,-121., 111., 120.,   0.,   0.
     *, 441., .16580, 121.,-121., 110.,   0.,   0.		     *, 441., .16580, 121.,-121., 110.,   0.,   0.
     *, 441., .16860, 121., 111.,-120.,   0.,   0.		     *, 441., .16860, 121., 111.,-120.,   0.,   0.
     *, 441., .28740, 120.,-120., 130.,-130.,   0.		     *, 441., .28740, 120.,-120., 130.,-130.,   0.
     *, 441., .40620, 110., 110., 130.,-130.,   0.		     *, 441., .40620, 110., 110., 130.,-130.,   0.
     *, 441., .52500, 120.,-120., 120.,-120.,   0.		     *, 441., .52500, 120.,-120., 120.,-120.,   0.
     *, 441., .64380, 120.,-120., 110., 110.,   0.		     *, 441., .64380, 120.,-120., 110., 110.,   0.
     *, 441., .76260, 110., 110., 110., 110.,   0.		     *, 441., .76260, 110., 110., 110., 110.,   0.
     *, 441., .88130, 120.,-120., 230.,-230.,   0.		     *, 441., .88130, 120.,-120., 230.,-230.,   0.
     *, 441.,1.00000, 110., 110., 230., 230.,   0.		     *, 441.,1.00000, 110., 110., 230., 230.,   0.
     *, 150., .06000, -12.,  11., 140.,   0.,   0.		     *, 150., .06000, -12.,  11., 140.,   0.,   0.
     *, 150., .12000, -12.,  11., 141.,   0.,   0.		     *, 150., .12000, -12.,  11., 141.,   0.,   0.
     *, 150., .18000, -14.,  13., 140.,   0.,   0.		     *, 150., .18000, -14.,  13., 140.,   0.,   0.
     *, 150., .24000, -14.,  13., 141.,   0.,   0.		     *, 150., .24000, -14.,  13., 141.,   0.,   0.
     *, 150., .25500, -16.,  15., 140.,   0.,   0.		     *, 150., .25500, -16.,  15., 140.,   0.,   0.
     *, 150., .27000, -16.,  15., 141.,   0.,   0./		     *, 150., .27000, -16.,  15., 141.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=109,126)/			      DATA ((DECTAB(I,J),I=1,7),J=109,126)/
     *  150., .28050, 140., 120.,   0.,   0.,   0.		     *  150., .28050, 140., 120.,   0.,   0.,   0.
     *, 150., .29100, 140., 121.,   0.,   0.,   0.		     *, 150., .29100, 140., 121.,   0.,   0.,   0.
     *, 150., .30150, 141., 120.,   0.,   0.,   0.		     *, 150., .30150, 141., 120.,   0.,   0.,   0.
     *, 150., .31200, 141., 121.,   0.,   0.,   0.		     *, 150., .31200, 141., 121.,   0.,   0.,   0.
     *, 150., .32650, 140.,-340.,   0.,   0.,   0.		     *, 150., .32650, 140.,-340.,   0.,   0.,   0.
     *, 150., .34100, 140.,-341.,   0.,   0.,   0.		     *, 150., .34100, 140.,-341.,   0.,   0.,   0.
     *, 150., .35550, 141.,-340.,   0.,   0.,   0.		     *, 150., .35550, 141.,-340.,   0.,   0.,   0.
     *, 150., .37000, 141.,-341.,   0.,   0.,   0.		     *, 150., .37000, 141.,-341.,   0.,   0.,   0.
     *, 150., .39800, 140., 120., 110.,   0.,   0.		     *, 150., .39800, 140., 120., 110.,   0.,   0.
     *, 150., .42600, 140., 120., 220.,   0.,   0.		     *, 150., .42600, 140., 120., 220.,   0.,   0.
     *, 150., .45400, 140., 120., 111.,   0.,   0.		     *, 150., .45400, 140., 120., 111.,   0.,   0.
     *, 150., .48200, 140., 120., 221.,   0.,   0.		     *, 150., .48200, 140., 120., 221.,   0.,   0.
     *, 150., .51000, 140., 121., 110.,   0.,   0.		     *, 150., .51000, 140., 121., 110.,   0.,   0.
     *, 150., .53800, 140., 121., 220.,   0.,   0.		     *, 150., .53800, 140., 121., 220.,   0.,   0.
     *, 150., .56600, 140., 121., 111.,   0.,   0.		     *, 150., .56600, 140., 121., 111.,   0.,   0.
     *, 150., .59400, 140., 121., 221.,   0.,   0.		     *, 150., .59400, 140., 121., 221.,   0.,   0.
     *, 150., .62200, 141., 120., 110.,   0.,   0.		     *, 150., .62200, 141., 120., 110.,   0.,   0.
     *, 150., .65000, 141., 120., 220.,   0.,   0./		     *, 150., .65000, 141., 120., 220.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=127,144)/			      DATA ((DECTAB(I,J),I=1,7),J=127,144)/
     *  150., .67800, 141., 120., 111.,   0.,   0.		     *  150., .67800, 141., 120., 111.,   0.,   0.
     *, 150., .70600, 141., 120., 221.,   0.,   0.		     *, 150., .70600, 141., 120., 221.,   0.,   0.
     *, 150., .73400, 141., 121., 110.,   0.,   0.		     *, 150., .73400, 141., 121., 110.,   0.,   0.
     *, 150., .76200, 141., 121., 220.,   0.,   0.		     *, 150., .76200, 141., 121., 220.,   0.,   0.
     *, 150., .79000, 141., 121., 111.,   0.,   0.		     *, 150., .79000, 141., 121., 111.,   0.,   0.
     *, 150., .81800, 141., 121., 221.,   0.,   0.		     *, 150., .81800, 141., 121., 221.,   0.,   0.
     *, 150., .83200, 140., 130.,-230.,   0.,   0.		     *, 150., .83200, 140., 130.,-230.,   0.,   0.
     *, 150., .84600, 140., 130.,-231.,   0.,   0.		     *, 150., .84600, 140., 130.,-231.,   0.,   0.
     *, 150., .86000, 140., 131.,-230.,   0.,   0.		     *, 150., .86000, 140., 131.,-230.,   0.,   0.
     *, 150., .87400, 140., 131.,-231.,   0.,   0.		     *, 150., .87400, 140., 131.,-231.,   0.,   0.
     *, 150., .88800, 141., 130.,-230.,   0.,   0.		     *, 150., .88800, 141., 130.,-230.,   0.,   0.
     *, 150., .90200, 141., 130.,-231.,   0.,   0.		     *, 150., .90200, 141., 130.,-231.,   0.,   0.
     *, 150., .91600, 141., 131.,-230.,   0.,   0.		     *, 150., .91600, 141., 131.,-230.,   0.,   0.
     *, 150., .93000, 141., 131.,-231.,   0.,   0.		     *, 150., .93000, 141., 131.,-231.,   0.,   0.
     *, 150., .93300, 140.,-140., 130.,   0.,   0.		     *, 150., .93300, 140.,-140., 130.,   0.,   0.
     *, 150., .93600, 140.,-140., 131.,   0.,   0.		     *, 150., .93600, 140.,-140., 131.,   0.,   0.
     *, 150., .93900, 140.,-141., 130.,   0.,   0.		     *, 150., .93900, 140.,-141., 130.,   0.,   0.
     *, 150., .94200, 140.,-141., 131.,   0.,   0./		     *, 150., .94200, 140.,-141., 131.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=145,162)/			      DATA ((DECTAB(I,J),I=1,7),J=145,162)/
     *  150., .94500, 141.,-140., 130.,   0.,   0.		     *  150., .94500, 141.,-140., 130.,   0.,   0.
     *, 150., .94800, 141.,-140., 131.,   0.,   0.		     *, 150., .94800, 141.,-140., 131.,   0.,   0.
     *, 150., .95100, 141.,-141., 130.,   0.,   0.		     *, 150., .95100, 141.,-141., 130.,   0.,   0.
     *, 150., .95400, 141.,-141., 131.,   0.,   0.		     *, 150., .95400, 141.,-141., 131.,   0.,   0.
     *, 150., .95700, 140.,-240., 230.,   0.,   0.		     *, 150., .95700, 140.,-240., 230.,   0.,   0.
     *, 150., .96000, 140.,-240., 231.,   0.,   0.		     *, 150., .96000, 140.,-240., 231.,   0.,   0.
     *, 150., .96300, 140.,-241., 230.,   0.,   0.		     *, 150., .96300, 140.,-241., 230.,   0.,   0.
     *, 150., .96600, 140.,-241., 231.,   0.,   0.		     *, 150., .96600, 140.,-241., 231.,   0.,   0.
     *, 150., .96900, 141.,-240., 230.,   0.,   0.		     *, 150., .96900, 141.,-240., 230.,   0.,   0.
     *, 150., .97200, 141.,-240., 231.,   0.,   0.		     *, 150., .97200, 141.,-240., 231.,   0.,   0.
     *, 150., .97500, 141.,-241., 230.,   0.,   0.		     *, 150., .97500, 141.,-241., 230.,   0.,   0.
     *, 150., .97800, 141.,-241., 231.,   0.,   0.		     *, 150., .97800, 141.,-241., 231.,   0.,   0.
     *, 150., .97950, 140.,-340., 330.,   0.,   0.		     *, 150., .97950, 140.,-340., 330.,   0.,   0.
     *, 150., .98100, 140.,-340., 331.,   0.,   0.		     *, 150., .98100, 140.,-340., 331.,   0.,   0.
     *, 150., .98250, 140.,-341., 331.,   0.,   0.		     *, 150., .98250, 140.,-341., 331.,   0.,   0.
     *, 150., .98400, 140.,-341., 331.,   0.,   0.		     *, 150., .98400, 140.,-341., 331.,   0.,   0.
     *, 150., .98550, 141.,-340., 330.,   0.,   0.		     *, 150., .98550, 141.,-340., 330.,   0.,   0.
     *, 150., .98700, 141.,-340., 331.,   0.,   0./		     *, 150., .98700, 141.,-340., 331.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=163,180)/			      DATA ((DECTAB(I,J),I=1,7),J=163,180)/
     *  150., .98850, 141.,-341., 331.,   0.,   0.		     *  150., .98850, 141.,-341., 331.,   0.,   0.
     *, 150., .99000, 141.,-341., 331.,   0.,   0.		     *, 150., .99000, 141.,-341., 331.,   0.,   0.
     *, 150., .99200, 441., 130., 110.,   0.,   0.		     *, 150., .99200, 441., 130., 110.,   0.,   0.
     *, 150., .99400, 441., 131., 110.,   0.,   0.		     *, 150., .99400, 441., 131., 110.,   0.,   0.
     *, 150., .99600, 441., 230., 120.,   0.,   0.		     *, 150., .99600, 441., 230., 120.,   0.,   0.
     *, 150., .99800, 441., 231., 120.,   0.,   0.		     *, 150., .99800, 441., 231., 120.,   0.,   0.
     *, 150., .99900, 441., 330., 130.,   0.,   0.		     *, 150., .99900, 441., 330., 130.,   0.,   0.
     *, 150.,1.00000, 441., 331., 130.,   0.,   0.		     *, 150.,1.00000, 441., 331., 130.,   0.,   0.
     *, 250., .06000, -12.,  11., 240.,   0.,   0.		     *, 250., .06000, -12.,  11., 240.,   0.,   0.
     *, 250., .12000, -12.,  11., 241.,   0.,   0.		     *, 250., .12000, -12.,  11., 241.,   0.,   0.
     *, 250., .18000, -14.,  13., 240.,   0.,   0.		     *, 250., .18000, -14.,  13., 240.,   0.,   0.
     *, 250., .24000, -14.,  13., 241.,   0.,   0.		     *, 250., .24000, -14.,  13., 241.,   0.,   0.
     *, 250., .25500, -16.,  15., 240.,   0.,   0.		     *, 250., .25500, -16.,  15., 240.,   0.,   0.
     *, 250., .27000, -16.,  15., 241.,   0.,   0.		     *, 250., .27000, -16.,  15., 241.,   0.,   0.
     *, 250., .28050, 240., 120.,   0.,   0.,   0.		     *, 250., .28050, 240., 120.,   0.,   0.,   0.
     *, 250., .29100, 240., 121.,   0.,   0.,   0.		     *, 250., .29100, 240., 121.,   0.,   0.,   0.
     *, 250., .30150, 241., 120.,   0.,   0.,   0.		     *, 250., .30150, 241., 120.,   0.,   0.,   0.
     *, 250., .31200, 241., 121.,   0.,   0.,   0./		     *, 250., .31200, 241., 121.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=181,198)/			      DATA ((DECTAB(I,J),I=1,7),J=181,198)/
     *  250., .32650, 240.,-340.,   0.,   0.,   0.		     *  250., .32650, 240.,-340.,   0.,   0.,   0.
     *, 250., .34100, 240.,-341.,   0.,   0.,   0.		     *, 250., .34100, 240.,-341.,   0.,   0.,   0.
     *, 250., .35550, 241.,-340.,   0.,   0.,   0.		     *, 250., .35550, 241.,-340.,   0.,   0.,   0.
     *, 250., .37000, 241.,-341.,   0.,   0.,   0.		     *, 250., .37000, 241.,-341.,   0.,   0.,   0.
     *, 250., .39800, 240., 120., 110.,   0.,   0.		     *, 250., .39800, 240., 120., 110.,   0.,   0.
     *, 250., .42600, 240., 120., 220.,   0.,   0.		     *, 250., .42600, 240., 120., 220.,   0.,   0.
     *, 250., .45400, 240., 120., 111.,   0.,   0.		     *, 250., .45400, 240., 120., 111.,   0.,   0.
     *, 250., .48200, 240., 120., 221.,   0.,   0.		     *, 250., .48200, 240., 120., 221.,   0.,   0.
     *, 250., .51000, 240., 121., 110.,   0.,   0.		     *, 250., .51000, 240., 121., 110.,   0.,   0.
     *, 250., .53800, 240., 121., 220.,   0.,   0.		     *, 250., .53800, 240., 121., 220.,   0.,   0.
     *, 250., .56600, 240., 121., 111.,   0.,   0.		     *, 250., .56600, 240., 121., 111.,   0.,   0.
     *, 250., .59400, 240., 121., 221.,   0.,   0.		     *, 250., .59400, 240., 121., 221.,   0.,   0.
     *, 250., .62200, 241., 120., 110.,   0.,   0.		     *, 250., .62200, 241., 120., 110.,   0.,   0.
     *, 250., .65000, 241., 120., 220.,   0.,   0.		     *, 250., .65000, 241., 120., 220.,   0.,   0.
     *, 250., .67800, 241., 120., 111.,   0.,   0.		     *, 250., .67800, 241., 120., 111.,   0.,   0.
     *, 250., .70600, 241., 120., 221.,   0.,   0.		     *, 250., .70600, 241., 120., 221.,   0.,   0.
     *, 250., .73400, 241., 121., 110.,   0.,   0.		     *, 250., .73400, 241., 121., 110.,   0.,   0.
     *, 250., .76200, 241., 121., 220.,   0.,   0./		     *, 250., .76200, 241., 121., 220.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=199,216)/			      DATA ((DECTAB(I,J),I=1,7),J=199,216)/
     *  250., .79000, 241., 121., 111.,   0.,   0.		     *  250., .79000, 241., 121., 111.,   0.,   0.
     *, 250., .81800, 241., 121., 221.,   0.,   0.		     *, 250., .81800, 241., 121., 221.,   0.,   0.
     *, 250., .83200, 240., 130.,-230.,   0.,   0.		     *, 250., .83200, 240., 130.,-230.,   0.,   0.
     *, 250., .84600, 240., 130.,-231.,   0.,   0.		     *, 250., .84600, 240., 130.,-231.,   0.,   0.
     *, 250., .86000, 240., 131.,-230.,   0.,   0.		     *, 250., .86000, 240., 131.,-230.,   0.,   0.
     *, 250., .87400, 240., 131.,-231.,   0.,   0.		     *, 250., .87400, 240., 131.,-231.,   0.,   0.
     *, 250., .88800, 241., 130.,-230.,   0.,   0.		     *, 250., .88800, 241., 130.,-230.,   0.,   0.
     *, 250., .90200, 241., 130.,-231.,   0.,   0.		     *, 250., .90200, 241., 130.,-231.,   0.,   0.
     *, 250., .91600, 241., 131.,-230.,   0.,   0.		     *, 250., .91600, 241., 131.,-230.,   0.,   0.
     *, 250., .93000, 241., 131.,-231.,   0.,   0.		     *, 250., .93000, 241., 131.,-231.,   0.,   0.
     *, 250., .93300, 240.,-140., 130.,   0.,   0.		     *, 250., .93300, 240.,-140., 130.,   0.,   0.
     *, 250., .93600, 240.,-140., 131.,   0.,   0.		     *, 250., .93600, 240.,-140., 131.,   0.,   0.
     *, 250., .93900, 240.,-141., 130.,   0.,   0.		     *, 250., .93900, 240.,-141., 130.,   0.,   0.
     *, 250., .94200, 240.,-141., 131.,   0.,   0.		     *, 250., .94200, 240.,-141., 131.,   0.,   0.
     *, 250., .94500, 241.,-140., 130.,   0.,   0.		     *, 250., .94500, 241.,-140., 130.,   0.,   0.
     *, 250., .94800, 241.,-140., 131.,   0.,   0.		     *, 250., .94800, 241.,-140., 131.,   0.,   0.
     *, 250., .95100, 241.,-141., 130.,   0.,   0.		     *, 250., .95100, 241.,-141., 130.,   0.,   0.
     *, 250., .95400, 241.,-141., 131.,   0.,   0./		     *, 250., .95400, 241.,-141., 131.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=217,234)/			      DATA ((DECTAB(I,J),I=1,7),J=217,234)/
     *  250., .95700, 240.,-240., 230.,   0.,   0.		     *  250., .95700, 240.,-240., 230.,   0.,   0.
     *, 250., .96000, 240.,-240., 231.,   0.,   0.		     *, 250., .96000, 240.,-240., 231.,   0.,   0.
     *, 250., .96300, 240.,-241., 230.,   0.,   0.		     *, 250., .96300, 240.,-241., 230.,   0.,   0.
     *, 250., .96600, 240.,-241., 231.,   0.,   0.		     *, 250., .96600, 240.,-241., 231.,   0.,   0.
     *, 250., .96900, 241.,-240., 230.,   0.,   0.		     *, 250., .96900, 241.,-240., 230.,   0.,   0.
     *, 250., .97200, 241.,-240., 231.,   0.,   0.		     *, 250., .97200, 241.,-240., 231.,   0.,   0.
     *, 250., .97500, 241.,-241., 230.,   0.,   0.		     *, 250., .97500, 241.,-241., 230.,   0.,   0.
     *, 250., .97800, 241.,-241., 231.,   0.,   0.		     *, 250., .97800, 241.,-241., 231.,   0.,   0.
     *, 250., .97950, 240.,-340., 330.,   0.,   0.		     *, 250., .97950, 240.,-340., 330.,   0.,   0.
     *, 250., .98100, 240.,-340., 331.,   0.,   0.		     *, 250., .98100, 240.,-340., 331.,   0.,   0.
     *, 250., .98250, 240.,-341., 331.,   0.,   0.		     *, 250., .98250, 240.,-341., 331.,   0.,   0.
     *, 250., .98400, 240.,-341., 331.,   0.,   0.		     *, 250., .98400, 240.,-341., 331.,   0.,   0.
     *, 250., .98550, 241.,-340., 330.,   0.,   0.		     *, 250., .98550, 241.,-340., 330.,   0.,   0.
     *, 250., .98700, 241.,-340., 331.,   0.,   0.		     *, 250., .98700, 241.,-340., 331.,   0.,   0.
     *, 250., .98850, 241.,-341., 331.,   0.,   0.		     *, 250., .98850, 241.,-341., 331.,   0.,   0.
     *, 250., .99000, 241.,-341., 331.,   0.,   0.		     *, 250., .99000, 241.,-341., 331.,   0.,   0.
     *, 250., .99200, 441., 130.,-120.,   0.,   0.		     *, 250., .99200, 441., 130.,-120.,   0.,   0.
     *, 250., .99400, 441., 131.,-120.,   0.,   0./		     *, 250., .99400, 441., 131.,-120.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=235,252)/			      DATA ((DECTAB(I,J),I=1,7),J=235,252)/
     *  250., .99600, 441., 230., 220.,   0.,   0.		     *  250., .99600, 441., 230., 220.,   0.,   0.
     *, 250., .99800, 441., 231., 221.,   0.,   0.		     *, 250., .99800, 441., 231., 221.,   0.,   0.
     *, 250., .99900, 441., 330., 230.,   0.,   0.		     *, 250., .99900, 441., 330., 230.,   0.,   0.
     *, 250.,1.00000, 441., 331., 230.,   0.,   0.		     *, 250.,1.00000, 441., 331., 230.,   0.,   0.
     *, 350., .06000, -12.,  11., 340.,   0.,   0.		     *, 350., .06000, -12.,  11., 340.,   0.,   0.
     *, 350., .12000, -12.,  11., 341.,   0.,   0.		     *, 350., .12000, -12.,  11., 341.,   0.,   0.
     *, 350., .18000, -14.,  13., 340.,   0.,   0.		     *, 350., .18000, -14.,  13., 340.,   0.,   0.
     *, 350., .24000, -14.,  13., 341.,   0.,   0.		     *, 350., .24000, -14.,  13., 341.,   0.,   0.
     *, 350., .25500, -16.,  15., 340.,   0.,   0.		     *, 350., .25500, -16.,  15., 340.,   0.,   0.
     *, 350., .27000, -16.,  15., 341.,   0.,   0.		     *, 350., .27000, -16.,  15., 341.,   0.,   0.
     *, 350., .28050, 340., 120.,   0.,   0.,   0.		     *, 350., .28050, 340., 120.,   0.,   0.,   0.
     *, 350., .29100, 340., 121.,   0.,   0.,   0.		     *, 350., .29100, 340., 121.,   0.,   0.,   0.
     *, 350., .30150, 341., 120.,   0.,   0.,   0.		     *, 350., .30150, 341., 120.,   0.,   0.,   0.
     *, 350., .31200, 341., 121.,   0.,   0.,   0.		     *, 350., .31200, 341., 121.,   0.,   0.,   0.
     *, 350., .32650, 340.,-340.,   0.,   0.,   0.		     *, 350., .32650, 340.,-340.,   0.,   0.,   0.
     *, 350., .34100, 340.,-341.,   0.,   0.,   0.		     *, 350., .34100, 340.,-341.,   0.,   0.,   0.
     *, 350., .35550, 341.,-340.,   0.,   0.,   0.		     *, 350., .35550, 341.,-340.,   0.,   0.,   0.
     *, 350., .37000, 341.,-341.,   0.,   0.,   0./		     *, 350., .37000, 341.,-341.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=253,270)/			      DATA ((DECTAB(I,J),I=1,7),J=253,270)/
     *  350., .39800, 340., 120., 110.,   0.,   0.		     *  350., .39800, 340., 120., 110.,   0.,   0.
     *, 350., .42600, 340., 120., 220.,   0.,   0.		     *, 350., .42600, 340., 120., 220.,   0.,   0.
     *, 350., .45400, 340., 120., 111.,   0.,   0.		     *, 350., .45400, 340., 120., 111.,   0.,   0.
     *, 350., .48200, 340., 120., 221.,   0.,   0.		     *, 350., .48200, 340., 120., 221.,   0.,   0.
     *, 350., .51000, 340., 121., 110.,   0.,   0.		     *, 350., .51000, 340., 121., 110.,   0.,   0.
     *, 350., .53800, 340., 121., 220.,   0.,   0.		     *, 350., .53800, 340., 121., 220.,   0.,   0.
     *, 350., .56600, 340., 121., 111.,   0.,   0.		     *, 350., .56600, 340., 121., 111.,   0.,   0.
     *, 350., .59400, 340., 121., 221.,   0.,   0.		     *, 350., .59400, 340., 121., 221.,   0.,   0.
     *, 350., .62200, 341., 120., 110.,   0.,   0.		     *, 350., .62200, 341., 120., 110.,   0.,   0.
     *, 350., .65000, 341., 120., 220.,   0.,   0.		     *, 350., .65000, 341., 120., 220.,   0.,   0.
     *, 350., .67800, 341., 120., 111.,   0.,   0.		     *, 350., .67800, 341., 120., 111.,   0.,   0.
     *, 350., .70600, 341., 120., 221.,   0.,   0.		     *, 350., .70600, 341., 120., 221.,   0.,   0.
     *, 350., .73400, 341., 121., 110.,   0.,   0.		     *, 350., .73400, 341., 121., 110.,   0.,   0.
     *, 350., .76200, 341., 121., 220.,   0.,   0.		     *, 350., .76200, 341., 121., 220.,   0.,   0.
     *, 350., .79000, 341., 121., 111.,   0.,   0.		     *, 350., .79000, 341., 121., 111.,   0.,   0.
     *, 350., .81800, 341., 121., 221.,   0.,   0.		     *, 350., .81800, 341., 121., 221.,   0.,   0.
     *, 350., .83200, 340., 130.,-230.,   0.,   0.		     *, 350., .83200, 340., 130.,-230.,   0.,   0.
     *, 350., .84600, 340., 130.,-231.,   0.,   0./		     *, 350., .84600, 340., 130.,-231.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=271,288)/			      DATA ((DECTAB(I,J),I=1,7),J=271,288)/
     *  350., .86000, 340., 131.,-230.,   0.,   0.		     *  350., .86000, 340., 131.,-230.,   0.,   0.
     *, 350., .87400, 340., 131.,-231.,   0.,   0.		     *, 350., .87400, 340., 131.,-231.,   0.,   0.
     *, 350., .88800, 341., 130.,-230.,   0.,   0.		     *, 350., .88800, 341., 130.,-230.,   0.,   0.
     *, 350., .90200, 341., 130.,-231.,   0.,   0.		     *, 350., .90200, 341., 130.,-231.,   0.,   0.
     *, 350., .91600, 341., 131.,-230.,   0.,   0.		     *, 350., .91600, 341., 131.,-230.,   0.,   0.
     *, 350., .93000, 341., 131.,-231.,   0.,   0.		     *, 350., .93000, 341., 131.,-231.,   0.,   0.
     *, 350., .93300, 340.,-140., 130.,   0.,   0.		     *, 350., .93300, 340.,-140., 130.,   0.,   0.
     *, 350., .93600, 340.,-140., 131.,   0.,   0.		     *, 350., .93600, 340.,-140., 131.,   0.,   0.
     *, 350., .93900, 340.,-141., 130.,   0.,   0.		     *, 350., .93900, 340.,-141., 130.,   0.,   0.
     *, 350., .94200, 340.,-141., 131.,   0.,   0.		     *, 350., .94200, 340.,-141., 131.,   0.,   0.
     *, 350., .94500, 341.,-140., 130.,   0.,   0.		     *, 350., .94500, 341.,-140., 130.,   0.,   0.
     *, 350., .94800, 341.,-140., 131.,   0.,   0.		     *, 350., .94800, 341.,-140., 131.,   0.,   0.
     *, 350., .95100, 341.,-141., 130.,   0.,   0.		     *, 350., .95100, 341.,-141., 130.,   0.,   0.
     *, 350., .95400, 341.,-141., 131.,   0.,   0.		     *, 350., .95400, 341.,-141., 131.,   0.,   0.
     *, 350., .95700, 340.,-240., 230.,   0.,   0.		     *, 350., .95700, 340.,-240., 230.,   0.,   0.
     *, 350., .96000, 340.,-240., 231.,   0.,   0.		     *, 350., .96000, 340.,-240., 231.,   0.,   0.
     *, 350., .96300, 340.,-241., 230.,   0.,   0.		     *, 350., .96300, 340.,-241., 230.,   0.,   0.
     *, 350., .96600, 340.,-241., 231.,   0.,   0./		     *, 350., .96600, 340.,-241., 231.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=289,306)/			      DATA ((DECTAB(I,J),I=1,7),J=289,306)/
     *  350., .96900, 341.,-240., 230.,   0.,   0.		     *  350., .96900, 341.,-240., 230.,   0.,   0.
     *, 350., .97200, 341.,-240., 231.,   0.,   0.		     *, 350., .97200, 341.,-240., 231.,   0.,   0.
     *, 350., .97500, 341.,-241., 230.,   0.,   0.		     *, 350., .97500, 341.,-241., 230.,   0.,   0.
     *, 350., .97800, 341.,-241., 231.,   0.,   0.		     *, 350., .97800, 341.,-241., 231.,   0.,   0.
     *, 350., .97950, 340.,-340., 330.,   0.,   0.		     *, 350., .97950, 340.,-340., 330.,   0.,   0.
     *, 350., .98100, 340.,-340., 331.,   0.,   0.		     *, 350., .98100, 340.,-340., 331.,   0.,   0.
     *, 350., .98250, 340.,-341., 331.,   0.,   0.		     *, 350., .98250, 340.,-341., 331.,   0.,   0.
     *, 350., .98400, 340.,-341., 331.,   0.,   0.		     *, 350., .98400, 340.,-341., 331.,   0.,   0.
     *, 350., .98550, 341.,-340., 330.,   0.,   0.		     *, 350., .98550, 341.,-340., 330.,   0.,   0.
     *, 350., .98700, 341.,-340., 331.,   0.,   0.		     *, 350., .98700, 341.,-340., 331.,   0.,   0.
     *, 350., .98850, 341.,-341., 331.,   0.,   0.		     *, 350., .98850, 341.,-341., 331.,   0.,   0.
     *, 350., .99000, 341.,-341., 331.,   0.,   0.		     *, 350., .99000, 341.,-341., 331.,   0.,   0.
     *, 350., .99200, 441., 130.,-130.,   0.,   0.		     *, 350., .99200, 441., 130.,-130.,   0.,   0.
     *, 350., .99400, 441., 131.,-130.,   0.,   0.		     *, 350., .99400, 441., 131.,-130.,   0.,   0.
     *, 350., .99600, 441., 230.,-230.,   0.,   0.		     *, 350., .99600, 441., 230.,-230.,   0.,   0.
     *, 350., .99800, 441., 231.,-230.,   0.,   0.		     *, 350., .99800, 441., 231.,-230.,   0.,   0.
     *, 350., .99900, 441., 330., 330.,   0.,   0.		     *, 350., .99900, 441., 330., 330.,   0.,   0.
     *, 350.,1.00000, 441., 331., 331.,   0.,   0./		     *, 350.,1.00000, 441., 331., 331.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=307,324)/			      DATA ((DECTAB(I,J),I=1,7),J=307,324)/
     *  160., .33330,  -1.,   2.,  -5.,   0.,   0.		     *  160., .33330,  -1.,   2.,  -5.,   0.,   0.
     *, 160., .66660,  -4.,   3.,  -5.,   0.,   0.		     *, 160., .66660,  -4.,   3.,  -5.,   0.,   0.
     *, 160., .77770, -11.,  12.,  -5.,   0.,   0.		     *, 160., .77770, -11.,  12.,  -5.,   0.,   0.
     *, 160., .88880, -13.,  14.,  -5.,   0.,   0.		     *, 160., .88880, -13.,  14.,  -5.,   0.,   0.
     *, 160.,1.00000, -15.,  16.,  -5.,   0.,   0.		     *, 160.,1.00000, -15.,  16.,  -5.,   0.,   0.
     *, 260., .33330,  -1.,   2.,  -5.,   0.,   0.		     *, 260., .33330,  -1.,   2.,  -5.,   0.,   0.
     *, 260., .66660,  -4.,   3.,  -5.,   0.,   0.		     *, 260., .66660,  -4.,   3.,  -5.,   0.,   0.
     *, 260., .77770, -11.,  12.,  -5.,   0.,   0.		     *, 260., .77770, -11.,  12.,  -5.,   0.,   0.
     *, 260., .88880, -13.,  14.,  -5.,   0.,   0.		     *, 260., .88880, -13.,  14.,  -5.,   0.,   0.
     *, 260.,1.00000, -15.,  16.,  -5.,   0.,   0.		     *, 260.,1.00000, -15.,  16.,  -5.,   0.,   0.
     *, 360., .33330,  -1.,   2.,  -5.,   0.,   0.		     *, 360., .33330,  -1.,   2.,  -5.,   0.,   0.
     *, 360., .66660,  -4.,   3.,  -5.,   0.,   0.		     *, 360., .66660,  -4.,   3.,  -5.,   0.,   0.
     *, 360., .77770, -11.,  12.,  -5.,   0.,   0.		     *, 360., .77770, -11.,  12.,  -5.,   0.,   0.
     *, 360., .88880, -13.,  14.,  -5.,   0.,   0.		     *, 360., .88880, -13.,  14.,  -5.,   0.,   0.
     *, 360.,1.00000, -15.,  16.,  -5.,   0.,   0.		     *, 360.,1.00000, -15.,  16.,  -5.,   0.,   0.
     *, 151.,1.00000, 150.,  10.,   0.,   0.,   0.		     *, 151.,1.00000, 150.,  10.,   0.,   0.,   0.
     *, 251.,1.00000, 250.,  10.,   0.,   0.,   0.		     *, 251.,1.00000, 250.,  10.,   0.,   0.,   0.
     *, 351.,1.00000, 350.,  10.,   0.,   0.,   0./		     *, 351.,1.00000, 350.,  10.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=325,342)/			      DATA ((DECTAB(I,J),I=1,7),J=325,342)/
     *  161.,1.00000, 160.,  10.,   0.,   0.,   0.		     *  161.,1.00000, 160.,  10.,   0.,   0.,   0.
     *, 261.,1.00000, 260.,  10.,   0.,   0.,   0.		     *, 261.,1.00000, 260.,  10.,   0.,   0.,   0.
     *, 361.,1.00000, 360.,  10.,   0.,   0.,   0.		     *, 361.,1.00000, 360.,  10.,   0.,   0.,   0.
     *,1230.,1.00000,2130.,  10.,   0.,   0.,   0.		     *,1230.,1.00000,2130.,  10.,   0.,   0.,   0.
     *,1111.,1.00000,1120., 120.,   0.,   0.,   0.		     *,1111.,1.00000,1120., 120.,   0.,   0.,   0.
     *,1121., .66670,1120., 110.,   0.,   0.,   0.		     *,1121., .66670,1120., 110.,   0.,   0.,   0.
     *,1121.,1.00000,1220., 120.,   0.,   0.,   0.		     *,1121.,1.00000,1220., 120.,   0.,   0.,   0.
     *,1221., .66670,1220., 110.,   0.,   0.,   0.		     *,1221., .66670,1220., 110.,   0.,   0.,   0.
     *,1221.,1.00000,1120.,-120.,   0.,   0.,   0.		     *,1221.,1.00000,1120.,-120.,   0.,   0.,   0.
     *,2221.,1.00000,1220.,-120.,   0.,   0.,   0.		     *,2221.,1.00000,1220.,-120.,   0.,   0.,   0.
     *,1131., .88000,2130., 120.,   0.,   0.,   0.		     *,1131., .88000,2130., 120.,   0.,   0.,   0.
     *,1131., .94000,1130., 110.,   0.,   0.,   0.		     *,1131., .94000,1130., 110.,   0.,   0.,   0.
     *,1131.,1.00000,1230., 120.,   0.,   0.,   0.		     *,1131.,1.00000,1230., 120.,   0.,   0.,   0.
     *,1231., .88000,2130., 110.,   0.,   0.,   0.		     *,1231., .88000,2130., 110.,   0.,   0.,   0.
     *,1231., .94000,1130.,-120.,   0.,   0.,   0.		     *,1231., .94000,1130.,-120.,   0.,   0.,   0.
     *,1231.,1.00000,2230., 120.,   0.,   0.,   0.		     *,1231.,1.00000,2230., 120.,   0.,   0.,   0.
     *,2231., .88000,2130.,-120.,   0.,   0.,   0.		     *,2231., .88000,2130.,-120.,   0.,   0.,   0.
     *,2231., .94000,1230.,-120.,   0.,   0.,   0./		     *,2231., .94000,1230.,-120.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=343,360)/			      DATA ((DECTAB(I,J),I=1,7),J=343,360)/
     * 2231.,1.00000,2230., 110.,   0.,   0.,   0.		     * 2231.,1.00000,2230., 110.,   0.,   0.,   0.
     *,1331., .66670,2330., 120.,   0.,   0.,   0.		     *,1331., .66670,2330., 120.,   0.,   0.,   0.
     *,1331.,1.00000,1330., 110.,   0.,   0.,   0.		     *,1331.,1.00000,1330., 110.,   0.,   0.,   0.
     *,2331., .66670,1330.,-120.,   0.,   0.,   0.		     *,2331., .66670,1330.,-120.,   0.,   0.,   0.
     *,2331.,1.00000,2330., 110.,   0.,   0.,   0.		     *,2331.,1.00000,2330., 110.,   0.,   0.,   0.
     *,  16., .18000,  12., -11.,  15.,   0.,   0.		     *,  16., .18000,  12., -11.,  15.,   0.,   0.
     *,  16., .36000,  14., -13.,  15.,   0.,   0.		     *,  16., .36000,  14., -13.,  15.,   0.,   0.
     *,  16., .45100,-120.,  15.,   0.,   0.,   0.		     *,  16., .45100,-120.,  15.,   0.,   0.,   0.
     *,  16., .66000,-121.,  15.,   0.,   0.,   0.		     *,  16., .66000,-121.,  15.,   0.,   0.,   0.
     *,  16., .78000, 110., 110.,-120.,  15.,   0.		     *,  16., .78000, 110., 110.,-120.,  15.,   0.
     *,  16., .83600, 120.,-120.,-120.,  15.,   0.		     *,  16., .83600, 120.,-120.,-120.,  15.,   0.
     *,  16.,1.00000, 120., 110.,-120.,-120.,  15.		     *,  16.,1.00000, 120., 110.,-120.,-120.,  15.
     *,2140., .03750, -12.,  11.,2130.,   0.,   0.		     *,2140., .03750, -12.,  11.,2130.,   0.,   0.
     *,2140., .07500, -12.,  11.,1231.,   0.,   0.		     *,2140., .07500, -12.,  11.,1231.,   0.,   0.
     *,2140., .11250, -14.,  13.,2130.,   0.,   0.		     *,2140., .11250, -14.,  13.,2130.,   0.,   0.
     *,2140., .15000, -14.,  13.,1231.,   0.,   0.		     *,2140., .15000, -14.,  13.,1231.,   0.,   0.
     *,2140., .18200,2130., 120.,   0.,   0.,   0.		     *,2140., .18200,2130., 120.,   0.,   0.,   0.
     *,2140., .21300,1230., 110.,   0.,   0.,   0./		     *,2140., .21300,1230., 110.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=361,378)/			      DATA ((DECTAB(I,J),I=1,7),J=361,378)/
     * 2140., .24400,1120.,-230.,   0.,   0.,   0.		     * 2140., .24400,1120.,-230.,   0.,   0.,   0.
     *,2140., .29500,1131., 110.,   0.,   0.,   0.		     *,2140., .29500,1131., 110.,   0.,   0.,   0.
     *,2140., .34600,1231., 120.,   0.,   0.,   0.		     *,2140., .34600,1231., 120.,   0.,   0.,   0.
     *,2140., .39700,1121.,-230.,   0.,   0.,   0.		     *,2140., .39700,1121.,-230.,   0.,   0.,   0.
     *,2140., .44800,1111.,-130.,   0.,   0.,   0.		     *,2140., .44800,1111.,-130.,   0.,   0.,   0.
     *,2140., .49900,1130., 111.,   0.,   0.,   0.		     *,2140., .49900,1130., 111.,   0.,   0.,   0.
     *,2140., .55000,1230., 121.,   0.,   0.,   0.		     *,2140., .55000,1230., 121.,   0.,   0.,   0.
     *,2140., .60100,1120.,-231.,   0.,   0.,   0.		     *,2140., .60100,1120.,-231.,   0.,   0.,   0.
     *,2140., .65800,1120.,-230., 120.,-120.,   0.		     *,2140., .65800,1120.,-230., 120.,-120.,   0.
     *,2140., .71500,1120.,-230., 110., 110.,   0.		     *,2140., .71500,1120.,-230., 110., 110.,   0.
     *,2140., .77200,1120.,-130., 120., 110.,   0.		     *,2140., .77200,1120.,-130., 120., 110.,   0.
     *,2140., .82900,1220.,-230., 120., 110.,   0.		     *,2140., .82900,1220.,-230., 120., 110.,   0.
     *,2140., .88600,1220.,-130., 120., 120.,   0.		     *,2140., .88600,1220.,-130., 120., 120.,   0.
     *,2140., .94300,2130., 120., 120.,-120.,   0.		     *,2140., .94300,2130., 120., 120.,-120.,   0.
     *,2140.,1.00000,2130., 120., 110., 110.,   0.		     *,2140.,1.00000,2130., 120., 110., 110.,   0.
     *,1140.,1.00000,2140., 120.,   0.,   0.,   0.		     *,1140.,1.00000,2140., 120.,   0.,   0.,   0.
     *,1240.,1.00000,2140., 110.,   0.,   0.,   0.		     *,1240.,1.00000,2140., 110.,   0.,   0.,   0.
     *,2240.,1.00000,2140.,-120.,   0.,   0.,   0./		     *,2240.,1.00000,2140.,-120.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=379,396)/			      DATA ((DECTAB(I,J),I=1,7),J=379,396)/
     * 1340., .03750, -12.,  11.,1330.,   0.,   0.		     * 1340., .03750, -12.,  11.,1330.,   0.,   0.
     *,1340., .07500, -12.,  11.,1331.,   0.,   0.		     *,1340., .07500, -12.,  11.,1331.,   0.,   0.
     *,1340., .11250, -14.,  13.,1330.,   0.,   0.		     *,1340., .11250, -14.,  13.,1330.,   0.,   0.
     *,1340., .15000, -14.,  13.,1331.,   0.,   0.		     *,1340., .15000, -14.,  13.,1331.,   0.,   0.
     *,1340., .19900,1330., 120.,   0.,   0.,   0.		     *,1340., .19900,1330., 120.,   0.,   0.,   0.
     *,1340., .24800,1231.,-230.,   0.,   0.,   0.		     *,1340., .24800,1231.,-230.,   0.,   0.,   0.
     *,1340., .28800,1330., 120.,   0.,   0.,   0.		     *,1340., .28800,1330., 120.,   0.,   0.,   0.
     *,1340., .32800,1131.,-230.,   0.,   0.,   0.		     *,1340., .32800,1131.,-230.,   0.,   0.,   0.
     *,1340., .36800,1330., 121.,   0.,   0.,   0.		     *,1340., .36800,1330., 121.,   0.,   0.,   0.
     *,1340., .40800,1130.,-230.,   0.,   0.,   0.		     *,1340., .40800,1130.,-230.,   0.,   0.,   0.
     *,1340., .44800,1330., 120., 110.,   0.,   0.		     *,1340., .44800,1330., 120., 110.,   0.,   0.
     *,1340., .48800,2330., 120., 120.,   0.,   0.		     *,1340., .48800,2330., 120., 120.,   0.,   0.
     *,1340., .52800,1130.,-130., 120.,   0.,   0.		     *,1340., .52800,1130.,-130., 120.,   0.,   0.
     *,1340., .56800,1130.,-230., 110.,   0.,   0.		     *,1340., .56800,1130.,-230., 110.,   0.,   0.
     *,1340., .60800,1230.,-230., 120.,   0.,   0.		     *,1340., .60800,1230.,-230., 120.,   0.,   0.
     *,1340., .66400,2130.,-230., 120., 110.,   0.		     *,1340., .66400,2130.,-230., 120., 110.,   0.
     *,1340., .72000,2130.,-130., 120., 120.,   0.		     *,1340., .72000,2130.,-130., 120., 120.,   0.
     *,1340., .77600,1130.,-230., 120., 120.,   0./		     *,1340., .77600,1130.,-230., 120., 120.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=397,414)/			      DATA ((DECTAB(I,J),I=1,7),J=397,414)/
     * 1340., .83200,1130.,-230., 110., 110.,   0.		     * 1340., .83200,1130.,-230., 110., 110.,   0.
     *,1340., .88800,1330., 120., 120.,-120.,   0.		     *,1340., .88800,1330., 120., 120.,-120.,   0.
     *,1340., .94400,1330., 120., 110., 110.,   0.		     *,1340., .94400,1330., 120., 110., 110.,   0.
     *,1340.,1.00000,2330., 120., 120., 110.,   0.		     *,1340.,1.00000,2330., 120., 120., 110.,   0.
     *,3140., .03750, -12.,  11.,1330.,   0.,   0.		     *,3140., .03750, -12.,  11.,1330.,   0.,   0.
     *,3140., .07500, -12.,  11.,1331.,   0.,   0.		     *,3140., .07500, -12.,  11.,1331.,   0.,   0.
     *,3140., .11250, -14.,  13.,1330.,   0.,   0.		     *,3140., .11250, -14.,  13.,1330.,   0.,   0.
     *,3140., .15000, -14.,  13.,1331.,   0.,   0.		     *,3140., .15000, -14.,  13.,1331.,   0.,   0.
     *,3140., .19900,1330., 120.,   0.,   0.,   0.		     *,3140., .19900,1330., 120.,   0.,   0.,   0.
     *,3140., .24800,1231.,-230.,   0.,   0.,   0.		     *,3140., .24800,1231.,-230.,   0.,   0.,   0.
     *,3140., .28800,1330., 120.,   0.,   0.,   0.		     *,3140., .28800,1330., 120.,   0.,   0.,   0.
     *,3140., .32800,1131.,-230.,   0.,   0.,   0.		     *,3140., .32800,1131.,-230.,   0.,   0.,   0.
     *,3140., .36800,1330., 121.,   0.,   0.,   0.		     *,3140., .36800,1330., 121.,   0.,   0.,   0.
     *,3140., .40800,1130.,-230.,   0.,   0.,   0.		     *,3140., .40800,1130.,-230.,   0.,   0.,   0.
     *,3140., .44800,1330., 120., 110.,   0.,   0.		     *,3140., .44800,1330., 120., 110.,   0.,   0.
     *,3140., .48800,2330., 120., 120.,   0.,   0.		     *,3140., .48800,2330., 120., 120.,   0.,   0.
     *,3140., .52800,1130.,-130., 120.,   0.,   0.		     *,3140., .52800,1130.,-130., 120.,   0.,   0.
     *,3140., .56800,1130.,-230., 110.,   0.,   0./		     *,3140., .56800,1130.,-230., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=415,432)/			      DATA ((DECTAB(I,J),I=1,7),J=415,432)/
     * 3140., .60800,1230.,-230., 120.,   0.,   0.		     * 3140., .60800,1230.,-230., 120.,   0.,   0.
     *,3140., .66400,2130.,-230., 120., 110.,   0.		     *,3140., .66400,2130.,-230., 120., 110.,   0.
     *,3140., .72000,2130.,-130., 120., 120.,   0.		     *,3140., .72000,2130.,-130., 120., 120.,   0.
     *,3140., .77600,1130.,-230., 120., 120.,   0.		     *,3140., .77600,1130.,-230., 120., 120.,   0.
     *,3140., .83200,1130.,-230., 110., 110.,   0.		     *,3140., .83200,1130.,-230., 110., 110.,   0.
     *,3140., .88800,1330., 120., 120.,-120.,   0.		     *,3140., .88800,1330., 120., 120.,-120.,   0.
     *,3140., .94400,1330., 120., 110., 110.,   0.		     *,3140., .94400,1330., 120., 110., 110.,   0.
     *,3140.,1.00000,2330., 120., 120., 110.,   0.		     *,3140.,1.00000,2330., 120., 120., 110.,   0.
     *,2340., .03750, -12.,  11.,2330.,   0.,   0.		     *,2340., .03750, -12.,  11.,2330.,   0.,   0.
     *,2340., .07500, -12.,  11.,2331.,   0.,   0.		     *,2340., .07500, -12.,  11.,2331.,   0.,   0.
     *,2340., .11250, -14.,  13.,2330.,   0.,   0.		     *,2340., .11250, -14.,  13.,2330.,   0.,   0.
     *,2340., .15000, -14.,  13.,2331.,   0.,   0.		     *,2340., .15000, -14.,  13.,2331.,   0.,   0.
     *,2340., .17500,2330., 120.,   0.,   0.,   0.		     *,2340., .17500,2330., 120.,   0.,   0.,   0.
     *,2340., .20000,1330., 110.,   0.,   0.,   0.		     *,2340., .20000,1330., 110.,   0.,   0.,   0.
     *,2340., .22500,1130.,-130.,   0.,   0.,   0.		     *,2340., .22500,1130.,-130.,   0.,   0.,   0.
     *,2340., .25000,1230.,-230.,   0.,   0.,   0.		     *,2340., .25000,1230.,-230.,   0.,   0.,   0.
     *,2340., .29500,2331., 120.,   0.,   0.,   0.		     *,2340., .29500,2331., 120.,   0.,   0.,   0.
     *,2340., .34000,1331., 110.,   0.,   0.,   0./		     *,2340., .34000,1331., 110.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=433,450)/			      DATA ((DECTAB(I,J),I=1,7),J=433,450)/
     * 2340., .38500,1131.,-130.,   0.,   0.,   0.		     * 2340., .38500,1131.,-130.,   0.,   0.,   0.
     *,2340., .43000,1231.,-230.,   0.,   0.,   0.		     *,2340., .43000,1231.,-230.,   0.,   0.,   0.
     *,2340., .47500,2330., 121.,   0.,   0.,   0.		     *,2340., .47500,2330., 121.,   0.,   0.,   0.
     *,2340., .52000,1330., 111.,   0.,   0.,   0.		     *,2340., .52000,1330., 111.,   0.,   0.,   0.
     *,2340., .56500,1130.,-131.,   0.,   0.,   0.		     *,2340., .56500,1130.,-131.,   0.,   0.,   0.
     *,2340., .61000,1230.,-231.,   0.,   0.,   0.		     *,2340., .61000,1230.,-231.,   0.,   0.,   0.
     *,2340., .64900,2130.,-230., 120.,-120.,   0.		     *,2340., .64900,2130.,-230., 120.,-120.,   0.
     *,2340., .68800,2130.,-230., 110., 110.,   0.		     *,2340., .68800,2130.,-230., 110., 110.,   0.
     *,2340., .72700,2130.,-130., 120., 110.,   0.		     *,2340., .72700,2130.,-130., 120., 110.,   0.
     *,2340., .76600,1130.,-230.,-120., 110.,   0.		     *,2340., .76600,1130.,-230.,-120., 110.,   0.
     *,2340., .80500,1130.,-130., 120.,-120.,   0.		     *,2340., .80500,1130.,-130., 120.,-120.,   0.
     *,2340., .84400,1130.,-130., 110., 110.,   0.		     *,2340., .84400,1130.,-130., 110., 110.,   0.
     *,2340., .88300,1330., 120.,-120., 110.,   0.		     *,2340., .88300,1330., 120.,-120., 110.,   0.
     *,2340., .92200,1330., 110., 110., 110.,   0.		     *,2340., .92200,1330., 110., 110., 110.,   0.
     *,2340., .96100,2330., 120., 120.,-120.,   0.		     *,2340., .96100,2330., 120., 120.,-120.,   0.
     *,2340.,1.00000,2330., 120., 110., 110.,   0.		     *,2340.,1.00000,2330., 120., 110., 110.,   0.
     *,3240., .03750, -12.,  11.,2330.,   0.,   0.		     *,3240., .03750, -12.,  11.,2330.,   0.,   0.
     *,3240., .07500, -12.,  11.,2331.,   0.,   0./		     *,3240., .07500, -12.,  11.,2331.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=451,468)/			      DATA ((DECTAB(I,J),I=1,7),J=451,468)/
     * 3240., .11250, -14.,  13.,2330.,   0.,   0.		     * 3240., .11250, -14.,  13.,2330.,   0.,   0.
     *,3240., .15000, -14.,  13.,2331.,   0.,   0.		     *,3240., .15000, -14.,  13.,2331.,   0.,   0.
     *,3240., .17500,2330., 120.,   0.,   0.,   0.		     *,3240., .17500,2330., 120.,   0.,   0.,   0.
     *,3240., .20000,1330., 110.,   0.,   0.,   0.		     *,3240., .20000,1330., 110.,   0.,   0.,   0.
     *,3240., .22500,1130.,-130.,   0.,   0.,   0.		     *,3240., .22500,1130.,-130.,   0.,   0.,   0.
     *,3240., .25000,1230.,-230.,   0.,   0.,   0.		     *,3240., .25000,1230.,-230.,   0.,   0.,   0.
     *,3240., .29500,2331., 120.,   0.,   0.,   0.		     *,3240., .29500,2331., 120.,   0.,   0.,   0.
     *,3240., .34000,1331., 110.,   0.,   0.,   0.		     *,3240., .34000,1331., 110.,   0.,   0.,   0.
     *,3240., .38500,1131.,-130.,   0.,   0.,   0.		     *,3240., .38500,1131.,-130.,   0.,   0.,   0.
     *,3240., .43000,1231.,-230.,   0.,   0.,   0.		     *,3240., .43000,1231.,-230.,   0.,   0.,   0.
     *,3240., .47500,2330., 121.,   0.,   0.,   0.		     *,3240., .47500,2330., 121.,   0.,   0.,   0.
     *,3240., .52000,1330., 111.,   0.,   0.,   0.		     *,3240., .52000,1330., 111.,   0.,   0.,   0.
     *,3240., .56500,1130.,-131.,   0.,   0.,   0.		     *,3240., .56500,1130.,-131.,   0.,   0.,   0.
     *,3240., .61000,1230.,-231.,   0.,   0.,   0.		     *,3240., .61000,1230.,-231.,   0.,   0.,   0.
     *,3240., .64900,2130.,-230., 120.,-120.,   0.		     *,3240., .64900,2130.,-230., 120.,-120.,   0.
     *,3240., .68800,2130.,-230., 110., 110.,   0.		     *,3240., .68800,2130.,-230., 110., 110.,   0.
     *,3240., .72700,2130.,-130., 120., 110.,   0.		     *,3240., .72700,2130.,-130., 120., 110.,   0.
     *,3240., .76600,1130.,-230.,-120., 110.,   0./		     *,3240., .76600,1130.,-230.,-120., 110.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=469,486)/			      DATA ((DECTAB(I,J),I=1,7),J=469,486)/
     * 3240., .80500,1130.,-130., 120.,-120.,   0.		     * 3240., .80500,1130.,-130., 120.,-120.,   0.
     *,3240., .84400,1130.,-130., 110., 110.,   0.		     *,3240., .84400,1130.,-130., 110., 110.,   0.
     *,3240., .88300,1330., 120.,-120., 110.,   0.		     *,3240., .88300,1330., 120.,-120., 110.,   0.
     *,3240., .92200,1330., 110., 110., 110.,   0.		     *,3240., .92200,1330., 110., 110., 110.,   0.
     *,3240., .96100,2330., 120., 120.,-120.,   0.		     *,3240., .96100,2330., 120., 120.,-120.,   0.
     *,3240.,1.00000,2330., 120., 110., 110.,   0.		     *,3240.,1.00000,2330., 120., 110., 110.,   0.
     *,3340., .07500, -12.,  11.,3331.,   0.,   0.		     *,3340., .07500, -12.,  11.,3331.,   0.,   0.
     *,3340., .15000, -12.,  11.,3331.,   0.,   0.		     *,3340., .15000, -12.,  11.,3331.,   0.,   0.
     *,3340., .25000,1330.,-230.,   0.,   0.,   0.		     *,3340., .25000,1330.,-230.,   0.,   0.,   0.
     *,3340., .31000,3331., 120.,   0.,   0.,   0.		     *,3340., .31000,3331., 120.,   0.,   0.,   0.
     *,3340., .37000,1331.,-230.,   0.,   0.,   0.		     *,3340., .37000,1331.,-230.,   0.,   0.,   0.
     *,3340., .43000,1330.,-231.,   0.,   0.,   0.		     *,3340., .43000,1330.,-231.,   0.,   0.,   0.
     *,3340., .49000,2330.,-230., 120.,   0.,   0.		     *,3340., .49000,2330.,-230., 120.,   0.,   0.
     *,3340., .55000,1330.,-230., 110.,   0.,   0.		     *,3340., .55000,1330.,-230., 110.,   0.,   0.
     *,3340., .61000,1330.,-130., 120.,   0.,   0.		     *,3340., .61000,1330.,-130., 120.,   0.,   0.
     *,3340., .67500,3331., 120., 120.,-120.,   0.		     *,3340., .67500,3331., 120., 120.,-120.,   0.
     *,3340., .74000,3331., 120., 110., 110.,   0.		     *,3340., .74000,3331., 120., 110., 110.,   0.
     *,3340., .80500,1330.,-230., 120.,-120.,   0./		     *,3340., .80500,1330.,-230., 120.,-120.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=487,504)/			      DATA ((DECTAB(I,J),I=1,7),J=487,504)/
     * 3340., .87000,1330.,-230., 110., 110.,   0.		     * 3340., .87000,1330.,-230., 110., 110.,   0.
     *,3340., .93500,2330.,-230., 120., 110.,   0.		     *,3340., .93500,2330.,-230., 120., 110.,   0.
     *,3340.,1.00000,2330.,-130., 120., 120.,   0.		     *,3340.,1.00000,2330.,-130., 120., 120.,   0.
     *,1141.,1.00000,2140., 120.,   0.,   0.,   0.		     *,1141.,1.00000,2140., 120.,   0.,   0.,   0.
     *,1241.,1.00000,2140., 110.,   0.,   0.,   0.		     *,1241.,1.00000,2140., 110.,   0.,   0.,   0.
     *,2241.,1.00000,2140.,-120.,   0.,   0.,   0.		     *,2241.,1.00000,2140.,-120.,   0.,   0.,   0.
     *,1341., .66670,2340., 120.,   0.,   0.,   0.		     *,1341., .66670,2340., 120.,   0.,   0.,   0.
     *,1341.,1.00000,1340., 110.,   0.,   0.,   0.		     *,1341.,1.00000,1340., 110.,   0.,   0.,   0.
     *,2341., .66670,1340.,-120.,   0.,   0.,   0.		     *,2341., .66670,1340.,-120.,   0.,   0.,   0.
     *,2341.,1.00000,2340., 110.,   0.,   0.,   0.		     *,2341.,1.00000,2340., 110.,   0.,   0.,   0.
     *,3341.,1.00000,3340., 110.,   0.,   0.,   0.		     *,3341.,1.00000,3340., 110.,   0.,   0.,   0.
     *,1150., .06000,  12., -11.,1140.,   0.,   0.		     *,1150., .06000,  12., -11.,1140.,   0.,   0.
     *,1150., .12000,  12., -11.,1141.,   0.,   0.		     *,1150., .12000,  12., -11.,1141.,   0.,   0.
     *,1150., .18000,  14., -13.,1140.,   0.,   0.		     *,1150., .18000,  14., -13.,1140.,   0.,   0.
     *,1150., .24000,  14., -13.,1141.,   0.,   0.		     *,1150., .24000,  14., -13.,1141.,   0.,   0.
     *,1150., .25500,  16., -15.,1140.,   0.,   0.		     *,1150., .25500,  16., -15.,1140.,   0.,   0.
     *,1150., .27000,  16., -15.,1141.,   0.,   0.		     *,1150., .27000,  16., -15.,1141.,   0.,   0.
     *,1150., .28925,1140.,-120.,   0.,   0.,   0./		     *,1150., .28925,1140.,-120.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=505,522)/			      DATA ((DECTAB(I,J),I=1,7),J=505,522)/
     * 1150., .30850,1140.,-121.,   0.,   0.,   0.		     * 1150., .30850,1140.,-121.,   0.,   0.,   0.
     *,1150., .32775,1141.,-120.,   0.,   0.,   0.		     *,1150., .32775,1141.,-120.,   0.,   0.,   0.
     *,1150., .34700,1141.,-121.,   0.,   0.,   0.		     *,1150., .34700,1141.,-121.,   0.,   0.,   0.
     *,1150., .35775,1140., 340.,   0.,   0.,   0.		     *,1150., .35775,1140., 340.,   0.,   0.,   0.
     *,1150., .36850,1140., 341.,   0.,   0.,   0.		     *,1150., .36850,1140., 341.,   0.,   0.,   0.
     *,1150., .37925,1141., 340.,   0.,   0.,   0.		     *,1150., .37925,1141., 340.,   0.,   0.,   0.
     *,1150., .39000,1141., 341.,   0.,   0.,   0.		     *,1150., .39000,1141., 341.,   0.,   0.,   0.
     *,1150., .42050,1140.,-120., 110.,   0.,   0.		     *,1150., .42050,1140.,-120., 110.,   0.,   0.
     *,1150., .45100,1140.,-120., 220.,   0.,   0.		     *,1150., .45100,1140.,-120., 220.,   0.,   0.
     *,1150., .48150,1140.,-120., 111.,   0.,   0.		     *,1150., .48150,1140.,-120., 111.,   0.,   0.
     *,1150., .51200,1140.,-120., 221.,   0.,   0.		     *,1150., .51200,1140.,-120., 221.,   0.,   0.
     *,1150., .54250,1140.,-121., 110.,   0.,   0.		     *,1150., .54250,1140.,-121., 110.,   0.,   0.
     *,1150., .57300,1140.,-121., 220.,   0.,   0.		     *,1150., .57300,1140.,-121., 220.,   0.,   0.
     *,1150., .60350,1140.,-121., 111.,   0.,   0.		     *,1150., .60350,1140.,-121., 111.,   0.,   0.
     *,1150., .63400,1140.,-121., 221.,   0.,   0.		     *,1150., .63400,1140.,-121., 221.,   0.,   0.
     *,1150., .66450,1141.,-120., 110.,   0.,   0.		     *,1150., .66450,1141.,-120., 110.,   0.,   0.
     *,1150., .69500,1141.,-120., 220.,   0.,   0.		     *,1150., .69500,1141.,-120., 220.,   0.,   0.
     *,1150., .72550,1141.,-120., 111.,   0.,   0./		     *,1150., .72550,1141.,-120., 111.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=523,540)/			      DATA ((DECTAB(I,J),I=1,7),J=523,540)/
     * 1150., .75600,1141.,-120., 221.,   0.,   0.		     * 1150., .75600,1141.,-120., 221.,   0.,   0.
     *,1150., .78650,1141.,-121., 110.,   0.,   0.		     *,1150., .78650,1141.,-121., 110.,   0.,   0.
     *,1150., .81700,1141.,-121., 220.,   0.,   0.		     *,1150., .81700,1141.,-121., 220.,   0.,   0.
     *,1150., .84750,1141.,-121., 111.,   0.,   0.		     *,1150., .84750,1141.,-121., 111.,   0.,   0.
     *,1150., .87800,1141.,-121., 221.,   0.,   0.		     *,1150., .87800,1141.,-121., 221.,   0.,   0.
     *,1150., .89325,1140.,-130., 230.,   0.,   0.		     *,1150., .89325,1140.,-130., 230.,   0.,   0.
     *,1150., .90850,1140.,-130., 231.,   0.,   0.		     *,1150., .90850,1140.,-130., 231.,   0.,   0.
     *,1150., .92375,1140.,-131., 230.,   0.,   0.		     *,1150., .92375,1140.,-131., 230.,   0.,   0.
     *,1150., .93900,1140.,-131., 231.,   0.,   0.		     *,1150., .93900,1140.,-131., 231.,   0.,   0.
     *,1150., .95425,1141.,-130., 230.,   0.,   0.		     *,1150., .95425,1141.,-130., 230.,   0.,   0.
     *,1150., .96950,1141.,-130., 231.,   0.,   0.		     *,1150., .96950,1141.,-130., 231.,   0.,   0.
     *,1150., .98475,1141.,-131., 230.,   0.,   0.		     *,1150., .98475,1141.,-131., 230.,   0.,   0.
     *,1150.,1.00000,1141.,-131., 231.,   0.,   0.		     *,1150.,1.00000,1141.,-131., 231.,   0.,   0.
     *,1250., .06000,  12., -11.,1240.,   0.,   0.		     *,1250., .06000,  12., -11.,1240.,   0.,   0.
     *,1250., .12000,  12., -11.,1241.,   0.,   0.		     *,1250., .12000,  12., -11.,1241.,   0.,   0.
     *,1250., .18000,  14., -13.,1240.,   0.,   0.		     *,1250., .18000,  14., -13.,1240.,   0.,   0.
     *,1250., .24000,  14., -13.,1241.,   0.,   0.		     *,1250., .24000,  14., -13.,1241.,   0.,   0.
     *,1250., .25500,  16., -15.,1240.,   0.,   0./		     *,1250., .25500,  16., -15.,1240.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=541,558)/			      DATA ((DECTAB(I,J),I=1,7),J=541,558)/
     * 1250., .27000,  16., -15.,1241.,   0.,   0.		     * 1250., .27000,  16., -15.,1241.,   0.,   0.
     *,1250., .28925,1240.,-120.,   0.,   0.,   0.		     *,1250., .28925,1240.,-120.,   0.,   0.,   0.
     *,1250., .30850,1240.,-121.,   0.,   0.,   0.		     *,1250., .30850,1240.,-121.,   0.,   0.,   0.
     *,1250., .32775,1241.,-120.,   0.,   0.,   0.		     *,1250., .32775,1241.,-120.,   0.,   0.,   0.
     *,1250., .34700,1241.,-121.,   0.,   0.,   0.		     *,1250., .34700,1241.,-121.,   0.,   0.,   0.
     *,1250., .35775,1240., 340.,   0.,   0.,   0.		     *,1250., .35775,1240., 340.,   0.,   0.,   0.
     *,1250., .36850,1240., 341.,   0.,   0.,   0.		     *,1250., .36850,1240., 341.,   0.,   0.,   0.
     *,1250., .37925,1241., 340.,   0.,   0.,   0.		     *,1250., .37925,1241., 340.,   0.,   0.,   0.
     *,1250., .39000,1241., 341.,   0.,   0.,   0.		     *,1250., .39000,1241., 341.,   0.,   0.,   0.
     *,1250., .42050,1240.,-120., 110.,   0.,   0.		     *,1250., .42050,1240.,-120., 110.,   0.,   0.
     *,1250., .45100,1240.,-120., 220.,   0.,   0.		     *,1250., .45100,1240.,-120., 220.,   0.,   0.
     *,1250., .48150,1240.,-120., 111.,   0.,   0.		     *,1250., .48150,1240.,-120., 111.,   0.,   0.
     *,1250., .51200,1240.,-120., 221.,   0.,   0.		     *,1250., .51200,1240.,-120., 221.,   0.,   0.
     *,1250., .54250,1240.,-121., 110.,   0.,   0.		     *,1250., .54250,1240.,-121., 110.,   0.,   0.
     *,1250., .57300,1240.,-121., 220.,   0.,   0.		     *,1250., .57300,1240.,-121., 220.,   0.,   0.
     *,1250., .60350,1240.,-121., 111.,   0.,   0.		     *,1250., .60350,1240.,-121., 111.,   0.,   0.
     *,1250., .63400,1240.,-121., 221.,   0.,   0.		     *,1250., .63400,1240.,-121., 221.,   0.,   0.
     *,1250., .66450,1241.,-120., 110.,   0.,   0./		     *,1250., .66450,1241.,-120., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=559,576)/			      DATA ((DECTAB(I,J),I=1,7),J=559,576)/
     * 1250., .69500,1241.,-120., 220.,   0.,   0.		     * 1250., .69500,1241.,-120., 220.,   0.,   0.
     *,1250., .72550,1241.,-120., 111.,   0.,   0.		     *,1250., .72550,1241.,-120., 111.,   0.,   0.
     *,1250., .75600,1241.,-120., 221.,   0.,   0.		     *,1250., .75600,1241.,-120., 221.,   0.,   0.
     *,1250., .78650,1241.,-121., 110.,   0.,   0.		     *,1250., .78650,1241.,-121., 110.,   0.,   0.
     *,1250., .81700,1241.,-121., 220.,   0.,   0.		     *,1250., .81700,1241.,-121., 220.,   0.,   0.
     *,1250., .84750,1241.,-121., 111.,   0.,   0.		     *,1250., .84750,1241.,-121., 111.,   0.,   0.
     *,1250., .87800,1241.,-121., 221.,   0.,   0.		     *,1250., .87800,1241.,-121., 221.,   0.,   0.
     *,1250., .89325,1240.,-130., 230.,   0.,   0.		     *,1250., .89325,1240.,-130., 230.,   0.,   0.
     *,1250., .90850,1240.,-130., 231.,   0.,   0.		     *,1250., .90850,1240.,-130., 231.,   0.,   0.
     *,1250., .92375,1240.,-131., 230.,   0.,   0.		     *,1250., .92375,1240.,-131., 230.,   0.,   0.
     *,1250., .93900,1240.,-131., 231.,   0.,   0.		     *,1250., .93900,1240.,-131., 231.,   0.,   0.
     *,1250., .95425,1241.,-130., 230.,   0.,   0.		     *,1250., .95425,1241.,-130., 230.,   0.,   0.
     *,1250., .96950,1241.,-130., 231.,   0.,   0.		     *,1250., .96950,1241.,-130., 231.,   0.,   0.
     *,1250., .98475,1241.,-131., 230.,   0.,   0.		     *,1250., .98475,1241.,-131., 230.,   0.,   0.
     *,1250.,1.00000,1241.,-131., 231.,   0.,   0.		     *,1250.,1.00000,1241.,-131., 231.,   0.,   0.
     *,1350., .06000,  12., -11.,1340.,   0.,   0.		     *,1350., .06000,  12., -11.,1340.,   0.,   0.
     *,1350., .12000,  12., -11.,1341.,   0.,   0.		     *,1350., .12000,  12., -11.,1341.,   0.,   0.
     *,1350., .18000,  14., -13.,1340.,   0.,   0./		     *,1350., .18000,  14., -13.,1340.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=577,594)/			      DATA ((DECTAB(I,J),I=1,7),J=577,594)/
     * 1350., .24000,  14., -13.,1341.,   0.,   0.		     * 1350., .24000,  14., -13.,1341.,   0.,   0.
     *,1350., .25500,  16., -15.,1340.,   0.,   0.		     *,1350., .25500,  16., -15.,1340.,   0.,   0.
     *,1350., .27000,  16., -15.,1341.,   0.,   0.		     *,1350., .27000,  16., -15.,1341.,   0.,   0.
     *,1350., .28925,1340.,-120.,   0.,   0.,   0.		     *,1350., .28925,1340.,-120.,   0.,   0.,   0.
     *,1350., .30850,1340.,-121.,   0.,   0.,   0.		     *,1350., .30850,1340.,-121.,   0.,   0.,   0.
     *,1350., .32775,1341.,-120.,   0.,   0.,   0.		     *,1350., .32775,1341.,-120.,   0.,   0.,   0.
     *,1350., .34700,1341.,-121.,   0.,   0.,   0.		     *,1350., .34700,1341.,-121.,   0.,   0.,   0.
     *,1350., .35775,1340., 340.,   0.,   0.,   0.		     *,1350., .35775,1340., 340.,   0.,   0.,   0.
     *,1350., .36850,1340., 341.,   0.,   0.,   0.		     *,1350., .36850,1340., 341.,   0.,   0.,   0.
     *,1350., .37925,1341., 340.,   0.,   0.,   0.		     *,1350., .37925,1341., 340.,   0.,   0.,   0.
     *,1350., .39000,1341., 341.,   0.,   0.,   0.		     *,1350., .39000,1341., 341.,   0.,   0.,   0.
     *,1350., .42050,1340.,-120., 110.,   0.,   0.		     *,1350., .42050,1340.,-120., 110.,   0.,   0.
     *,1350., .45100,1340.,-120., 220.,   0.,   0.		     *,1350., .45100,1340.,-120., 220.,   0.,   0.
     *,1350., .48150,1340.,-120., 111.,   0.,   0.		     *,1350., .48150,1340.,-120., 111.,   0.,   0.
     *,1350., .51200,1340.,-120., 221.,   0.,   0.		     *,1350., .51200,1340.,-120., 221.,   0.,   0.
     *,1350., .54250,1340.,-121., 110.,   0.,   0.		     *,1350., .54250,1340.,-121., 110.,   0.,   0.
     *,1350., .57300,1340.,-121., 220.,   0.,   0.		     *,1350., .57300,1340.,-121., 220.,   0.,   0.
     *,1350., .60350,1340.,-121., 111.,   0.,   0./		     *,1350., .60350,1340.,-121., 111.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=595,612)/			      DATA ((DECTAB(I,J),I=1,7),J=595,612)/
     * 1350., .63400,1340.,-121., 221.,   0.,   0.		     * 1350., .63400,1340.,-121., 221.,   0.,   0.
     *,1350., .66450,1341.,-120., 110.,   0.,   0.		     *,1350., .66450,1341.,-120., 110.,   0.,   0.
     *,1350., .69500,1341.,-120., 220.,   0.,   0.		     *,1350., .69500,1341.,-120., 220.,   0.,   0.
     *,1350., .72550,1341.,-120., 111.,   0.,   0.		     *,1350., .72550,1341.,-120., 111.,   0.,   0.
     *,1350., .75600,1341.,-120., 221.,   0.,   0.		     *,1350., .75600,1341.,-120., 221.,   0.,   0.
     *,1350., .78650,1341.,-121., 110.,   0.,   0.		     *,1350., .78650,1341.,-121., 110.,   0.,   0.
     *,1350., .81700,1341.,-121., 220.,   0.,   0.		     *,1350., .81700,1341.,-121., 220.,   0.,   0.
     *,1350., .84750,1341.,-121., 111.,   0.,   0.		     *,1350., .84750,1341.,-121., 111.,   0.,   0.
     *,1350., .87800,1341.,-121., 221.,   0.,   0.		     *,1350., .87800,1341.,-121., 221.,   0.,   0.
     *,1350., .89325,1340.,-130., 230.,   0.,   0.		     *,1350., .89325,1340.,-130., 230.,   0.,   0.
     *,1350., .90850,1340.,-130., 231.,   0.,   0.		     *,1350., .90850,1340.,-130., 231.,   0.,   0.
     *,1350., .92375,1340.,-131., 230.,   0.,   0.		     *,1350., .92375,1340.,-131., 230.,   0.,   0.
     *,1350., .93900,1340.,-131., 231.,   0.,   0.		     *,1350., .93900,1340.,-131., 231.,   0.,   0.
     *,1350., .95425,1341.,-130., 230.,   0.,   0.		     *,1350., .95425,1341.,-130., 230.,   0.,   0.
     *,1350., .96950,1341.,-130., 231.,   0.,   0.		     *,1350., .96950,1341.,-130., 231.,   0.,   0.
     *,1350., .98475,1341.,-131., 230.,   0.,   0.		     *,1350., .98475,1341.,-131., 230.,   0.,   0.
     *,1350.,1.00000,1341.,-131., 231.,   0.,   0.		     *,1350.,1.00000,1341.,-131., 231.,   0.,   0.
     *,2150., .06000,  12., -11.,2140.,   0.,   0./		     *,2150., .06000,  12., -11.,2140.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=613,630)/			      DATA ((DECTAB(I,J),I=1,7),J=613,630)/
     * 2150., .12000,  12., -11.,1241.,   0.,   0.		     * 2150., .12000,  12., -11.,1241.,   0.,   0.
     *,2150., .18000,  14., -13.,2140.,   0.,   0.		     *,2150., .18000,  14., -13.,2140.,   0.,   0.
     *,2150., .24000,  14., -13.,1241.,   0.,   0.		     *,2150., .24000,  14., -13.,1241.,   0.,   0.
     *,2150., .25500,  16., -15.,2140.,   0.,   0.		     *,2150., .25500,  16., -15.,2140.,   0.,   0.
     *,2150., .27000,  16., -15.,1241.,   0.,   0.		     *,2150., .27000,  16., -15.,1241.,   0.,   0.
     *,2150., .28925,2140.,-120.,   0.,   0.,   0.		     *,2150., .28925,2140.,-120.,   0.,   0.,   0.
     *,2150., .30850,2140.,-121.,   0.,   0.,   0.		     *,2150., .30850,2140.,-121.,   0.,   0.,   0.
     *,2150., .32775,1241.,-120.,   0.,   0.,   0.		     *,2150., .32775,1241.,-120.,   0.,   0.,   0.
     *,2150., .34700,1241.,-121.,   0.,   0.,   0.		     *,2150., .34700,1241.,-121.,   0.,   0.,   0.
     *,2150., .35775,2140., 340.,   0.,   0.,   0.		     *,2150., .35775,2140., 340.,   0.,   0.,   0.
     *,2150., .36850,2140., 341.,   0.,   0.,   0.		     *,2150., .36850,2140., 341.,   0.,   0.,   0.
     *,2150., .37925,1241., 340.,   0.,   0.,   0.		     *,2150., .37925,1241., 340.,   0.,   0.,   0.
     *,2150., .39000,1241., 341.,   0.,   0.,   0.		     *,2150., .39000,1241., 341.,   0.,   0.,   0.
     *,2150., .42050,2140.,-120., 110.,   0.,   0.		     *,2150., .42050,2140.,-120., 110.,   0.,   0.
     *,2150., .45100,2140.,-120., 220.,   0.,   0.		     *,2150., .45100,2140.,-120., 220.,   0.,   0.
     *,2150., .48150,2140.,-120., 111.,   0.,   0.		     *,2150., .48150,2140.,-120., 111.,   0.,   0.
     *,2150., .51200,2140.,-120., 221.,   0.,   0.		     *,2150., .51200,2140.,-120., 221.,   0.,   0.
     *,2150., .54250,2140.,-121., 110.,   0.,   0./		     *,2150., .54250,2140.,-121., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=631,648)/			      DATA ((DECTAB(I,J),I=1,7),J=631,648)/
     * 2150., .57300,2140.,-121., 220.,   0.,   0.		     * 2150., .57300,2140.,-121., 220.,   0.,   0.
     *,2150., .60350,2140.,-121., 111.,   0.,   0.		     *,2150., .60350,2140.,-121., 111.,   0.,   0.
     *,2150., .63400,2140.,-121., 221.,   0.,   0.		     *,2150., .63400,2140.,-121., 221.,   0.,   0.
     *,2150., .66450,1241.,-120., 110.,   0.,   0.		     *,2150., .66450,1241.,-120., 110.,   0.,   0.
     *,2150., .69500,1241.,-120., 220.,   0.,   0.		     *,2150., .69500,1241.,-120., 220.,   0.,   0.
     *,2150., .72550,1241.,-120., 111.,   0.,   0.		     *,2150., .72550,1241.,-120., 111.,   0.,   0.
     *,2150., .75600,1241.,-120., 221.,   0.,   0.		     *,2150., .75600,1241.,-120., 221.,   0.,   0.
     *,2150., .78650,1241.,-121., 110.,   0.,   0.		     *,2150., .78650,1241.,-121., 110.,   0.,   0.
     *,2150., .81700,1241.,-121., 220.,   0.,   0.		     *,2150., .81700,1241.,-121., 220.,   0.,   0.
     *,2150., .84750,1241.,-121., 111.,   0.,   0.		     *,2150., .84750,1241.,-121., 111.,   0.,   0.
     *,2150., .87800,1241.,-121., 221.,   0.,   0.		     *,2150., .87800,1241.,-121., 221.,   0.,   0.
     *,2150., .89325,2140.,-130., 230.,   0.,   0.		     *,2150., .89325,2140.,-130., 230.,   0.,   0.
     *,2150., .90850,2140.,-130., 231.,   0.,   0.		     *,2150., .90850,2140.,-130., 231.,   0.,   0.
     *,2150., .92375,2140.,-131., 230.,   0.,   0.		     *,2150., .92375,2140.,-131., 230.,   0.,   0.
     *,2150., .93900,2140.,-131., 231.,   0.,   0.		     *,2150., .93900,2140.,-131., 231.,   0.,   0.
     *,2150., .95425,1241.,-130., 230.,   0.,   0.		     *,2150., .95425,1241.,-130., 230.,   0.,   0.
     *,2150., .96950,1241.,-130., 231.,   0.,   0.		     *,2150., .96950,1241.,-130., 231.,   0.,   0.
     *,2150., .98475,1241.,-131., 230.,   0.,   0./		     *,2150., .98475,1241.,-131., 230.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=649,666)/			      DATA ((DECTAB(I,J),I=1,7),J=649,666)/
     * 2150.,1.00000,1241.,-131., 231.,   0.,   0.		     * 2150.,1.00000,1241.,-131., 231.,   0.,   0.
     *,2250., .06000,  12., -11.,2240.,   0.,   0.		     *,2250., .06000,  12., -11.,2240.,   0.,   0.
     *,2250., .12000,  12., -11.,2241.,   0.,   0.		     *,2250., .12000,  12., -11.,2241.,   0.,   0.
     *,2250., .18000,  14., -13.,2240.,   0.,   0.		     *,2250., .18000,  14., -13.,2240.,   0.,   0.
     *,2250., .24000,  14., -13.,2241.,   0.,   0.		     *,2250., .24000,  14., -13.,2241.,   0.,   0.
     *,2250., .25500,  16., -15.,2240.,   0.,   0.		     *,2250., .25500,  16., -15.,2240.,   0.,   0.
     *,2250., .27000,  16., -15.,2241.,   0.,   0.		     *,2250., .27000,  16., -15.,2241.,   0.,   0.
     *,2250., .28925,2240.,-120.,   0.,   0.,   0.		     *,2250., .28925,2240.,-120.,   0.,   0.,   0.
     *,2250., .30850,2240.,-121.,   0.,   0.,   0.		     *,2250., .30850,2240.,-121.,   0.,   0.,   0.
     *,2250., .32775,2241.,-120.,   0.,   0.,   0.		     *,2250., .32775,2241.,-120.,   0.,   0.,   0.
     *,2250., .34700,2241.,-121.,   0.,   0.,   0.		     *,2250., .34700,2241.,-121.,   0.,   0.,   0.
     *,2250., .35775,2240., 340.,   0.,   0.,   0.		     *,2250., .35775,2240., 340.,   0.,   0.,   0.
     *,2250., .36850,2240., 341.,   0.,   0.,   0.		     *,2250., .36850,2240., 341.,   0.,   0.,   0.
     *,2250., .37925,2241., 340.,   0.,   0.,   0.		     *,2250., .37925,2241., 340.,   0.,   0.,   0.
     *,2250., .39000,2241., 341.,   0.,   0.,   0.		     *,2250., .39000,2241., 341.,   0.,   0.,   0.
     *,2250., .42050,2240.,-120., 110.,   0.,   0.		     *,2250., .42050,2240.,-120., 110.,   0.,   0.
     *,2250., .45100,2240.,-120., 220.,   0.,   0.		     *,2250., .45100,2240.,-120., 220.,   0.,   0.
     *,2250., .48150,2240.,-120., 111.,   0.,   0./		     *,2250., .48150,2240.,-120., 111.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=667,684)/			      DATA ((DECTAB(I,J),I=1,7),J=667,684)/
     * 2250., .51200,2240.,-120., 221.,   0.,   0.		     * 2250., .51200,2240.,-120., 221.,   0.,   0.
     *,2250., .54250,2240.,-121., 110.,   0.,   0.		     *,2250., .54250,2240.,-121., 110.,   0.,   0.
     *,2250., .57300,2240.,-121., 220.,   0.,   0.		     *,2250., .57300,2240.,-121., 220.,   0.,   0.
     *,2250., .60350,2240.,-121., 111.,   0.,   0.		     *,2250., .60350,2240.,-121., 111.,   0.,   0.
     *,2250., .63400,2240.,-121., 221.,   0.,   0.		     *,2250., .63400,2240.,-121., 221.,   0.,   0.
     *,2250., .66450,2241.,-120., 110.,   0.,   0.		     *,2250., .66450,2241.,-120., 110.,   0.,   0.
     *,2250., .69500,2241.,-120., 220.,   0.,   0.		     *,2250., .69500,2241.,-120., 220.,   0.,   0.
     *,2250., .72550,2241.,-120., 111.,   0.,   0.		     *,2250., .72550,2241.,-120., 111.,   0.,   0.
     *,2250., .75600,2241.,-120., 221.,   0.,   0.		     *,2250., .75600,2241.,-120., 221.,   0.,   0.
     *,2250., .78650,2241.,-121., 110.,   0.,   0.		     *,2250., .78650,2241.,-121., 110.,   0.,   0.
     *,2250., .81700,2241.,-121., 220.,   0.,   0.		     *,2250., .81700,2241.,-121., 220.,   0.,   0.
     *,2250., .84750,2241.,-121., 111.,   0.,   0.		     *,2250., .84750,2241.,-121., 111.,   0.,   0.
     *,2250., .87800,2241.,-121., 221.,   0.,   0.		     *,2250., .87800,2241.,-121., 221.,   0.,   0.
     *,2250., .89325,2240.,-130., 230.,   0.,   0.		     *,2250., .89325,2240.,-130., 230.,   0.,   0.
     *,2250., .90850,2240.,-130., 231.,   0.,   0.		     *,2250., .90850,2240.,-130., 231.,   0.,   0.
     *,2250., .92375,2240.,-131., 230.,   0.,   0.		     *,2250., .92375,2240.,-131., 230.,   0.,   0.
     *,2250., .93900,2240.,-131., 231.,   0.,   0.		     *,2250., .93900,2240.,-131., 231.,   0.,   0.
     *,2250., .95425,2241.,-130., 230.,   0.,   0./		     *,2250., .95425,2241.,-130., 230.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=685,702)/			      DATA ((DECTAB(I,J),I=1,7),J=685,702)/
     * 2250., .96950,2241.,-130., 231.,   0.,   0.		     * 2250., .96950,2241.,-130., 231.,   0.,   0.
     *,2250., .98475,2241.,-131., 230.,   0.,   0.		     *,2250., .98475,2241.,-131., 230.,   0.,   0.
     *,2250.,1.00000,2241.,-131., 231.,   0.,   0.		     *,2250.,1.00000,2241.,-131., 231.,   0.,   0.
     *,2350., .06000,  12., -11.,2340.,   0.,   0.		     *,2350., .06000,  12., -11.,2340.,   0.,   0.
     *,2350., .12000,  12., -11.,2341.,   0.,   0.		     *,2350., .12000,  12., -11.,2341.,   0.,   0.
     *,2350., .18000,  14., -13.,2340.,   0.,   0.		     *,2350., .18000,  14., -13.,2340.,   0.,   0.
     *,2350., .24000,  14., -13.,2341.,   0.,   0.		     *,2350., .24000,  14., -13.,2341.,   0.,   0.
     *,2350., .25500,  16., -15.,2340.,   0.,   0.		     *,2350., .25500,  16., -15.,2340.,   0.,   0.
     *,2350., .27000,  16., -15.,2341.,   0.,   0.		     *,2350., .27000,  16., -15.,2341.,   0.,   0.
     *,2350., .28925,2340.,-120.,   0.,   0.,   0.		     *,2350., .28925,2340.,-120.,   0.,   0.,   0.
     *,2350., .30850,2340.,-121.,   0.,   0.,   0.		     *,2350., .30850,2340.,-121.,   0.,   0.,   0.
     *,2350., .32775,2341.,-120.,   0.,   0.,   0.		     *,2350., .32775,2341.,-120.,   0.,   0.,   0.
     *,2350., .34700,2341.,-121.,   0.,   0.,   0.		     *,2350., .34700,2341.,-121.,   0.,   0.,   0.
     *,2350., .35775,2340., 340.,   0.,   0.,   0.		     *,2350., .35775,2340., 340.,   0.,   0.,   0.
     *,2350., .36850,2340., 341.,   0.,   0.,   0.		     *,2350., .36850,2340., 341.,   0.,   0.,   0.
     *,2350., .37925,2341., 340.,   0.,   0.,   0.		     *,2350., .37925,2341., 340.,   0.,   0.,   0.
     *,2350., .39000,2341., 341.,   0.,   0.,   0.		     *,2350., .39000,2341., 341.,   0.,   0.,   0.
     *,2350., .42050,2340.,-120., 110.,   0.,   0./		     *,2350., .42050,2340.,-120., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=703,720)/			      DATA ((DECTAB(I,J),I=1,7),J=703,720)/
     * 2350., .45100,2340.,-120., 220.,   0.,   0.		     * 2350., .45100,2340.,-120., 220.,   0.,   0.
     *,2350., .48150,2340.,-120., 111.,   0.,   0.		     *,2350., .48150,2340.,-120., 111.,   0.,   0.
     *,2350., .51200,2340.,-120., 221.,   0.,   0.		     *,2350., .51200,2340.,-120., 221.,   0.,   0.
     *,2350., .54250,2340.,-121., 110.,   0.,   0.		     *,2350., .54250,2340.,-121., 110.,   0.,   0.
     *,2350., .57300,2340.,-121., 220.,   0.,   0.		     *,2350., .57300,2340.,-121., 220.,   0.,   0.
     *,2350., .60350,2340.,-121., 111.,   0.,   0.		     *,2350., .60350,2340.,-121., 111.,   0.,   0.
     *,2350., .63400,2340.,-121., 221.,   0.,   0.		     *,2350., .63400,2340.,-121., 221.,   0.,   0.
     *,2350., .66450,2341.,-120., 110.,   0.,   0.		     *,2350., .66450,2341.,-120., 110.,   0.,   0.
     *,2350., .69500,2341.,-120., 220.,   0.,   0.		     *,2350., .69500,2341.,-120., 220.,   0.,   0.
     *,2350., .72550,2341.,-120., 111.,   0.,   0.		     *,2350., .72550,2341.,-120., 111.,   0.,   0.
     *,2350., .75600,2341.,-120., 221.,   0.,   0.		     *,2350., .75600,2341.,-120., 221.,   0.,   0.
     *,2350., .78650,2341.,-121., 110.,   0.,   0.		     *,2350., .78650,2341.,-121., 110.,   0.,   0.
     *,2350., .81700,2341.,-121., 220.,   0.,   0.		     *,2350., .81700,2341.,-121., 220.,   0.,   0.
     *,2350., .84750,2341.,-121., 111.,   0.,   0.		     *,2350., .84750,2341.,-121., 111.,   0.,   0.
     *,2350., .87800,2341.,-121., 221.,   0.,   0.		     *,2350., .87800,2341.,-121., 221.,   0.,   0.
     *,2350., .89325,2340.,-130., 230.,   0.,   0.		     *,2350., .89325,2340.,-130., 230.,   0.,   0.
     *,2350., .90850,2340.,-130., 231.,   0.,   0.		     *,2350., .90850,2340.,-130., 231.,   0.,   0.
     *,2350., .92375,2340.,-131., 230.,   0.,   0./		     *,2350., .92375,2340.,-131., 230.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=721,738)/			      DATA ((DECTAB(I,J),I=1,7),J=721,738)/
     * 2350., .93900,2340.,-131., 231.,   0.,   0.		     * 2350., .93900,2340.,-131., 231.,   0.,   0.
     *,2350., .95425,2341.,-130., 230.,   0.,   0.		     *,2350., .95425,2341.,-130., 230.,   0.,   0.
     *,2350., .96950,2341.,-130., 231.,   0.,   0.		     *,2350., .96950,2341.,-130., 231.,   0.,   0.
     *,2350., .98475,2341.,-131., 230.,   0.,   0.		     *,2350., .98475,2341.,-131., 230.,   0.,   0.
     *,2350.,1.00000,2341.,-131., 231.,   0.,   0.		     *,2350.,1.00000,2341.,-131., 231.,   0.,   0.
     *,3150., .06000,  12., -11.,3140.,   0.,   0.		     *,3150., .06000,  12., -11.,3140.,   0.,   0.
     *,3150., .12000,  12., -11.,1341.,   0.,   0.		     *,3150., .12000,  12., -11.,1341.,   0.,   0.
     *,3150., .18000,  14., -13.,3140.,   0.,   0.		     *,3150., .18000,  14., -13.,3140.,   0.,   0.
     *,3150., .24000,  14., -13.,1341.,   0.,   0.		     *,3150., .24000,  14., -13.,1341.,   0.,   0.
     *,3150., .25500,  16., -15.,3140.,   0.,   0.		     *,3150., .25500,  16., -15.,3140.,   0.,   0.
     *,3150., .27000,  16., -15.,1341.,   0.,   0.		     *,3150., .27000,  16., -15.,1341.,   0.,   0.
     *,3150., .28925,3140.,-120.,   0.,   0.,   0.		     *,3150., .28925,3140.,-120.,   0.,   0.,   0.
     *,3150., .30850,3140.,-121.,   0.,   0.,   0.		     *,3150., .30850,3140.,-121.,   0.,   0.,   0.
     *,3150., .32775,1341.,-120.,   0.,   0.,   0.		     *,3150., .32775,1341.,-120.,   0.,   0.,   0.
     *,3150., .34700,1341.,-121.,   0.,   0.,   0.		     *,3150., .34700,1341.,-121.,   0.,   0.,   0.
     *,3150., .35775,3140., 340.,   0.,   0.,   0.		     *,3150., .35775,3140., 340.,   0.,   0.,   0.
     *,3150., .36850,3140., 341.,   0.,   0.,   0.		     *,3150., .36850,3140., 341.,   0.,   0.,   0.
     *,3150., .37925,1341., 340.,   0.,   0.,   0./		     *,3150., .37925,1341., 340.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=739,756)/			      DATA ((DECTAB(I,J),I=1,7),J=739,756)/
     * 3150., .39000,1341., 341.,   0.,   0.,   0.		     * 3150., .39000,1341., 341.,   0.,   0.,   0.
     *,3150., .42050,3140.,-120., 110.,   0.,   0.		     *,3150., .42050,3140.,-120., 110.,   0.,   0.
     *,3150., .45100,3140.,-120., 220.,   0.,   0.		     *,3150., .45100,3140.,-120., 220.,   0.,   0.
     *,3150., .48150,3140.,-120., 111.,   0.,   0.		     *,3150., .48150,3140.,-120., 111.,   0.,   0.
     *,3150., .51200,3140.,-120., 221.,   0.,   0.		     *,3150., .51200,3140.,-120., 221.,   0.,   0.
     *,3150., .54250,3140.,-121., 110.,   0.,   0.		     *,3150., .54250,3140.,-121., 110.,   0.,   0.
     *,3150., .57300,3140.,-121., 220.,   0.,   0.		     *,3150., .57300,3140.,-121., 220.,   0.,   0.
     *,3150., .60350,3140.,-121., 111.,   0.,   0.		     *,3150., .60350,3140.,-121., 111.,   0.,   0.
     *,3150., .63400,3140.,-121., 221.,   0.,   0.		     *,3150., .63400,3140.,-121., 221.,   0.,   0.
     *,3150., .66450,1341.,-120., 110.,   0.,   0.		     *,3150., .66450,1341.,-120., 110.,   0.,   0.
     *,3150., .69500,1341.,-120., 220.,   0.,   0.		     *,3150., .69500,1341.,-120., 220.,   0.,   0.
     *,3150., .72550,1341.,-120., 111.,   0.,   0.		     *,3150., .72550,1341.,-120., 111.,   0.,   0.
     *,3150., .75600,1341.,-120., 221.,   0.,   0.		     *,3150., .75600,1341.,-120., 221.,   0.,   0.
     *,3150., .78650,1341.,-121., 110.,   0.,   0.		     *,3150., .78650,1341.,-121., 110.,   0.,   0.
     *,3150., .81700,1341.,-121., 220.,   0.,   0.		     *,3150., .81700,1341.,-121., 220.,   0.,   0.
     *,3150., .84750,1341.,-121., 111.,   0.,   0.		     *,3150., .84750,1341.,-121., 111.,   0.,   0.
     *,3150., .87800,1341.,-121., 221.,   0.,   0.		     *,3150., .87800,1341.,-121., 221.,   0.,   0.
     *,3150., .89325,3140.,-130., 230.,   0.,   0./		     *,3150., .89325,3140.,-130., 230.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=757,774)/			      DATA ((DECTAB(I,J),I=1,7),J=757,774)/
     * 3150., .90850,3140.,-130., 231.,   0.,   0.		     * 3150., .90850,3140.,-130., 231.,   0.,   0.
     *,3150., .92375,3140.,-131., 230.,   0.,   0.		     *,3150., .92375,3140.,-131., 230.,   0.,   0.
     *,3150., .93900,3140.,-131., 231.,   0.,   0.		     *,3150., .93900,3140.,-131., 231.,   0.,   0.
     *,3150., .95425,1341.,-130., 230.,   0.,   0.		     *,3150., .95425,1341.,-130., 230.,   0.,   0.
     *,3150., .96950,1341.,-130., 231.,   0.,   0.		     *,3150., .96950,1341.,-130., 231.,   0.,   0.
     *,3150., .98475,1341.,-131., 230.,   0.,   0.		     *,3150., .98475,1341.,-131., 230.,   0.,   0.
     *,3150.,1.00000,1341.,-131., 231.,   0.,   0.		     *,3150.,1.00000,1341.,-131., 231.,   0.,   0.
     *,3250., .06000,  12., -11.,3240.,   0.,   0.		     *,3250., .06000,  12., -11.,3240.,   0.,   0.
     *,3250., .12000,  12., -11.,2341.,   0.,   0.		     *,3250., .12000,  12., -11.,2341.,   0.,   0.
     *,3250., .18000,  14., -13.,3240.,   0.,   0.		     *,3250., .18000,  14., -13.,3240.,   0.,   0.
     *,3250., .24000,  14., -13.,2341.,   0.,   0.		     *,3250., .24000,  14., -13.,2341.,   0.,   0.
     *,3250., .25500,  16., -15.,3240.,   0.,   0.		     *,3250., .25500,  16., -15.,3240.,   0.,   0.
     *,3250., .27000,  16., -15.,2341.,   0.,   0.		     *,3250., .27000,  16., -15.,2341.,   0.,   0.
     *,3250., .28925,3240.,-120.,   0.,   0.,   0.		     *,3250., .28925,3240.,-120.,   0.,   0.,   0.
     *,3250., .30850,3240.,-121.,   0.,   0.,   0.		     *,3250., .30850,3240.,-121.,   0.,   0.,   0.
     *,3250., .32775,2341.,-120.,   0.,   0.,   0.		     *,3250., .32775,2341.,-120.,   0.,   0.,   0.
     *,3250., .34700,2341.,-121.,   0.,   0.,   0.		     *,3250., .34700,2341.,-121.,   0.,   0.,   0.
     *,3250., .35775,3240., 340.,   0.,   0.,   0./		     *,3250., .35775,3240., 340.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=775,792)/			      DATA ((DECTAB(I,J),I=1,7),J=775,792)/
     * 3250., .36850,3240., 341.,   0.,   0.,   0.		     * 3250., .36850,3240., 341.,   0.,   0.,   0.
     *,3250., .37925,2341., 340.,   0.,   0.,   0.		     *,3250., .37925,2341., 340.,   0.,   0.,   0.
     *,3250., .39000,2341., 341.,   0.,   0.,   0.		     *,3250., .39000,2341., 341.,   0.,   0.,   0.
     *,3250., .42050,3240.,-120., 110.,   0.,   0.		     *,3250., .42050,3240.,-120., 110.,   0.,   0.
     *,3250., .45100,3240.,-120., 220.,   0.,   0.		     *,3250., .45100,3240.,-120., 220.,   0.,   0.
     *,3250., .48150,3240.,-120., 111.,   0.,   0.		     *,3250., .48150,3240.,-120., 111.,   0.,   0.
     *,3250., .51200,3240.,-120., 221.,   0.,   0.		     *,3250., .51200,3240.,-120., 221.,   0.,   0.
     *,3250., .54250,3240.,-121., 110.,   0.,   0.		     *,3250., .54250,3240.,-121., 110.,   0.,   0.
     *,3250., .57300,3240.,-121., 220.,   0.,   0.		     *,3250., .57300,3240.,-121., 220.,   0.,   0.
     *,3250., .60350,3240.,-121., 111.,   0.,   0.		     *,3250., .60350,3240.,-121., 111.,   0.,   0.
     *,3250., .63400,3240.,-121., 221.,   0.,   0.		     *,3250., .63400,3240.,-121., 221.,   0.,   0.
     *,3250., .66450,2341.,-120., 110.,   0.,   0.		     *,3250., .66450,2341.,-120., 110.,   0.,   0.
     *,3250., .69500,2341.,-120., 220.,   0.,   0.		     *,3250., .69500,2341.,-120., 220.,   0.,   0.
     *,3250., .72550,2341.,-120., 111.,   0.,   0.		     *,3250., .72550,2341.,-120., 111.,   0.,   0.
     *,3250., .75600,2341.,-120., 221.,   0.,   0.		     *,3250., .75600,2341.,-120., 221.,   0.,   0.
     *,3250., .78650,2341.,-121., 110.,   0.,   0.		     *,3250., .78650,2341.,-121., 110.,   0.,   0.
     *,3250., .81700,2341.,-121., 220.,   0.,   0.		     *,3250., .81700,2341.,-121., 220.,   0.,   0.
     *,3250., .84750,2341.,-121., 111.,   0.,   0./		     *,3250., .84750,2341.,-121., 111.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=793,810)/			      DATA ((DECTAB(I,J),I=1,7),J=793,810)/
     * 3250., .87800,2341.,-121., 221.,   0.,   0.		     * 3250., .87800,2341.,-121., 221.,   0.,   0.
     *,3250., .89325,3240.,-130., 230.,   0.,   0.		     *,3250., .89325,3240.,-130., 230.,   0.,   0.
     *,3250., .90850,3240.,-130., 231.,   0.,   0.		     *,3250., .90850,3240.,-130., 231.,   0.,   0.
     *,3250., .92375,3240.,-131., 230.,   0.,   0.		     *,3250., .92375,3240.,-131., 230.,   0.,   0.
     *,3250., .93900,3240.,-131., 231.,   0.,   0.		     *,3250., .93900,3240.,-131., 231.,   0.,   0.
     *,3250., .95425,2341.,-130., 230.,   0.,   0.		     *,3250., .95425,2341.,-130., 230.,   0.,   0.
     *,3250., .96950,2341.,-130., 231.,   0.,   0.		     *,3250., .96950,2341.,-130., 231.,   0.,   0.
     *,3250., .98475,2341.,-131., 230.,   0.,   0.		     *,3250., .98475,2341.,-131., 230.,   0.,   0.
     *,3250.,1.00000,2341.,-131., 231.,   0.,   0.		     *,3250.,1.00000,2341.,-131., 231.,   0.,   0.
     *,3350., .06000,  12., -11.,3340.,   0.,   0.		     *,3350., .06000,  12., -11.,3340.,   0.,   0.
     *,3350., .12000,  12., -11.,3341.,   0.,   0.		     *,3350., .12000,  12., -11.,3341.,   0.,   0.
     *,3350., .18000,  14., -13.,3340.,   0.,   0.		     *,3350., .18000,  14., -13.,3340.,   0.,   0.
     *,3350., .24000,  14., -13.,3341.,   0.,   0.		     *,3350., .24000,  14., -13.,3341.,   0.,   0.
     *,3350., .25500,  16., -15.,3340.,   0.,   0.		     *,3350., .25500,  16., -15.,3340.,   0.,   0.
     *,3350., .27000,  16., -15.,3341.,   0.,   0.		     *,3350., .27000,  16., -15.,3341.,   0.,   0.
     *,3350., .28925,3340.,-120.,   0.,   0.,   0.		     *,3350., .28925,3340.,-120.,   0.,   0.,   0.
     *,3350., .30850,3340.,-121.,   0.,   0.,   0.		     *,3350., .30850,3340.,-121.,   0.,   0.,   0.
     *,3350., .32775,3341.,-120.,   0.,   0.,   0./		     *,3350., .32775,3341.,-120.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=811,828)/			      DATA ((DECTAB(I,J),I=1,7),J=811,828)/
     * 3350., .34700,3341.,-121.,   0.,   0.,   0.		     * 3350., .34700,3341.,-121.,   0.,   0.,   0.
     *,3350., .35775,3340., 340.,   0.,   0.,   0.		     *,3350., .35775,3340., 340.,   0.,   0.,   0.
     *,3350., .36850,3340., 341.,   0.,   0.,   0.		     *,3350., .36850,3340., 341.,   0.,   0.,   0.
     *,3350., .37925,3341., 340.,   0.,   0.,   0.		     *,3350., .37925,3341., 340.,   0.,   0.,   0.
     *,3350., .39000,3341., 341.,   0.,   0.,   0.		     *,3350., .39000,3341., 341.,   0.,   0.,   0.
     *,3350., .42050,3340.,-120., 110.,   0.,   0.		     *,3350., .42050,3340.,-120., 110.,   0.,   0.
     *,3350., .45100,3340.,-120., 220.,   0.,   0.		     *,3350., .45100,3340.,-120., 220.,   0.,   0.
     *,3350., .48150,3340.,-120., 111.,   0.,   0.		     *,3350., .48150,3340.,-120., 111.,   0.,   0.
     *,3350., .51200,3340.,-120., 221.,   0.,   0.		     *,3350., .51200,3340.,-120., 221.,   0.,   0.
     *,3350., .54250,3340.,-121., 110.,   0.,   0.		     *,3350., .54250,3340.,-121., 110.,   0.,   0.
     *,3350., .57300,3340.,-121., 220.,   0.,   0.		     *,3350., .57300,3340.,-121., 220.,   0.,   0.
     *,3350., .60350,3340.,-121., 111.,   0.,   0.		     *,3350., .60350,3340.,-121., 111.,   0.,   0.
     *,3350., .63400,3340.,-121., 221.,   0.,   0.		     *,3350., .63400,3340.,-121., 221.,   0.,   0.
     *,3350., .66450,3341.,-120., 110.,   0.,   0.		     *,3350., .66450,3341.,-120., 110.,   0.,   0.
     *,3350., .69500,3341.,-120., 220.,   0.,   0.		     *,3350., .69500,3341.,-120., 220.,   0.,   0.
     *,3350., .72550,3341.,-120., 111.,   0.,   0.		     *,3350., .72550,3341.,-120., 111.,   0.,   0.
     *,3350., .75600,3341.,-120., 221.,   0.,   0.		     *,3350., .75600,3341.,-120., 221.,   0.,   0.
     *,3350., .78650,3341.,-121., 110.,   0.,   0./		     *,3350., .78650,3341.,-121., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=829,846)/			      DATA ((DECTAB(I,J),I=1,7),J=829,846)/
     * 3350., .81700,3341.,-121., 220.,   0.,   0.		     * 3350., .81700,3341.,-121., 220.,   0.,   0.
     *,3350., .84750,3341.,-121., 111.,   0.,   0.		     *,3350., .84750,3341.,-121., 111.,   0.,   0.
     *,3350., .87800,3341.,-121., 221.,   0.,   0.		     *,3350., .87800,3341.,-121., 221.,   0.,   0.
     *,3350., .89325,3340.,-130., 230.,   0.,   0.		     *,3350., .89325,3340.,-130., 230.,   0.,   0.
     *,3350., .90850,3340.,-130., 231.,   0.,   0.		     *,3350., .90850,3340.,-130., 231.,   0.,   0.
     *,3350., .92375,3340.,-131., 230.,   0.,   0.		     *,3350., .92375,3340.,-131., 230.,   0.,   0.
     *,3350., .93900,3340.,-131., 231.,   0.,   0.		     *,3350., .93900,3340.,-131., 231.,   0.,   0.
     *,3350., .95425,3341.,-130., 230.,   0.,   0.		     *,3350., .95425,3341.,-130., 230.,   0.,   0.
     *,3350., .96950,3341.,-130., 231.,   0.,   0.		     *,3350., .96950,3341.,-130., 231.,   0.,   0.
     *,3350., .98475,3341.,-131., 230.,   0.,   0.		     *,3350., .98475,3341.,-131., 230.,   0.,   0.
     *,3350.,1.00000,3341.,-131., 231.,   0.,   0.		     *,3350.,1.00000,3341.,-131., 231.,   0.,   0.
     *,1160., .33300,   1.,  -2.,1500.,   0.,   0.		     *,1160., .33300,   1.,  -2.,1500.,   0.,   0.
     *,1160., .66700,   4.,  -3.,1500.,   0.,   0.		     *,1160., .66700,   4.,  -3.,1500.,   0.,   0.
     *,1160., .77800, -12.,  11.,1500.,   0.,   0.		     *,1160., .77800, -12.,  11.,1500.,   0.,   0.
     *,1160., .88900, -14.,  13.,1500.,   0.,   0.		     *,1160., .88900, -14.,  13.,1500.,   0.,   0.
     *,1160.,1.00000, -16.,  15.,1500.,   0.,   0.		     *,1160.,1.00000, -16.,  15.,1500.,   0.,   0.
     *,1260., .33300,   1.,  -2.,2500.,   0.,   0.		     *,1260., .33300,   1.,  -2.,2500.,   0.,   0.
     *,1260., .66700,   4.,  -3.,2500.,   0.,   0./		     *,1260., .66700,   4.,  -3.,2500.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=847,864)/			      DATA ((DECTAB(I,J),I=1,7),J=847,864)/
     * 1260., .77800, -12.,  11.,2500.,   0.,   0.		     * 1260., .77800, -12.,  11.,2500.,   0.,   0.
     *,1260., .88900, -14.,  13.,2500.,   0.,   0.		     *,1260., .88900, -14.,  13.,2500.,   0.,   0.
     *,1260.,1.00000, -16.,  15.,2500.,   0.,   0.		     *,1260.,1.00000, -16.,  15.,2500.,   0.,   0.
     *,2260., .33300,   1.,  -2.,2500.,   0.,   0.		     *,2260., .33300,   1.,  -2.,2500.,   0.,   0.
     *,2260., .66700,   4.,  -3.,2500.,   0.,   0.		     *,2260., .66700,   4.,  -3.,2500.,   0.,   0.
     *,2260., .77800, -12.,  11.,2500.,   0.,   0.		     *,2260., .77800, -12.,  11.,2500.,   0.,   0.
     *,2260., .88900, -14.,  13.,2500.,   0.,   0.		     *,2260., .88900, -14.,  13.,2500.,   0.,   0.
     *,2260.,1.00000, -16.,  15.,2500.,   0.,   0.		     *,2260.,1.00000, -16.,  15.,2500.,   0.,   0.
     *,2160., .33300,   1.,  -2.,1500.,   0.,   0.		     *,2160., .33300,   1.,  -2.,1500.,   0.,   0.
     *,2160., .66700,   4.,  -3.,1500.,   0.,   0.		     *,2160., .66700,   4.,  -3.,1500.,   0.,   0.
     *,2160., .77800, -12.,  11.,1500.,   0.,   0.		     *,2160., .77800, -12.,  11.,1500.,   0.,   0.
     *,2160., .88900, -14.,  13.,1500.,   0.,   0.		     *,2160., .88900, -14.,  13.,1500.,   0.,   0.
     *,2160.,1.00000, -16.,  15.,1500.,   0.,   0.		     *,2160.,1.00000, -16.,  15.,1500.,   0.,   0.
     *,1360., .33300,   1.,  -2.,3500.,   0.,   0.		     *,1360., .33300,   1.,  -2.,3500.,   0.,   0.
     *,1360., .66700,   4.,  -3.,3500.,   0.,   0.		     *,1360., .66700,   4.,  -3.,3500.,   0.,   0.
     *,1360., .77800, -12.,  11.,3500.,   0.,   0.		     *,1360., .77800, -12.,  11.,3500.,   0.,   0.
     *,1360., .88900, -14.,  13.,3500.,   0.,   0.		     *,1360., .88900, -14.,  13.,3500.,   0.,   0.
     *,1360.,1.00000, -16.,  15.,3500.,   0.,   0./		     *,1360.,1.00000, -16.,  15.,3500.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=865,882)/			      DATA ((DECTAB(I,J),I=1,7),J=865,882)/
     * 2360., .33300,   1.,  -2.,3500.,   0.,   0.		     * 2360., .33300,   1.,  -2.,3500.,   0.,   0.
     *,2360., .66700,   4.,  -3.,3500.,   0.,   0.		     *,2360., .66700,   4.,  -3.,3500.,   0.,   0.
     *,2360., .77800, -12.,  11.,3500.,   0.,   0.		     *,2360., .77800, -12.,  11.,3500.,   0.,   0.
     *,2360., .88900, -14.,  13.,3500.,   0.,   0.		     *,2360., .88900, -14.,  13.,3500.,   0.,   0.
     *,2360.,1.00000, -16.,  15.,3500.,   0.,   0.		     *,2360.,1.00000, -16.,  15.,3500.,   0.,   0.
     *,3360., .33300,   1.,  -2.,3500.,   0.,   0.		     *,3360., .33300,   1.,  -2.,3500.,   0.,   0.
     *,3360., .66700,   4.,  -3.,3500.,   0.,   0.		     *,3360., .66700,   4.,  -3.,3500.,   0.,   0.
     *,3360., .77800, -12.,  11.,3500.,   0.,   0.		     *,3360., .77800, -12.,  11.,3500.,   0.,   0.
     *,3360., .88900, -14.,  13.,3500.,   0.,   0.		     *,3360., .88900, -14.,  13.,3500.,   0.,   0.
     *,3360.,1.00000, -16.,  15.,3500.,   0.,   0.		     *,3360.,1.00000, -16.,  15.,3500.,   0.,   0.
     *,1151.,1.00000,1150.,  10.,   0.,   0.,   0.		     *,1151.,1.00000,1150.,  10.,   0.,   0.,   0.
     *,1251.,1.00000,1250.,  10.,   0.,   0.,   0.		     *,1251.,1.00000,1250.,  10.,   0.,   0.,   0.
     *,2251.,1.00000,2250.,  10.,   0.,   0.,   0.		     *,2251.,1.00000,2250.,  10.,   0.,   0.,   0.
     *,1351.,1.00000,1350.,  10.,   0.,   0.,   0.		     *,1351.,1.00000,1350.,  10.,   0.,   0.,   0.
     *,2351.,1.00000,2350.,  10.,   0.,   0.,   0.		     *,2351.,1.00000,2350.,  10.,   0.,   0.,   0.
     *,3351.,1.00000,3350.,  10.,   0.,   0.,   0.		     *,3351.,1.00000,3350.,  10.,   0.,   0.,   0.
     *,1161.,1.00000,1160.,  10.,   0.,   0.,   0.		     *,1161.,1.00000,1160.,  10.,   0.,   0.,   0.
     *,1261.,1.00000,1260.,  10.,   0.,   0.,   0./		     *,1261.,1.00000,1260.,  10.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=883,886)/			      DATA ((DECTAB(I,J),I=1,7),J=883,886)/
     * 2261.,1.00000,2260.,  10.,   0.,   0.,   0.		     * 2261.,1.00000,2260.,  10.,   0.,   0.,   0.
     *,1361.,1.00000,1360.,  10.,   0.,   0.,   0.		     *,1361.,1.00000,1360.,  10.,   0.,   0.,   0.
     *,2361.,1.00000,2360.,  10.,   0.,   0.,   0.		     *,2361.,1.00000,2360.,  10.,   0.,   0.,   0.
     *,3361.,1.00000,3360.,  10.,   0.,   0.,   0./		     *,3361.,1.00000,3360.,  10.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *    DELTA++ RESONANCES					C    *    DELTA++ RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=887,900)/			      DATA ((DECTAB(I,J),I=1,7),J=887,900)/
C    *--DL++(1620)---------------------------------		C    *--DL++(1620)---------------------------------
     * 1112., .30000,1120., 120.,   0.,   0.,   0.		     * 1112., .30000,1120., 120.,   0.,   0.,   0.
     *,1112., .66000,1111., 110.,   0.,   0.,   0.		     *,1112., .66000,1111., 110.,   0.,   0.,   0.
     *,1112., .90000,1121., 120.,   0.,   0.,   0.		     *,1112., .90000,1121., 120.,   0.,   0.,   0.
     *,1112.,1.00000,1120., 120., 110.,   0.,   0.		     *,1112.,1.00000,1120., 120., 110.,   0.,   0.
C    *--DL++(1700)---------------------------------		C    *--DL++(1700)---------------------------------
     *,1113., .15000,1120., 120.,   0.,   0.,   0.		     *,1113., .15000,1120., 120.,   0.,   0.,   0.
     *,1113., .51000,1111., 110.,   0.,   0.,   0.		     *,1113., .51000,1111., 110.,   0.,   0.,   0.
     *,1113., .75000,1121., 120.,   0.,   0.,   0.		     *,1113., .75000,1121., 120.,   0.,   0.,   0.
     *,1113.,1.00000,1120., 120., 110.,   0.,   0.		     *,1113.,1.00000,1120., 120., 110.,   0.,   0.
C    *--DL++(1925)---------------------------------		C    *--DL++(1925)---------------------------------
     *,1114., .28000,1120., 120.,   0.,   0.,   0.		     *,1114., .28000,1120., 120.,   0.,   0.,   0.
     *,1114., .40600,1111., 110.,   0.,   0.,   0.		     *,1114., .40600,1111., 110.,   0.,   0.,   0.
     *,1114., .49000,1121., 120.,   0.,   0.,   0.		     *,1114., .49000,1121., 120.,   0.,   0.,   0.
     *,1114., .69000,1120., 121.,   0.,   0.,   0.		     *,1114., .69000,1120., 121.,   0.,   0.,   0.
     *,1114., .70000,1130., 130.,   0.,   0.,   0.		     *,1114., .70000,1130., 130.,   0.,   0.,   0.
     *,1114.,1.00000,1122., 120.,   0.,   0.,   0./		     *,1114.,1.00000,1122., 120.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *    DELTA- RESONANCES					C    *    DELTA- RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=901,914)/			      DATA ((DECTAB(I,J),I=1,7),J=901,914)/
C    *--DL-(1620)----------------------------------		C    *--DL-(1620)----------------------------------
     * 2222., .30000,1220.,-120.,   0.,   0.,   0.		     * 2222., .30000,1220.,-120.,   0.,   0.,   0.
     *,2222., .66000,2221., 110.,   0.,   0.,   0.		     *,2222., .66000,2221., 110.,   0.,   0.,   0.
     *,2222., .90000,1221.,-120.,   0.,   0.,   0.		     *,2222., .90000,1221.,-120.,   0.,   0.,   0.
     *,2222.,1.00000,1220., 110.,-120.,   0.,   0.		     *,2222.,1.00000,1220., 110.,-120.,   0.,   0.
C    *--DL-(1700)----------------------------------		C    *--DL-(1700)----------------------------------
     *,2223., .15000,1220.,-120.,   0.,   0.,   0.		     *,2223., .15000,1220.,-120.,   0.,   0.,   0.
     *,2223., .51000,2221., 110.,   0.,   0.,   0.		     *,2223., .51000,2221., 110.,   0.,   0.,   0.
     *,2223., .75000,1221.,-120.,   0.,   0.,   0.		     *,2223., .75000,1221.,-120.,   0.,   0.,   0.
     *,2223.,1.00000,1220., 110.,-120.,   0.,   0.		     *,2223.,1.00000,1220., 110.,-120.,   0.,   0.
C    *--DL-(1925)----------------------------------		C    *--DL-(1925)----------------------------------
     *,2224., .28000,1220.,-120.,   0.,   0.,   0.		     *,2224., .28000,1220.,-120.,   0.,   0.,   0.
     *,2224., .40600,2221., 110.,   0.,   0.,   0.		     *,2224., .40600,2221., 110.,   0.,   0.,   0.
     *,2224., .49000,1221.,-120.,   0.,   0.,   0.		     *,2224., .49000,1221.,-120.,   0.,   0.,   0.
     *,2224., .69000,1220.,-121.,   0.,   0.,   0.		     *,2224., .69000,1220.,-121.,   0.,   0.,   0.
     *,2224., .70000,2230., 230.,   0.,   0.,   0.		     *,2224., .70000,2230., 230.,   0.,   0.,   0.
     *,2224.,1.00000,1222.,-120.,   0.,   0.,   0./		     *,2224.,1.00000,1222.,-120.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *    N*+ RESONANCES + DELTA+ RESONANCES			C    *    N*+ RESONANCES + DELTA+ RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=915,931)/			      DATA ((DECTAB(I,J),I=1,7),J=915,931)/
C    *--N*+(1440)----------------------------------		C    *--N*+(1440)----------------------------------
     * 1122., .20000,1120., 110.,   0.,   0.,   0.		     * 1122., .20000,1120., 110.,   0.,   0.,   0.
     *,1122., .60000,1220., 120.,   0.,   0.,   0.		     *,1122., .60000,1220., 120.,   0.,   0.,   0.
     *,1122., .68000,1111.,-120.,   0.,   0.,   0.		     *,1122., .68000,1111.,-120.,   0.,   0.,   0.
     *,1122., .73000,1121., 110.,   0.,   0.,   0.		     *,1122., .73000,1121., 110.,   0.,   0.,   0.
     *,1122., .76000,1221., 120.,   0.,   0.,   0.		     *,1122., .76000,1221., 120.,   0.,   0.,   0.
     *,1122., .84000,1120., 120.,-120.,   0.,   0.		     *,1122., .84000,1120., 120.,-120.,   0.,   0.
     *,1122., .87000,1120., 110., 110.,   0.,   0.		     *,1122., .87000,1120., 110., 110.,   0.,   0.
     *,1122.,1.00000,1220., 120., 110.,   0.,   0.		     *,1122.,1.00000,1220., 120., 110.,   0.,   0.
C    *--N*+(1530)----------------------------------		C    *--N*+(1530)----------------------------------
     *,1123., .17000,1120., 110.,   0.,   0.,   0.		     *,1123., .17000,1120., 110.,   0.,   0.,   0.
     *,1123., .51000,1220., 120.,   0.,   0.,   0.		     *,1123., .51000,1220., 120.,   0.,   0.,   0.
     *,1123., .57000,1111.,-120.,   0.,   0.,   0.		     *,1123., .57000,1111.,-120.,   0.,   0.,   0.
     *,1123., .61000,1121., 110.,   0.,   0.,   0.		     *,1123., .61000,1121., 110.,   0.,   0.,   0.
     *,1123., .63000,1221., 120.,   0.,   0.,   0.		     *,1123., .63000,1221., 120.,   0.,   0.,   0.
     *,1123., .67000,1120., 120.,-120.,   0.,   0.		     *,1123., .67000,1120., 120.,-120.,   0.,   0.
     *,1123., .68000,1120., 110., 110.,   0.,   0.		     *,1123., .68000,1120., 110., 110.,   0.,   0.
     *,1123., .75000,1220., 120., 110.,   0.,   0.		     *,1123., .75000,1220., 120., 110.,   0.,   0.
     *,1123.,1.00000,1120., 220.,   0.,   0.,   0./		     *,1123.,1.00000,1120., 220.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=932,948)/			      DATA ((DECTAB(I,J),I=1,7),J=932,948)/
C    *--DL+(1620)----------------------------------		C    *--DL+(1620)----------------------------------
     * 1124., .20000,1120., 110.,   0.,   0.,   0.		     * 1124., .20000,1120., 110.,   0.,   0.,   0.
     *,1124., .30000,1220., 120.,   0.,   0.,   0.		     *,1124., .30000,1220., 120.,   0.,   0.,   0.
     *,1124., .54000,1111.,-120.,   0.,   0.,   0.		     *,1124., .54000,1111.,-120.,   0.,   0.,   0.
     *,1124., .58000,1121., 110.,   0.,   0.,   0.		     *,1124., .58000,1121., 110.,   0.,   0.,   0.
     *,1124., .90000,1221., 120.,   0.,   0.,   0.		     *,1124., .90000,1221., 120.,   0.,   0.,   0.
     *,1124., .96000,1120., 120.,-120.,   0.,   0.		     *,1124., .96000,1120., 120.,-120.,   0.,   0.
     *,1124.,1.00000,1220., 120., 110.,   0.,   0.		     *,1124.,1.00000,1220., 120., 110.,   0.,   0.
C    *--N*+(1665)----------------------------------		C    *--N*+(1665)----------------------------------
     *,1125., .16700,1120., 110.,   0.,   0.,   0.		     *,1125., .16700,1120., 110.,   0.,   0.,   0.
     *,1125., .49970,1220., 120.,   0.,   0.,   0.		     *,1125., .49970,1220., 120.,   0.,   0.,   0.
     *,1125., .62470,1111.,-120.,   0.,   0.,   0.		     *,1125., .62470,1111.,-120.,   0.,   0.,   0.
     *,1125., .70800,1121., 110.,   0.,   0.,   0.		     *,1125., .70800,1121., 110.,   0.,   0.,   0.
     *,1125., .74970,1221., 120.,   0.,   0.,   0.		     *,1125., .74970,1221., 120.,   0.,   0.,   0.
     *,1125., .82080,1120., 120.,-120.,   0.,   0.		     *,1125., .82080,1120., 120.,-120.,   0.,   0.
     *,1125., .85190,1120., 110., 110.,   0.,   0.		     *,1125., .85190,1120., 110., 110.,   0.,   0.
     *,1125., .96300,1220., 120., 110.,   0.,   0.		     *,1125., .96300,1220., 120., 110.,   0.,   0.
     *,1125., .97300,1120., 220.,   0.,   0.,   0.		     *,1125., .97300,1120., 220.,   0.,   0.,   0.
     *,1125.,1.00000,2130., 130.,   0.,   0.,   0./		     *,1125.,1.00000,2130., 130.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=949,955)/			      DATA ((DECTAB(I,J),I=1,7),J=949,955)/
C    *--DL+(1700)----------------------------------		C    *--DL+(1700)----------------------------------
     * 1126., .10000,1120., 110.,   0.,   0.,   0.		     * 1126., .10000,1120., 110.,   0.,   0.,   0.
     *,1126., .15000,1220., 120.,   0.,   0.,   0.		     *,1126., .15000,1220., 120.,   0.,   0.,   0.
     *,1126., .39000,1111.,-120.,   0.,   0.,   0.		     *,1126., .39000,1111.,-120.,   0.,   0.,   0.
     *,1126., .43000,1121., 110.,   0.,   0.,   0.		     *,1126., .43000,1121., 110.,   0.,   0.,   0.
     *,1126., .75000,1221., 120.,   0.,   0.,   0.		     *,1126., .75000,1221., 120.,   0.,   0.,   0.
     *,1126., .91500,1120., 120.,-120.,   0.,   0.		     *,1126., .91500,1120., 120.,-120.,   0.,   0.
     *,1126.,1.00000,1220., 120., 110.,   0.,   0./		     *,1126.,1.00000,1220., 120., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=956,969)/			      DATA ((DECTAB(I,J),I=1,7),J=956,969)/
C    *--N*+(1710)----------------------------------		C    *--N*+(1710)----------------------------------
     * 1127., .04430,1120., 110.,   0.,   0.,   0.		     * 1127., .04430,1120., 110.,   0.,   0.,   0.
     *,1127., .13290,1220., 120.,   0.,   0.,   0.		     *,1127., .13290,1220., 120.,   0.,   0.,   0.
     *,1127., .23790,1111.,-120.,   0.,   0.,   0.		     *,1127., .23790,1111.,-120.,   0.,   0.,   0.
     *,1127., .30790,1121., 110.,   0.,   0.,   0.		     *,1127., .30790,1121., 110.,   0.,   0.,   0.
     *,1127., .34290,1221., 120.,   0.,   0.,   0.		     *,1127., .34290,1221., 120.,   0.,   0.,   0.
     *,1127., .41190,1120., 120.,-120.,   0.,   0.		     *,1127., .41190,1120., 120.,-120.,   0.,   0.
     *,1127., .48090,1120., 110., 110.,   0.,   0.		     *,1127., .48090,1120., 110., 110.,   0.,   0.
     *,1127., .54990,1220., 120., 110.,   0.,   0.		     *,1127., .54990,1220., 120., 110.,   0.,   0.
     *,1127., .66070,1120., 220.,   0.,   0.,   0.		     *,1127., .66070,1120., 220.,   0.,   0.,   0.
     *,1127., .72800,2130., 130.,   0.,   0.,   0.		     *,1127., .72800,2130., 130.,   0.,   0.,   0.
     *,1127., .74930,1230., 130.,   0.,   0.,   0.		     *,1127., .74930,1230., 130.,   0.,   0.,   0.
     *,1127., .76000,1130., 230.,   0.,   0.,   0.		     *,1127., .76000,1130., 230.,   0.,   0.,   0.
     *,1127., .84000,1120., 111.,   0.,   0.,   0.		     *,1127., .84000,1120., 111.,   0.,   0.,   0.
     *,1127.,1.00000,1220., 121.,   0.,   0.,   0./		     *,1127.,1.00000,1220., 121.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=970,980)/			      DATA ((DECTAB(I,J),I=1,7),J=970,980)/
C    *--DL+(1925)----------------------------------		C    *--DL+(1925)----------------------------------
     * 1128., .18700,1120., 110.,   0.,   0.,   0.		     * 1128., .18700,1120., 110.,   0.,   0.,   0.
     *,1128., .28000,1220., 120.,   0.,   0.,   0.		     *,1128., .28000,1220., 120.,   0.,   0.,   0.
     *,1128., .36400,1111.,-120.,   0.,   0.,   0.		     *,1128., .36400,1111.,-120.,   0.,   0.,   0.
     *,1128., .37800,1121., 110.,   0.,   0.,   0.		     *,1128., .37800,1121., 110.,   0.,   0.,   0.
     *,1128., .49000,1221., 120.,   0.,   0.,   0.		     *,1128., .49000,1221., 120.,   0.,   0.,   0.
     *,1128., .62300,1120., 111.,   0.,   0.,   0.		     *,1128., .62300,1120., 111.,   0.,   0.,   0.
     *,1128., .69000,1220., 121.,   0.,   0.,   0.		     *,1128., .69000,1220., 121.,   0.,   0.,   0.
     *,1128., .69350,1130., 230.,   0.,   0.,   0.		     *,1128., .69350,1130., 230.,   0.,   0.,   0.
     *,1128., .69900,1230., 130.,   0.,   0.,   0.		     *,1128., .69900,1230., 130.,   0.,   0.,   0.
     *,1128., .89900,1122., 110.,   0.,   0.,   0.		     *,1128., .89900,1122., 110.,   0.,   0.,   0.
     *,1128.,1.00000,1222., 120.,   0.,   0.,   0./		     *,1128.,1.00000,1222., 120.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *    N*0  RESONANCES + DELTA0 RESONANCES			C    *    N*0  RESONANCES + DELTA0 RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=981,997)/			      DATA ((DECTAB(I,J),I=1,7),J=981,997)/
C    *----------N*0(1440)--------------------------		C    *----------N*0(1440)--------------------------
     * 1222., .20000,1220., 110.,   0.,   0.,   0.		     * 1222., .20000,1220., 110.,   0.,   0.,   0.
     *,1222., .60000,1120.,-120.,   0.,   0.,   0.		     *,1222., .60000,1120.,-120.,   0.,   0.,   0.
     *,1222., .68000,2221., 120.,   0.,   0.,   0.		     *,1222., .68000,2221., 120.,   0.,   0.,   0.
     *,1222., .73000,1221., 110.,   0.,   0.,   0.		     *,1222., .73000,1221., 110.,   0.,   0.,   0.
     *,1222., .76000,1121.,-120.,   0.,   0.,   0.		     *,1222., .76000,1121.,-120.,   0.,   0.,   0.
     *,1222., .84000,1220., 120.,-120.,   0.,   0.		     *,1222., .84000,1220., 120.,-120.,   0.,   0.
     *,1222., .87000,1220., 110., 110.,   0.,   0.		     *,1222., .87000,1220., 110., 110.,   0.,   0.
     *,1222.,1.00000,1120.,-120., 110.,   0.,   0.		     *,1222.,1.00000,1120.,-120., 110.,   0.,   0.
C    *----------N*0(1530)--------------------------		C    *----------N*0(1530)--------------------------
     *,1223., .17000,1220., 110.,   0.,   0.,   0.		     *,1223., .17000,1220., 110.,   0.,   0.,   0.
     *,1223., .51000,1120.,-120.,   0.,   0.,   0.		     *,1223., .51000,1120.,-120.,   0.,   0.,   0.
     *,1223., .57000,2221., 120.,   0.,   0.,   0.		     *,1223., .57000,2221., 120.,   0.,   0.,   0.
     *,1223., .61000,1221., 110.,   0.,   0.,   0.		     *,1223., .61000,1221., 110.,   0.,   0.,   0.
     *,1223., .63000,1121.,-120.,   0.,   0.,   0.		     *,1223., .63000,1121.,-120.,   0.,   0.,   0.
     *,1223., .67000,1220., 120.,-120.,   0.,   0.		     *,1223., .67000,1220., 120.,-120.,   0.,   0.
     *,1223., .68000,1220., 110., 110.,   0.,   0.		     *,1223., .68000,1220., 110., 110.,   0.,   0.
     *,1223., .75000,1120.,-120., 110.,   0.,   0.		     *,1223., .75000,1120.,-120., 110.,   0.,   0.
     *,1223.,1.00000,1220., 220.,   0.,   0.,   0./		     *,1223.,1.00000,1220., 220.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=998,1014)/			      DATA ((DECTAB(I,J),I=1,7),J=998,1014)/
C    *----------DL0(1620)--------------------------		C    *----------DL0(1620)--------------------------
     * 1224., .20000,1220., 110.,   0.,   0.,   0.		     * 1224., .20000,1220., 110.,   0.,   0.,   0.
     *,1224., .30000,1120.,-120.,   0.,   0.,   0.		     *,1224., .30000,1120.,-120.,   0.,   0.,   0.
     *,1224., .54000,2221., 120.,   0.,   0.,   0.		     *,1224., .54000,2221., 120.,   0.,   0.,   0.
     *,1224., .58000,1221., 110.,   0.,   0.,   0.		     *,1224., .58000,1221., 110.,   0.,   0.,   0.
     *,1224., .90000,1121.,-120.,   0.,   0.,   0.		     *,1224., .90000,1121.,-120.,   0.,   0.,   0.
     *,1224., .96500,1220., 120.,-120.,   0.,   0.		     *,1224., .96500,1220., 120.,-120.,   0.,   0.
     *,1224.,1.00000,1120.,-120., 110.,   0.,   0.		     *,1224.,1.00000,1120.,-120., 110.,   0.,   0.
C    *----------N*0(1665)--------------------------		C    *----------N*0(1665)--------------------------
     *,1225., .16700,1220., 110.,   0.,   0.,   0.		     *,1225., .16700,1220., 110.,   0.,   0.,   0.
     *,1225., .49970,1120.,-120.,   0.,   0.,   0.		     *,1225., .49970,1120.,-120.,   0.,   0.,   0.
     *,1225., .62470,2221., 120.,   0.,   0.,   0.		     *,1225., .62470,2221., 120.,   0.,   0.,   0.
     *,1225., .70800,1221., 110.,   0.,   0.,   0.		     *,1225., .70800,1221., 110.,   0.,   0.,   0.
     *,1225., .74970,1121.,-120.,   0.,   0.,   0.		     *,1225., .74970,1121.,-120.,   0.,   0.,   0.
     *,1225., .82080,1220., 120.,-120.,   0.,   0.		     *,1225., .82080,1220., 120.,-120.,   0.,   0.
     *,1225., .85190,1220., 110., 110.,   0.,   0.		     *,1225., .85190,1220., 110., 110.,   0.,   0.
     *,1225., .96300,1120.,-120., 110.,   0.,   0.		     *,1225., .96300,1120.,-120., 110.,   0.,   0.
     *,1225., .97300,1220., 220.,   0.,   0.,   0.		     *,1225., .97300,1220., 220.,   0.,   0.,   0.
     *,1225.,1.00000,2130., 230.,   0.,   0.,   0./		     *,1225.,1.00000,2130., 230.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1015,1021)/			      DATA ((DECTAB(I,J),I=1,7),J=1015,1021)/
C    *----------DL0(1700)--------------------------		C    *----------DL0(1700)--------------------------
     * 1226., .10000,1220., 110.,   0.,   0.,   0.		     * 1226., .10000,1220., 110.,   0.,   0.,   0.
     *,1226., .15000,1120.,-120.,   0.,   0.,   0.		     *,1226., .15000,1120.,-120.,   0.,   0.,   0.
     *,1226., .39000,2221., 120.,   0.,   0.,   0.		     *,1226., .39000,2221., 120.,   0.,   0.,   0.
     *,1226., .43000,1221., 110.,   0.,   0.,   0.		     *,1226., .43000,1221., 110.,   0.,   0.,   0.
     *,1226., .75000,1121.,-120.,   0.,   0.,   0.		     *,1226., .75000,1121.,-120.,   0.,   0.,   0.
     *,1226., .91500,1220., 120.,-120.,   0.,   0.		     *,1226., .91500,1220., 120.,-120.,   0.,   0.
     *,1226.,1.00000,1120.,-120., 110.,   0.,   0./		     *,1226.,1.00000,1120.,-120., 110.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1022,1035)/			      DATA ((DECTAB(I,J),I=1,7),J=1022,1035)/
C    *----------N*0(1710)--------------------------		C    *----------N*0(1710)--------------------------
     * 1227., .04430,1220., 110.,   0.,   0.,   0.		     * 1227., .04430,1220., 110.,   0.,   0.,   0.
     *,1227., .13290,1120.,-120.,   0.,   0.,   0.		     *,1227., .13290,1120.,-120.,   0.,   0.,   0.
     *,1227., .23790,2221., 120.,   0.,   0.,   0.		     *,1227., .23790,2221., 120.,   0.,   0.,   0.
     *,1227., .30790,1221., 110.,   0.,   0.,   0.		     *,1227., .30790,1221., 110.,   0.,   0.,   0.
     *,1227., .34290,1121.,-120.,   0.,   0.,   0.		     *,1227., .34290,1121.,-120.,   0.,   0.,   0.
     *,1227., .41190,1220., 120.,-120.,   0.,   0.		     *,1227., .41190,1220., 120.,-120.,   0.,   0.
     *,1227., .48090,1220., 110., 110.,   0.,   0.		     *,1227., .48090,1220., 110., 110.,   0.,   0.
     *,1227., .54990,1120.,-120., 110.,   0.,   0.		     *,1227., .54990,1120.,-120., 110.,   0.,   0.
     *,1227., .66070,1220., 220.,   0.,   0.,   0.		     *,1227., .66070,1220., 220.,   0.,   0.,   0.
     *,1227., .72800,2130., 230.,   0.,   0.,   0.		     *,1227., .72800,2130., 230.,   0.,   0.,   0.
     *,1227., .73870,1230., 230.,   0.,   0.,   0.		     *,1227., .73870,1230., 230.,   0.,   0.,   0.
     *,1227., .76000,2230., 130.,   0.,   0.,   0.		     *,1227., .76000,2230., 130.,   0.,   0.,   0.
     *,1227., .92000,1120.,-121.,   0.,   0.,   0.		     *,1227., .92000,1120.,-121.,   0.,   0.,   0.
     *,1227.,1.00000,1220., 111.,   0.,   0.,   0./		     *,1227.,1.00000,1220., 111.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1036,1046)/			      DATA ((DECTAB(I,J),I=1,7),J=1036,1046)/
C    *----------DL0(1925)--------------------------		C    *----------DL0(1925)--------------------------
     * 1228., .18700,1220., 110.,   0.,   0.,   0.		     * 1228., .18700,1220., 110.,   0.,   0.,   0.
     *,1228., .28000,1120.,-120.,   0.,   0.,   0.		     *,1228., .28000,1120.,-120.,   0.,   0.,   0.
     *,1228., .36400,2221., 120.,   0.,   0.,   0.		     *,1228., .36400,2221., 120.,   0.,   0.,   0.
     *,1228., .37800,1221., 110.,   0.,   0.,   0.		     *,1228., .37800,1221., 110.,   0.,   0.,   0.
     *,1228., .49000,1121.,-120.,   0.,   0.,   0.		     *,1228., .49000,1121.,-120.,   0.,   0.,   0.
     *,1228., .55700,1220., 111.,   0.,   0.,   0.		     *,1228., .55700,1220., 111.,   0.,   0.,   0.
     *,1228., .69000,1120.,-121.,   0.,   0.,   0.		     *,1228., .69000,1120.,-121.,   0.,   0.,   0.
     *,1228., .69350,2230., 130.,   0.,   0.,   0.		     *,1228., .69350,2230., 130.,   0.,   0.,   0.
     *,1228., .70000,1230., 230.,   0.,   0.,   0.		     *,1228., .70000,1230., 230.,   0.,   0.,   0.
     *,1228., .80000,1122.,-120.,   0.,   0.,   0.		     *,1228., .80000,1122.,-120.,   0.,   0.,   0.
     *,1228.,1.00000,1222., 110.,   0.,   0.,   0./		     *,1228.,1.00000,1222., 110.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *   LAMBDA RESONANCES + SIGMA0 RESONANCES			C    *   LAMBDA RESONANCES + SIGMA0 RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=1047,1059)/			      DATA ((DECTAB(I,J),I=1,7),J=1047,1059)/
C    *----------LAMBDA(1405)-----------------------		C    *----------LAMBDA(1405)-----------------------
     * 1233., .33000,1230., 110.,   0.,   0.,   0.		     * 1233., .33000,1230., 110.,   0.,   0.,   0.
     *,1233., .66000,2230., 120.,   0.,   0.,   0.		     *,1233., .66000,2230., 120.,   0.,   0.,   0.
     *,1233.,1.00000,1130.,-120.,   0.,   0.,   0.		     *,1233.,1.00000,1130.,-120.,   0.,   0.,   0.
C    *----------LAMBDA(1520)-----------------------		C    *----------LAMBDA(1520)-----------------------
     *,1234., .22500,1120.,-130.,   0.,   0.,   0.		     *,1234., .22500,1120.,-130.,   0.,   0.,   0.
     *,1234., .48000,1220.,-230.,   0.,   0.,   0.		     *,1234., .48000,1220.,-230.,   0.,   0.,   0.
     *,1234., .62000,1230., 110.,   0.,   0.,   0.		     *,1234., .62000,1230., 110.,   0.,   0.,   0.
     *,1234., .76000,2230., 120.,   0.,   0.,   0.		     *,1234., .76000,2230., 120.,   0.,   0.,   0.
     *,1234., .90000,1130.,-120.,   0.,   0.,   0.		     *,1234., .90000,1130.,-120.,   0.,   0.,   0.
     *,1234., .96000,2130., 120.,-120.,   0.,   0.		     *,1234., .96000,2130., 120.,-120.,   0.,   0.
     *,1234., .99000,2130., 110., 110.,   0.,   0.		     *,1234., .99000,2130., 110., 110.,   0.,   0.
     *,1234., .99330,1130.,-120., 110.,   0.,   0.		     *,1234., .99330,1130.,-120., 110.,   0.,   0.
     *,1234., .99660,2230., 120., 110.,   0.,   0.		     *,1234., .99660,2230., 120., 110.,   0.,   0.
     *,1234.,1.00000,1230., 120.,-120.,   0.,   0./		     *,1234.,1.00000,1230., 120.,-120.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1060,1075)/			      DATA ((DECTAB(I,J),I=1,7),J=1060,1075)/
C    *----------LAMBDA(1645)-----------------------		C    *----------LAMBDA(1645)-----------------------
     * 1235., .10000,1120.,-130.,   0.,   0.,   0.		     * 1235., .10000,1120.,-130.,   0.,   0.,   0.
     *,1235., .20000,1220.,-230.,   0.,   0.,   0.		     *,1235., .20000,1220.,-230.,   0.,   0.,   0.
     *,1235., .35000,1230., 110.,   0.,   0.,   0.		     *,1235., .35000,1230., 110.,   0.,   0.,   0.
     *,1235., .50000,2230., 120.,   0.,   0.,   0.		     *,1235., .50000,2230., 120.,   0.,   0.,   0.
     *,1235., .65000,1130.,-120.,   0.,   0.,   0.		     *,1235., .65000,1130.,-120.,   0.,   0.,   0.
     *,1235., .75000,2130., 120.,-120.,   0.,   0.		     *,1235., .75000,2130., 120.,-120.,   0.,   0.
     *,1235., .80000,2130., 110., 110.,   0.,   0.		     *,1235., .80000,2130., 110., 110.,   0.,   0.
     *,1235., .84500,1130.,-120., 110.,   0.,   0.		     *,1235., .84500,1130.,-120., 110.,   0.,   0.
     *,1235., .89000,2230., 120., 110.,   0.,   0.		     *,1235., .89000,2230., 120., 110.,   0.,   0.
     *,1235., .93500,1230., 120.,-120.,   0.,   0.		     *,1235., .93500,1230., 120.,-120.,   0.,   0.
     *,1235.,1.00000,2130., 220.,   0.,   0.,   0.		     *,1235.,1.00000,2130., 220.,   0.,   0.,   0.
C    *----------SIGMA0(1665)-----------------------		C    *----------SIGMA0(1665)-----------------------
     *,1236., .10000,1120.,-130.,   0.,   0.,   0.		     *,1236., .10000,1120.,-130.,   0.,   0.,   0.
     *,1236., .20000,1220.,-230.,   0.,   0.,   0.		     *,1236., .20000,1220.,-230.,   0.,   0.,   0.
     *,1236., .40000,2230., 120.,   0.,   0.,   0.		     *,1236., .40000,2230., 120.,   0.,   0.,   0.
     *,1236., .60000,1130.,-120.,   0.,   0.,   0.		     *,1236., .60000,1130.,-120.,   0.,   0.,   0.
     *,1236.,1.00000,2130., 110.,   0.,   0.,   0./		     *,1236.,1.00000,2130., 110.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1076,1084)/			      DATA ((DECTAB(I,J),I=1,7),J=1076,1084)/
C    *----------SIGMA0(1776)-----------------------		C    *----------SIGMA0(1776)-----------------------
     * 1237., .17500,1120.,-130.,   0.,   0.,   0.		     * 1237., .17500,1120.,-130.,   0.,   0.,   0.
     *,1237., .35000,1220.,-230.,   0.,   0.,   0.		     *,1237., .35000,1220.,-230.,   0.,   0.,   0.
     *,1237., .38750,2230., 120.,   0.,   0.,   0.		     *,1237., .38750,2230., 120.,   0.,   0.,   0.
     *,1237., .42500,1130.,-120.,   0.,   0.,   0.		     *,1237., .42500,1130.,-120.,   0.,   0.,   0.
     *,1237., .57500,2130., 110.,   0.,   0.,   0.		     *,1237., .57500,2130., 110.,   0.,   0.,   0.
     *,1237., .60000,2231., 120.,   0.,   0.,   0.		     *,1237., .60000,2231., 120.,   0.,   0.,   0.
     *,1237., .62500,1131.,-120.,   0.,   0.,   0.		     *,1237., .62500,1131.,-120.,   0.,   0.,   0.
     *,1237., .75000,1234., 110.,   0.,   0.,   0.		     *,1237., .75000,1234., 110.,   0.,   0.,   0.
     *,1237.,1.00000,1230., 220.,   0.,   0.,   0./		     *,1237.,1.00000,1230., 220.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1085,1094)/			      DATA ((DECTAB(I,J),I=1,7),J=1085,1094)/
C    *----------LAMBDA(1845)-----------------------		C    *----------LAMBDA(1845)-----------------------
     * 1238., .17000,1120.,-130.,   0.,   0.,   0.		     * 1238., .17000,1120.,-130.,   0.,   0.,   0.
     *,1238., .34000,1220.,-230.,   0.,   0.,   0.		     *,1238., .34000,1220.,-230.,   0.,   0.,   0.
     *,1238., .44000,1230., 110.,   0.,   0.,   0.		     *,1238., .44000,1230., 110.,   0.,   0.,   0.
     *,1238., .54000,2230., 120.,   0.,   0.,   0.		     *,1238., .54000,2230., 120.,   0.,   0.,   0.
     *,1238., .64000,1130.,-120.,   0.,   0.,   0.		     *,1238., .64000,1130.,-120.,   0.,   0.,   0.
     *,1238., .70000,1231., 110.,   0.,   0.,   0.		     *,1238., .70000,1231., 110.,   0.,   0.,   0.
     *,1238., .76000,2231., 120.,   0.,   0.,   0.		     *,1238., .76000,2231., 120.,   0.,   0.,   0.
     *,1238., .82000,1131.,-120.,   0.,   0.,   0.		     *,1238., .82000,1131.,-120.,   0.,   0.,   0.
     *,1238., .91000,1120.,-131.,   0.,   0.,   0.		     *,1238., .91000,1120.,-131.,   0.,   0.,   0.
     *,1238.,1.00000,1220.,-231.,   0.,   0.,   0./		     *,1238.,1.00000,1220.,-231.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1095,1106)/			      DATA ((DECTAB(I,J),I=1,7),J=1095,1106)/
C    *----------SIGMA0(1930)-----------------------		C    *----------SIGMA0(1930)-----------------------
     * 1239., .07500,1120.,-130.,   0.,   0.,   0.		     * 1239., .07500,1120.,-130.,   0.,   0.,   0.
     *,1239., .15000,1220.,-230.,   0.,   0.,   0.		     *,1239., .15000,1220.,-230.,   0.,   0.,   0.
     *,1239., .20000,1121.,-130.,   0.,   0.,   0.		     *,1239., .20000,1121.,-130.,   0.,   0.,   0.
     *,1239., .25000,1221.,-230.,   0.,   0.,   0.		     *,1239., .25000,1221.,-230.,   0.,   0.,   0.
     *,1239., .32500,1120.,-131.,   0.,   0.,   0.		     *,1239., .32500,1120.,-131.,   0.,   0.,   0.
     *,1239., .40000,1220.,-231.,   0.,   0.,   0.		     *,1239., .40000,1220.,-231.,   0.,   0.,   0.
     *,1239., .47500,2230., 120.,   0.,   0.,   0.		     *,1239., .47500,2230., 120.,   0.,   0.,   0.
     *,1239., .55000,1130.,-120.,   0.,   0.,   0.		     *,1239., .55000,1130.,-120.,   0.,   0.,   0.
     *,1239., .70000,2130., 110.,   0.,   0.,   0.		     *,1239., .70000,2130., 110.,   0.,   0.,   0.
     *,1239., .77500,2231., 120.,   0.,   0.,   0.		     *,1239., .77500,2231., 120.,   0.,   0.,   0.
     *,1239., .85000,1131.,-120.,   0.,   0.,   0.		     *,1239., .85000,1131.,-120.,   0.,   0.,   0.
     *,1239.,1.00000,1234., 110.,   0.,   0.,   0./		     *,1239.,1.00000,1234., 110.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *            SIGMA+ RESONANCES				C    *            SIGMA+ RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=1107,1118)/			      DATA ((DECTAB(I,J),I=1,7),J=1107,1118)/
C    *----------SIGMA+(1665)-----------------------		C    *----------SIGMA+(1665)-----------------------
     * 1132., .20000,1120.,-230.,   0.,   0.,   0.		     * 1132., .20000,1120.,-230.,   0.,   0.,   0.
     *,1132., .40000,1130., 110.,   0.,   0.,   0.		     *,1132., .40000,1130., 110.,   0.,   0.,   0.
     *,1132., .60000,1230., 120.,   0.,   0.,   0.		     *,1132., .60000,1230., 120.,   0.,   0.,   0.
     *,1132.,1.00000,2130., 120.,   0.,   0.,   0.		     *,1132.,1.00000,2130., 120.,   0.,   0.,   0.
C    *----------SIGMA+(1776)-----------------------		C    *----------SIGMA+(1776)-----------------------
     *,1133., .35000,1120.,-230.,   0.,   0.,   0.		     *,1133., .35000,1120.,-230.,   0.,   0.,   0.
     *,1133., .38750,1130., 110.,   0.,   0.,   0.		     *,1133., .38750,1130., 110.,   0.,   0.,   0.
     *,1133., .42500,1230., 120.,   0.,   0.,   0.		     *,1133., .42500,1230., 120.,   0.,   0.,   0.
     *,1133., .57500,2130., 120.,   0.,   0.,   0.		     *,1133., .57500,2130., 120.,   0.,   0.,   0.
     *,1133., .60000,1131., 110.,   0.,   0.,   0.		     *,1133., .60000,1131., 110.,   0.,   0.,   0.
     *,1133., .62500,1231., 120.,   0.,   0.,   0.		     *,1133., .62500,1231., 120.,   0.,   0.,   0.
     *,1133., .75000,1234., 120.,   0.,   0.,   0.		     *,1133., .75000,1234., 120.,   0.,   0.,   0.
     *,1133.,1.00000,1130., 220.,   0.,   0.,   0./		     *,1133.,1.00000,1130., 220.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1119,1128)/			      DATA ((DECTAB(I,J),I=1,7),J=1119,1128)/
C    *----------SIGMA+(1930)-----------------------		C    *----------SIGMA+(1930)-----------------------
     * 1134., .15000,1120.,-230.,   0.,   0.,   0.		     * 1134., .15000,1120.,-230.,   0.,   0.,   0.
     *,1134., .22500,1111.,-130.,   0.,   0.,   0.		     *,1134., .22500,1111.,-130.,   0.,   0.,   0.
     *,1134., .25000,1121.,-230.,   0.,   0.,   0.		     *,1134., .25000,1121.,-230.,   0.,   0.,   0.
     *,1134., .40000,1120.,-231.,   0.,   0.,   0.		     *,1134., .40000,1120.,-231.,   0.,   0.,   0.
     *,1134., .47500,1130., 110.,   0.,   0.,   0.		     *,1134., .47500,1130., 110.,   0.,   0.,   0.
     *,1134., .55000,1230., 120.,   0.,   0.,   0.		     *,1134., .55000,1230., 120.,   0.,   0.,   0.
     *,1134., .70000,2130., 120.,   0.,   0.,   0.		     *,1134., .70000,2130., 120.,   0.,   0.,   0.
     *,1134., .77500,1131., 110.,   0.,   0.,   0.		     *,1134., .77500,1131., 110.,   0.,   0.,   0.
     *,1134., .85000,1231., 120.,   0.,   0.,   0.		     *,1134., .85000,1231., 120.,   0.,   0.,   0.
     *,1134.,1.00000,1234., 120.,   0.,   0.,   0./		     *,1134.,1.00000,1234., 120.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *            SIGMA- RESONANCES				C    *            SIGMA- RESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=1129,1140)/			      DATA ((DECTAB(I,J),I=1,7),J=1129,1140)/
C    *----------SIGMA-(1665)-----------------------		C    *----------SIGMA-(1665)-----------------------
     * 2232., .20000,1220.,-130.,   0.,   0.,   0.		     * 2232., .20000,1220.,-130.,   0.,   0.,   0.
     *,2232., .40000,2230., 110.,   0.,   0.,   0.		     *,2232., .40000,2230., 110.,   0.,   0.,   0.
     *,2232., .60000,1230.,-120.,   0.,   0.,   0.		     *,2232., .60000,1230.,-120.,   0.,   0.,   0.
     *,2232.,1.00000,2130.,-120.,   0.,   0.,   0.		     *,2232.,1.00000,2130.,-120.,   0.,   0.,   0.
C    *----------SIGMA-(1776)-----------------------		C    *----------SIGMA-(1776)-----------------------
     *,2233., .35000,1220.,-130.,   0.,   0.,   0.		     *,2233., .35000,1220.,-130.,   0.,   0.,   0.
     *,2233., .38750,2230., 110.,   0.,   0.,   0.		     *,2233., .38750,2230., 110.,   0.,   0.,   0.
     *,2233., .42500,1230.,-120.,   0.,   0.,   0.		     *,2233., .42500,1230.,-120.,   0.,   0.,   0.
     *,2233., .57500,2130.,-120.,   0.,   0.,   0.		     *,2233., .57500,2130.,-120.,   0.,   0.,   0.
     *,2233., .60000,2231., 110.,   0.,   0.,   0.		     *,2233., .60000,2231., 110.,   0.,   0.,   0.
     *,2233., .62500,1231.,-120.,   0.,   0.,   0.		     *,2233., .62500,1231.,-120.,   0.,   0.,   0.
     *,2233., .75000,1234.,-120.,   0.,   0.,   0.		     *,2233., .75000,1234.,-120.,   0.,   0.,   0.
     *,2233.,1.00000,2230., 220.,   0.,   0.,   0./		     *,2233.,1.00000,2230., 220.,   0.,   0.,   0./
      DATA ((DECTAB(I,J),I=1,7),J=1141,1150)/			      DATA ((DECTAB(I,J),I=1,7),J=1141,1150)/
C    *----------SIGMA-(1930)-----------------------		C    *----------SIGMA-(1930)-----------------------
     * 2234., .15000,1220.,-130.,   0.,   0.,   0.		     * 2234., .15000,1220.,-130.,   0.,   0.,   0.
     *,2234., .17500,1221.,-130.,   0.,   0.,   0.		     *,2234., .17500,1221.,-130.,   0.,   0.,   0.
     *,2234., .25000,2221.,-230.,   0.,   0.,   0.		     *,2234., .25000,2221.,-230.,   0.,   0.,   0.
     *,2234., .40000,1220.,-131.,   0.,   0.,   0.		     *,2234., .40000,1220.,-131.,   0.,   0.,   0.
     *,2234., .47500,2230., 110.,   0.,   0.,   0.		     *,2234., .47500,2230., 110.,   0.,   0.,   0.
     *,2234., .55000,1230.,-120.,   0.,   0.,   0.		     *,2234., .55000,1230.,-120.,   0.,   0.,   0.
     *,2234., .70000,2130.,-120.,   0.,   0.,   0.		     *,2234., .70000,2130.,-120.,   0.,   0.,   0.
     *,2234., .77500,2231., 110.,   0.,   0.,   0.		     *,2234., .77500,2231., 110.,   0.,   0.,   0.
     *,2234., .85000,1231.,-120.,   0.,   0.,   0.		     *,2234., .85000,1231.,-120.,   0.,   0.,   0.
     *,2234.,1.00000,1234.,-120.,   0.,   0.,   0./		     *,2234.,1.00000,1234.,-120.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *      ADDITIONAL MESONRESONANCES				C    *      ADDITIONAL MESONRESONANCES
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=1151,1159)/			      DATA ((DECTAB(I,J),I=1,7),J=1151,1159)/
C    *-----------F0(975)---------------------------		C    *-----------F0(975)---------------------------
     *  332., .50000, 120.,-120.,   0.,   0.,   0.		     *  332., .50000, 120.,-120.,   0.,   0.,   0.
     *, 332., .75000, 110., 110.,   0.,   0.,   0.		     *, 332., .75000, 110., 110.,   0.,   0.,   0.
     *, 332., .87500, 130.,-130.,   0.,   0.,   0.		     *, 332., .87500, 130.,-130.,   0.,   0.,   0.
     *, 332.,1.00000, 230.,-230.,   0.,   0.,   0.		     *, 332.,1.00000, 230.,-230.,   0.,   0.,   0.
C    *-----------A0(980)---------------------------		C    *-----------A0(980)---------------------------
     *, 112., .56000, 110., 220.,   0.,   0.,   0.		     *, 112., .56000, 110., 220.,   0.,   0.,   0.
     *, 112., .78000, 130.,-130.,   0.,   0.,   0.		     *, 112., .78000, 130.,-130.,   0.,   0.,   0.
     *, 112.,1.00000, 230.,-230.,   0.,   0.,   0.		     *, 112.,1.00000, 230.,-230.,   0.,   0.,   0.
C    *-----------A+(980)---------------------------		C    *-----------A+(980)---------------------------
     *, 122., .60000, 120., 220.,   0.,   0.,   0.		     *, 122., .60000, 120., 220.,   0.,   0.,   0.
     *, 122.,1.00000, 130.,-230.,   0.,   0.,   0./		     *, 122.,1.00000, 130.,-230.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *      WEAK BARYON DECAYS					C    *      WEAK BARYON DECAYS
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=1160,1169)/			      DATA ((DECTAB(I,J),I=1,7),J=1160,1169)/
C    *-----------LAMBDA(1116)----------------------		C    *-----------LAMBDA(1116)----------------------
     * 2130.,0.64200,1120.,-120.,   0.,   0.,   0.		     * 2130.,0.64200,1120.,-120.,   0.,   0.,   0.
     *,2130.,1.00000,1220., 110.,   0.,   0.,   0.		     *,2130.,1.00000,1220., 110.,   0.,   0.,   0.
C    *-----------SIGMA+(1180)----------------------		C    *-----------SIGMA+(1180)----------------------
     *,1130.,0.51580,1120., 110.,   0.,   0.,   0.		     *,1130.,0.51580,1120., 110.,   0.,   0.,   0.
     *,1130.,1.00000,1220., 120.,   0.,   0.,   0.		     *,1130.,1.00000,1220., 120.,   0.,   0.,   0.
C    *-----------SIGMA-(1180)----------------------		C    *-----------SIGMA-(1180)----------------------
     *,2230.,1.00000,1220.,-120.,   0.,   0.,   0.		     *,2230.,1.00000,1220.,-120.,   0.,   0.,   0.
C    *---------KASKADE-(1360)----------------------		C    *---------KASKADE-(1360)----------------------
     *,2330.,1.00000,2130.,-120.,   0.,   0.,   0.		     *,2330.,1.00000,2130.,-120.,   0.,   0.,   0.
C    *---------KASKADE0(1360)----------------------		C    *---------KASKADE0(1360)----------------------
     *,1330.,1.00000,2130., 110.,   0.,   0.,   0.		     *,1330.,1.00000,2130., 110.,   0.,   0.,   0.
C    *---------OMEGA-(1680)------------------------		C    *---------OMEGA-(1680)------------------------
     *,3331.,0.68000,2130.,-130.,   0.,   0.,   0.		     *,3331.,0.68000,2130.,-130.,   0.,   0.,   0.
     *,3331.,0.82000,1330.,-120.,   0.,   0.,   0.		     *,3331.,0.82000,1330.,-120.,   0.,   0.,   0.
     *,3331.,1.00000,2330., 110.,   0.,   0.,   0./		     *,3331.,1.00000,2330., 110.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
C    *      WEAK MESON DECAYS					C    *      WEAK MESON DECAYS
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ((DECTAB(I,J),I=1,7),J=1170,1171)/			      DATA ((DECTAB(I,J),I=1,7),J=1170,1171)/
C    *-----------K0S(975)--------------------------		C    *-----------K0S(975)--------------------------
     *   20., .68610, 120.,-120.,   0.,   0.,   0.		     *   20., .68610, 120.,-120.,   0.,   0.,   0.
     *,  20.,1.00000, 110., 110.,   0.,   0.,   0./		     *,  20.,1.00000, 110., 110.,   0.,   0.,   0./
C    *---------------------------------------------		C    *---------------------------------------------
      DATA ALFA /0.00729735/, GF /1.16570E-5/, SIN2W /.215/	      DATA ALFA /0.00729735/, GF /1.16570E-5/, SIN2W /.215/
C  SINW = SQRT(SIN2W), COSW=SQRT(1.-SIN2W)			C  SINW = SQRT(SIN2W), COSW=SQRT(1.-SIN2W)
      DATA SINW /.463681/,COSW /.886002/			      DATA SINW /.463681/,COSW /.886002/
C------------------------------------------------------------	C------------------------------------------------------------
      IF     ( IENTRO .EQ. 1 ) THEN				      IF     ( IENTRO .EQ. 1 ) THEN
        CALL JCENTR(3,6,3,1)					        CALL JCENTR(3,6,3,1)
      ELSEIF ( IENTRO .EQ. 2 ) THEN				      ELSEIF ( IENTRO .EQ. 2 ) THEN
        CALL JCENTD						        CALL JCENTD
      ENDIF							      ENDIF
      CALL JCENTP						      CALL JCENTP

      CALL IDRESI						      CALL IDRESI

C  DETERMINE WMASS2,WGAM2					C  DETERMINE WMASS2,WGAM2
C  ----------------------					C  ----------------------
      AMW=SQRT(PI*ALFA/(.9304*1.41421356*GF))/SINW		      AMW=SQRT(PI*ALFA/(.9304*1.41421356*GF))/SINW
      WMASS2=AMW						      WMASS2=AMW
      CALL IDMASS(5,AMLEP5)					      CALL IDMASS(5,AMLEP5)
      CALL IDMASS(6,AMLEP6)					      CALL IDMASS(6,AMLEP6)
      IF ( AMLEP5+AMLEP6 .GT. AMW ) THEN			      IF ( AMLEP5+AMLEP6 .GT. AMW ) THEN
        NGAM=9							        NGAM=9
      ELSE							      ELSE
        NGAM=12							        NGAM=12
      ENDIF							      ENDIF
      WGAM2=GF*AMW**3/(6.*PI*1.41421356)*NGAM			      WGAM2=GF*AMW**3/(6.*PI*1.41421356)*NGAM

      IRD=0							      IRD=0
      DO 1 I=1,MXLOOK						      DO 1 I=1,MXLOOK
        LOOK(I)=0						        LOOK(I)=0
 1    CONTINUE							 1    CONTINUE
      DO 2 I=1,MXDKY						      DO 2 I=1,MXDKY
        MODE(1,I)=0						        MODE(1,I)=0
        MODE(2,I)=0						        MODE(2,I)=0
        MODE(3,I)=0						        MODE(3,I)=0
        MODE(4,I)=0						        MODE(4,I)=0
        MODE(5,I)=0						        MODE(5,I)=0
        CBR(I)=0.						        CBR(I)=0.
 2    CONTINUE							 2    CONTINUE
      NODCAY=.FALSE.						      NODCAY=.FALSE.
      NOETA=.FALSE.						      NOETA=.FALSE.
      NOPI0=.FALSE.						      NOPI0=.FALSE.
      NONUNU=.FALSE.						      NONUNU=.FALSE.
      NOEVOL=.FALSE.						      NOEVOL=.FALSE.
      NOHADR=.FALSE.						      NOHADR=.FALSE.
      IF ( LPRINT ) WRITE(IFCH,10)				      IF ( LPRINT ) WRITE(IFCH,10)
10    FORMAT('1',30('*')/' *',28X,'*'/				10    FORMAT('1',30('*')/' *',28X,'*'/
     *        ' *',5X,'ISAJET DECAY TABLE',5X,'*'/		     *        ' *',5X,'ISAJET DECAY TABLE',5X,'*'/
     *        ' *',28X,'*'/' ',30('*')//			     *        ' *',28X,'*'/' ',30('*')//
     *        6X,'PART',18X,'DECAY MODE',19X,'CUM BR',15X,'ID	     *        6X,'PART',18X,'DECAY MODE',19X,'CUM BR',15X,'ID
     *        'DECAY IDENT'/)					     *        'DECAY IDENT'/)
      LOOP=0							      LOOP=0
      IOLD=0							      IOLD=0
      IF ( NODCAY ) RETURN					      IF ( NODCAY ) RETURN

200   LOOP=LOOP+1						200   LOOP=LOOP+1
      IF ( LOOP .GT. MXDKY ) GOTO 9999				      IF ( LOOP .GT. MXDKY ) GOTO 9999
220   CONTINUE							220   CONTINUE
      IMODE(1)=0						      IMODE(1)=0
      IMODE(2)=0						      IMODE(2)=0
      IMODE(3)=0						      IMODE(3)=0
      IMODE(4)=0						      IMODE(4)=0
      IMODE(5)=0						      IMODE(5)=0
      LMODE(1)=IBLANK						      LMODE(1)=IBLANK
      LMODE(2)=IBLANK						      LMODE(2)=IBLANK
      LMODE(3)=IBLANK						      LMODE(3)=IBLANK
      LMODE(4)=IBLANK						      LMODE(4)=IBLANK
      LMODE(5)=IBLANK						      LMODE(5)=IBLANK
      IRD=IRD+1							      IRD=IRD+1
      IF ( IRD .GT. NDECTB ) RETURN				      IF ( IRD .GT. NDECTB ) RETURN
      IRES=NINT(DECTAB(1,IRD))					      IRES=NINT(DECTAB(1,IRD))
      BR=DECTAB(2,IRD)						      BR=DECTAB(2,IRD)
      IMODE(1)=NINT(DECTAB(2+1,IRD))				      IMODE(1)=NINT(DECTAB(2+1,IRD))
      IMODE(2)=NINT(DECTAB(2+2,IRD))				      IMODE(2)=NINT(DECTAB(2+2,IRD))
      IMODE(3)=NINT(DECTAB(2+3,IRD))				      IMODE(3)=NINT(DECTAB(2+3,IRD))
      IMODE(4)=NINT(DECTAB(2+4,IRD))				      IMODE(4)=NINT(DECTAB(2+4,IRD))
      IMODE(5)=NINT(DECTAB(2+5,IRD))				      IMODE(5)=NINT(DECTAB(2+5,IRD))
      IF ( NOPI0  .AND.  IRES .EQ. 110 ) GOTO 220		      IF ( NOPI0  .AND.  IRES .EQ. 110 ) GOTO 220
      IF ( NOETA  .AND.  IRES .EQ. 220 ) GOTO 220		      IF ( NOETA  .AND.  IRES .EQ. 220 ) GOTO 220
      IF ( IRES .EQ. IOLD ) GOTO 230				      IF ( IRES .EQ. IOLD ) GOTO 230
      IF ( IRES .LT. 0  .OR.  IRES .GT. MXLOOK ) THEN		      IF ( IRES .LT. 0  .OR.  IRES .GT. MXLOOK ) THEN
        CALL UTSTOP('JDECIN: IRES OUT OF RANGE               	        CALL UTSTOP('JDECIN: IRES OUT OF RANGE               
      ENDIF							      ENDIF
      LOOK(IRES)=LOOP						      LOOK(IRES)=LOOP
230   IOLD=IRES							230   IOLD=IRES
      CBR(LOOP)=BR						      CBR(LOOP)=BR
      MODE(1,LOOP)=IMODE(1)					      MODE(1,LOOP)=IMODE(1)
      MODE(2,LOOP)=IMODE(2)					      MODE(2,LOOP)=IMODE(2)
      MODE(3,LOOP)=IMODE(3)					      MODE(3,LOOP)=IMODE(3)
      MODE(4,LOOP)=IMODE(4)					      MODE(4,LOOP)=IMODE(4)
      MODE(5,LOOP)=IMODE(5)					      MODE(5,LOOP)=IMODE(5)
      IF ( LPRINT ) THEN					      IF ( LPRINT ) THEN
        IF ( IMODE(1) .NE. 0 ) LMODE(1)=IDLABL(IMODE(1))	        IF ( IMODE(1) .NE. 0 ) LMODE(1)=IDLABL(IMODE(1))
        IF ( IMODE(2) .NE. 0 ) LMODE(2)=IDLABL(IMODE(2))	        IF ( IMODE(2) .NE. 0 ) LMODE(2)=IDLABL(IMODE(2))
        IF ( IMODE(3) .NE. 0 ) LMODE(3)=IDLABL(IMODE(3))	        IF ( IMODE(3) .NE. 0 ) LMODE(3)=IDLABL(IMODE(3))
        IF ( IMODE(4) .NE. 0 ) LMODE(4)=IDLABL(IMODE(4))	        IF ( IMODE(4) .NE. 0 ) LMODE(4)=IDLABL(IMODE(4))
        IF ( IMODE(5) .NE. 0 ) LMODE(5)=IDLABL(IMODE(5))	        IF ( IMODE(5) .NE. 0 ) LMODE(5)=IDLABL(IMODE(5))
        LRES=IDLABL(IRES)					        LRES=IDLABL(IRES)
        WRITE(IFCH,20) LRES,(LMODE(K),K=1,5), BR,IRES,(IMODE(	        WRITE(IFCH,20) LRES,(LMODE(K),K=1,5), BR,IRES,(IMODE(
20      FORMAT(6X,A5,6X,5(A5,2X),3X,F8.5,15X,I5,4X,5(I5,2X))	20      FORMAT(6X,A5,6X,5(A5,2X),3X,F8.5,15X,I5,4X,5(I5,2X))
      ENDIF							      ENDIF
      GOTO 200							      GOTO 200

9999  WRITE(IFCH,*)'LOOP=', LOOP				9999  WRITE(IFCH,*)'LOOP=', LOOP
      CALL UTSTOP('JDECIN: LOOP > MXDKY                    ')	      CALL UTSTOP('JDECIN: LOOP > MXDKY                    ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JESTPR(IC1,IC2,AM,IER)				      SUBROUTINE JESTPR(IC1,IC2,AM,IER)

C------------------------------------------------------------	C------------------------------------------------------------
C  PROCESSES STRINGS						C  PROCESSES STRINGS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CLEAD/   COOAV3,COOAV4,LEAD			      COMMON /CLEAD/   COOAV3,COOAV4,LEAD
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL			      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL    STRO(NSI,NSIX+1)					      REAL    STRO(NSI,NSIX+1)
      INTEGER IC1(2),IC2(2),JC(NFLAV,2),JC1(NFLAV,2),JC2(NFLA	      INTEGER IC1(2),IC2(2),JC(NFLAV,2),JC1(NFLAV,2),JC2(NFLA
C------------------------------------------------------------	C------------------------------------------------------------
      IER=0							      IER=0

C  PMAX								C  PMAX
C  ----								C  ----
      CALL IDDECO(IC1,JC)					      CALL IDDECO(IC1,JC)
      NQ=0							      NQ=0
      DO 7 NF=1,NFLAV						      DO 7 NF=1,NFLAV
        NQ=NQ+JC(NF,1)-JC(NF,2)					        NQ=NQ+JC(NF,1)-JC(NF,2)
 7    CONTINUE							 7    CONTINUE
      IF ( ABS(NQ) .GE. 2 ) THEN				      IF ( ABS(NQ) .GE. 2 ) THEN
        AM1MIN=PROM						        AM1MIN=PROM
      ELSE							      ELSE
        AM1MIN=PIOM						        AM1MIN=PIOM
      ENDIF							      ENDIF
      CALL IDDECO(IC2,JC)					      CALL IDDECO(IC2,JC)
      NQ=0							      NQ=0
      DO 8 NF=1,NFLAV						      DO 8 NF=1,NFLAV
        NQ=NQ+JC(NF,1)-JC(NF,2)					        NQ=NQ+JC(NF,1)-JC(NF,2)
 8    CONTINUE							 8    CONTINUE
      IF ( ABS(NQ) .GE. 2 ) THEN				      IF ( ABS(NQ) .GE. 2 ) THEN
        AM2MIN=PROM						        AM2MIN=PROM
      ELSE							      ELSE
        AM2MIN=PIOM						        AM2MIN=PIOM
      ENDIF							      ENDIF
      IF ( AM .LE. AM1MIN+AM2MIN ) THEN				      IF ( AM .LE. AM1MIN+AM2MIN ) THEN
        PMAX=AM*0.5						        PMAX=AM*0.5
      ELSE							      ELSE
        PMAX=UTPCM(AM,AM1MIN,AM2MIN)				        PMAX=UTPCM(AM,AM1MIN,AM2MIN)
      ENDIF							      ENDIF

C  HASTPR							C  HASTPR
C  ------							C  ------
      IPROJ=1							      IPROJ=1
      ITARG=1							      ITARG=1
      KPROJA(2,1)=1						      KPROJA(2,1)=1
      KTARGA(2,1)=1						      KTARGA(2,1)=1
      KPROJA(3,1)=1						      KPROJA(3,1)=1
      KTARGA(3,1)=1						      KTARGA(3,1)=1
      KOL=1							      KOL=1
      COORD(1,1)=0.						      COORD(1,1)=0.
      COORD(2,1)=0.						      COORD(2,1)=0.
      COORD(3,1)=0.						      COORD(3,1)=0.
      COORD(4,1)=0.						      COORD(4,1)=0.
      CALL IDDECO(IC1,JC1)					      CALL IDDECO(IC1,JC1)
      NPA1=0							      NPA1=0
      DO 2 N=1,NFLAV						      DO 2 N=1,NFLAV
        NPA1=NPA1+JC1(N,1)+JC1(N,2)				        NPA1=NPA1+JC1(N,1)+JC1(N,2)
 2    CONTINUE							 2    CONTINUE
      CALL IDDECO(IC2,JC2)					      CALL IDDECO(IC2,JC2)
      NPA2=0							      NPA2=0
      DO 3 N=1,NFLAV						      DO 3 N=1,NFLAV
        NPA2=NPA2+JC2(N,1)+JC2(N,2)				        NPA2=NPA2+JC2(N,1)+JC2(N,2)
 3    CONTINUE							 3    CONTINUE
      IF ( NPA2 .GT. NPA1 ) THEN				      IF ( NPA2 .GT. NPA1 ) THEN
        II=2							        II=2
      ELSE							      ELSE
        II=1							        II=1
      ENDIF							      ENDIF
      IF ( NPA1 .GT. 1  .OR.  NPA2 .GT. 1 ) THEN		      IF ( NPA1 .GT. 1  .OR.  NPA2 .GT. 1 ) THEN
        LEAD=1							        LEAD=1
      ELSE							      ELSE
        LEAD=0							        LEAD=0
      ENDIF							      ENDIF

      NSTR0=NSTR						      NSTR0=NSTR
17    NSTR=NSTR0						17    NSTR=NSTR0

      DO 15 N=1,NSI						      DO 15 N=1,NSI
        STRO(N,1)=0.						        STRO(N,1)=0.
        STRO(N,2)=0.						        STRO(N,2)=0.
        STRO(N,3)=0.						        STRO(N,3)=0.
15    CONTINUE							15    CONTINUE
      STRO(3,II)=AM*0.5						      STRO(3,II)=AM*0.5
      STRO(4,II)=AM*0.5						      STRO(4,II)=AM*0.5
      STRO(5,II)=IC1(1)						      STRO(5,II)=IC1(1)
      STRO(6,II)=IC1(2)						      STRO(6,II)=IC1(2)
      STRO(3,3-II)=-AM*0.5					      STRO(3,3-II)=-AM*0.5
      STRO(4,3-II)=AM*0.5					      STRO(4,3-II)=AM*0.5
      STRO(5,3-II)=IC2(1)					      STRO(5,3-II)=IC2(1)
      STRO(6,3-II)=IC2(2)					      STRO(6,3-II)=IC2(2)

      PZSTRL=STRO(3,1)						      PZSTRL=STRO(3,1)
      ESTRL=STRO(4,1)						      ESTRL=STRO(4,1)
      PZSTRL=PZSTRL+STRO(3,2)					      PZSTRL=PZSTRL+STRO(3,2)
      ESTRL=ESTRL+STRO(4,2)					      ESTRL=ESTRL+STRO(4,2)
      ISTRL=0							      ISTRL=0

      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,110)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,110)('-',L=1,79),IPAGE,('-',L=1,79)
110     FORMAT(1X,79A1/1X,I5,'.PAGE            '		110     FORMAT(1X,79A1/1X,I5,'.PAGE            '
     *           ,'STRING GENERATION'/1X,79A1/)			     *           ,'STRING GENERATION'/1X,79A1/)
        WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I=5	        WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I=5
105     FORMAT(' STR: ',4F13.5,2I8)				105     FORMAT(' STR: ',4F13.5,2I8)
        WRITE(IFCH,104)(STRO(I,2),I=1,4),(NINT(STRO(I,2)),I=5	        WRITE(IFCH,104)(STRO(I,2),I=1,4),(NINT(STRO(I,2)),I=5
104     FORMAT('      ',4F13.5,2I8/)				104     FORMAT('      ',4F13.5,2I8/)
      ENDIF							      ENDIF

      ISEA=1							      ISEA=1
      ISPLT=0							      ISPLT=0
14    CALL HASTPR(STRO,ISPLT)					14    CALL HASTPR(STRO,ISPLT)
      IF ( ISPLT .EQ. -1 ) GOTO 9001				      IF ( ISPLT .EQ. -1 ) GOTO 9001
      IF ( ISPLT .EQ. -3 ) GOTO 9001				      IF ( ISPLT .EQ. -3 ) GOTO 9001
      IF ( ISPLT .EQ. -4 ) THEN					      IF ( ISPLT .EQ. -4 ) THEN
        CALL UTSTOP('JESTPR: ISPLT=-4                        	        CALL UTSTOP('JESTPR: ISPLT=-4                        
      ENDIF							      ENDIF
      IF ( ISPLT .EQ. -5 ) GOTO 17				      IF ( ISPLT .EQ. -5 ) GOTO 17
      IF ( ISPLT .GT.  0 ) GOTO 14				      IF ( ISPLT .GT.  0 ) GOTO 14

      PMXEVT=PMAX						      PMXEVT=PMAX
      EGYEVT=AM							      EGYEVT=AM

      RETURN							      RETURN

9001  IER=1							9001  IER=1
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JETGEN(IER)					      SUBROUTINE JETGEN(IER)

C------------------------------------------------------------	C------------------------------------------------------------
C  GENERATES STRINGS						C  GENERATES STRINGS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CLEP/    ICINPU,IDSCAT				      COMMON /CLEP/    ICINPU,IDSCAT
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CNTEVM/  NTEVM					      COMMON /CNTEVM/  NTEVM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS		      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS
     *                ,IC4,IPTNR,JS4,NPS			     *                ,IC4,IPTNR,JS4,NPS

      REAL    TARGA(NSI,NHA,MAMX)				      REAL    TARGA(NSI,NHA,MAMX)
      INTEGER ICSTRI(4,18),IC1(2),IC2(2),IC4(2)			      INTEGER ICSTRI(4,18),IC1(2),IC2(2),IC4(2)

      DATA ((ICSTRI(I,J),I=1,4),J=1,8)/				      DATA ((ICSTRI(I,J),I=1,4),J=1,8)/
     *100000,000000,110000,000000,				     *100000,000000,110000,000000,
     *010000,000000,200000,000000,				     *010000,000000,200000,000000,
     *100000,000000,210000,100000,				     *100000,000000,210000,100000,
     *010000,000000,210000,010000,				     *010000,000000,210000,010000,
     *001000,000000,210000,001000,				     *001000,000000,210000,001000,
     *000000,100000,310000,000000,				     *000000,100000,310000,000000,
     *000000,010000,220000,000000,				     *000000,010000,220000,000000,
     *000000,001000,211000,000000/				     *000000,001000,211000,000000/
      DATA ((ICSTRI(I,J),I=1,4),J=11,18)/			      DATA ((ICSTRI(I,J),I=1,4),J=11,18)/
     *100000,000000,020000,000000,				     *100000,000000,020000,000000,
     *010000,000000,110000,000000,				     *010000,000000,110000,000000,
     *100000,000000,120000,100000,				     *100000,000000,120000,100000,
     *010000,000000,120000,010000,				     *010000,000000,120000,010000,
     *001000,000000,120000,001000,				     *001000,000000,120000,001000,
     *000000,100000,220000,000000,				     *000000,100000,220000,000000,
     *000000,010000,130000,000000,				     *000000,010000,130000,000000,
     *000000,001000,121000,000000/				     *000000,001000,121000,000000/
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 2 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 2 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,*)('-',L=1,79)				        WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)'STRING GENERATION. SR JETGEN.'		        WRITE(IFCH,*)'STRING GENERATION. SR JETGEN.'
      ENDIF							      ENDIF

      IER=0							      IER=0

      NEVT=1							      NEVT=1
      NSTR=0							      NSTR=0
      NPTL=0							      NPTL=0

      IF ( ICINPU .GE. 1 ) THEN					      IF ( ICINPU .GE. 1 ) THEN
3       CALL LEPEXP(XBJ,QSQ)					3       CALL LEPEXP(XBJ,QSQ)
        RNU=QSQ/(2.* PROM * XBJ)				        RNU=QSQ/(2.* PROM * XBJ)
        WSQ=PROM**2 + 2.* PROM * RNU - QSQ			        WSQ=PROM**2 + 2.* PROM * RNU - QSQ
        AMST=SQRT(WSQ)						        AMST=SQRT(WSQ)
        ELEPTO=ELEPTI-RNU					        ELEPTO=ELEPTI-RNU
        COSANG=1.-QSQ/(2.*ELEPTI*ELEPTO)			        COSANG=1.-QSQ/(2.*ELEPTI*ELEPTO)
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,*)'ELEPTI,ELEPTO,RNU: ',ELEPTI,ELEPTO,RN	          WRITE(IFCH,*)'ELEPTI,ELEPTO,RNU: ',ELEPTI,ELEPTO,RN
          WRITE(IFCH,*)'XBJ,QSQ,COSANG=1-QSQ/2/ELEPTI/ELEPTO:	          WRITE(IFCH,*)'XBJ,QSQ,COSANG=1-QSQ/2/ELEPTI/ELEPTO:
     *                 ,XBJ,QSQ,COSANG				     *                 ,XBJ,QSQ,COSANG
        ENDIF							        ENDIF
        IF ( RNU .GT. ELEPTI ) THEN				        IF ( RNU .GT. ELEPTI ) THEN
          IF ( ISH .GE. 93 ) WRITE(IFCH,*)'*****  Q0 TOO LARG	          IF ( ISH .GE. 93 ) WRITE(IFCH,*)'*****  Q0 TOO LARG
          GOTO 3						          GOTO 3
        ENDIF							        ENDIF
        IF     ( COSANG.GT.1.  .AND.  COSANG.LT.1.001 ) THEN	        IF     ( COSANG.GT.1.  .AND.  COSANG.LT.1.001 ) THEN
          COSANG=1.						          COSANG=1.
        ELSEIF ( COSANG.LT.-1.  .OR.  COSANG.GT.1.    ) THEN	        ELSEIF ( COSANG.LT.-1.  .OR.  COSANG.GT.1.    ) THEN
          COSANO=COSANG						          COSANO=COSANG
          IF ( COSANG .GE. 0. ) COSANG= 1.			          IF ( COSANG .GE. 0. ) COSANG= 1.
          IF ( COSANG .LT. 0. ) COSANG=-1.			          IF ( COSANG .LT. 0. ) COSANG=-1.
          IF(ISH.GE.90)THEN					          IF(ISH.GE.90)THEN
            CALL UTMSG('JETGEN')				            CALL UTMSG('JETGEN')
            WRITE(IFCH,*)'*****  COSANG OUT OF RANGE'		            WRITE(IFCH,*)'*****  COSANG OUT OF RANGE'
            WRITE(IFCH,*)'ELEPTI,ELEPTO,RNU: ',ELEPTI,ELEPTO,	            WRITE(IFCH,*)'ELEPTI,ELEPTO,RNU: ',ELEPTI,ELEPTO,
            WRITE(IFCH,*)'XBJ,QSQ,COSANG=1-QSQ/2/ELEPTI/ELEPT	            WRITE(IFCH,*)'XBJ,QSQ,COSANG=1-QSQ/2/ELEPTI/ELEPT
     *                   ,XBJ,QSQ,COSANO			     *                   ,XBJ,QSQ,COSANO
            WRITE(IFCH,*)'COSANG_NEW: ',COSANG			            WRITE(IFCH,*)'COSANG_NEW: ',COSANG
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        ANGMUE=ACOS(COSANG)					        ANGMUE=ACOS(COSANG)
        CALL LEPTAR(XBJ,QSQ,MATARG,LATARG,IDSCAT)		        CALL LEPTAR(XBJ,QSQ,MATARG,LATARG,IDSCAT)
      ENDIF							      ENDIF

      IF ( MATARG .GT. 0 ) THEN					      IF ( MATARG .GT. 0 ) THEN
        CALL NUCOGE						        CALL NUCOGE
        NPTL=0							        NPTL=0
        CALL NUCINI('STR',TARGA,LATARG,MATARG,-1)		        CALL NUCINI('STR',TARGA,LATARG,MATARG,-1)
        CALL NUCSTR(IER)					        CALL NUCSTR(IER)
        IF ( IER .EQ. 1 ) GOTO 99999				        IF ( IER .EQ. 1 ) GOTO 99999
      ENDIF							      ENDIF

      IF     ( ICINPU .EQ. 0 ) THEN				      IF     ( ICINPU .EQ. 0 ) THEN
        R=RANGEN()						        R=RANGEN()
        PS=0.							        PS=0.
        DO 1 K=1,99						        DO 1 K=1,99
          PS=PS+PROB(K)						          PS=PS+PROB(K)
          IF ( R .LE. PS ) GOTO 2				          IF ( R .LE. PS ) GOTO 2
 1      CONTINUE						 1      CONTINUE
        CALL UTSTOP('JETGEN: NO K FOUND                      	        CALL UTSTOP('JETGEN: NO K FOUND                      
 2      CONTINUE						 2      CONTINUE
        IC1(1)=ICFOR(K,1)					        IC1(1)=ICFOR(K,1)
        IC1(2)=ICFOR(K,2)					        IC1(2)=ICFOR(K,2)
        IC2(1)=ICBAC(K,1)					        IC2(1)=ICBAC(K,1)
        IC2(2)=ICBAC(K,2)					        IC2(2)=ICBAC(K,2)
        AMST=ENGY						        AMST=ENGY
      ELSEIF ( ICINPU .GT. 0 ) THEN				      ELSEIF ( ICINPU .GT. 0 ) THEN
        CALL LEPSTR(IDSCAT,XBJ,QSQ,IDS)				        CALL LEPSTR(IDSCAT,XBJ,QSQ,IDS)
        IC1(1)=ICSTRI(1,IDS)					        IC1(1)=ICSTRI(1,IDS)
        IC1(2)=ICSTRI(2,IDS)					        IC1(2)=ICSTRI(2,IDS)
        IC2(1)=ICSTRI(3,IDS)					        IC2(1)=ICSTRI(3,IDS)
        IC2(2)=ICSTRI(4,IDS)					        IC2(2)=ICSTRI(4,IDS)
      ENDIF							      ENDIF
      CALL JESTPR(IC1,IC2,AMST,IER)				      CALL JESTPR(IC1,IC2,AMST,IER)

99999 ISH=ISH0							99999 ISH=ISH0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JFRADE(IER)					      SUBROUTINE JFRADE(IER)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS STRING FRAGMENTATION/DECAY AND FIN. STATE INTERAC	C  PERFORMS STRING FRAGMENTATION/DECAY AND FIN. STATE INTERAC
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NPRBMS=20)					      PARAMETER (NPRBMS=20)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /CNFR/    NRFRA					      COMMON /CNFR/    NRFRA
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPRBMS / PRBMS(NPRBMS)				      COMMON /CPRBMS / PRBMS(NPRBMS)
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP
      COMMON /DIDIB/   NDIDIB					      COMMON /DIDIB/   NDIDIB
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS		      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS
     *                ,IC4,IPTNR,JS4,NPS			     *                ,IC4,IPTNR,JS4,NPS

      DOUBLE PRECISION DIFF,ZFI					      DOUBLE PRECISION DIFF,ZFI
      REAL             PSUM(5)					      REAL             PSUM(5)
      INTEGER          IC4(2)					      INTEGER          IC4(2)
C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZATION						C  INITIALIZATION
C  --------------						C  --------------
CDH   IF ( ISH .EQ. 13 .OR. ISH .EQ. 14 ) CALL UTTIMA('*** JF	CDH   IF ( ISH .EQ. 13 .OR. ISH .EQ. 14 ) CALL UTTIMA('*** JF
      IER=0							      IER=0
      IRET=0							      IRET=0
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 16 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 16 ) ISH=MOD(ISHSUB,100)
      IF ( NEVT .NE. 1  .OR.  IFRADE .EQ. 0 ) GOTO 1000		      IF ( NEVT .NE. 1  .OR.  IFRADE .EQ. 0 ) GOTO 1000
      NPTLPT=ABS(MAPROJ)+ABS(MATARG)				      NPTLPT=ABS(MAPROJ)+ABS(MATARG)
      IF ( ICHOIC .EQ. 1  .OR.  ICHOIC .EQ. 4 ) THEN		      IF ( ICHOIC .EQ. 1  .OR.  ICHOIC .EQ. 4 ) THEN
        YCMMAX=LOG(EGYEVT*2.5)					        YCMMAX=LOG(EGYEVT*2.5)
        ETAPRO=YCMMAX*.6667					        ETAPRO=YCMMAX*.6667
        ETATAR=-ETAPRO						        ETATAR=-ETAPRO
      ELSE							      ELSE
        ETAPRO=(YPJTL-YHAHA)*.6667				        ETAPRO=(YPJTL-YHAHA)*.6667
        ETATAR=-YHAHA*.6667					        ETATAR=-YHAHA*.6667
      ENDIF							      ENDIF
      DETAP=ETAPRO						      DETAP=ETAPRO
      DETAT=ETATAR						      DETAT=ETATAR
      TPRO=COSH(DETAP)						      TPRO=COSH(DETAP)
      ZPRO=SINH(DETAP)						      ZPRO=SINH(DETAP)
      TTAR=COSH(DETAT)						      TTAR=COSH(DETAT)
      ZTAR=SINH(DETAT)						      ZTAR=SINH(DETAT)

C  WRITE							C  WRITE
C  -----							C  -----
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,110)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,110)('-',L=1,79),IPAGE,('-',L=1,79)
110     FORMAT(1X,79A1/1X,I5,'.PAGE            '		110     FORMAT(1X,79A1/1X,I5,'.PAGE            '
     *           ,'STRINGS BEFORE RESCALING'/1X,79A1/)		     *           ,'STRINGS BEFORE RESCALING'/1X,79A1/)
        DO 9 J=1,NSTR						        DO 9 J=1,NSTR
          WRITE(IFCH,109)J,(ICSTR(K,J)/100,K=1,4)		          WRITE(IFCH,109)J,(ICSTR(K,J)/100,K=1,4)
     *          ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J),PS	     *          ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J),PS
     *          ,IRLSTR(J)					     *          ,IRLSTR(J)
109       FORMAT(' /CSTR/',I4,3X,4I5,3(E11.3),I4)		109       FORMAT(' /CSTR/',I4,3X,4I5,3(E11.3),I4)
 9      CONTINUE						 9      CONTINUE
      ENDIF							      ENDIF

C  STRING RESCALING						C  STRING RESCALING
C  ----------------						C  ----------------
      IF ( ICHOIC.LE.2 .AND. NSTR.GT.1 .AND. IRESCL.EQ.1 ) TH	      IF ( ICHOIC.LE.2 .AND. NSTR.GT.1 .AND. IRESCL.EQ.1 ) TH
        PSUM(1)=0.						        PSUM(1)=0.
        PSUM(2)=0.						        PSUM(2)=0.
        IF ( ICHOIC .EQ. 1 ) THEN				        IF ( ICHOIC .EQ. 1 ) THEN
          PSUM(3)=0.						          PSUM(3)=0.
          PSUM(4)=EGYEVT					          PSUM(4)=EGYEVT
        ELSE							        ELSE
          PSUM(3)=(NPJEVT-NTGEVT)*PNLLX				          PSUM(3)=(NPJEVT-NTGEVT)*PNLLX
          PSUM(4)=NPJEVT*SQRT(AMPROJ**2+PNLLX**2)		          PSUM(4)=NPJEVT*SQRT(AMPROJ**2+PNLLX**2)
     *           +NTGEVT*SQRT(AMTARG**2+PNLLX**2)		     *           +NTGEVT*SQRT(AMTARG**2+PNLLX**2)
        ENDIF							        ENDIF
        PSUM(5)=SQRT(PSUM(4)**2-PSUM(3)**2)			        PSUM(5)=SQRT(PSUM(4)**2-PSUM(3)**2)
        CALL HRESCL(1,NSTR,PSUM,IFAIL)				        CALL HRESCL(1,NSTR,PSUM,IFAIL)
        IF ( IFAIL .NE. 0 ) GOTO 1001				        IF ( IFAIL .NE. 0 ) GOTO 1001
      ENDIF							      ENDIF

C  WRITE							C  WRITE
C  -----							C  -----
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,111)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,111)('-',L=1,79),IPAGE,('-',L=1,79)
111     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		111     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *                       ,'STRINGS AFTER RESCALING'/1X,79	     *                       ,'STRINGS AFTER RESCALING'/1X,79
        DO 10 J=1,NSTR						        DO 10 J=1,NSTR
          WRITE(IFCH,109)J,(ICSTR(K,J)/100,K=1,4)		          WRITE(IFCH,109)J,(ICSTR(K,J)/100,K=1,4)
     *        ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J),PSTR	     *        ,SQRT(PSTR(1,J)**2+PSTR(2,J)**2),PSTR(3,J),PSTR
     *        ,IRLSTR(J)					     *        ,IRLSTR(J)
10      CONTINUE						10      CONTINUE
      ENDIF							      ENDIF

C  FRAGMENTATION						C  FRAGMENTATION
C  -------------						C  -------------
      IF ( ISHSUB/100 .EQ. 3 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 3 ) ISH=MOD(ISHSUB,100)
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('               ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('               ')
      DO 3 J=1,NSTR						      DO 3 J=1,NSTR
        CALL UTPAGE						        CALL UTPAGE
        IF ( ISH .GE. 91 ) WRITE(IFCH,102)('-',L=1,79),IPAGE,	        IF ( ISH .GE. 91 ) WRITE(IFCH,102)('-',L=1,79),IPAGE,
     *       ,(ICSTR(K,J),K=1,4),SQRT(PSTR(1,J)**2+PSTR(2,J)*	     *       ,(ICSTR(K,J),K=1,4),SQRT(PSTR(1,J)**2+PSTR(2,J)*
     *            +PSTR(3,J)**2),PSTR(4,J),PSTR(5,J),('-',L=1	     *            +PSTR(3,J)**2),PSTR(4,J),PSTR(5,J),('-',L=1
102     FORMAT(/1X,79A1						102     FORMAT(/1X,79A1
     *         /1X,I5,'.PAGE  STR:',I3,4I7,3(E10.2)/1X,79A1/)	     *         /1X,I5,'.PAGE  STR:',I3,4I7,3(E10.2)/1X,79A1/)
        CALL JAMFRA(J,NEWEVT)					        CALL JAMFRA(J,NEWEVT)
        IF ( NEWEVT .EQ. 1 ) GOTO 10011				        IF ( NEWEVT .EQ. 1 ) GOTO 10011
 3    CONTINUE							 3    CONTINUE
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('FRAGMENTATION  ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('FRAGMENTATION  ')

C  PRINT /CPTL/							C  PRINT /CPTL/
C  ------------							C  ------------
      IF ( ISHSUB/100 .EQ. 9 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 9 ) ISH=MOD(ISHSUB,100)
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,104)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,104)('-',L=1,79),IPAGE,('-',L=1,79)
104     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		104     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *                       ,'PTLS AFTER FRAGMENTATION'/1X,7	     *                       ,'PTLS AFTER FRAGMENTATION'/1X,7
        DO 18 N=1,NPTL						        DO 18 N=1,NPTL
          IF ( N.GT.NPTLPT .OR. ISTPTL(N).NE.0 )		          IF ( N.GT.NPTLPT .OR. ISTPTL(N).NE.0 )
     *      WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),	     *      WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),
     *                 ,IDPTL(N),PPTL(3,N),PPTL(4,N),PPTL(5,N	     *                 ,IDPTL(N),PPTL(3,N),PPTL(4,N),PPTL(5,N
18      CONTINUE						18      CONTINUE
      ENDIF							      ENDIF

C  INITIAL DECAY						C  INITIAL DECAY
C  -------------						C  -------------
      IF ( ISHSUB/100 .EQ. 10 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 10 ) ISH=MOD(ISHSUB,100)
      CALL UTPAGE						      CALL UTPAGE
CDH   IF ( ISH.EQ.13 ) CALL UTTIMA('               ')		CDH   IF ( ISH.EQ.13 ) CALL UTTIMA('               ')
      IF ( RADIAC .GT. 0. ) THEN				      IF ( RADIAC .GT. 0. ) THEN
        TTAUS=TAUMIN						        TTAUS=TAUMIN
        IACN=1							        IACN=1
      ELSE							      ELSE
        TTAUS=AINFIN						        TTAUS=AINFIN
        IACN=0							        IACN=0
      ENDIF							      ENDIF
      TTP=TTAUS*TPRO						      TTP=TTAUS*TPRO
      TTT=TTAUS*TTAR						      TTT=TTAUS*TTAR
      ZZP=TTAUS*ZPRO						      ZZP=TTAUS*ZPRO
      ZZT=TTAUS*ZTAR						      ZZT=TTAUS*ZTAR
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,119)('-',L=1,79),IPAGE,SNGL(TTAUS),('-',L=	        WRITE(IFCH,119)('-',L=1,79),IPAGE,SNGL(TTAUS),('-',L=
119     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		119     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *                       ,'DECAY BEFORE TAU =',E10.3/1X,7	     *                       ,'DECAY BEFORE TAU =',E10.3/1X,7
      ENDIF							      ENDIF
      NP1=1							      NP1=1
21    NP2=NPTL							21    NP2=NPTL
      DO 5 I=NP1,NP2						      DO 5 I=NP1,NP2
        IF ( TTAUS .LE. 0.D0   ) THEN				        IF ( TTAUS .LE. 0.D0   ) THEN
          DIFF = TIVPTL(2,I) - TTAUS				          DIFF = TIVPTL(2,I) - TTAUS
        ELSE							        ELSE
          ZFI=XORPTL(3,I)+(TIVPTL(2,I)-XORPTL(4,I))*PPTL(3,I)	          ZFI=XORPTL(3,I)+(TIVPTL(2,I)-XORPTL(4,I))*PPTL(3,I)
          CALL UTTAUT(SNGL(ZFI),TZFI)				          CALL UTTAUT(SNGL(ZFI),TZFI)
          DIFF = TIVPTL(2,I) - TZFI				          DIFF = TIVPTL(2,I) - TZFI
        ENDIF							        ENDIF
        IF ( DIFF .LE. 0. .OR. IACN.EQ.0 ) THEN			        IF ( DIFF .LE. 0. .OR. IACN.EQ.0 ) THEN
          IF ( ISTPTL(I) .EQ. 0 ) THEN				          IF ( ISTPTL(I) .EQ. 0 ) THEN
            CALL JDECA(I,IRET)					            CALL JDECA(I,IRET)
            IF ( IRET .EQ. 1 ) GOTO 1001			            IF ( IRET .EQ. 1 ) GOTO 1001
          ENDIF							          ENDIF
        ENDIF							        ENDIF
5     CONTINUE							5     CONTINUE
      NP1=NP2+1							      NP1=NP2+1
      IF ( NP1 .LE. NPTL ) GOTO 21				      IF ( NP1 .LE. NPTL ) GOTO 21
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('DECAY INI      ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('DECAY INI      ')

C  INTERACTION AND DECAY					C  INTERACTION AND DECAY
C  ---------------------					C  ---------------------
      IF ( IACN .EQ. 0 ) GOTO 5000				      IF ( IACN .EQ. 0 ) GOTO 5000
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,118)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,118)('-',L=1,79),IPAGE,('-',L=1,79)
118     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		118     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *                       ,'INTERACTIONS AND DECAY'/1X,79A	     *                       ,'INTERACTIONS AND DECAY'/1X,79A
      ENDIF							      ENDIF
      DTAUS=1./(NUMTAU-1.)*(TAUMAX-TAUMIN)			      DTAUS=1./(NUMTAU-1.)*(TAUMAX-TAUMIN)
      DO 23 NT=1,NUMTAU						      DO 23 NT=1,NUMTAU
        NTC=NT							        NTC=NT
        TTAUS=TAUMIN+(NT-1.)*DTAUS				        TTAUS=TAUMIN+(NT-1.)*DTAUS
        TTP=TTAUS*TPRO						        TTP=TTAUS*TPRO
        TTT=TTAUS*TTAR						        TTT=TTAUS*TTAR
        ZZP=TTAUS*ZPRO						        ZZP=TTAUS*ZPRO
        ZZT=TTAUS*ZTAR						        ZZT=TTAUS*ZTAR
        IF     ( IOJINT .EQ. 1 ) THEN				        IF     ( IOJINT .EQ. 1 ) THEN
          CALL JINTA1						          CALL JINTA1
        ELSEIF ( IOJINT .EQ. 2 ) THEN				        ELSEIF ( IOJINT .EQ. 2 ) THEN
          CALL JINTA2						          CALL JINTA2
        ENDIF							        ENDIF
        TTAUS=TTAUS+DTAUS					        TTAUS=TTAUS+DTAUS
        TTP=TTAUS*TPRO						        TTP=TTAUS*TPRO
        TTT=TTAUS*TTAR						        TTT=TTAUS*TTAR
        ZZP=TTAUS*ZPRO						        ZZP=TTAUS*ZPRO
        ZZT=TTAUS*ZTAR						        ZZT=TTAUS*ZTAR
        NP1=1							        NP1=1
36      NP2=NPTL						36      NP2=NPTL
        DO 37 IP=NP1,NP2					        DO 37 IP=NP1,NP2
          IF ( TTAUS .LE. 0.D0   ) THEN				          IF ( TTAUS .LE. 0.D0   ) THEN
            DIFF = TIVPTL(2,IP) - TTAUS				            DIFF = TIVPTL(2,IP) - TTAUS
          ELSE							          ELSE
            ZFI=XORPTL(3,IP)+(TIVPTL(2,IP)-XORPTL(4,IP))	            ZFI=XORPTL(3,IP)+(TIVPTL(2,IP)-XORPTL(4,IP))
     *                                            *PPTL(3,IP)	     *                                            *PPTL(3,IP)
            IF     ( ZFI .LE. ZZT ) THEN			            IF     ( ZFI .LE. ZZT ) THEN
              DIFF = TIVPTL(2,IP) - TTT - (ZFI-ZZT)*ZZT/TTT	              DIFF = TIVPTL(2,IP) - TTT - (ZFI-ZZT)*ZZT/TTT
            ELSEIF ( ZFI .GE. ZZP ) THEN			            ELSEIF ( ZFI .GE. ZZP ) THEN
              DIFF = TIVPTL(2,IP) - TTP - (ZFI-ZZP)*ZZP/TTP	              DIFF = TIVPTL(2,IP) - TTP - (ZFI-ZZP)*ZZP/TTP
            ELSE						            ELSE
              IF ( TTAUS .LT. AINFIN ) THEN			              IF ( TTAUS .LT. AINFIN ) THEN
                IF ( TIVPTL(2,IP) .GE. 0. ) THEN		                IF ( TIVPTL(2,IP) .GE. 0. ) THEN
                  DIFF = TIVPTL(2,IP)				                  DIFF = TIVPTL(2,IP)
                  DIFF = DIFF**2  - (TTAUS**2+ZFI**2)		                  DIFF = DIFF**2  - (TTAUS**2+ZFI**2)
                ELSE						                ELSE
                  DIFF = TIVPTL(2,IP) - SQRT(TTAUS**2+ZFI**2)	                  DIFF = TIVPTL(2,IP) - SQRT(TTAUS**2+ZFI**2)
                ENDIF						                ENDIF
              ELSE						              ELSE
                DIFF = TIVPTL(2,IP) - TTAUS			                DIFF = TIVPTL(2,IP) - TTAUS
                IF ( ISH .GE. 90 ) THEN				                IF ( ISH .GE. 90 ) THEN
                  CALL UTMSG('JFRADE')				                  CALL UTMSG('JFRADE')
                  WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TT	                  WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TT
                  WRITE(IFCH,*)'TTAUS=',TTAUS,'ZFI=',ZFI	                  WRITE(IFCH,*)'TTAUS=',TTAUS,'ZFI=',ZFI
                  CALL UTMSGF					                  CALL UTMSGF
                ENDIF						                ENDIF
              ENDIF						              ENDIF
            ENDIF						            ENDIF
          ENDIF							          ENDIF

          IF ( DIFF .LE. 0. ) THEN				          IF ( DIFF .LE. 0. ) THEN
            IF ( ISTPTL(IP) .EQ. 0 ) THEN			            IF ( ISTPTL(IP) .EQ. 0 ) THEN
              CALL JDECA(IP,IRET)				              CALL JDECA(IP,IRET)
              IF ( IRET .EQ. 1 ) GOTO 1001			              IF ( IRET .EQ. 1 ) GOTO 1001
            ENDIF						            ENDIF
          ENDIF							          ENDIF
37      CONTINUE						37      CONTINUE
        NP1=NP2+1						        NP1=NP2+1
        IF ( NP1 .LE. NPTL ) THEN				        IF ( NP1 .LE. NPTL ) THEN
          DO 4 IP=NP1,NPTL					          DO 4 IP=NP1,NPTL
            IAAPTL(IP)=1					            IAAPTL(IP)=1
 4        CONTINUE						 4        CONTINUE
          GOTO 36						          GOTO 36
        ENDIF							        ENDIF
CDH     IF ( ISH .EQ. 13 ) CALL UTTIMA('DECAY          ')	CDH     IF ( ISH .EQ. 13 ) CALL UTTIMA('DECAY          ')
23    CONTINUE							23    CONTINUE

C  FINAL DECAY							C  FINAL DECAY
C  -----------							C  -----------
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,120)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,120)('-',L=1,79),IPAGE,('-',L=1,79)
120     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		120     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *                        ,'FINAL DECAY'/1X,79A1/)		     *                        ,'FINAL DECAY'/1X,79A1/)
      ENDIF							      ENDIF
      NBEF=NPTL							      NBEF=NPTL
CDH   N0BEF=NPTL0						CDH   N0BEF=NPTL0
      NAFT=NPTL							      NAFT=NPTL
CDH   N0AFT=NPTL0						CDH   N0AFT=NPTL0
      IF ( NCLEAN .GT. 0 ) THEN					      IF ( NCLEAN .GT. 0 ) THEN
        CALL UTCLEA(NPTL0)					        CALL UTCLEA(NPTL0)
        NAFT=NPTL						        NAFT=NPTL
CDH     N0AFT=NPTL0						CDH     N0AFT=NPTL0
      ENDIF							      ENDIF
      ISHNPT=ISH						      ISHNPT=ISH
      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .EQ. 22 ) THEN					      IF ( ISH .EQ. 22 ) THEN
        WRITE(IFMT,131)NBEF,NAFT				        WRITE(IFMT,131)NBEF,NAFT
131     FORMAT(1X,'BEF FIN DE: NBEF=',I8,4X,'NAFT=',I8)		131     FORMAT(1X,'BEF FIN DE: NBEF=',I8,4X,'NAFT=',I8)
      ENDIF							      ENDIF
      ISH=ISHNPT						      ISH=ISHNPT
      NP1=1							      NP1=1
41    NP2=NPTL							41    NP2=NPTL
      DO 42 IP=NP1,NP2						      DO 42 IP=NP1,NP2
        IF ( ISTPTL(IP) .EQ. 0 ) THEN				        IF ( ISTPTL(IP) .EQ. 0 ) THEN
          CALL JDECA(IP,IRET)					          CALL JDECA(IP,IRET)
          IF ( IRET .EQ. 1 ) GOTO 1001				          IF ( IRET .EQ. 1 ) GOTO 1001
        ENDIF							        ENDIF
42    CONTINUE							42    CONTINUE
      NP1=NP2+1							      NP1=NP2+1
      IF ( NP1 .LE. NPTL ) THEN					      IF ( NP1 .LE. NPTL ) THEN
        DO 6 IP=NP1,NPTL					        DO 6 IP=NP1,NPTL
          IAAPTL(IP)=1						          IAAPTL(IP)=1
 6      CONTINUE						 6      CONTINUE
        GOTO 41							        GOTO 41
      ENDIF							      ENDIF
      ISHNPT=ISH						      ISHNPT=ISH
      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .EQ. 22 ) THEN					      IF ( ISH .EQ. 22 ) THEN
        WRITE(IFMT,132)NPTL					        WRITE(IFMT,132)NPTL
132     FORMAT(1X,'AFT FIN DE: NPTL=',I8)			132     FORMAT(1X,'AFT FIN DE: NPTL=',I8)
      ENDIF							      ENDIF
      ISH=ISHNPT						      ISH=ISHNPT
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('DECAY FIN      ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('DECAY FIN      ')

C  PRINT /CPTL/							C  PRINT /CPTL/
C  ------------							C  ------------
      CALL UTPAGE						      CALL UTPAGE
      IF ( ISHSUB/100 .EQ. 11 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 11 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,117)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,117)('-',L=1,79),IPAGE,('-',L=1,79)
117     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		117     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *         ,'PTLS AFTER PERFORMING INTERACTIONS'/1X,79A1/	     *         ,'PTLS AFTER PERFORMING INTERACTIONS'/1X,79A1/
     *         1X,' IOR',' JOR',4X,'   N',4X,'IFR1IFR2',10X,'	     *         1X,' IOR',' JOR',4X,'   N',4X,'IFR1IFR2',10X,'
     *         5X,'PTR',7X,'PZ',4X,'MASS ','IST'/)		     *         5X,'PTR',7X,'PZ',4X,'MASS ','IST'/)
        DO 34 N=1,NPTL						        DO 34 N=1,NPTL
          IF ( N .GT. NPTLPT  .OR.  ISTPTL(N) .NE. 0 )		          IF ( N .GT. NPTLPT  .OR.  ISTPTL(N) .NE. 0 )
     *      WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),	     *      WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),
     *     ,IDPTL(N),SQRT(PPTL(1,N)**2+PPTL(2,N)**2),PPTL(3,N	     *     ,IDPTL(N),SQRT(PPTL(1,N)**2+PPTL(2,N)**2),PPTL(3,N
     *     ,ISTPTL(N),IAAPTL(N)					     *     ,ISTPTL(N),IAAPTL(N)
116       FORMAT(1X,I7,I7,4X,I7,4X,I4,I4,I12,3(E10.2),1X,I2,I	116       FORMAT(1X,I7,I7,4X,I7,4X,I4,I4,I12,3(E10.2),1X,I2,I
34      CONTINUE						34      CONTINUE
      ENDIF							      ENDIF

C  TRAFO -> LAB CM						C  TRAFO -> LAB CM
C  ---------------						C  ---------------
5000  CONTINUE							5000  CONTINUE
      IF ( LABSYS .EQ. 1 ) THEN					      IF ( LABSYS .EQ. 1 ) THEN
        DO 7 I=1,NPTL						        DO 7 I=1,NPTL
          AMT=SQRT(PPTL(5,I)**2+PPTL(1,I)**2+PPTL(2,I)**2)	          AMT=SQRT(PPTL(5,I)**2+PPTL(1,I)**2+PPTL(2,I)**2)
          PZ=PPTL(3,I)						          PZ=PPTL(3,I)
          E=PPTL(4,I)						          E=PPTL(4,I)
          YI=SIGN( LOG((E+ABS(PZ))/AMT), PZ )			          YI=SIGN( LOG((E+ABS(PZ))/AMT), PZ )
          Y=YI+YHAHA						          Y=YI+YHAHA
          PPTL(3,I)=AMT*SINH(Y)					          PPTL(3,I)=AMT*SINH(Y)
          PPTL(4,I)=AMT*COSH(Y)					          PPTL(4,I)=AMT*COSH(Y)
 7      CONTINUE						 7      CONTINUE
      ENDIF							      ENDIF

C  FINISH							C  FINISH
C  ------							C  ------

      CALL UTPAGE						      CALL UTPAGE
      IF     ( ISH .GE. 91 ) THEN				      IF     ( ISH .GE. 91 ) THEN
        WRITE(IFCH,113)('-',L=1,79),IPAGE,('-',L=1,79)		        WRITE(IFCH,113)('-',L=1,79),IPAGE,('-',L=1,79)
113     FORMAT(/1X,79A1/1X,I5,'.PAGE            '		113     FORMAT(/1X,79A1/1X,I5,'.PAGE            '
     *                       ,'PARTICLE PRODUCTION FINISHED'/	     *                       ,'PARTICLE PRODUCTION FINISHED'/
CDH   ELSEIF ( ISH .EQ. 13 ) THEN				CDH   ELSEIF ( ISH .EQ. 13 ) THEN
CDH     CALL UTTIMA('               ')				CDH     CALL UTTIMA('               ')
      ENDIF							      ENDIF
      GOTO 1000							      GOTO 1000

10011 CONTINUE							10011 CONTINUE
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('JFRADE')					        CALL UTMSG('JFRADE')
        WRITE(IFCH,*)'*****  FRAGMENTATION NOT POSSIBLE'	        WRITE(IFCH,*)'*****  FRAGMENTATION NOT POSSIBLE'
        WRITE(IFCH,112)J,(ICSTR(K,J)/100,K=1,4)			        WRITE(IFCH,112)J,(ICSTR(K,J)/100,K=1,4)
     *                  ,(PSTR(L,J),L=1,5)			     *                  ,(PSTR(L,J),L=1,5)
112     FORMAT( ' STR:',3X,I4,3X,3X,4I5,5F7.2,F7.2)		112     FORMAT( ' STR:',3X,I4,3X,3X,4I5,5F7.2,F7.2)
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      IER=1							      IER=1
      GOTO 1000							      GOTO 1000

1001  CONTINUE							1001  CONTINUE
      IER=1							      IER=1
      GOTO 1000							      GOTO 1000

1000  CONTINUE							1000  CONTINUE
      IF ( IER .EQ. 1 ) THEN					      IF ( IER .EQ. 1 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JFRADE')					          CALL UTMSG('JFRADE')
          WRITE(IFCH,*)'*****  REDO EVENT',NREVT+1		          WRITE(IFCH,*)'*****  REDO EVENT',NREVT+1
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('    JFRADE F   ')		CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('    JFRADE F   ')
      ISH=ISH0							      ISH=ISH0

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTA1						      SUBROUTINE JINTA1

C------------------------------------------------------------	C------------------------------------------------------------
C  SECONDARY INTERACTIONS					C  SECONDARY INTERACTIONS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXIFR=MXPTL)					      PARAMETER (MXIFR=MXPTL)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NPRBMS=20)					      PARAMETER (NPRBMS=20)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CIFRIJ/  IFRIJ(MXIFR)				      COMMON /CIFRIJ/  IFRIJ(MXIFR)
      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT	      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /CNFR/    NRFRA					      COMMON /CNFR/    NRFRA
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPRBMS/  PRBMS(NPRBMS)				      COMMON /CPRBMS/  PRBMS(NPRBMS)
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP
      COMMON /C4PTL/   OPTL(MXPTL),TPTL(MXPTL),UPTL(MXPTL)	      COMMON /C4PTL/   OPTL(MXPTL),TPTL(MXPTL),UPTL(MXPTL)
     *                ,XPTL(MXPTL),YPTL(MXPTL),ZPTL(MXPTL)	     *                ,XPTL(MXPTL),YPTL(MXPTL),ZPTL(MXPTL)
      COMMON /DIDIB/   NDIDIB					      COMMON /DIDIB/   NDIDIB
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS		      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS
     *                ,IC4,IPTNR,JS4,NPS			     *                ,IC4,IPTNR,JS4,NPS

      DOUBLE PRECISION DD,DERR,TI1,TI2,TT,VV,VVP,VVT,XO3,XO4,	      DOUBLE PRECISION DD,DERR,TI1,TI2,TT,VV,VVP,VVT,XO3,XO4,
      INTEGER          IC4(2),JC(NFLAV,2),JCDU(NFLAV,2),JCI(N	      INTEGER          IC4(2),JC(NFLAV,2),JCDU(NFLAV,2),JCI(N
      LOGICAL          IACPTL(MXPTL+10)				      LOGICAL          IACPTL(MXPTL+10)
      DATA DERR/1.D-2/						      DATA DERR/1.D-2/
C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZATION FOR NTC=1					C  INITIALIZATION FOR NTC=1
C  ------------------------					C  ------------------------
      IF ( NTC .EQ. 1 ) THEN					      IF ( NTC .EQ. 1 ) THEN
        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0	        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0
          IF ( MAPROJ .EQ. 1 ) THEN				          IF ( MAPROJ .EQ. 1 ) THEN
            RNUP=0.						            RNUP=0.
          ELSE							          ELSE
            RNUP=1.19*MAPROJ**(0.3333333)-1.61*MAPROJ**(-0.33	            RNUP=1.19*MAPROJ**(0.3333333)-1.61*MAPROJ**(-0.33
          ENDIF							          ENDIF
          IF ( MATARG .EQ. 1 ) THEN				          IF ( MATARG .EQ. 1 ) THEN
            RNUT=0.						            RNUT=0.
          ELSE							          ELSE
            RNUT=1.19*MATARG**(0.3333333)-1.61*MATARG**(-0.33	            RNUT=1.19*MATARG**(0.3333333)-1.61*MATARG**(-0.33
          ENDIF							          ENDIF
          RNUP=RNUP+OVERLP					          RNUP=RNUP+OVERLP
          RNUT=RNUT+OVERLP					          RNUT=RNUT+OVERLP
          VELP=PPTL(3,1)/PPTL(4,1)				          VELP=PPTL(3,1)/PPTL(4,1)
          VELT=PPTL(3,IABS(MAPROJ)+1)/PPTL(4,IABS(MAPROJ)+1)	          VELT=PPTL(3,IABS(MAPROJ)+1)/PPTL(4,IABS(MAPROJ)+1)
          BX=COS(PHIEVT)*BIMEVT					          BX=COS(PHIEVT)*BIMEVT
          BY=SIN(PHIEVT)*BIMEVT					          BY=SIN(PHIEVT)*BIMEVT
        ENDIF							        ENDIF
        NPTL0=NPTL						        NPTL0=NPTL
        DO 51 I=1,NPTL0						        DO 51 I=1,NPTL0
          IAAPTL(I)=1						          IAAPTL(I)=1
          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)			          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)
          IF ( NQI .NE. 0 ) THEN				          IF ( NQI .NE. 0 ) THEN
            RADPTL(I)=RADIAC					            RADPTL(I)=RADIAC
            AMIPTL(I)=PROM+AMSIAC				            AMIPTL(I)=PROM+AMSIAC
          ELSE							          ELSE
            RADPTL(I)=RADIAS					            RADPTL(I)=RADIAS
            AMIPTL(I)=PIOM+AMSIAC				            AMIPTL(I)=PIOM+AMSIAC
          ENDIF							          ENDIF
51      CONTINUE						51      CONTINUE
      ENDIF							      ENDIF

C  INITIALIZATION FOR EACH NTC					C  INITIALIZATION FOR EACH NTC
C  ---------------------------					C  ---------------------------
      NT=NTC							      NT=NTC
      CALL UTPAGE						      CALL UTPAGE
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('               ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('               ')
      NBEF=NPTL							      NBEF=NPTL
CDH   N0BEF=NPTL0						CDH   N0BEF=NPTL0
      NAFT=NPTL							      NAFT=NPTL
CDH   N0AFT=NPTL0						CDH   N0AFT=NPTL0
      IF ( NCLEAN .GT. 0 ) THEN					      IF ( NCLEAN .GT. 0 ) THEN
        IF ( MOD(NT-1,NCLEAN) .EQ. 0 ) THEN			        IF ( MOD(NT-1,NCLEAN) .EQ. 0 ) THEN
          CALL UTCLEA(NPTL0)					          CALL UTCLEA(NPTL0)
          NAFT=NPTL						          NAFT=NPTL
CDH       N0AFT=NPTL0						CDH       N0AFT=NPTL0
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      TAUS=TTAUS						      TAUS=TTAUS
      NPTLPT=ABS(MAPROJ)+ABS(MATARG)				      NPTLPT=ABS(MAPROJ)+ABS(MATARG)
      IF ( NPTL .GT. NPTL0 ) THEN				      IF ( NPTL .GT. NPTL0 ) THEN
        DO 52 I=NPTL0+1,NPTL					        DO 52 I=NPTL0+1,NPTL
          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)			          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)
          IF ( NQI .NE. 0 ) THEN				          IF ( NQI .NE. 0 ) THEN
            RADPTL(I)=RADIAC					            RADPTL(I)=RADIAC
            AMIPTL(I)=PROM+AMSIAC				            AMIPTL(I)=PROM+AMSIAC
          ELSE							          ELSE
            RADPTL(I)=RADIAS					            RADPTL(I)=RADIAS
            AMIPTL(I)=PIOM+AMSIAC				            AMIPTL(I)=PIOM+AMSIAC
          ENDIF							          ENDIF
52      CONTINUE						52      CONTINUE
      ENDIF							      ENDIF
      DO 44 I=1,NPTL						      DO 44 I=1,NPTL
        IF ( ICLPTL(I).EQ.0 .AND. PPTL(5,I).GT.AMIPTL(I) ) TH	        IF ( ICLPTL(I).EQ.0 .AND. PPTL(5,I).GT.AMIPTL(I) ) TH
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
        ELSE							        ELSE
          IACPTL(I)=.FALSE.					          IACPTL(I)=.FALSE.
        ENDIF							        ENDIF
        IF ( IORPTL(I).EQ.-1 ) IACPTL(I)=.TRUE.			        IF ( IORPTL(I).EQ.-1 ) IACPTL(I)=.TRUE.
C  CALL UTTAIN IS REPLACED HERE TO AVOID OVERHEAD		C  CALL UTTAIN IS REPLACED HERE TO AVOID OVERHEAD
C       CALL UTTAIN(I,X,Y,Z,T,N,0)				C       CALL UTTAIN(I,X,Y,Z,T,N,0)
        XO4=XORPTL(4,I)						        XO4=XORPTL(4,I)
C*      IF     ( IOPT .EQ. 0 ) THEN				C*      IF     ( IOPT .EQ. 0 ) THEN
          TI1=TIVPTL(1,I)					          TI1=TIVPTL(1,I)
C*      ELSEIF ( IOPT .EQ. 1 ) THEN				C*      ELSEIF ( IOPT .EQ. 1 ) THEN
C*        TI1=XO4						C*        TI1=XO4
C*      ENDIF							C*      ENDIF
        TI2=TIVPTL(2,I)						        TI2=TIVPTL(2,I)
        IF ( TI1 .GT. TI2 ) GOTO 1009				        IF ( TI1 .GT. TI2 ) GOTO 1009
        PPT4I = 1./PPTL(4,I)					        PPT4I = 1./PPTL(4,I)
        VV=PPTL(3,I)*PPT4I					        VV=PPTL(3,I)*PPT4I
        XO3=XORPTL(3,I)						        XO3=XORPTL(3,I)
        ZZ=XO3+(TI2-XO4)*VV					        ZZ=XO3+(TI2-XO4)*VV
        IF ( TTAUS .LE. 0.D0 ) THEN				        IF ( TTAUS .LE. 0.D0 ) THEN
          TZ=TTAUS						          TZ=TTAUS
        ELSE							        ELSE
          IF     ( ZZ .LE. ZZT ) THEN				          IF     ( ZZ .LE. ZZT ) THEN
            TZ=TTT+(ZZ-ZZT)*ZZT/TTT				            TZ=TTT+(ZZ-ZZT)*ZZT/TTT
          ELSEIF ( ZZ .GE. ZZP ) THEN				          ELSEIF ( ZZ .GE. ZZP ) THEN
            TZ=TTP+(ZZ-ZZP)*ZZP/TTP				            TZ=TTP+(ZZ-ZZP)*ZZP/TTP
          ELSE							          ELSE
            IF ( TTAUS .GE. AINFIN ) THEN			            IF ( TTAUS .GE. AINFIN ) THEN
              TZ=TTAUS						              TZ=TTAUS
              IF ( ISH .GE. 90 ) THEN				              IF ( ISH .GE. 90 ) THEN
                CALL UTMSG('JINTA1')				                CALL UTMSG('JINTA1')
                WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAU	                WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAU
                WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ		                WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ
                CALL UTMSGF					                CALL UTMSGF
              ENDIF						              ENDIF
            ELSE						            ELSE
C*DH          TZ=SQRT(TTAUS**2+ZZ**2)				C*DH          TZ=SQRT(TTAUS**2+ZZ**2)
              IF ( TI2 .LT. 0.D0 ) GOTO 1002			              IF ( TI2 .LT. 0.D0 ) GOTO 1002
              IF ( TTAUS**2+ZZ**2 .GE. TI2**2 ) GOTO 1002	              IF ( TTAUS**2+ZZ**2 .GE. TI2**2 ) GOTO 1002
              GOTO 1006						              GOTO 1006
            ENDIF						            ENDIF
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        IF ( TZ .GE. TI2 ) GOTO 1002				        IF ( TZ .GE. TI2 ) GOTO 1002
 1006   ZZ=XO3+(TI1-XO4)*VV					 1006   ZZ=XO3+(TI1-XO4)*VV
        IF ( TTAUS .GT. 0.D0 ) THEN				        IF ( TTAUS .GT. 0.D0 ) THEN
          IF     ( ZZ .LE. ZZT ) THEN				          IF     ( ZZ .LE. ZZT ) THEN
            TZ=TTT+(ZZ-ZZT)*ZZT/TTT				            TZ=TTT+(ZZ-ZZT)*ZZT/TTT
          ELSEIF ( ZZ .GE. ZZP ) THEN				          ELSEIF ( ZZ .GE. ZZP ) THEN
            TZ=TTP+(ZZ-ZZP)*ZZP/TTP				            TZ=TTP+(ZZ-ZZP)*ZZP/TTP
          ELSE							          ELSE
            IF ( TTAUS .GE. AINFIN ) THEN			            IF ( TTAUS .GE. AINFIN ) THEN
              TZ=TTAUS						              TZ=TTAUS
              IF ( ISH .GE. 90 ) THEN				              IF ( ISH .GE. 90 ) THEN
                CALL UTMSG('JINTA1')				                CALL UTMSG('JINTA1')
                WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAU	                WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAU
                WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ		                WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ
                CALL UTMSGF					                CALL UTMSGF
              ENDIF						              ENDIF
            ELSE						            ELSE
C*DH          TZ=SQRT(TTAUS**2+ZZ**2)				C*DH          TZ=SQRT(TTAUS**2+ZZ**2)
              IF ( TI1 .LT. 0.D0 ) GOTO 1007			              IF ( TI1 .LT. 0.D0 ) GOTO 1007
              IF ( TTAUS**2+ZZ**2 .LE. TI1**2 ) GOTO 1001	              IF ( TTAUS**2+ZZ**2 .LE. TI1**2 ) GOTO 1001
              GOTO 1007						              GOTO 1007
            ENDIF						            ENDIF
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        IF ( TZ .LE. TI1 ) GOTO 1001				        IF ( TZ .LE. TI1 ) GOTO 1001
 1007   IF ( TTAUS .LE. 0.D0 ) THEN				 1007   IF ( TTAUS .LE. 0.D0 ) THEN
          TT=TTAUS						          TT=TTAUS
          ZZ=XO3+(TT-XO4)*VV					          ZZ=XO3+(TT-XO4)*VV
          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1031		          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1031
        ELSE							        ELSE
          ZZA=XO3-XO4*VV					          ZZA=XO3-XO4*VV
          VVT=ZZT/TTT						          VVT=ZZT/TTT
          TT=(TTT+(ZZA-ZZT)*VVT)/(1.D0-VV*VVT)			          TT=(TTT+(ZZA-ZZT)*VVT)/(1.D0-VV*VVT)
          ZZ=XO3+(TT-XO4)*VV					          ZZ=XO3+(TT-XO4)*VV
          IF ( ZZ .LE. ZZT ) THEN				          IF ( ZZ .LE. ZZT ) THEN
            IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1032		            IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1032
            GOTO 1000						            GOTO 1000
          ENDIF							          ENDIF
          VVP=ZZP/TTP						          VVP=ZZP/TTP
          TT=(TTP+(ZZA-ZZP)*VVP)/(1.D0-VV*VVP)			          TT=(TTP+(ZZA-ZZP)*VVP)/(1.D0-VV*VVP)
          ZZ=XO3+(TT-XO4)*VV					          ZZ=XO3+(TT-XO4)*VV
          IF ( ZZ .GE. ZZP ) THEN				          IF ( ZZ .GE. ZZP ) THEN
            IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1033		            IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1033
            GOTO 1000						            GOTO 1000
          ENDIF							          ENDIF
          DD=1.D0-VV**2						          DD=1.D0-VV**2
          IF ( DD .EQ. 0.D0 ) THEN				          IF ( DD .EQ. 0.D0 ) THEN
            TT=-VV*(TTAUS**2+ZZA**2)*0.5D0/ZZA			            TT=-VV*(TTAUS**2+ZZA**2)*0.5D0/ZZA
          ELSE							          ELSE
            TT=(ZZA*VV+SQRT(ZZA**2+TTAUS**2*DD))/DD		            TT=(ZZA*VV+SQRT(ZZA**2+TTAUS**2*DD))/DD
          ENDIF							          ENDIF
          ZZ=XO3+(TT-XO4)*VV					          ZZ=XO3+(TT-XO4)*VV
          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1034		          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1034
          IF ( TT .LT. 0.D0 ) GOTO 1035				          IF ( TT .LT. 0.D0 ) GOTO 1035
          IF ( ZZ.LE.ZZT .OR. ZZ.GE.ZZP ) GOTO 1004		          IF ( ZZ.LE.ZZT .OR. ZZ.GE.ZZP ) GOTO 1004
          IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ))			          IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ))
     *                         .GT. DERR*TTAUS**2 ) GOTO 1005	     *                         .GT. DERR*TTAUS**2 ) GOTO 1005
        ENDIF							        ENDIF
 1000   N=0							 1000   N=0
 1011   T=TT							 1011   T=TT
        Z=ZZ							        Z=ZZ
        X=XORPTL(1,I)+(T-XO4)*PPTL(1,I)*PPT4I			        X=XORPTL(1,I)+(T-XO4)*PPTL(1,I)*PPT4I
        Y=XORPTL(2,I)+(T-XO4)*PPTL(2,I)*PPT4I			        Y=XORPTL(2,I)+(T-XO4)*PPTL(2,I)*PPT4I
        GOTO 53							        GOTO 53
 1001   N=1							 1001   N=1
        GOTO 53							        GOTO 53
 1002   N=2							 1002   N=2
        GOTO 53							        GOTO 53
 1031   N=31							 1031   N=31
        GOTO 1003						        GOTO 1003

 1032   N=32							 1032   N=32
        GOTO 1003						        GOTO 1003
 1033   N=33							 1033   N=33
        GOTO 1003						        GOTO 1003
 1034   N=34							 1034   N=34
 1003   IF ( ABS(TT-TI1) .LE. DERR*ABS(TT) ) GOTO 1000		 1003   IF ( ABS(TT-TI1) .LE. DERR*ABS(TT) ) GOTO 1000
        IF ( ABS(TT-TI2) .LE. DERR*ABS(TT) ) GOTO 1000		        IF ( ABS(TT-TI2) .LE. DERR*ABS(TT) ) GOTO 1000
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTA1')					          CALL UTMSG('JINTA1')
          WRITE(IFCH,*)'*****  TI1 < TT < TI2   NOT FULFILLED	          WRITE(IFCH,*)'*****  TI1 < TT < TI2   NOT FULFILLED
          WRITE(IFCH,*)SNGL(TI1),SNGL(TT),SNGL(TI2)		          WRITE(IFCH,*)SNGL(TI1),SNGL(TT),SNGL(TI2)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1011						        GOTO 1011
 1035   CONTINUE						 1035   CONTINUE
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTA1')					          CALL UTMSG('JINTA1')
          WRITE(IFCH,*)'*****  TT < 0     ( ',TT,' )'		          WRITE(IFCH,*)'*****  TT < 0     ( ',TT,' )'
          WRITE(IFCH,*)'VV,DD:',VV,DD				          WRITE(IFCH,*)'VV,DD:',VV,DD
          WRITE(IFCH,*)'ZZA,TTAUS:',ZZA,TTAUS			          WRITE(IFCH,*)'ZZA,TTAUS:',ZZA,TTAUS
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1011						        GOTO 1011
 1004   N=4							 1004   N=4
        IF ( ABS(ZZ-ZZT) .LE. DERR*ABS(ZZ) ) GOTO 1000		        IF ( ABS(ZZ-ZZT) .LE. DERR*ABS(ZZ) ) GOTO 1000
        IF ( ABS(ZZ-ZZP) .LE. DERR*ABS(ZZ) ) GOTO 1000		        IF ( ABS(ZZ-ZZP) .LE. DERR*ABS(ZZ) ) GOTO 1000
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTA1')					          CALL UTMSG('JINTA1')
          WRITE(IFCH,*)'*****  ZZT < ZZ < ZZP   NOT FULFILLED	          WRITE(IFCH,*)'*****  ZZT < ZZ < ZZP   NOT FULFILLED
          WRITE(IFCH,*)SNGL(ZZT),SNGL(ZZ),SNGL(ZZP)		          WRITE(IFCH,*)SNGL(ZZT),SNGL(ZZ),SNGL(ZZP)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1011						        GOTO 1011
 1005   N=5							 1005   N=5
        IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ)) .LE. DERR ) GOTO 1	        IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ)) .LE. DERR ) GOTO 1
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTA1')					          CALL UTMSG('JINTA1')
          WRITE(IFCH,*)'*****  TTAUS**2 .NE. (TT+ZZ)*(TT-ZZ)'	          WRITE(IFCH,*)'*****  TTAUS**2 .NE. (TT+ZZ)*(TT-ZZ)'
          WRITE(IFCH,*)SNGL(TTAUS**2),SNGL((TT+ZZ)*(TT-ZZ))	          WRITE(IFCH,*)SNGL(TTAUS**2),SNGL((TT+ZZ)*(TT-ZZ))
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1011						        GOTO 1011
 1009   N=9							 1009   N=9
 53     CONTINUE						 53     CONTINUE

        IF ( N.EQ.2 ) THEN					        IF ( N.EQ.2 ) THEN
          IF ( NCLEAN .GT. 0 ) THEN				          IF ( NCLEAN .GT. 0 ) THEN
            IF ( MOD(NT,NCLEAN).EQ.0 ) THEN			            IF ( MOD(NT,NCLEAN).EQ.0 ) THEN
              ISTPTL(I)=2					              ISTPTL(I)=2
            ENDIF						            ENDIF
          ENDIF							          ENDIF
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( N.EQ.9 ) THEN					        IF ( N.EQ.9 ) THEN
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( N.EQ.1 ) THEN					        IF ( N.EQ.1 ) THEN
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( IAAPTL(I) .EQ. 0 ) THEN				        IF ( IAAPTL(I) .EQ. 0 ) THEN
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( ISTPTL(I) .EQ. 2 ) IACPTL(I)=.TRUE.		        IF ( ISTPTL(I) .EQ. 2 ) IACPTL(I)=.TRUE.
        IF ( ABS(IDPTL(I)) .LT. 100				        IF ( ABS(IDPTL(I)) .LT. 100
     *       .AND.  ABS(IDPTL(I)) .NE. 20 ) IACPTL(I)=.TRUE.	     *       .AND.  ABS(IDPTL(I)) .NE. 20 ) IACPTL(I)=.TRUE.
        IF ( IDPTL(I) .EQ. 441  .AND.  JPSIFI .EQ. 0 ) IACPTL	        IF ( IDPTL(I) .EQ. 441  .AND.  JPSIFI .EQ. 0 ) IACPTL
 54     XPTL(I)=X						 54     XPTL(I)=X
        YPTL(I)=Y						        YPTL(I)=Y
        ZPTL(I)=Z						        ZPTL(I)=Z
        TPTL(I)=T						        TPTL(I)=T
        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0	        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0
          IF ( (X-BX*0.5)**2+(Y-BY*0.5)**2+(Z-VELP*TAUS)**2	          IF ( (X-BX*0.5)**2+(Y-BY*0.5)**2+(Z-VELP*TAUS)**2
     *                                    .LT. RNUP**2  .AND.	     *                                    .LT. RNUP**2  .AND.
     *         (X+BX*0.5)**2+(Y+BY*0.5)**2+(Z-VELT*TAUS)**2	     *         (X+BX*0.5)**2+(Y+BY*0.5)**2+(Z-VELT*TAUS)**2
     *                                .LT. RNUT**2  )  IACPTL	     *                                .LT. RNUT**2  )  IACPTL
        ENDIF							        ENDIF
44    CONTINUE							44    CONTINUE
      NPTL0=NPTL						      NPTL0=NPTL
      I=0							      I=0

C  I LOOP --> 24						C  I LOOP --> 24
C  -------------						C  -------------
9999  I=I+1							9999  I=I+1
      IF ( IACPTL(I) ) GOTO 24					      IF ( IACPTL(I) ) GOTO 24
      J0=NPTLPT+1						      J0=NPTLPT+1
      IF ( I .GT. NPTLPT ) J0=I+1				      IF ( I .GT. NPTLPT ) J0=I+1
      IF ( I .GT. NPTL0 ) J0=1					      IF ( I .GT. NPTL0 ) J0=1

C  J LOOP --> 250						C  J LOOP --> 250
C  -------------						C  -------------
      J = J0-1							      J = J0-1
25    J = J+1							25    J = J+1
      IF ( J .GT. NPTL ) GOTO 24				      IF ( J .GT. NPTL ) GOTO 24
        IF ( IACPTL(J) ) THEN					        IF ( IACPTL(J) ) THEN
          IF ( IACPTL(J+1) ) THEN				          IF ( IACPTL(J+1) ) THEN
            IF ( IACPTL(J+2) ) THEN				            IF ( IACPTL(J+2) ) THEN
              IF ( IACPTL(J+3) ) THEN				              IF ( IACPTL(J+3) ) THEN
                IF ( IACPTL(J+4) ) THEN				                IF ( IACPTL(J+4) ) THEN
                  IF ( IACPTL(J+5) ) THEN			                  IF ( IACPTL(J+5) ) THEN
                    IF ( IACPTL(J+6) ) THEN			                    IF ( IACPTL(J+6) ) THEN
                      IF ( IACPTL(J+7) ) THEN			                      IF ( IACPTL(J+7) ) THEN
                        IF ( IACPTL(J+8) ) THEN			                        IF ( IACPTL(J+8) ) THEN
                          IF ( IACPTL(J+9) ) THEN		                          IF ( IACPTL(J+9) ) THEN
                            IF ( IACPTL(J+10) ) THEN		                            IF ( IACPTL(J+10) ) THEN
                              J=J+10				                              J=J+10
                              GOTO 25				                              GOTO 25
                            ELSE				                            ELSE
                              J=J+10				                              J=J+10
                              IF ( J .GT. NPTL ) GOTO 24	                              IF ( J .GT. NPTL ) GOTO 24
                              GOTO 26				                              GOTO 26
                            ENDIF				                            ENDIF
                          ELSE					                          ELSE
                            J=J+9				                            J=J+9
                            IF ( J .GT. NPTL ) GOTO 24		                            IF ( J .GT. NPTL ) GOTO 24
                            GOTO 26				                            GOTO 26
                          ENDIF					                          ENDIF
                        ELSE					                        ELSE
                          J=J+8					                          J=J+8
                          IF ( J .GT. NPTL ) GOTO 24		                          IF ( J .GT. NPTL ) GOTO 24
                          GOTO 26				                          GOTO 26
                        ENDIF					                        ENDIF
                      ELSE					                      ELSE
                        J=J+7					                        J=J+7
                        IF ( J .GT. NPTL ) GOTO 24		                        IF ( J .GT. NPTL ) GOTO 24
                        GOTO 26					                        GOTO 26
                      ENDIF					                      ENDIF
                    ELSE					                    ELSE
                      J=J+6					                      J=J+6
                      IF ( J .GT. NPTL ) GOTO 24		                      IF ( J .GT. NPTL ) GOTO 24
                      GOTO 26					                      GOTO 26
                    ENDIF					                    ENDIF
                  ELSE						                  ELSE
                    J=J+5					                    J=J+5
                    IF ( J .GT. NPTL ) GOTO 24			                    IF ( J .GT. NPTL ) GOTO 24
                    GOTO 26					                    GOTO 26
                  ENDIF						                  ENDIF
                ELSE						                ELSE
                  J=J+4						                  J=J+4
                  IF ( J .GT. NPTL ) GOTO 24			                  IF ( J .GT. NPTL ) GOTO 24
                  GOTO 26					                  GOTO 26
                ENDIF						                ENDIF
              ELSE						              ELSE
                J=J+3						                J=J+3
                IF ( J .GT. NPTL ) GOTO 24			                IF ( J .GT. NPTL ) GOTO 24
                GOTO 26						                GOTO 26
              ENDIF						              ENDIF
            ELSE						            ELSE
              J=J+2						              J=J+2
              IF ( J .GT. NPTL ) GOTO 24			              IF ( J .GT. NPTL ) GOTO 24
              GOTO 26						              GOTO 26
            ENDIF						            ENDIF
          ELSE							          ELSE
            J=J+1						            J=J+1
            IF ( J .GT. NPTL ) GOTO 24				            IF ( J .GT. NPTL ) GOTO 24
            GOTO 26						            GOTO 26
          ENDIF							          ENDIF
        ENDIF							        ENDIF
 26     CONTINUE						 26     CONTINUE
        RADSQR=(RADPTL(I)+RADPTL(J))**2				        RADSQR=(RADPTL(I)+RADPTL(J))**2
        IF ( (ZPTL(I)-ZPTL(J))**2 .GT. RADSQR ) GOTO 25		        IF ( (ZPTL(I)-ZPTL(J))**2 .GT. RADSQR ) GOTO 25
        IF ( (YPTL(I)-YPTL(J))**2 .GT. RADSQR ) GOTO 25		        IF ( (YPTL(I)-YPTL(J))**2 .GT. RADSQR ) GOTO 25
        IF ( (XPTL(I)-XPTL(J))**2 .GT. RADSQR ) GOTO 25		        IF ( (XPTL(I)-XPTL(J))**2 .GT. RADSQR ) GOTO 25
        IF ( I .EQ. J ) GOTO 25					        IF ( I .EQ. J ) GOTO 25
        IF ( IORPTL(I).GT.0 .AND. IORPTL(J).EQ.IORPTL(I) ) GO	        IF ( IORPTL(I).GT.0 .AND. IORPTL(J).EQ.IORPTL(I) ) GO
        IF ( IORPTL(I) .EQ. J ) GOTO 25				        IF ( IORPTL(I) .EQ. J ) GOTO 25
        IF ( IORPTL(J) .EQ. I ) GOTO 25				        IF ( IORPTL(J) .EQ. I ) GOTO 25
        PDE=(PPTL(3,I)+PPTL(3,J))/(PPTL(4,I)+PPTL(4,J))		        PDE=(PPTL(3,I)+PPTL(3,J))/(PPTL(4,I)+PPTL(4,J))
        GAM2I=1.-PDE**2						        GAM2I=1.-PDE**2
        IF ( GAM2I .EQ. 0. ) GOTO 25				        IF ( GAM2I .EQ. 0. ) GOTO 25
        IF ( (ZPTL(I)-ZPTL(J)-(TPTL(I)-TPTL(J))*PDE)**2		        IF ( (ZPTL(I)-ZPTL(J)-(TPTL(I)-TPTL(J))*PDE)**2
     *                                 .GT. RADSQR*GAM2I ) GO	     *                                 .GT. RADSQR*GAM2I ) GO
        IF ( (XPTL(I)-XPTL(J))**2+(YPTL(I)-YPTL(J))**2+		        IF ( (XPTL(I)-XPTL(J))**2+(YPTL(I)-YPTL(J))**2+
     *    1./GAM2I*(ZPTL(I)-ZPTL(J)-(TPTL(I)-TPTL(J))*PDE)**2	     *    1./GAM2I*(ZPTL(I)-ZPTL(J)-(TPTL(I)-TPTL(J))*PDE)**2
     *                                       .GT. RADSQR ) GO	     *                                       .GT. RADSQR ) GO
        CALL JINTCC(I,J,IRET)					        CALL JINTCC(I,J,IRET)
        IF ( IRET .EQ. 1 ) GOTO 25				        IF ( IRET .EQ. 1 ) GOTO 25

        IACTN=0							        IACTN=0
        NPTL00=NPTL						        NPTL00=NPTL
        NSTR00=NSTR						        NSTR00=NSTR
        XAVER(1)=(XPTL(I)+XPTL(J))*0.5				        XAVER(1)=(XPTL(I)+XPTL(J))*0.5
        XAVER(2)=(YPTL(I)+YPTL(J))*0.5				        XAVER(2)=(YPTL(I)+YPTL(J))*0.5
        XAVER(3)=(ZPTL(I)+ZPTL(J))*0.5				        XAVER(3)=(ZPTL(I)+ZPTL(J))*0.5
        XAVER(4)=(TPTL(I)+TPTL(J))*0.5				        XAVER(4)=(TPTL(I)+TPTL(J))*0.5

        CALL JINTFS(I,J,NQIFUS,JC,AMIM,IRET)			        CALL JINTFS(I,J,NQIFUS,JC,AMIM,IRET)
        IF ( IRET .EQ. 1 ) GOTO 25				        IF ( IRET .EQ. 1 ) GOTO 25

        CALL JINTCE(I,J,AMIM,IACTN,IRET)			        CALL JINTCE(I,J,AMIM,IACTN,IRET)
        IF ( IRET .EQ. 25 ) GOTO25				        IF ( IRET .EQ. 25 ) GOTO25

        TIVPTL(2,I)=TPTL(I)					        TIVPTL(2,I)=TPTL(I)
        TIVPTL(2,J)=TPTL(J)					        TIVPTL(2,J)=TPTL(J)
        ISTPTL(I)=1						        ISTPTL(I)=1
        ISTPTL(J)=1						        ISTPTL(J)=1
        IACPTL(I)=.TRUE.					        IACPTL(I)=.TRUE.
        IACPTL(J)=.TRUE.					        IACPTL(J)=.TRUE.

        CALL JINTCH(I,J,KMAX)					        CALL JINTCH(I,J,KMAX)
        DO 30 K=1,KMAX						        DO 30 K=1,KMAX
          N=IFRIJ(K)						          N=IFRIJ(K)
          ISTPTL(N)=2						          ISTPTL(N)=2
          IACPTL(N)=.TRUE.					          IACPTL(N)=.TRUE.
30      CONTINUE						30      CONTINUE
        CALL JINTPA(I,J,KMAX)					        CALL JINTPA(I,J,KMAX)
        DO 31 K=1,KMAX						        DO 31 K=1,KMAX
          N=IFRIJ(K)						          N=IFRIJ(K)
          IACPTL(N)=.TRUE.					          IACPTL(N)=.TRUE.
31      CONTINUE						31      CONTINUE

        IF ( IACTN .EQ. 1 ) THEN				        IF ( IACTN .EQ. 1 ) THEN
          DO 32 N=NPTL00+1,NPTL					          DO 32 N=NPTL00+1,NPTL
            IAAPTL(N)=1						            IAAPTL(N)=1
            CALL IDQUAC(N,NQI,NDUMMY,NDUMMY,JCDU)		            CALL IDQUAC(N,NQI,NDUMMY,NDUMMY,JCDU)
            IF ( NQI .EQ. 0 ) THEN				            IF ( NQI .EQ. 0 ) THEN
              RADPTL(N)=RADIAS					              RADPTL(N)=RADIAS
              AMIPTL(N)=PIOM+AMSIAC				              AMIPTL(N)=PIOM+AMSIAC
            ELSE						            ELSE
              RADPTL(N)=RADIAC					              RADPTL(N)=RADIAC
              AMIPTL(N)=PROM+AMSIAC				              AMIPTL(N)=PROM+AMSIAC
            ENDIF						            ENDIF
            IACPTL(N)=.FALSE.					            IACPTL(N)=.FALSE.
            IF ( PPTL(5,N) .GT. AMIPTL(N) ) IACPTL(N)=.TRUE.	            IF ( PPTL(5,N) .GT. AMIPTL(N) ) IACPTL(N)=.TRUE.
            CALL UTTAIN(N,X,Y,Z,T,K,0)				            CALL UTTAIN(N,X,Y,Z,T,K,0)
            IF ( K.EQ.1 .OR. K.EQ.2 .OR. K.EQ.9 ) IACPTL(N)=.	            IF ( K.EQ.1 .OR. K.EQ.2 .OR. K.EQ.9 ) IACPTL(N)=.
            IF ( ABS(IDPTL(N)) .LT. 100				            IF ( ABS(IDPTL(N)) .LT. 100
     *           .AND. ABS(IDPTL(N)) .NE. 20 ) IACPTL(N)=.TRU	     *           .AND. ABS(IDPTL(N)) .NE. 20 ) IACPTL(N)=.TRU
            XPTL(N)=X						            XPTL(N)=X
            YPTL(N)=Y						            YPTL(N)=Y
            ZPTL(N)=Z						            ZPTL(N)=Z
            TPTL(N)=T						            TPTL(N)=T
            IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.	            IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.
              IF ( (X-BX*.5)**2+(Y-BY*.5)**2+(Z-VELP*TAUS)**2	              IF ( (X-BX*.5)**2+(Y-BY*.5)**2+(Z-VELP*TAUS)**2
     *                                 .LT. RNUP**2  .AND.	     *                                 .LT. RNUP**2  .AND.
     *             (X+BX*.5)**2+(Y+BY*.5)**2+(Z-VELT*TAUS)**2	     *             (X+BX*.5)**2+(Y+BY*.5)**2+(Z-VELT*TAUS)**2
     *                                 .LT. RNUT**2 )  IACPTL	     *                                 .LT. RNUT**2 )  IACPTL
            ENDIF						            ENDIF
32        CONTINUE						32        CONTINUE
          GOTO 24						          GOTO 24
        ENDIF							        ENDIF

        CALL JINTEL(I,J,AMIM,IACTN)				        CALL JINTEL(I,J,AMIM,IACTN)
        IF ( IACTN .EQ. 2 ) THEN				        IF ( IACTN .EQ. 2 ) THEN
          DO 33 N=NPTL00+1,NPTL					          DO 33 N=NPTL00+1,NPTL
            IF     ( N .EQ. NPTL00+1 ) THEN			            IF     ( N .EQ. NPTL00+1 ) THEN
              IJ=I						              IJ=I
            ELSEIF ( N .EQ. NPTL00+2 ) THEN			            ELSEIF ( N .EQ. NPTL00+2 ) THEN
              IJ=J						              IJ=J
            ENDIF						            ENDIF
            RADPTL(N)=RADPTL(IJ)				            RADPTL(N)=RADPTL(IJ)
            AMIPTL(N)=AMIPTL(IJ)				            AMIPTL(N)=AMIPTL(IJ)
            XPTL(N)=XAVER(1)					            XPTL(N)=XAVER(1)
            YPTL(N)=XAVER(2)					            YPTL(N)=XAVER(2)
            ZPTL(N)=XAVER(3)					            ZPTL(N)=XAVER(3)
            TPTL(N)=XAVER(4)					            TPTL(N)=XAVER(4)
            IACPTL(N)=.FALSE.					            IACPTL(N)=.FALSE.
            IAAPTL(N)=1						            IAAPTL(N)=1
33        CONTINUE						33        CONTINUE
          GOTO 24						          GOTO 24
        ENDIF							        ENDIF

        CALL JINTFU(I,J,JC,IACTN)				        CALL JINTFU(I,J,JC,IACTN)
        DO 34 N=NPTL00+1,NPTL					        DO 34 N=NPTL00+1,NPTL
          IF ( NQIFUS .EQ. 0 ) THEN				          IF ( NQIFUS .EQ. 0 ) THEN
            RADPTL(N)=RADIAS					            RADPTL(N)=RADIAS
            AMIPTL(N)=PIOM+AMSIAC				            AMIPTL(N)=PIOM+AMSIAC
          ELSE							          ELSE
            RADPTL(N)=RADIAC					            RADPTL(N)=RADIAC
            AMIPTL(N)=PROM+AMSIAC				            AMIPTL(N)=PROM+AMSIAC
          ENDIF							          ENDIF
          XPTL(N)=XAVER(1)					          XPTL(N)=XAVER(1)
          YPTL(N)=XAVER(2)					          YPTL(N)=XAVER(2)
          ZPTL(N)=XAVER(3)					          ZPTL(N)=XAVER(3)
          TPTL(N)=XAVER(4)					          TPTL(N)=XAVER(4)
          IACPTL(N)=.FALSE.					          IACPTL(N)=.FALSE.
          IAAPTL(N)=1						          IAAPTL(N)=1
34      CONTINUE						34      CONTINUE
*       GOTO 24							*       GOTO 24

*250   GOTO 25							*250   GOTO 25

24    CONTINUE							24    CONTINUE
      IF ( I .LT. NPTL-1 ) GOTO 9999				      IF ( I .LT. NPTL-1 ) GOTO 9999

      ISHNPT=ISH						      ISHNPT=ISH
      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .EQ. 22 ) THEN					      IF ( ISH .EQ. 22 ) THEN
        WRITE(IFMT,131)NT,NBEF,NAFT,NPTL			        WRITE(IFMT,131)NT,NBEF,NAFT,NPTL
131     FORMAT(1X,'NT=',I5,4X,'NBEF=',I8,4X,'NAFT=',I8,4X,'NP	131     FORMAT(1X,'NT=',I5,4X,'NBEF=',I8,4X,'NAFT=',I8,4X,'NP
      ENDIF							      ENDIF
      ISH=ISHNPT						      ISH=ISHNPT
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('INTERACTIONS   ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('INTERACTIONS   ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTA2						      SUBROUTINE JINTA2

C------------------------------------------------------------	C------------------------------------------------------------
C  SECONDARY INTERACTIONS: PERCOLATION--CLUSTER MODEL		C  SECONDARY INTERACTIONS: PERCOLATION--CLUSTER MODEL
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXIFR=MXPTL)					      PARAMETER (MXIFR=MXPTL)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NPRBMS=20)					      PARAMETER (NPRBMS=20)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CIFRIJ/  IFRIJ(MXIFR)				      COMMON /CIFRIJ/  IFRIJ(MXIFR)
      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT	      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /CNFR/    NRFRA					      COMMON /CNFR/    NRFRA
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPRBMS/  PRBMS(NPRBMS)				      COMMON /CPRBMS/  PRBMS(NPRBMS)
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP
      COMMON /C3PTL/   DESPTL(MXPTL),DEZPTL(MXPTL)		      COMMON /C3PTL/   DESPTL(MXPTL),DEZPTL(MXPTL)
      COMMON /C4PTL/   OPTL(MXPTL),TPTL(MXPTL),UPTL(MXPTL)	      COMMON /C4PTL/   OPTL(MXPTL),TPTL(MXPTL),UPTL(MXPTL)
     *                ,XPTL(MXPTL),YPTL(MXPTL),ZPTL(MXPTL)	     *                ,XPTL(MXPTL),YPTL(MXPTL),ZPTL(MXPTL)
      COMMON /DIDIB/   NDIDIB					      COMMON /DIDIB/   NDIDIB
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS		      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS
     *                ,IC4,IPTNR,JS4,NPS			     *                ,IC4,IPTNR,JS4,NPS

      INTEGER          IC4(2),JC(NFLAV,2),JCDU(NFLAV,2),JCI(N	      INTEGER          IC4(2),JC(NFLAV,2),JCDU(NFLAV,2),JCI(N
      LOGICAL          IACPTL(MXPTL+10)				      LOGICAL          IACPTL(MXPTL+10)
C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZATION FOR NTC=1					C  INITIALIZATION FOR NTC=1
C  ------------------------					C  ------------------------
      IF ( NTC .EQ. 1 ) THEN					      IF ( NTC .EQ. 1 ) THEN
        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0	        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0
          IF ( MAPROJ .EQ. 1 ) THEN				          IF ( MAPROJ .EQ. 1 ) THEN
            RNUP=0.						            RNUP=0.
          ELSE							          ELSE
            RNUP=1.19*MAPROJ**(.3333333)-1.61*MAPROJ**(-.3333	            RNUP=1.19*MAPROJ**(.3333333)-1.61*MAPROJ**(-.3333
          ENDIF							          ENDIF
          RNUP=RNUP+OVERLP					          RNUP=RNUP+OVERLP
          IF ( MATARG .EQ. 1 ) THEN				          IF ( MATARG .EQ. 1 ) THEN
            RNUT=0.						            RNUT=0.
          ELSE							          ELSE
            RNUT=1.19*MATARG**(.3333333)-1.61*MATARG**(-.3333	            RNUT=1.19*MATARG**(.3333333)-1.61*MATARG**(-.3333
          ENDIF							          ENDIF
          RNUT=RNUT+OVERLP					          RNUT=RNUT+OVERLP
          VELP=PPTL(3,1)/PPTL(4,1)				          VELP=PPTL(3,1)/PPTL(4,1)
          VELT=PPTL(3,IABS(MAPROJ)+1)/PPTL(4,IABS(MAPROJ)+1)	          VELT=PPTL(3,IABS(MAPROJ)+1)/PPTL(4,IABS(MAPROJ)+1)
          BX=COS(PHIEVT)*BIMEVT					          BX=COS(PHIEVT)*BIMEVT
          BY=SIN(PHIEVT)*BIMEVT					          BY=SIN(PHIEVT)*BIMEVT
        ENDIF							        ENDIF
        NPTL0=NPTL						        NPTL0=NPTL
        DO 51 I=1,NPTL0						        DO 51 I=1,NPTL0
          IAAPTL(I)=1						          IAAPTL(I)=1
          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)			          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)
          IF ( NQI .EQ. 0 ) THEN				          IF ( NQI .EQ. 0 ) THEN
            RADPTL(I)=RADIAS					            RADPTL(I)=RADIAS
            DESPTL(I)=RADIAS					            DESPTL(I)=RADIAS
            DEZPTL(I)=0.					            DEZPTL(I)=0.
            AMIPTL(I)=PIOM+AMSIAC				            AMIPTL(I)=PIOM+AMSIAC
          ELSE							          ELSE
            RADPTL(I)=RADIAC					            RADPTL(I)=RADIAC
            DESPTL(I)=RADIAC					            DESPTL(I)=RADIAC
            DEZPTL(I)=0.					            DEZPTL(I)=0.
            AMIPTL(I)=PROM+AMSIAC				            AMIPTL(I)=PROM+AMSIAC
          ENDIF							          ENDIF
51      CONTINUE						51      CONTINUE
      ENDIF							      ENDIF

C  INITIALIZATION FOR EACH NTC					C  INITIALIZATION FOR EACH NTC
C  ---------------------------					C  ---------------------------
      NT=NTC							      NT=NTC
      CALL UTPAGE						      CALL UTPAGE
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('               ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('               ')
      NBEF=NPTL							      NBEF=NPTL
CDH   N0BEF=NPTL0						CDH   N0BEF=NPTL0
      NAFT=NPTL							      NAFT=NPTL
CDH   N0AFT=NPTL0						CDH   N0AFT=NPTL0
      IF ( NCLEAN .GT. 0 ) THEN					      IF ( NCLEAN .GT. 0 ) THEN
        IF ( MOD(NT-1,NCLEAN) .EQ. 0 ) THEN			        IF ( MOD(NT-1,NCLEAN) .EQ. 0 ) THEN
          CALL UTCLEA(NPTL0)					          CALL UTCLEA(NPTL0)
          NAFT=NPTL						          NAFT=NPTL
CDH       N0AFT=NPTL0						CDH       N0AFT=NPTL0
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      TAUS=TTAUS						      TAUS=TTAUS
      NPTLPT=ABS(MAPROJ)+ABS(MATARG)				      NPTLPT=ABS(MAPROJ)+ABS(MATARG)
      IF ( NPTL .GT. NPTL0 ) THEN				      IF ( NPTL .GT. NPTL0 ) THEN
        DO 52 I=NPTL0+1,NPTL					        DO 52 I=NPTL0+1,NPTL
          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)			          CALL IDQUAC(I,NQI,NDUMMY,NDUMMY,JCI)
          IF ( NQI .EQ. 0 ) THEN				          IF ( NQI .EQ. 0 ) THEN
            RADPTL(I)=RADIAS					            RADPTL(I)=RADIAS
            DESPTL(I)=RADIAS					            DESPTL(I)=RADIAS
            DEZPTL(I)=0.					            DEZPTL(I)=0.
            AMIPTL(I)=PIOM+AMSIAC				            AMIPTL(I)=PIOM+AMSIAC
          ELSE							          ELSE
            RADPTL(I)=RADIAC					            RADPTL(I)=RADIAC
            DESPTL(I)=RADIAC					            DESPTL(I)=RADIAC
            DEZPTL(I)=0.					            DEZPTL(I)=0.
            AMIPTL(I)=PROM+AMSIAC				            AMIPTL(I)=PROM+AMSIAC
          ENDIF							          ENDIF
52      CONTINUE						52      CONTINUE
      ENDIF							      ENDIF
      DO 44 I=1,NPTL						      DO 44 I=1,NPTL
        IF ( ICLPTL(I).EQ.0 .AND. PPTL(5,I).GT.AMIPTL(I) ) TH	        IF ( ICLPTL(I).EQ.0 .AND. PPTL(5,I).GT.AMIPTL(I) ) TH
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
        ELSE							        ELSE
          IACPTL(I)=.FALSE.					          IACPTL(I)=.FALSE.
        ENDIF							        ENDIF
        IF ( IORPTL(I).EQ.-1 ) IACPTL(I)=.TRUE.			        IF ( IORPTL(I).EQ.-1 ) IACPTL(I)=.TRUE.
        CALL UTTAIN(I,X,Y,Z,T,N,0)				        CALL UTTAIN(I,X,Y,Z,T,N,0)
        IF ( N.EQ.2 ) THEN					        IF ( N.EQ.2 ) THEN
          IF ( NCLEAN .GT. 0 ) THEN				          IF ( NCLEAN .GT. 0 ) THEN
            IF ( MOD(NT,NCLEAN).EQ.0 ) THEN			            IF ( MOD(NT,NCLEAN).EQ.0 ) THEN
              ISTPTL(I)=2					              ISTPTL(I)=2
            ENDIF						            ENDIF
          ENDIF							          ENDIF
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( N.EQ.9 ) THEN					        IF ( N.EQ.9 ) THEN
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( N.EQ.1 ) THEN					        IF ( N.EQ.1 ) THEN
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( IAAPTL(I) .EQ. 0 ) THEN				        IF ( IAAPTL(I) .EQ. 0 ) THEN
          IACPTL(I)=.TRUE.					          IACPTL(I)=.TRUE.
          GOTO 54						          GOTO 54
        ENDIF							        ENDIF
        IF ( ISTPTL(I) .EQ. 2 ) IACPTL(I)=.TRUE.		        IF ( ISTPTL(I) .EQ. 2 ) IACPTL(I)=.TRUE.
        IF ( ABS(IDPTL(I)) .LT. 100				        IF ( ABS(IDPTL(I)) .LT. 100
     *       .AND.  ABS(IDPTL(I)) .NE. 20 ) IACPTL(I)=.TRUE.	     *       .AND.  ABS(IDPTL(I)) .NE. 20 ) IACPTL(I)=.TRUE.
        IF ( IDPTL(I) .EQ. 441  .AND.  JPSIFI .EQ. 0 ) IACPTL	        IF ( IDPTL(I) .EQ. 441  .AND.  JPSIFI .EQ. 0 ) IACPTL
 54     XPTL(I)=X						 54     XPTL(I)=X
        YPTL(I)=Y						        YPTL(I)=Y
        ZPTL(I)=Z						        ZPTL(I)=Z
        TPTL(I)=T						        TPTL(I)=T
        CALL UTTAUS(Z,SZ)					        CALL UTTAUS(Z,SZ)
        OPTL(I)=SZ+DESPTL(I)					        OPTL(I)=SZ+DESPTL(I)
        UPTL(I)=SZ-DESPTL(I)					        UPTL(I)=SZ-DESPTL(I)
        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0	        IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.NE.0
          IF ( (X-BX*.5)**2+(Y-BY*.5)**2+(Z-VELP*TAUS)**2 .LT	          IF ( (X-BX*.5)**2+(Y-BY*.5)**2+(Z-VELP*TAUS)**2 .LT
     *         .AND. (X+BX*.5)**2+(Y+BY*.5)**2+(Z-VELT*TAUS)*	     *         .AND. (X+BX*.5)**2+(Y+BY*.5)**2+(Z-VELT*TAUS)*
     *                                  .LT. RNUT**2 ) IACPTL	     *                                  .LT. RNUT**2 ) IACPTL
        ENDIF							        ENDIF
44    CONTINUE							44    CONTINUE
      NPTL0=NPTL						      NPTL0=NPTL
      I=0							      I=0

C  I LOOP --> 24						C  I LOOP --> 24
C  -------------						C  -------------
9999  I=I+1							9999  I=I+1
      IF ( IACPTL(I) ) GOTO 24					      IF ( IACPTL(I) ) GOTO 24
      J0=NPTLPT+1						      J0=NPTLPT+1
      IF ( I .GT. NPTLPT ) J0=I+1				      IF ( I .GT. NPTLPT ) J0=I+1
      IF ( I .GT. NPTL0 ) J0=1					      IF ( I .GT. NPTL0 ) J0=1
      UPTLI = UPTL(I)						      UPTLI = UPTL(I)
      OPTLI = OPTL(I)						      OPTLI = OPTL(I)

C  J LOOP --> 250						C  J LOOP --> 250
C  -------------						C  -------------
      J = J0-1							      J = J0-1
25    J = J+1							25    J = J+1
      IF ( J .GT. NPTL ) GOTO 24				      IF ( J .GT. NPTL ) GOTO 24
        IF ( IACPTL(J) ) THEN					        IF ( IACPTL(J) ) THEN
          IF ( IACPTL(J+1) ) THEN				          IF ( IACPTL(J+1) ) THEN
            IF ( IACPTL(J+2) ) THEN				            IF ( IACPTL(J+2) ) THEN
              IF ( IACPTL(J+3) ) THEN				              IF ( IACPTL(J+3) ) THEN
                IF ( IACPTL(J+4) ) THEN				                IF ( IACPTL(J+4) ) THEN
                  IF ( IACPTL(J+5) ) THEN			                  IF ( IACPTL(J+5) ) THEN
                    IF ( IACPTL(J+6) ) THEN			                    IF ( IACPTL(J+6) ) THEN
                      IF ( IACPTL(J+7) ) THEN			                      IF ( IACPTL(J+7) ) THEN
                        IF ( IACPTL(J+8) ) THEN			                        IF ( IACPTL(J+8) ) THEN
                          IF ( IACPTL(J+9) ) THEN		                          IF ( IACPTL(J+9) ) THEN
                            IF ( IACPTL(J+10) ) THEN		                            IF ( IACPTL(J+10) ) THEN
                              J=J+10				                              J=J+10
                              GOTO 25				                              GOTO 25
                            ELSE				                            ELSE
                              J=J+10				                              J=J+10
                              IF ( J .GT. NPTL ) GOTO 24	                              IF ( J .GT. NPTL ) GOTO 24
                              GOTO 26				                              GOTO 26
                            ENDIF				                            ENDIF
                          ELSE					                          ELSE
                            J=J+9				                            J=J+9
                            IF ( J .GT. NPTL ) GOTO 24		                            IF ( J .GT. NPTL ) GOTO 24
                            GOTO 26				                            GOTO 26
                          ENDIF					                          ENDIF
                        ELSE					                        ELSE
                          J=J+8					                          J=J+8
                          IF ( J .GT. NPTL ) GOTO 24		                          IF ( J .GT. NPTL ) GOTO 24
                          GOTO 26				                          GOTO 26
                        ENDIF					                        ENDIF
                      ELSE					                      ELSE
                        J=J+7					                        J=J+7
                        IF ( J .GT. NPTL ) GOTO 24		                        IF ( J .GT. NPTL ) GOTO 24
                        GOTO 26					                        GOTO 26
                      ENDIF					                      ENDIF
                    ELSE					                    ELSE
                      J=J+6					                      J=J+6
                      IF ( J .GT. NPTL ) GOTO 24		                      IF ( J .GT. NPTL ) GOTO 24
                      GOTO 26					                      GOTO 26
                    ENDIF					                    ENDIF
                  ELSE						                  ELSE
                    J=J+5					                    J=J+5
                    IF ( J .GT. NPTL ) GOTO 24			                    IF ( J .GT. NPTL ) GOTO 24
                    GOTO 26					                    GOTO 26
                  ENDIF						                  ENDIF
                ELSE						                ELSE
                  J=J+4						                  J=J+4
                  IF ( J .GT. NPTL ) GOTO 24			                  IF ( J .GT. NPTL ) GOTO 24
                  GOTO 26					                  GOTO 26
                ENDIF						                ENDIF
              ELSE						              ELSE
                J=J+3						                J=J+3
                IF ( J .GT. NPTL ) GOTO 24			                IF ( J .GT. NPTL ) GOTO 24
                GOTO 26						                GOTO 26
              ENDIF						              ENDIF
            ELSE						            ELSE
              J=J+2						              J=J+2
              IF ( J .GT. NPTL ) GOTO 24			              IF ( J .GT. NPTL ) GOTO 24
              GOTO 26						              GOTO 26
            ENDIF						            ENDIF
          ELSE							          ELSE
            J=J+1						            J=J+1
            IF ( J .GT. NPTL ) GOTO 24				            IF ( J .GT. NPTL ) GOTO 24
            GOTO 26						            GOTO 26
          ENDIF							          ENDIF
        ENDIF							        ENDIF
 26     IF ( OPTLI .LT. UPTL(J) ) GOTO 25			 26     IF ( OPTLI .LT. UPTL(J) ) GOTO 25
        IF ( UPTLI .GE. OPTL(J) ) GOTO 25			        IF ( UPTLI .GE. OPTL(J) ) GOTO 25
        RADSQR=(RADPTL(I)+RADPTL(J))**2				        RADSQR=(RADPTL(I)+RADPTL(J))**2
        IF ( (YPTL(I)-YPTL(J))**2 .GT. RADSQR ) GOTO 25		        IF ( (YPTL(I)-YPTL(J))**2 .GT. RADSQR ) GOTO 25
        IF ( (XPTL(I)-XPTL(J))**2 .GT. RADSQR ) GOTO 25		        IF ( (XPTL(I)-XPTL(J))**2 .GT. RADSQR ) GOTO 25
        IF ( I .EQ. J ) GOTO 25					        IF ( I .EQ. J ) GOTO 25
        IF ( IORPTL(I).GT.0 .AND. IORPTL(J).EQ.IORPTL(I) ) GO	        IF ( IORPTL(I).GT.0 .AND. IORPTL(J).EQ.IORPTL(I) ) GO
        IF ( IORPTL(I) .EQ. J ) GOTO 25				        IF ( IORPTL(I) .EQ. J ) GOTO 25
        IF ( IORPTL(J) .EQ. I ) GOTO 25				        IF ( IORPTL(J) .EQ. I ) GOTO 25
        IF ( (XPTL(I)-XPTL(J))**2+(YPTL(I)-YPTL(J))**2 .GT. R	        IF ( (XPTL(I)-XPTL(J))**2+(YPTL(I)-YPTL(J))**2 .GT. R
     *                                                       	     *                                                       
        CALL JINTCC(I,J,IRET)					        CALL JINTCC(I,J,IRET)
        IF ( IRET .EQ. 1 ) GOTO 25				        IF ( IRET .EQ. 1 ) GOTO 25

        IACTN=0							        IACTN=0
        NPTL00=NPTL						        NPTL00=NPTL
        NSTR00=NSTR						        NSTR00=NSTR
        XAVER(1)=(XPTL(I)+XPTL(J))*0.5				        XAVER(1)=(XPTL(I)+XPTL(J))*0.5
        XAVER(2)=(YPTL(I)+YPTL(J))*0.5				        XAVER(2)=(YPTL(I)+YPTL(J))*0.5
        XAVER(3)=(ZPTL(I)+ZPTL(J))*0.5				        XAVER(3)=(ZPTL(I)+ZPTL(J))*0.5
        XAVER(4)=(TPTL(I)+TPTL(J))*0.5				        XAVER(4)=(TPTL(I)+TPTL(J))*0.5

        CALL JINTFS(I,J,NQIFUS,JC,AMIM,IRET)			        CALL JINTFS(I,J,NQIFUS,JC,AMIM,IRET)
        IF ( IRET .EQ. 1 ) GOTO 25				        IF ( IRET .EQ. 1 ) GOTO 25

        CALL JINTCE(I,J,AMIM,IACTN,IRET)			        CALL JINTCE(I,J,AMIM,IACTN,IRET)
        IF ( IRET .EQ. 25 ) GOTO 25				        IF ( IRET .EQ. 25 ) GOTO 25

        TIVPTL(2,I)=TPTL(I)					        TIVPTL(2,I)=TPTL(I)
        TIVPTL(2,J)=TPTL(J)					        TIVPTL(2,J)=TPTL(J)
        ISTPTL(I)=1						        ISTPTL(I)=1
        ISTPTL(J)=1						        ISTPTL(J)=1
        IACPTL(I)=.TRUE.					        IACPTL(I)=.TRUE.
        IACPTL(J)=.TRUE.					        IACPTL(J)=.TRUE.

        CALL JINTCH(I,J,KMAX)					        CALL JINTCH(I,J,KMAX)
        DO 30 K=1,KMAX						        DO 30 K=1,KMAX
          N=IFRIJ(K)						          N=IFRIJ(K)
          ISTPTL(N)=2						          ISTPTL(N)=2
          IACPTL(N)=.TRUE.					          IACPTL(N)=.TRUE.
30      CONTINUE						30      CONTINUE
        CALL JINTPA(I,J,KMAX)					        CALL JINTPA(I,J,KMAX)
        DO 31 K=1,KMAX						        DO 31 K=1,KMAX
          N=IFRIJ(K)						          N=IFRIJ(K)
          IACPTL(N)=.TRUE.					          IACPTL(N)=.TRUE.
31      CONTINUE						31      CONTINUE

        IF ( IACTN .EQ. 1 ) THEN				        IF ( IACTN .EQ. 1 ) THEN
          DO 32 N=NPTL00+1,NPTL					          DO 32 N=NPTL00+1,NPTL
            IAAPTL(N)=1						            IAAPTL(N)=1
            CALL IDQUAC(N,NQI,NDUMMY,NDUMMY,JCDU)		            CALL IDQUAC(N,NQI,NDUMMY,NDUMMY,JCDU)
            IF ( NQI .EQ. 0 ) THEN				            IF ( NQI .EQ. 0 ) THEN
              RADPTL(N)=RADIAS					              RADPTL(N)=RADIAS
              DESPTL(N)=RADIAS					              DESPTL(N)=RADIAS
              DEZPTL(N)=0.					              DEZPTL(N)=0.
              AMIPTL(N)=PIOM+AMSIAC				              AMIPTL(N)=PIOM+AMSIAC
            ELSE						            ELSE
              RADPTL(N)=RADIAC					              RADPTL(N)=RADIAC
              DESPTL(N)=RADIAC					              DESPTL(N)=RADIAC
              DEZPTL(N)=0.					              DEZPTL(N)=0.
              AMIPTL(N)=PROM+AMSIAC				              AMIPTL(N)=PROM+AMSIAC
            ENDIF						            ENDIF
            IACPTL(N)=.FALSE.					            IACPTL(N)=.FALSE.
            IF ( PPTL(5,N) .GT. AMIPTL(N) ) IACPTL(N)=.TRUE.	            IF ( PPTL(5,N) .GT. AMIPTL(N) ) IACPTL(N)=.TRUE.
            CALL UTTAIN(N,X,Y,Z,T,K,0)				            CALL UTTAIN(N,X,Y,Z,T,K,0)
            IF ( K.EQ.1 .OR. K.EQ.2 .OR. K.EQ.9 ) IACPTL(N)=.	            IF ( K.EQ.1 .OR. K.EQ.2 .OR. K.EQ.9 ) IACPTL(N)=.
            IF ( ABS(IDPTL(N)).LT.100 .AND. ABS(IDPTL(N)).NE.	            IF ( ABS(IDPTL(N)).LT.100 .AND. ABS(IDPTL(N)).NE.
     *                                              IACPTL(N)	     *                                              IACPTL(N)
            XPTL(N)=X						            XPTL(N)=X
            YPTL(N)=Y						            YPTL(N)=Y
            ZPTL(N)=Z						            ZPTL(N)=Z
            TPTL(N)=T						            TPTL(N)=T
            CALL UTTAUS(Z,SZ)					            CALL UTTAUS(Z,SZ)
            OPTL(N)=SZ+DESPTL(N)				            OPTL(N)=SZ+DESPTL(N)
            UPTL(N)=SZ-DESPTL(N)				            UPTL(N)=SZ-DESPTL(N)
            IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.	            IF ( OVERLP.GE.0. .AND. MAPROJ.NE.0 .AND. MATARG.
              IF ( (X-BX*.5)**2+(Y-BY*.5)**2+(Z-VELP*TAUS)**2	              IF ( (X-BX*.5)**2+(Y-BY*.5)**2+(Z-VELP*TAUS)**2
     *           .AND. (X+BX*.5)**2+(Y+BY*.5)**2+(Z-VELT*TAUS	     *           .AND. (X+BX*.5)**2+(Y+BY*.5)**2+(Z-VELT*TAUS
     *                                    .LT.RNUT**2 ) IACPT	     *                                    .LT.RNUT**2 ) IACPT
            ENDIF						            ENDIF
32        CONTINUE						32        CONTINUE
          GOTO 24						          GOTO 24
        ENDIF							        ENDIF

        CALL JINTEL(I,J,AMIM,IACTN)				        CALL JINTEL(I,J,AMIM,IACTN)
        IF ( IACTN .EQ. 2 ) THEN				        IF ( IACTN .EQ. 2 ) THEN
          DO 33 N=NPTL00+1,NPTL					          DO 33 N=NPTL00+1,NPTL
            IF     ( N .EQ. NPTL00+1 ) THEN			            IF     ( N .EQ. NPTL00+1 ) THEN
              IJ=I						              IJ=I
            ELSEIF ( N .EQ. NPTL00+2 ) THEN			            ELSEIF ( N .EQ. NPTL00+2 ) THEN
              IJ=J						              IJ=J
            ENDIF						            ENDIF
            RADPTL(N)=RADPTL(IJ)				            RADPTL(N)=RADPTL(IJ)
            DESPTL(N)=DESPTL(IJ)				            DESPTL(N)=DESPTL(IJ)
            DEZPTL(N)=DEZPTL(IJ)				            DEZPTL(N)=DEZPTL(IJ)
            AMIPTL(N)=AMIPTL(IJ)				            AMIPTL(N)=AMIPTL(IJ)
            XPTL(N)=XAVER(1)					            XPTL(N)=XAVER(1)
            YPTL(N)=XAVER(2)					            YPTL(N)=XAVER(2)
            ZPTL(N)=XAVER(3)					            ZPTL(N)=XAVER(3)
            TPTL(N)=XAVER(4)					            TPTL(N)=XAVER(4)
            Z=ZPTL(N)						            Z=ZPTL(N)
            CALL UTTAUS(Z,SZ)					            CALL UTTAUS(Z,SZ)
            OPTL(N)=SZ+DESPTL(N)				            OPTL(N)=SZ+DESPTL(N)
            UPTL(N)=SZ-DESPTL(N)				            UPTL(N)=SZ-DESPTL(N)
            IACPTL(N)=.FALSE.					            IACPTL(N)=.FALSE.
            IAAPTL(N)=1						            IAAPTL(N)=1
33        CONTINUE						33        CONTINUE
          GOTO 24						          GOTO 24
        ENDIF							        ENDIF

        CALL JINTFU(I,J,JC,IACTN)				        CALL JINTFU(I,J,JC,IACTN)
        DO 34 N=NPTL00+1,NPTL					        DO 34 N=NPTL00+1,NPTL
          IF ( NQIFUS .EQ. 0 ) THEN				          IF ( NQIFUS .EQ. 0 ) THEN
            RADPTL(N)=RADIAS					            RADPTL(N)=RADIAS
            DESPTL(N)=RADIAS					            DESPTL(N)=RADIAS
            DEZPTL(N)=0.					            DEZPTL(N)=0.
            AMIPTL(N)=PIOM+AMSIAC				            AMIPTL(N)=PIOM+AMSIAC
          ELSE							          ELSE
            RADPTL(N)=RADIAC					            RADPTL(N)=RADIAC
            DESPTL(N)=RADIAC					            DESPTL(N)=RADIAC
            DEZPTL(N)=0.					            DEZPTL(N)=0.
            AMIPTL(N)=PROM+AMSIAC				            AMIPTL(N)=PROM+AMSIAC
          ENDIF							          ENDIF
          XPTL(N)=XAVER(1)					          XPTL(N)=XAVER(1)
          YPTL(N)=XAVER(2)					          YPTL(N)=XAVER(2)
          ZPTL(N)=XAVER(3)					          ZPTL(N)=XAVER(3)
          TPTL(N)=XAVER(4)					          TPTL(N)=XAVER(4)
          Z=ZPTL(N)						          Z=ZPTL(N)
          CALL UTTAUS(Z,SZ)					          CALL UTTAUS(Z,SZ)
          OPTL(N)=SZ+DESPTL(N)					          OPTL(N)=SZ+DESPTL(N)
          UPTL(N)=SZ-DESPTL(N)					          UPTL(N)=SZ-DESPTL(N)
          IACPTL(N)=.FALSE.					          IACPTL(N)=.FALSE.
          IAAPTL(N)=1						          IAAPTL(N)=1
34      CONTINUE						34      CONTINUE
        IF ( ISH .EQ. 23  .AND.  PPTL(5,NPTL) .GE. AMPRIF ) T	        IF ( ISH .EQ. 23  .AND.  PPTL(5,NPTL) .GE. AMPRIF ) T
          N=NPTL						          N=NPTL
          CALL JINTFP(I,J,N,					          CALL JINTFP(I,J,N,
     *           XPTL(I),YPTL(I),RADPTL(I),OPTL(I),UPTL(I),	     *           XPTL(I),YPTL(I),RADPTL(I),OPTL(I),UPTL(I),
     *           XPTL(J),YPTL(J),RADPTL(J),OPTL(J),UPTL(J),	     *           XPTL(J),YPTL(J),RADPTL(J),OPTL(J),UPTL(J),
     *           XPTL(N),YPTL(N),RADPTL(N),OPTL(N),UPTL(N))	     *           XPTL(N),YPTL(N),RADPTL(N),OPTL(N),UPTL(N))
        ENDIF							        ENDIF
*       GOTO 24							*       GOTO 24

*250  GOTO 25							*250  GOTO 25

24    CONTINUE							24    CONTINUE
      IF ( I .LT. NPTL-1 ) GOTO 9999				      IF ( I .LT. NPTL-1 ) GOTO 9999

      IF ( ISH .EQ. 24 ) THEN					      IF ( ISH .EQ. 24 ) THEN
        IF ( TAUS.EQ.1.  .OR.  TAUS.EQ.2.  .OR.			        IF ( TAUS.EQ.1.  .OR.  TAUS.EQ.2.  .OR.
     *       TAUS.EQ.4.  .OR.  TAUS.EQ.8.      ) THEN		     *       TAUS.EQ.4.  .OR.  TAUS.EQ.8.      ) THEN
          DO 45 I=1,NPTL					          DO 45 I=1,NPTL
            IF ( IACPTL(I)  .AND.  I .NE. NPTL ) GOTO 45	            IF ( IACPTL(I)  .AND.  I .NE. NPTL ) GOTO 45
            CALL JINTCL(I,XPTL(I),YPTL(I),RADPTL(I)		            CALL JINTCL(I,XPTL(I),YPTL(I),RADPTL(I)
     *                                       ,OPTL(I),UPTL(I)	     *                                       ,OPTL(I),UPTL(I)
45        CONTINUE						45        CONTINUE
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      ISHNPT=ISH						      ISHNPT=ISH
      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 19 ) ISH=MOD(ISHSUB,100)
      IF ( ISH .EQ. 22 ) THEN					      IF ( ISH .EQ. 22 ) THEN
        WRITE(IFMT,131)NT,NBEF,NAFT,NPTL			        WRITE(IFMT,131)NT,NBEF,NAFT,NPTL
131     FORMAT(1X,'NT=',I5,4X,'NBEF=',I8,4X,'NAFT=',I8,4X,'NP	131     FORMAT(1X,'NT=',I5,4X,'NBEF=',I8,4X,'NAFT=',I8,4X,'NP
      ENDIF							      ENDIF
      ISH=ISHNPT						      ISH=ISHNPT
CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('INTERACTIONS   ')		CDH   IF ( ISH .EQ. 13 ) CALL UTTIMA('INTERACTIONS   ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTCC(I,J,IRET)				      SUBROUTINE JINTCC(I,J,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  IRET=1 IF I = CHILD OF J					C  IRET=1 IF I = CHILD OF J
C  IRET=1 IF J = CHILD OF I					C  IRET=1 IF J = CHILD OF I
C  IRET=0 ELSE							C  IRET=0 ELSE
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXIFR=MXPTL)					      PARAMETER (MXIFR=MXPTL)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP

      INTEGER IFR(MXIFR)					      INTEGER IFR(MXIFR)
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0
      DO 57 KK=1,2						      DO 57 KK=1,2
        IF ( KK .EQ. 1 ) THEN					        IF ( KK .EQ. 1 ) THEN
          N=I							          N=I
          M=J							          M=J
        ELSE							        ELSE
          N=J							          N=J
          M=I							          M=I
        ENDIF							        ENDIF
        K1=0							        K1=0
        K2=0							        K2=0
        LOOP=0							        LOOP=0
55      LOOP=LOOP+1						55      LOOP=LOOP+1
        IF ( IFRPTL(1,N) .GT. 0 ) THEN				        IF ( IFRPTL(1,N) .GT. 0 ) THEN
          DO 56 K=IFRPTL(1,N),IFRPTL(2,N)			          DO 56 K=IFRPTL(1,N),IFRPTL(2,N)
            IF ( K .EQ. M ) GOTO 1001				            IF ( K .EQ. M ) GOTO 1001
            K2=K2+1						            K2=K2+1
            IF ( K2 .GT. MXIFR ) THEN				            IF ( K2 .GT. MXIFR ) THEN
              CALL UTSTOP('JINTCC: K2 > MXIFR                	              CALL UTSTOP('JINTCC: K2 > MXIFR                
            ENDIF						            ENDIF
            IFR(K2)=K						            IFR(K2)=K
56        CONTINUE						56        CONTINUE
        ENDIF							        ENDIF
        K1=K1+1							        K1=K1+1
        IF ( K1 .LE. K2 ) THEN					        IF ( K1 .LE. K2 ) THEN
          N=IFR(K1)						          N=IFR(K1)
          GOTO 55						          GOTO 55
        ENDIF							        ENDIF
57    CONTINUE							57    CONTINUE
      GOTO 1000							      GOTO 1000

1001  IRET=1							1001  IRET=1

1000  RETURN							1000  RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTCE(I,J,AMIM,IACTN,IRET)			      SUBROUTINE JINTCE(I,J,AMIM,IACTN,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  COLOUR EXCHANGE INTERACTION OF PTLS I,J			C  COLOUR EXCHANGE INTERACTION OF PTLS I,J
C  INPUT:							C  INPUT:
C  I,J: PTL NUMBERS; AMF: MASS, AMIM: MIN MASS, OF FUSED OBJ	C  I,J: PTL NUMBERS; AMF: MASS, AMIM: MIN MASS, OF FUSED OBJ
C  IACTN=1: CE DONE						C  IACTN=1: CE DONE
C  IRET=0: CE DONE  OR  CRITERIA FOR CE NOT FULFILLED		C  IRET=0: CE DONE  OR  CRITERIA FOR CE NOT FULFILLED
C  IRET=25: SKIP						C  IRET=25: SKIP
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXINDX=1000)					      PARAMETER (MXINDX=1000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (MXMA=11)					      PARAMETER (MXMA=11)
      PARAMETER (MXMX=6)					      PARAMETER (MXMX=6)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXRE=100)					      PARAMETER (MXRE=100)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NPRBMS=20)					      PARAMETER (NPRBMS=20)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT	      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /CNFR/    NRFRA					      COMMON /CNFR/    NRFRA
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPRBMS/  PRBMS(NPRBMS)				      COMMON /CPRBMS/  PRBMS(NPRBMS)
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)		      COMMON /CREMA/   REMA(MXRE,MXMA),REWI(MXRE,MXMA)
     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)	     *                ,ICRE1(MXRE,MXMA),ICRE2(MXRE,MXMA)
     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)		     *                ,IDMX(MXMA,MXMX),INDX(MXINDX)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP
      COMMON /DIDIB/   NDIDIB					      COMMON /DIDIB/   NDIDIB
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS		      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS
     *                ,IC4,IPTNR,JS4,NPS			     *                ,IC4,IPTNR,JS4,NPS

      DOUBLE PRECISION ARM(5),ARP(5),ARQ,BOO(5),ROT(3)		      DOUBLE PRECISION ARM(5),ARP(5),ARQ,BOO(5),ROT(3)
      REAL             PROJ(NSI,NHA),PSUM(5),TARG(NSI,NHA)	      REAL             PROJ(NSI,NHA),PSUM(5),TARG(NSI,NHA)
      INTEGER          IC(2),IC4(2)				      INTEGER          IC(2),IC4(2)
C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZATION						C  INITIALIZATION
C  --------------						C  --------------
      IRET=0							      IRET=0
      DELRAP=1.5						      DELRAP=1.5
      DELAMF=1.0						      DELAMF=1.0
      ISH00=ISH							      ISH00=ISH
      PNLLX0=PNLLX						      PNLLX0=PNLLX
      TAUS=TTAUS						      TAUS=TTAUS
      AMF=PPTL(5,NPTL+1)					      AMF=PPTL(5,NPTL+1)

C  CHECK WHETHER CE CRITERIA FULFILLED				C  CHECK WHETHER CE CRITERIA FULFILLED
C  -----------------------------------				C  -----------------------------------
      VEI=PPTL(3,I)/PPTL(4,I)					      VEI=PPTL(3,I)/PPTL(4,I)
      VEJ=PPTL(3,J)/PPTL(4,J)					      VEJ=PPTL(3,J)/PPTL(4,J)
      IF ( ABS(VEI) .LT. 1.  .AND.  ABS(VEJ) .LT. 1. ) THEN	      IF ( ABS(VEI) .LT. 1.  .AND.  ABS(VEJ) .LT. 1. ) THEN
        RAI=0.5*LOG((1.+VEI)/(1.-VEI))				        RAI=0.5*LOG((1.+VEI)/(1.-VEI))
        RAJ=0.5*LOG((1.+VEJ)/(1.-VEJ))				        RAJ=0.5*LOG((1.+VEJ)/(1.-VEJ))
      ELSE							      ELSE
        RAI=0.							        RAI=0.
        RAJ=0.							        RAJ=0.
      ENDIF							      ENDIF
      IF ( .NOT. (AMF.GT.AMIM+DELAMF .AND. ABS(RAI-RAJ).GT.DE	      IF ( .NOT. (AMF.GT.AMIM+DELAMF .AND. ABS(RAI-RAJ).GT.DE
     *            .AND. ABS(IDPTL(I)).LT.10000			     *            .AND. ABS(IDPTL(I)).LT.10000
     *            .AND. ABS(IDPTL(J)).LT.10000) ) GOTO 1000	     *            .AND. ABS(IDPTL(J)).LT.10000) ) GOTO 1000
      IACTN=1							      IACTN=1

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '			        IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '
        WRITE(IFCH,101)NTC,TAUS					        WRITE(IFCH,101)NTC,TAUS
101     FORMAT(1X,'CO.EX. INTERACTION --- NT=',I3,' --- TAUS=	101     FORMAT(1X,'CO.EX. INTERACTION --- NT=',I3,' --- TAUS=
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '			        IF ( ISH .GE. 92 ) WRITE(IFCH,*)' '
        WRITE(IFCH,115)I,IDPTL(I)				        WRITE(IFCH,115)I,IDPTL(I)
     *                  ,(PPTL(K,I),K=3,5),(XORPTL(K,I),K=3,4	     *                  ,(PPTL(K,I),K=3,5),(XORPTL(K,I),K=3,4
115     FORMAT(1X,'/CPTL/',I8,I10				115     FORMAT(1X,'/CPTL/',I8,I10
     *            ,1X,2(E10.2),E10.2,1X,2(E10.2),2X,I4)		     *            ,1X,2(E10.2),E10.2,1X,2(E10.2),2X,I4)
        WRITE(IFCH,115)J,IDPTL(J)				        WRITE(IFCH,115)J,IDPTL(J)
     *                  ,(PPTL(K,J),K=3,5),(XORPTL(K,J),K=3,4	     *                  ,(PPTL(K,J),K=3,5),(XORPTL(K,J),K=3,4
        IF ( ISH .GE. 92 ) THEN					        IF ( ISH .GE. 92 ) THEN
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'AMF,AMIM: ',AMF,AMIM			          WRITE(IFCH,*)'AMF,AMIM: ',AMF,AMIM
          WRITE(IFCH,*)'RAI,RAJ:  ',RAI,RAJ			          WRITE(IFCH,*)'RAI,RAJ:  ',RAI,RAJ
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
      ENDIF							      ENDIF

C  INITIALIZATION						C  INITIALIZATION
C  --------------						C  --------------
      NPTL00=NPTL						      NPTL00=NPTL
      NSTR00=NSTR						      NSTR00=NSTR

      IPROJ=1							      IPROJ=1
      ITARG=1							      ITARG=1
      DO 11 L=1,NHA						      DO 11 L=1,NHA
        KPROJA(L,1)=1						        KPROJA(L,1)=1
        KTARGA(L,1)=1						        KTARGA(L,1)=1
11    CONTINUE							11    CONTINUE
      KOL=1							      KOL=1
      COORD(1,1)=XAVER(1)					      COORD(1,1)=XAVER(1)
      COORD(2,1)=XAVER(2)					      COORD(2,1)=XAVER(2)
      COORD(3,1)=XAVER(3)					      COORD(3,1)=XAVER(3)
      COORD(4,1)=XAVER(4)					      COORD(4,1)=XAVER(4)

      IDP=IDPTL(I)						      IDP=IDPTL(I)
      IDM=IDPTL(J)						      IDM=IDPTL(J)
      DO 12 L=1,5						      DO 12 L=1,5
        ARP(L)=PPTL(L,I)					        ARP(L)=PPTL(L,I)
        ARM(L)=PPTL(L,J)					        ARM(L)=PPTL(L,J)
        BOO(L)=PPTL(L,NPTL+1)					        BOO(L)=PPTL(L,NPTL+1)
12    CONTINUE							12    CONTINUE
      SROOT = ABS(PPTL(5,NPTL+1))				      SROOT = ABS(PPTL(5,NPTL+1))
      S=PPTL(5,NPTL+1)**2					      S=PPTL(5,NPTL+1)**2

C  BOOSTS INTO I-J CM						C  BOOSTS INTO I-J CM
C  ------------------						C  ------------------
      CALL UTLOB2(1,BOO(1),BOO(2),BOO(3),BOO(4),BOO(5)		      CALL UTLOB2(1,BOO(1),BOO(2),BOO(3),BOO(4),BOO(5)
     *             ,ARP(1),ARP(2),ARP(3),ARP(4))		     *             ,ARP(1),ARP(2),ARP(3),ARP(4))
      CALL UTLOB2(1,BOO(1),BOO(2),BOO(3),BOO(4),BOO(5)		      CALL UTLOB2(1,BOO(1),BOO(2),BOO(3),BOO(4),BOO(5)
     *             ,ARM(1),ARM(2),ARM(3),ARM(4))		     *             ,ARM(1),ARM(2),ARM(3),ARM(4))
      IF ( ARP(3) .LT. 0.D0 ) THEN				      IF ( ARP(3) .LT. 0.D0 ) THEN
        IDQ=IDM							        IDQ=IDM
        IDM=IDP							        IDM=IDP
        IDP=IDQ							        IDP=IDQ
        DO 14 L=1,5						        DO 14 L=1,5
          ARQ=ARM(L)						          ARQ=ARM(L)
          ARM(L)=ARP(L)						          ARM(L)=ARP(L)
          ARP(L)=ARQ						          ARP(L)=ARQ
14      CONTINUE						14      CONTINUE
      ENDIF							      ENDIF
      PNLLX=ARP(3)						      PNLLX=ARP(3)
      ROT(1)=(ARP(1)-ARM(1))*0.5D0				      ROT(1)=(ARP(1)-ARM(1))*0.5D0
      ROT(2)=(ARP(2)-ARM(2))*0.5D0				      ROT(2)=(ARP(2)-ARM(2))*0.5D0
      ROT(3)=(ARP(3)-ARM(3))*0.5D0				      ROT(3)=(ARP(3)-ARM(3))*0.5D0
      CALL UTROT2(1,ROT(1),ROT(2),ROT(3)			      CALL UTROT2(1,ROT(1),ROT(2),ROT(3)
     *             ,ARP(1),ARP(2),ARP(3))			     *             ,ARP(1),ARP(2),ARP(3))
      CALL UTROT2(1,ROT(1),ROT(2),ROT(3)			      CALL UTROT2(1,ROT(1),ROT(2),ROT(3)
     *             ,ARM(1),ARM(2),ARM(3))			     *             ,ARM(1),ARM(2),ARM(3))

C  CHECKS							C  CHECKS
C  ------							C  ------
      IF ( ARP(3) .LT. 0.D0 ) THEN				      IF ( ARP(3) .LT. 0.D0 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTCE')					          CALL UTMSG('JINTCE')
          WRITE(IFCH,*)'*****  Z-COMP OF +JET < 0.'		          WRITE(IFCH,*)'*****  Z-COMP OF +JET < 0.'
          WRITE(IFCH,*)(SNGL(ARP(L)),L=1,4)			          WRITE(IFCH,*)(SNGL(ARP(L)),L=1,4)
          WRITE(IFCH,*)(SNGL(ARM(L)),L=1,4)			          WRITE(IFCH,*)(SNGL(ARM(L)),L=1,4)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 10025						        GOTO 10025
      ENDIF							      ENDIF
      IF ( ABS(SNGL(ARP(4)+ARM(4))-SROOT) .GT.			      IF ( ABS(SNGL(ARP(4)+ARM(4))-SROOT) .GT.
     *                                 2.E-2*SROOT ) THEN	     *                                 2.E-2*SROOT ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTCE')					          CALL UTMSG('JINTCE')
          WRITE(IFCH,*)'*****  ARP(4)+ARM(4)-SQRT(S) NONZERO'	          WRITE(IFCH,*)'*****  ARP(4)+ARM(4)-SQRT(S) NONZERO'
          WRITE(IFCH,*)'VALUE:   ',SNGL(ARP(4)+ARM(4))-SROOT	          WRITE(IFCH,*)'VALUE:   ',SNGL(ARP(4)+ARM(4))-SROOT
          WRITE(IFCH,*)'SQRT(S): ',SROOT			          WRITE(IFCH,*)'SQRT(S): ',SROOT
          WRITE(IFCH,*)(SNGL(ARP(I)),I=1,4)			          WRITE(IFCH,*)(SNGL(ARP(I)),I=1,4)
          WRITE(IFCH,*)(SNGL(ARM(I)),I=1,4)			          WRITE(IFCH,*)(SNGL(ARM(I)),I=1,4)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

C  FILL PROJ, TARG						C  FILL PROJ, TARG
C  ---------------						C  ---------------
      CALL IDTR4(IDP,IC)					      CALL IDTR4(IDP,IC)
      DO 25 M=1,NHA						      DO 25 M=1,NHA
        DO 24 N=1,NSI						        DO 24 N=1,NSI
          PROJ(N,M)=0.						          PROJ(N,M)=0.
24      CONTINUE						24      CONTINUE
25    CONTINUE							25    CONTINUE
      PROJ(5,1)=IC(1)						      PROJ(5,1)=IC(1)
      PROJ(6,1)=IC(2)						      PROJ(6,1)=IC(2)
      PROJ(5,2)=IC(1)						      PROJ(5,2)=IC(1)
      PROJ(6,2)=IC(2)						      PROJ(6,2)=IC(2)
      PROJ(1,2)=ARP(1)						      PROJ(1,2)=ARP(1)
      PROJ(2,2)=ARP(2)						      PROJ(2,2)=ARP(2)
      PROJ(3,2)=ARP(3)						      PROJ(3,2)=ARP(3)
      PROJ(4,2)=ARP(4)						      PROJ(4,2)=ARP(4)
      CALL IDTR4(IDM,IC)					      CALL IDTR4(IDM,IC)
      DO 28 M=1,NHA						      DO 28 M=1,NHA
        DO 27 N=1,NSI						        DO 27 N=1,NSI
          TARG(N,M)=0.						          TARG(N,M)=0.
27      CONTINUE						27      CONTINUE
28    CONTINUE							28    CONTINUE
      TARG(5,1)=IC(1)						      TARG(5,1)=IC(1)
      TARG(6,1)=IC(2)						      TARG(6,1)=IC(2)
      TARG(5,2)=IC(1)						      TARG(5,2)=IC(1)
      TARG(6,2)=IC(2)						      TARG(6,2)=IC(2)
      TARG(1,2)=ARM(1)						      TARG(1,2)=ARM(1)
      TARG(2,2)=ARM(2)						      TARG(2,2)=ARM(2)
      TARG(3,2)=ARM(3)						      TARG(3,2)=ARM(3)
      TARG(4,2)=ARM(4)						      TARG(4,2)=ARM(4)

C  REDO								C  REDO
C  ----								C  ----
      CALL UTREMB(PROJ,TARG,1)					      CALL UTREMB(PROJ,TARG,1)
      LOO=1							      LOO=1
      GOTO 58							      GOTO 58
57    CONTINUE							57    CONTINUE
      LOO=LOO+1							      LOO=LOO+1
      IF ( LOO .GT. 20 ) GOTO 10025				      IF ( LOO .GT. 20 ) GOTO 10025
      IF ( ISH .GE. 91 ) WRITE(IFCH,*)'REDO HH COLLISION'	      IF ( ISH .GE. 91 ) WRITE(IFCH,*)'REDO HH COLLISION'
      CALL UTREST(PROJ,TARG,1)					      CALL UTREST(PROJ,TARG,1)
58    CONTINUE							58    CONTINUE

C  NUMBER OF CE'S						C  NUMBER OF CE'S
C  --------------						C  --------------
      NCOLEX=1							      NCOLEX=1
C-C   LO=0							C-C   LO=0
C-C16 LO=LO+1							C-C16 LO=LO+1
C-C   IF ( LO .EQ. 3 ) THEN					C-C   IF ( LO .EQ. 3 ) THEN
C-C     IF ( ISH .GE. 90 ) THEN					C-C     IF ( ISH .GE. 90 ) THEN
C-C       CALL UTMSG('JINTCE')					C-C       CALL UTMSG('JINTCE')
C-C       WRITE(IFCH,*)'*****  LO=3'				C-C       WRITE(IFCH,*)'*****  LO=3'
C-C       CALL UTMSGF						C-C       CALL UTMSGF
C-C     ENDIF							C-C     ENDIF
C-C   ENDIF							C-C   ENDIF
C-C   R=RANGEN()						C-C   R=RANGEN()
C-C   NCOLEX=0							C-C   NCOLEX=0
C-C15 NCOLEX=NCOLEX+1						C-C15 NCOLEX=NCOLEX+1
C-C   IF ( NCOLEX .GT. NPRBMS ) GOTO 16				C-C   IF ( NCOLEX .GT. NPRBMS ) GOTO 16
C-C   IF ( R .GT. PRBMS(NCOLEX) ) GOTO 15			C-C   IF ( R .GT. PRBMS(NCOLEX) ) GOTO 15

C  DO NCOLEX CE'S						C  DO NCOLEX CE'S
C  --------------						C  --------------
      ISKIP=0							      ISKIP=0
      DO 30 NCE=1,NCOLEX					      DO 30 NCE=1,NCOLEX
        IF ( ISH .GE. 92 .AND. NCE .GT. 1 ) THEN		        IF ( ISH .GE. 92 .AND. NCE .GT. 1 ) THEN
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)NCE,'. COLOUR EXCHANGE'			          WRITE(IFCH,*)NCE,'. COLOUR EXCHANGE'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
        NCES=NCE						        NCES=NCE
        ISH=ISH-2						        ISH=ISH-2
        CALL HAHABS(PROJ,TARG,NCE/NCOLEX,NCE/NCOLEX,ISKIP,IRE	        CALL HAHABS(PROJ,TARG,NCE/NCOLEX,NCE/NCOLEX,ISKIP,IRE
        ISH=ISH+2						        ISH=ISH+2
        IF ( ISKIP .NE. 0 ) GOTO 10025				        IF ( ISKIP .NE. 0 ) GOTO 10025
        IF ( IRETHH .EQ. 1 ) GOTO 57				        IF ( IRETHH .EQ. 1 ) GOTO 57
30    CONTINUE							30    CONTINUE

C  FRAGMENTATION						C  FRAGMENTATION
C  -------------						C  -------------
      IF ( NSTR .LE. NSTR00 ) GOTO 10050			      IF ( NSTR .LE. NSTR00 ) GOTO 10050

      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,123)						        WRITE(IFCH,123)
123     FORMAT(/1X,'STRINGS BEFORE RESCALING'/)			123     FORMAT(/1X,'STRINGS BEFORE RESCALING'/)
        DO 31 L=NSTR00+1,NSTR					        DO 31 L=NSTR00+1,NSTR
          WRITE(IFCH,109)L,(ICSTR(K,L)/100,K=1,4)		          WRITE(IFCH,109)L,(ICSTR(K,L)/100,K=1,4)
     *          ,SQRT(PSTR(1,L)**2+PSTR(2,L)**2),PSTR(3,L),PS	     *          ,SQRT(PSTR(1,L)**2+PSTR(2,L)**2),PSTR(3,L),PS
     *          ,IRLSTR(L)					     *          ,IRLSTR(L)
109       FORMAT(' /CSTR/',I5,3X,4I5,3(E11.3),I5)		109       FORMAT(' /CSTR/',I5,3X,4I5,3(E11.3),I5)
31      CONTINUE						31      CONTINUE
      ENDIF							      ENDIF

      IF ( IRESCL .EQ. 1 ) THEN					      IF ( IRESCL .EQ. 1 ) THEN
        PSUM(1)=0.						        PSUM(1)=0.
        PSUM(2)=0.						        PSUM(2)=0.
        PSUM(3)=0.						        PSUM(3)=0.
        PSUM(4)=SROOT						        PSUM(4)=SROOT
        PSUM(5)=SROOT						        PSUM(5)=SROOT
        ISH=ISH-2						        ISH=ISH-2
        CALL HRESCL(NSTR00+1,NSTR,PSUM,IFAIL)			        CALL HRESCL(NSTR00+1,NSTR,PSUM,IFAIL)
        ISH=ISH+2						        ISH=ISH+2
        IF ( IFAIL .NE. 0 ) GOTO 57				        IF ( IFAIL .NE. 0 ) GOTO 57
      ENDIF							      ENDIF

      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,124)						        WRITE(IFCH,124)
124     FORMAT(/1X,'STRINGS AFTER RESCALING'/)			124     FORMAT(/1X,'STRINGS AFTER RESCALING'/)
        DO 32 L=NSTR00+1,NSTR					        DO 32 L=NSTR00+1,NSTR
          WRITE(IFCH,109)L,(ICSTR(K,L)/100,K=1,4)		          WRITE(IFCH,109)L,(ICSTR(K,L)/100,K=1,4)
     *          ,SQRT(PSTR(1,L)**2+PSTR(2,L)**2),PSTR(3,L),PS	     *          ,SQRT(PSTR(1,L)**2+PSTR(2,L)**2),PSTR(3,L),PS
     *          ,IRLSTR(L)					     *          ,IRLSTR(L)
32      CONTINUE						32      CONTINUE
      ENDIF							      ENDIF

      DO 33 L=NSTR00+1,NSTR					      DO 33 L=NSTR00+1,NSTR
        IF ( ISH .GE. 92 ) WRITE(IFCH,122)L			        IF ( ISH .GE. 92 ) WRITE(IFCH,122)L
     *             ,(ICSTR(K,L),K=1,4)				     *             ,(ICSTR(K,L),K=1,4)
     *             ,SQRT(PSTR(1,L)**2+PSTR(2,L)**2),PSTR(3,L)	     *             ,SQRT(PSTR(1,L)**2+PSTR(2,L)**2),PSTR(3,L)
122     FORMAT(/' STR:',I7,4I7,3(E10.2)/)			122     FORMAT(/' STR:',I7,4I7,3(E10.2)/)
        ISH=ISH-2						        ISH=ISH-2
        CALL JAMFRA(L,NEWEVT)					        CALL JAMFRA(L,NEWEVT)
        ISH=ISH+2						        ISH=ISH+2
        IF ( NEWEVT .EQ. 1 ) GOTO 10025				        IF ( NEWEVT .EQ. 1 ) GOTO 10025
33    CONTINUE							33    CONTINUE

C  BOOST PARTICLES FROM STRING FRAGMENTATION			C  BOOST PARTICLES FROM STRING FRAGMENTATION
C  -----------------------------------------			C  -----------------------------------------
      IF ( NPTL .LE. NPTL00 ) GOTO 10051			      IF ( NPTL .LE. NPTL00 ) GOTO 10051

      IORPTL(NPTL00+1)=I					      IORPTL(NPTL00+1)=I
      JORPTL(NPTL00+1)=J					      JORPTL(NPTL00+1)=J
      DO 34 L=1,5						      DO 34 L=1,5
        PSUM(L)=0.						        PSUM(L)=0.
34    CONTINUE							34    CONTINUE

      DO 38 N=NPTL00+1,NPTL					      DO 38 N=NPTL00+1,NPTL

        DO 35 L=1,5						        DO 35 L=1,5
          ARP(L)=PPTL(L,N)					          ARP(L)=PPTL(L,N)
35      CONTINUE						35      CONTINUE
        CALL UTROT2(-1,ROT(1),ROT(2),ROT(3)			        CALL UTROT2(-1,ROT(1),ROT(2),ROT(3)
     *                ,ARP(1),ARP(2),ARP(3))			     *                ,ARP(1),ARP(2),ARP(3))
        CALL UTLOB2(-1,BOO(1),BOO(2),BOO(3),BOO(4),BOO(5)	        CALL UTLOB2(-1,BOO(1),BOO(2),BOO(3),BOO(4),BOO(5)
     *                ,ARP(1),ARP(2),ARP(3),ARP(4))		     *                ,ARP(1),ARP(2),ARP(3),ARP(4))
        DO 36 L=1,5						        DO 36 L=1,5
          PPTL(L,N)=ARP(L)					          PPTL(L,N)=ARP(L)
36      CONTINUE						36      CONTINUE
        NQJPTL(N)=0						        NQJPTL(N)=0

        IF ( ISTPTL(N) .EQ. 0 ) THEN				        IF ( ISTPTL(N) .EQ. 0 ) THEN
          PSUM(1)=PSUM(1)+PPTL(1,N)				          PSUM(1)=PSUM(1)+PPTL(1,N)
          PSUM(2)=PSUM(2)+PPTL(2,N)				          PSUM(2)=PSUM(2)+PPTL(2,N)
          PSUM(3)=PSUM(3)+PPTL(3,N)				          PSUM(3)=PSUM(3)+PPTL(3,N)
          PSUM(4)=PSUM(4)+PPTL(4,N)				          PSUM(4)=PSUM(4)+PPTL(4,N)
        ENDIF							        ENDIF

        IF ( ISH .GE. 91 ) THEN					        IF ( ISH .GE. 91 ) THEN
          WRITE(IFCH,115)N,IDPTL(N)				          WRITE(IFCH,115)N,IDPTL(N)
     *              ,(PPTL(K,N),K=3,5),(XORPTL(K,N),K=3,4),IS	     *              ,(PPTL(K,N),K=3,5),(XORPTL(K,N),K=3,4),IS
        ENDIF							        ENDIF

38    CONTINUE							38    CONTINUE

      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( ISH .GE. 92 ) THEN					        IF ( ISH .GE. 92 ) THEN
          WRITE(IFCH,*)'P_FIN:',(PSUM(K),K=1,4)			          WRITE(IFCH,*)'P_FIN:',(PSUM(K),K=1,4)
          WRITE(IFCH,*)'P_INI:',(BOO(K),K=1,4)			          WRITE(IFCH,*)'P_INI:',(BOO(K),K=1,4)
        ENDIF							        ENDIF

        IF ( (ABS(BOO(1)-PSUM(1)) .GT. 5.E-3*ABS(BOO(1))	        IF ( (ABS(BOO(1)-PSUM(1)) .GT. 5.E-3*ABS(BOO(1))
     *         .OR. ABS(BOO(2)-PSUM(2)) .GT. 5.E-3*ABS(BOO(2)	     *         .OR. ABS(BOO(2)-PSUM(2)) .GT. 5.E-3*ABS(BOO(2)
     *         .OR. ABS(BOO(3)-PSUM(3)) .GT. 5.E-3*ABS(BOO(3)	     *         .OR. ABS(BOO(3)-PSUM(3)) .GT. 5.E-3*ABS(BOO(3)
     *         .OR. ABS(BOO(4)-PSUM(4)) .GT. 1.E-1*ABS(BOO(4)	     *         .OR. ABS(BOO(4)-PSUM(4)) .GT. 1.E-1*ABS(BOO(4)
     *    .AND.							     *    .AND.
     *       (ABS(BOO(1)-PSUM(1)) .GT. 5.E-3			     *       (ABS(BOO(1)-PSUM(1)) .GT. 5.E-3
     *         .OR. ABS(BOO(2)-PSUM(2)) .GT. 5.E-3		     *         .OR. ABS(BOO(2)-PSUM(2)) .GT. 5.E-3
     *         .OR. ABS(BOO(3)-PSUM(3)) .GT. 5.E-3		     *         .OR. ABS(BOO(3)-PSUM(3)) .GT. 5.E-3
     *         .OR. ABS(BOO(4)-PSUM(4)) .GT. 1.E-1) ) THEN	     *         .OR. ABS(BOO(4)-PSUM(4)) .GT. 1.E-1) ) THEN
          CALL UTMSG('JINTCE')					          CALL UTMSG('JINTCE')
          WRITE(IFCH,*)'*****  P_INI /= P_FIN'			          WRITE(IFCH,*)'*****  P_INI /= P_FIN'
          WRITE(IFCH,*)'FINAL PARTICLES:'			          WRITE(IFCH,*)'FINAL PARTICLES:'
          DO 39 N=NPTL00+1,NPTL					          DO 39 N=NPTL00+1,NPTL
            WRITE(IFCH,125)N,IDPTL(N),(PPTL(K,N),K=1,5),ISTPT	            WRITE(IFCH,125)N,IDPTL(N),(PPTL(K,N),K=1,5),ISTPT
125         FORMAT(1X,'/CPTL/',I6,I10,5(E11.3),I2)		125         FORMAT(1X,'/CPTL/',I6,I10,5(E11.3),I2)
39        CONTINUE						39        CONTINUE
          WRITE(IFCH,*)'P_FIN:',(PSUM(K),K=1,4)			          WRITE(IFCH,*)'P_FIN:',(PSUM(K),K=1,4)
          WRITE(IFCH,*)'P_INI:',(SNGL(BOO(K)),K=1,4)		          WRITE(IFCH,*)'P_INI:',(SNGL(BOO(K)),K=1,4)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      GOTO 1000							      GOTO 1000

C  FINISH							C  FINISH
C  ------							C  ------

10025 CONTINUE							10025 CONTINUE
      IRET=25							      IRET=25
      IF ( ISH .GE. 91 ) WRITE(IFCH,*)'SKIP'			      IF ( ISH .GE. 91 ) WRITE(IFCH,*)'SKIP'
      NPTL=NPTL00						      NPTL=NPTL00
      NSTR=NSTR00						      NSTR=NSTR00
      GOTO 1000							      GOTO 1000

10050 CONTINUE							10050 CONTINUE
      CALL UTMSG('JINTCE')					      CALL UTMSG('JINTCE')
      WRITE(IFCH,*)'INCIDENT PARTICLES:'			      WRITE(IFCH,*)'INCIDENT PARTICLES:'
      WRITE(IFCH,115)I,IDPTL(I),(PPTL(K,I),K=3,5)		      WRITE(IFCH,115)I,IDPTL(I),(PPTL(K,I),K=3,5)
      WRITE(IFCH,115)J,IDPTL(J),(PPTL(K,J),K=3,5)		      WRITE(IFCH,115)J,IDPTL(J),(PPTL(K,J),K=3,5)
      WRITE(IFCH,*)'NSTR=',NSTR,'    NSTR00=',NSTR00		      WRITE(IFCH,*)'NSTR=',NSTR,'    NSTR00=',NSTR00
      CALL UTMSGF						      CALL UTMSGF
      CALL UTSTOP('JINTCE: NSTR .LE. NSTR00                ')	      CALL UTSTOP('JINTCE: NSTR .LE. NSTR00                ')

10051 CONTINUE							10051 CONTINUE
      CALL UTMSG('JINTCE')					      CALL UTMSG('JINTCE')
      WRITE(IFCH,*)'INCIDENT PARTICLES:'			      WRITE(IFCH,*)'INCIDENT PARTICLES:'
      WRITE(IFCH,115)I,IDPTL(I),(PPTL(K,I),K=3,5)		      WRITE(IFCH,115)I,IDPTL(I),(PPTL(K,I),K=3,5)
      WRITE(IFCH,115)J,IDPTL(J),(PPTL(K,J),K=3,5)		      WRITE(IFCH,115)J,IDPTL(J),(PPTL(K,J),K=3,5)
      WRITE(IFCH,*)'NSTR=',NSTR,'    NSTR00=',NSTR00		      WRITE(IFCH,*)'NSTR=',NSTR,'    NSTR00=',NSTR00
      WRITE(IFCH,*)'NPTL=',NPTL,'    NPTL00=',NPTL00		      WRITE(IFCH,*)'NPTL=',NPTL,'    NPTL00=',NPTL00
      CALL UTMSGF						      CALL UTMSGF
      CALL UTSTOP('JINTCE: NPTL .LE. NPTL00                ')	      CALL UTSTOP('JINTCE: NPTL .LE. NPTL00                ')

1000  CONTINUE							1000  CONTINUE
      PNLLX=PNLLX0						      PNLLX=PNLLX0
      ISH=ISH00							      ISH=ISH00
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTCH(I,J,KMAX)				      SUBROUTINE JINTCH(I,J,KMAX)

C------------------------------------------------------------	C------------------------------------------------------------
C  WRITES CHILDREN OF I,J TO IFRIJ(1-KMAX)			C  WRITES CHILDREN OF I,J TO IFRIJ(1-KMAX)
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXIFR=MXPTL)					      PARAMETER (MXIFR=MXPTL)
      COMMON /CIFRIJ/  IFRIJ(MXIFR)				      COMMON /CIFRIJ/  IFRIJ(MXIFR)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      KCUR=0							      KCUR=0
      KMAX=0							      KMAX=0
      LOOP=0							      LOOP=0
31    LOOP=LOOP+1						31    LOOP=LOOP+1
      IF     ( LOOP .EQ. 1 ) THEN				      IF     ( LOOP .EQ. 1 ) THEN
        N=I							        N=I
      ELSEIF ( LOOP .EQ. 2 ) THEN				      ELSEIF ( LOOP .EQ. 2 ) THEN
        N=J							        N=J
      ENDIF							      ENDIF
      IF ( IFRPTL(1,N) .GT. 0 ) THEN				      IF ( IFRPTL(1,N) .GT. 0 ) THEN
        IF ( ISH.GE.92 ) WRITE(IFCH,*)N,' ---> ',IFRPTL(1,N),	        IF ( ISH.GE.92 ) WRITE(IFCH,*)N,' ---> ',IFRPTL(1,N),
        DO 30 K=IFRPTL(1,N),IFRPTL(2,N)				        DO 30 K=IFRPTL(1,N),IFRPTL(2,N)
          KMAX=KMAX+1						          KMAX=KMAX+1
          IF ( KMAX .GT. MXIFR ) THEN				          IF ( KMAX .GT. MXIFR ) THEN
            CALL UTSTOP('JINTCH: KMAX > MXIFR                	            CALL UTSTOP('JINTCH: KMAX > MXIFR                
          ENDIF							          ENDIF
          IFRIJ(KMAX)=K						          IFRIJ(KMAX)=K
30      CONTINUE						30      CONTINUE
      ENDIF							      ENDIF
      IF ( LOOP .EQ. 1 ) GOTO 31				      IF ( LOOP .EQ. 1 ) GOTO 31
      KCUR=KCUR+1						      KCUR=KCUR+1
      IF ( KCUR .LE. KMAX ) THEN				      IF ( KCUR .LE. KMAX ) THEN
        N=IFRIJ(KCUR)						        N=IFRIJ(KCUR)
        GOTO 31							        GOTO 31
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTCL(I,X,Y,RAD,O,U,IAC)			      SUBROUTINE JINTCL(I,X,Y,RAD,O,U,IAC)

C------------------------------------------------------------	C------------------------------------------------------------
C  FILLS HISTOGRAM CONCERNING CLUSTER CHARACTERISTICS		C  FILLS HISTOGRAM CONCERNING CLUSTER CHARACTERISTICS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXEPS=10)					      PARAMETER (MXEPS=10)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXTAU=4)					      PARAMETER (MXTAU=4)
      PARAMETER (MXVOL=10)					      PARAMETER (MXVOL=10)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CJINTC/  CLUST(MXTAU,MXVOL,MXEPS)			      COMMON /CJINTC/  CLUST(MXTAU,MXVOL,MXEPS)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CVSN/    IVERSN					      COMMON /CVSN/    IVERSN
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /NEVNT/   NEVNT					      COMMON /NEVNT/   NEVNT
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARO5/   DELEPS,DELVOL				      COMMON /PARO5/   DELEPS,DELVOL

      CHARACTER AX*2						      CHARACTER AX*2
      LOGICAL   IAC						      LOGICAL   IAC
C------------------------------------------------------------	C------------------------------------------------------------
      TAU=SNGL(TTAUS)						      TAU=SNGL(TTAUS)
CDH   ITAU=1+LOG(TAU)/LOG(2.)					CDH   ITAU=1+LOG(TAU)/LOG(2.)
      ITAU=1+LOG(TAU)*1.442695					      ITAU=1+LOG(TAU)*1.442695

      IF ( IAC ) GOTO 1						      IF ( IAC ) GOTO 1

      VOL=(O-U)*RAD**2*PI					      VOL=(O-U)*RAD**2*PI
      IVOL=1+VOL/DELVOL						      IVOL=1+VOL/DELVOL
      EPS=PPTL(5,I)/VOL						      EPS=PPTL(5,I)/VOL
      IEPS=1+EPS/DELEPS						      IEPS=1+EPS/DELEPS
      IF ( ITAU.GE.1 .AND. ITAU.LE.MXTAU .AND.			      IF ( ITAU.GE.1 .AND. ITAU.LE.MXTAU .AND.
     *     IVOL.GE.1 .AND. IVOL.LE.MXVOL .AND.			     *     IVOL.GE.1 .AND. IVOL.LE.MXVOL .AND.
     *     IEPS.GE.1 .AND. IEPS.LE.MXEPS )			     *     IEPS.GE.1 .AND. IEPS.LE.MXEPS )
     *                CLUST(ITAU,IVOL,IEPS)=CLUST(ITAU,IVOL,I	     *                CLUST(ITAU,IVOL,IEPS)=CLUST(ITAU,IVOL,I

 1    CONTINUE							 1    CONTINUE
      IF ( I .LT. NPTL  .OR.  NREVT+1 .LT. NEVNT ) GOTO 1000	      IF ( I .LT. NPTL  .OR.  NREVT+1 .LT. NEVNT ) GOTO 1000

      IF ( ITAU .EQ. 1 ) WRITE(IFCH,105)MAPROJ,MATARG,ENGY,IV	      IF ( ITAU .EQ. 1 ) WRITE(IFCH,105)MAPROJ,MATARG,ENGY,IV
105   FORMAT(/1X,'PROJ=',I3,3X,'TARG=',I3,3X,'ENGY=',F7.2	105   FORMAT(/1X,'PROJ=',I3,3X,'TARG=',I3,3X,'ENGY=',F7.2
     *          ,3X,'VENUS ',F4.2,' (TURBOVENUS)')		     *          ,3X,'VENUS ',F4.2,' (TURBOVENUS)')
      WRITE(IFCH,100)TAU,ITAU,NEVNT,DELVOL,DELEPS		      WRITE(IFCH,100)TAU,ITAU,NEVNT,DELVOL,DELEPS
100   FORMAT(/1X,'TAU=',F5.2,3X,'ITAU=',I1			100   FORMAT(/1X,'TAU=',F5.2,3X,'ITAU=',I1
     *          ,3X,'NEVNT=',I4,3X,'DELVOL=',F5.1,3X,'DELEPS=	     *          ,3X,'NEVNT=',I4,3X,'DELVOL=',F5.1,3X,'DELEPS=
      WRITE(IFCH,101)						      WRITE(IFCH,101)
101   FORMAT(9X,'IVOL=1 IVOL=2 IVOL=3 IVOL=4 IVOL=5 '		101   FORMAT(9X,'IVOL=1 IVOL=2 IVOL=3 IVOL=4 IVOL=5 '
     *         ,'IVOL=6 IVOL=7 IVOL=8 IVOL=9 IVOL=10 ')		     *         ,'IVOL=6 IVOL=7 IVOL=8 IVOL=9 IVOL=10 ')
      DO 106 IE=1,MXEPS						      DO 106 IE=1,MXEPS
        IF ( IE .LE. 9 ) THEN					        IF ( IE .LE. 9 ) THEN
          WRITE(AX,102)IE					          WRITE(AX,102)IE
102       FORMAT('0',I1)					102       FORMAT('0',I1)
        ELSE							        ELSE
          WRITE(AX,103)IE					          WRITE(AX,103)IE
103       FORMAT(I2)						103       FORMAT(I2)
        ENDIF							        ENDIF
        WRITE(IFCH,104)AX,(NINT(CLUST(ITAU,IV,IE)),IV=1,MXVOL	        WRITE(IFCH,104)AX,(NINT(CLUST(ITAU,IV,IE)),IV=1,MXVOL
104     FORMAT(' IEPS=',A2,10I7)				104     FORMAT(' IEPS=',A2,10I7)
106   CONTINUE							106   CONTINUE

1000  CONTINUE							1000  CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTEL(I,J,AMIM,IACTN)				      SUBROUTINE JINTEL(I,J,AMIM,IACTN)

C------------------------------------------------------------	C------------------------------------------------------------
C  ELASTIC SCATTERING OF PTLS I,J				C  ELASTIC SCATTERING OF PTLS I,J
C  EL SCATT REQUIR NOT FULF: RETURN WITHOUT ACTION, IACTN UNC	C  EL SCATT REQUIR NOT FULF: RETURN WITHOUT ACTION, IACTN UNC
C    ELSE: ELASTIC SCATTERING DONE, IACTN=2			C    ELSE: ELASTIC SCATTERING DONE, IACTN=2
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NPTQ=129)					      PARAMETER (NPTQ=129)
      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT	      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CPTQ/    QPTH(NPTQ),QPTQ(NPTQ),XPTQ(NPTQ),QPTQM	      COMMON /CPTQ/    QPTH(NPTQ),QPTQ(NPTQ),XPTQ(NPTQ),QPTQM
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL             P(5),PEI(5),PEJ(5),U(5)			      REAL             P(5),PEI(5),PEJ(5),U(5)
C------------------------------------------------------------	C------------------------------------------------------------
C  CHECK							C  CHECK
C  -----							C  -----
      AMF=PPTL(5,NPTL+1)					      AMF=PPTL(5,NPTL+1)
      IF ( AMF .GE. AMIM ) GOTO 1000				      IF ( AMF .GE. AMIM ) GOTO 1000

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,101)NTC,SNGL(TTAUS)				        WRITE(IFCH,101)NTC,SNGL(TTAUS)
101     FORMAT(1X,'ELASTIC SCATTERING --- NT=',I3,' --- TAUS=	101     FORMAT(1X,'ELASTIC SCATTERING --- NT=',I3,' --- TAUS=
        WRITE(IFCH,115)I,IDPTL(I)				        WRITE(IFCH,115)I,IDPTL(I)
     *                  ,(PPTL(K,I),K=3,5),(XORPTL(K,I),K=3,4	     *                  ,(PPTL(K,I),K=3,5),(XORPTL(K,I),K=3,4
        WRITE(IFCH,115)J,IDPTL(J)				        WRITE(IFCH,115)J,IDPTL(J)
     *                  ,(PPTL(K,J),K=3,5),(XORPTL(K,I),K=3,4	     *                  ,(PPTL(K,J),K=3,5),(XORPTL(K,I),K=3,4
115     FORMAT(1X,'/CPTL/',I6,I10				115     FORMAT(1X,'/CPTL/',I6,I10
     *           ,1X,2(E10.2),E11.2,1X,2(E10.2),2X,I4)		     *           ,1X,2(E10.2),E11.2,1X,2(E10.2),2X,I4)
      ENDIF							      ENDIF

C  INITIALIZATION						C  INITIALIZATION
C  --------------						C  --------------
      IACTN=2							      IACTN=2
      DO 125 K=1,5						      DO 125 K=1,5
        P(K)=PPTL(K,NPTL+1)					        P(K)=PPTL(K,NPTL+1)
125   CONTINUE							125   CONTINUE

C  DETERMINE MOMENTA OF OUTGOING PARTICLES (PEI,PEJ)		C  DETERMINE MOMENTA OF OUTGOING PARTICLES (PEI,PEJ)
C  -------------------------------------------------		C  -------------------------------------------------
      IF     ( P(5) .LE. (PPTL(5,I)+PPTL(5,J))*.99 ) THEN	      IF     ( P(5) .LE. (PPTL(5,I)+PPTL(5,J))*.99 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTEL')					          CALL UTMSG('JINTEL')
          WRITE(IFCH,132)P(5),PPTL(5,I)+PPTL(5,J)		          WRITE(IFCH,132)P(5),PPTL(5,I)+PPTL(5,J)
132       FORMAT(1X,'*****  M_FUS < M_I+M_J ---> QCM SET ZERO	132       FORMAT(1X,'*****  M_FUS < M_I+M_J ---> QCM SET ZERO
     *             ,2F10.3,' )')				     *             ,2F10.3,' )')
          WRITE(IFCH,133)'P_I:  ',(PPTL(K,I),K=1,5)		          WRITE(IFCH,133)'P_I:  ',(PPTL(K,I),K=1,5)
          WRITE(IFCH,133)'P_J:  ',(PPTL(K,J),K=1,5)		          WRITE(IFCH,133)'P_J:  ',(PPTL(K,J),K=1,5)
          WRITE(IFCH,133)'P_FUS:',(P(K),K=1,5)			          WRITE(IFCH,133)'P_FUS:',(P(K),K=1,5)
133       FORMAT(1X,A6,3X,5F10.3)				133       FORMAT(1X,A6,3X,5F10.3)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        QCM=0.							        QCM=0.
      ELSEIF ( P(5) .LE. PPTL(5,I)+PPTL(5,J) ) THEN		      ELSEIF ( P(5) .LE. PPTL(5,I)+PPTL(5,J) ) THEN
        QCM=0.							        QCM=0.
      ELSE							      ELSE
        QCM=UTPCM(P(5),PPTL(5,I),PPTL(5,J))			        QCM=UTPCM(P(5),PPTL(5,I),PPTL(5,J))
      ENDIF							      ENDIF

C  ISOTROPIC							C  ISOTROPIC
      U(3)=2.*RANGEN()-1.					      U(3)=2.*RANGEN()-1.
      PHI=2.*PI*RANGEN()					      PHI=2.*PI*RANGEN()
      AUXIL=SQRT(1.-U(3)**2)					      AUXIL=SQRT(1.-U(3)**2)
      U(1)=AUXIL*COS(PHI)					      U(1)=AUXIL*COS(PHI)
      U(2)=AUXIL*SIN(PHI)					      U(2)=AUXIL*SIN(PHI)
      PEI(1)= QCM*U(1)						      PEI(1)= QCM*U(1)
      PEJ(1)=-QCM*U(1)						      PEJ(1)=-QCM*U(1)
      PEI(2)= QCM*U(2)						      PEI(2)= QCM*U(2)
      PEJ(2)=-QCM*U(2)						      PEJ(2)=-QCM*U(2)
      PEI(3)= QCM*U(3)						      PEI(3)= QCM*U(3)
      PEJ(3)=-QCM*U(3)						      PEJ(3)=-QCM*U(3)

C  NONISOTROPIC							C  NONISOTROPIC
C-C   R=RANGEN()						C-C   R=RANGEN()
C-C   IF     ( IOPTQ .EQ. 2 ) THEN				C-C   IF     ( IOPTQ .EQ. 2 ) THEN
C-C     PT = SQRT( -4.*PTQ**2/PI * LOG(1.-QPTQMX*R) )		C-C     PT = SQRT( -4.*PTQ**2/PI * LOG(1.-QPTQMX*R) )
C-C   ELSEIF ( IOPTQ .EQ. 3 ) THEN				C-C   ELSEIF ( IOPTQ .EQ. 3 ) THEN
C-C     PT = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )			C-C     PT = PTQ*SQRT( QPTQMX*R/(1.-QPTQMX*R) )
C-C   ELSE							C-C   ELSE
C-C     PT=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))			C-C     PT=UTINVT(NPTQ,XPTQ,QPTQ,R*QPTQ(NPTQ))
C-C   ENDIF							C-C   ENDIF
C-C   IF ( PT .GE. QCM ) PT=RANGEN()*QCM			C-C   IF ( PT .GE. QCM ) PT=RANGEN()*QCM
C-C   QPL=SQRT(QCM**2-PT**2)					C-C   QPL=SQRT(QCM**2-PT**2)
C-C   U(3)=QPL							C-C   U(3)=QPL
C-C   PHI=2.*PI*RANGEN()					C-C   PHI=2.*PI*RANGEN()
C-C   U(1)=PT*COS(PHI)						C-C   U(1)=PT*COS(PHI)
C-C   U(2)=PT*SIN(PHI)						C-C   U(2)=PT*SIN(PHI)
C-C   CALL UTAXIS(I,J,A1,A2,A3)					C-C   CALL UTAXIS(I,J,A1,A2,A3)
C-C   IVT=1							C-C   IVT=1
C-C   IF ( A3 .LT. 0. ) THEN					C-C   IF ( A3 .LT. 0. ) THEN
C-C     A1=-A1							C-C     A1=-A1
C-C     A2=-A2							C-C     A2=-A2
C-C     A3=-A3							C-C     A3=-A3
C-C     IVT=-1							C-C     IVT=-1
C-C   ENDIF							C-C   ENDIF
C-C   CALL UTROTA(-1,A1,A2,A3,U(1),U(2),U(3))			C-C   CALL UTROTA(-1,A1,A2,A3,U(1),U(2),U(3))
C-C   DO 47 K=1,3						C-C   DO 47 K=1,3
C-C     PEI(K)= U(K)*IVT					C-C     PEI(K)= U(K)*IVT
C-C     PEJ(K)=-U(K)*IVT					C-C     PEJ(K)=-U(K)*IVT
C-C47 CONTINUE							C-C47 CONTINUE
      PEI(4)=SQRT(QCM**2+PPTL(5,I)**2)				      PEI(4)=SQRT(QCM**2+PPTL(5,I)**2)
      PEJ(4)=SQRT(QCM**2+PPTL(5,J)**2)				      PEJ(4)=SQRT(QCM**2+PPTL(5,J)**2)
      PEI(5)=PPTL(5,I)						      PEI(5)=PPTL(5,I)
      PEJ(5)=PPTL(5,J)						      PEJ(5)=PPTL(5,J)
      CALL UTLOBO(-1,P(1),P(2),P(3),P(4),P(5)			      CALL UTLOBO(-1,P(1),P(2),P(3),P(4),P(5)
     *            ,PEI(1),PEI(2),PEI(3),PEI(4))			     *            ,PEI(1),PEI(2),PEI(3),PEI(4))
      CALL UTLOBO(-1,P(1),P(2),P(3),P(4),P(5)			      CALL UTLOBO(-1,P(1),P(2),P(3),P(4),P(5)
     *            ,PEJ(1),PEJ(2),PEJ(3),PEJ(4))			     *            ,PEJ(1),PEJ(2),PEJ(3),PEJ(4))

C  FILL /CPTL/							C  FILL /CPTL/
C  -----------							C  -----------
      DO 49 LO=1,2						      DO 49 LO=1,2
        NPTL=NPTL+1						        NPTL=NPTL+1
        IF ( LO .EQ. 1 ) THEN					        IF ( LO .EQ. 1 ) THEN
          IJ=I							          IJ=I
          PPTL(1,NPTL)=PEI(1)					          PPTL(1,NPTL)=PEI(1)
          PPTL(2,NPTL)=PEI(2)					          PPTL(2,NPTL)=PEI(2)
          PPTL(3,NPTL)=PEI(3)					          PPTL(3,NPTL)=PEI(3)
          PPTL(4,NPTL)=PEI(4)					          PPTL(4,NPTL)=PEI(4)
          PPTL(5,NPTL)=PEI(5)					          PPTL(5,NPTL)=PEI(5)
        ELSE							        ELSE
          IJ=J							          IJ=J
          PPTL(1,NPTL)=PEJ(1)					          PPTL(1,NPTL)=PEJ(1)
          PPTL(2,NPTL)=PEJ(2)					          PPTL(2,NPTL)=PEJ(2)
          PPTL(3,NPTL)=PEJ(3)					          PPTL(3,NPTL)=PEJ(3)
          PPTL(4,NPTL)=PEJ(4)					          PPTL(4,NPTL)=PEJ(4)
          PPTL(5,NPTL)=PEJ(5)					          PPTL(5,NPTL)=PEJ(5)
        ENDIF							        ENDIF
        ISTPTL(NPTL) =0						        ISTPTL(NPTL) =0
        IDPTL(NPTL)  =IDPTL(IJ)					        IDPTL(NPTL)  =IDPTL(IJ)
        IBPTL(1,NPTL)=IBPTL(1,IJ)				        IBPTL(1,NPTL)=IBPTL(1,IJ)
        IBPTL(2,NPTL)=IBPTL(2,IJ)				        IBPTL(2,NPTL)=IBPTL(2,IJ)
        IBPTL(3,NPTL)=IBPTL(3,IJ)				        IBPTL(3,NPTL)=IBPTL(3,IJ)
        IBPTL(4,NPTL)=IBPTL(4,IJ)				        IBPTL(4,NPTL)=IBPTL(4,IJ)
        XORPTL(1,NPTL)=XAVER(1)					        XORPTL(1,NPTL)=XAVER(1)
        XORPTL(2,NPTL)=XAVER(2)					        XORPTL(2,NPTL)=XAVER(2)
        XORPTL(3,NPTL)=XAVER(3)					        XORPTL(3,NPTL)=XAVER(3)
        XORPTL(4,NPTL)=XAVER(4)					        XORPTL(4,NPTL)=XAVER(4)
        IORPTL(NPTL)=I						        IORPTL(NPTL)=I
        JORPTL(NPTL)=J						        JORPTL(NPTL)=J
        TIVPTL(1,NPTL)=XAVER(4)					        TIVPTL(1,NPTL)=XAVER(4)
        CALL IDTAU(IDPTL(NPTL),PPTL(4,NPTL),PPTL(5,NPTL),TAUG	        CALL IDTAU(IDPTL(NPTL),PPTL(4,NPTL),PPTL(5,NPTL),TAUG
        TIVPTL(2,NPTL)=TIVPTL(1,NPTL)+TAUGM			        TIVPTL(2,NPTL)=TIVPTL(1,NPTL)+TAUGM
        IFRPTL(1,NPTL)=0					        IFRPTL(1,NPTL)=0
        IFRPTL(2,NPTL)=0					        IFRPTL(2,NPTL)=0
        ICLPTL(NPTL)=ICLPTL(IJ)					        ICLPTL(NPTL)=ICLPTL(IJ)
        NQJPTL(NPTL)=NQJPTL(IJ)					        NQJPTL(NPTL)=NQJPTL(IJ)
        IF ( ISH .GE. 91 ) WRITE(IFCH,115)NPTL,IDPTL(NPTL)	        IF ( ISH .GE. 91 ) WRITE(IFCH,115)NPTL,IDPTL(NPTL)
     *                    ,(PPTL(K,NPTL),K=3,5),(XORPTL(K,NPT	     *                    ,(PPTL(K,NPTL),K=3,5),(XORPTL(K,NPT
49    CONTINUE							49    CONTINUE

1000  RETURN							1000  RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTFP(I,J,N,     XPL1,YPL1,RADPL1,OPL1,UPL1	      SUBROUTINE JINTFP(I,J,N,     XPL1,YPL1,RADPL1,OPL1,UPL1
     *  XPL2,YPL2,RADPL2,OPL2,UPL2,XPL3,YPL3,RADPL3,OPL3,UPL3	     *  XPL2,YPL2,RADPL2,OPL2,UPL2,XPL3,YPL3,RADPL3,OPL3,UPL3

C------------------------------------------------------------	C------------------------------------------------------------
C  PRINTOUT							C  PRINTOUT
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP

      REAL       OPL(3),RADPL(3),UPL(3),XPL(3),YPL(3)		      REAL       OPL(3),RADPL(3),UPL(3),XPL(3),YPL(3)
      CHARACTER  AX*10,LIN*59,MARK*1,TXT*8			      CHARACTER  AX*10,LIN*59,MARK*1,TXT*8
C------------------------------------------------------------	C------------------------------------------------------------
      XPL(1)  =XPL1						      XPL(1)  =XPL1
      YPL(1)  =YPL1						      YPL(1)  =YPL1
      RADPL(1)=RADPL1						      RADPL(1)=RADPL1
      OPL(1)  =OPL1						      OPL(1)  =OPL1
      UPL(1)  =UPL1						      UPL(1)  =UPL1
      XPL(2)  =XPL2						      XPL(2)  =XPL2
      YPL(2)  =YPL2						      YPL(2)  =YPL2
      RADPL(2)=RADPL2						      RADPL(2)=RADPL2
      OPL(2)  =OPL2						      OPL(2)  =OPL2
      UPL(2)  =UPL2						      UPL(2)  =UPL2
      XPL(3)  =XPL3						      XPL(3)  =XPL3
      YPL(3)  =YPL3						      YPL(3)  =YPL3
      RADPL(3)=RADPL3						      RADPL(3)=RADPL3
      OPL(3)  =OPL3						      OPL(3)  =OPL3
      UPL(3)  =UPL3						      UPL(3)  =UPL3

      V1=(OPL1-UPL1)*RADPL1**2*PI				      V1=(OPL1-UPL1)*RADPL1**2*PI
      V2=(OPL2-UPL2)*RADPL2**2*PI				      V2=(OPL2-UPL2)*RADPL2**2*PI
      V3=(OPL3-UPL3)*RADPL3**2*PI				      V3=(OPL3-UPL3)*RADPL3**2*PI

      WRITE(IFCH,103)SNGL(TTAUS)				      WRITE(IFCH,103)SNGL(TTAUS)
103   FORMAT(' MONITORING FUSION INTERACTION AT TTAUS=',F5.2)	103   FORMAT(' MONITORING FUSION INTERACTION AT TTAUS=',F5.2)
      TX=TTAUS							      TX=TTAUS
      TX=MAX(TX,1.)						      TX=MAX(TX,1.)
      WRITE(TXT(3:7),104)TX					      WRITE(TXT(3:7),104)TX
104   FORMAT(F5.2)						104   FORMAT(F5.2)
      WRITE(IFCH,105)'INCOMING:',I,IDPTL(I),PPTL(5,I),V1,PPTL	      WRITE(IFCH,105)'INCOMING:',I,IDPTL(I),PPTL(5,I),V1,PPTL
      WRITE(IFCH,105)'INCOMING:',J,IDPTL(J),PPTL(5,J),V2,PPTL	      WRITE(IFCH,105)'INCOMING:',J,IDPTL(J),PPTL(5,J),V2,PPTL
      WRITE(IFCH,105)'FUSED:   ',N,IDPTL(N),PPTL(5,N),V3,PPTL	      WRITE(IFCH,105)'FUSED:   ',N,IDPTL(N),PPTL(5,N),V3,PPTL
105   FORMAT(1X,A9,2X,'NR=',I6,2X,'ID=',I9,2X,'MASS=',F5.1,2X	105   FORMAT(1X,A9,2X,'NR=',I6,2X,'ID=',I9,2X,'MASS=',F5.1,2X
     *         ,'VOL=',F5.1,2X,'EPS=',F4.1)			     *         ,'VOL=',F5.1,2X,'EPS=',F4.1)

      DO 110 MM=1,3						      DO 110 MM=1,3
        IF     ( MM .EQ. 1 ) THEN				        IF     ( MM .EQ. 1 ) THEN
          TXT(1:2)='S/'						          TXT(1:2)='S/'
          TXT(8:8)=':'						          TXT(8:8)=':'
        ELSEIF ( MM .EQ. 2 ) THEN				        ELSEIF ( MM .EQ. 2 ) THEN
          TXT='X:      '					          TXT='X:      '
        ELSEIF ( MM .EQ. 3 ) THEN				        ELSEIF ( MM .EQ. 3 ) THEN
          TXT='Y:      '					          TXT='Y:      '
        ENDIF							        ENDIF
        AX='---------!'						        AX='---------!'
        WRITE(IFCH,100)TXT,(AX,L=1,6)				        WRITE(IFCH,100)TXT,(AX,L=1,6)
100     FORMAT(2X,A8,3X,'-3',8X,'-2',8X,'-1',9X,'0',9X,'1',9X	100     FORMAT(2X,A8,3X,'-3',8X,'-2',8X,'-1',9X,'0',9X,'1',9X
     *         /13X,' !',6A10)					     *         /13X,' !',6A10)
        DO 109 K=1,3						        DO 109 K=1,3
          DO 108 L=1,59						          DO 108 L=1,59
            WO=-3.+L*0.1 + 0.05					            WO=-3.+L*0.1 + 0.05
            WU=-3.+L*0.1 - 0.05					            WU=-3.+L*0.1 - 0.05
            IF     ( MM .EQ. 1 ) THEN				            IF     ( MM .EQ. 1 ) THEN
              O=OPL(K)/TX					              O=OPL(K)/TX
              U=UPL(K)/TX					              U=UPL(K)/TX
            ELSEIF ( MM .EQ. 2 ) THEN				            ELSEIF ( MM .EQ. 2 ) THEN
              O=XPL(K)+RADPL(K)					              O=XPL(K)+RADPL(K)
              U=XPL(K)-RADPL(K)					              U=XPL(K)-RADPL(K)
            ELSEIF ( MM .EQ. 3 ) THEN				            ELSEIF ( MM .EQ. 3 ) THEN
              O=YPL(K)+RADPL(K)					              O=YPL(K)+RADPL(K)
              U=YPL(K)-RADPL(K)					              U=YPL(K)-RADPL(K)
            ENDIF						            ENDIF
            IF ( K .EQ. 3 ) THEN				            IF ( K .EQ. 3 ) THEN
              MARK='X'						              MARK='X'
            ELSE						            ELSE
              MARK='O'						              MARK='O'
            ENDIF						            ENDIF
            IF ( WU .LE. O  .AND.  WO .GE. U ) THEN		            IF ( WU .LE. O  .AND.  WO .GE. U ) THEN
              LIN(L:L)=MARK					              LIN(L:L)=MARK
            ELSE						            ELSE
              LIN(L:L)=' '					              LIN(L:L)=' '
            ENDIF						            ENDIF
108       CONTINUE						108       CONTINUE
          WRITE(IFCH,101)U,O,LIN				          WRITE(IFCH,101)U,O,LIN
101       FORMAT(1X,2F6.2,' !',A59,'!')				101       FORMAT(1X,2F6.2,' !',A59,'!')
109     CONTINUE						109     CONTINUE
        WRITE(IFCH,102)('-',L=1,59)				        WRITE(IFCH,102)('-',L=1,59)
102     FORMAT(13X,' !',59A1,'!')				102     FORMAT(13X,' !',59A1,'!')
110   CONTINUE							110   CONTINUE

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTFS(I,J,NQI,JC,AMIM,IRET)			      SUBROUTINE JINTFS(I,J,NQI,JC,AMIM,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  INPUT: PTL NUMBERS I,J					C  INPUT: PTL NUMBERS I,J
C  OUTPUT: PPFUS(5): MOMENTUM , NQI: NET QUARK NUMBER,		C  OUTPUT: PPFUS(5): MOMENTUM , NQI: NET QUARK NUMBER,
C              JC: JC-CODE, AMIM: MINIMUM MASS,    OF FUSED P	C              JC: JC-CODE, AMIM: MINIMUM MASS,    OF FUSED P
C          IRET=0 IF OK, 1 ELSE					C          IRET=0 IF OK, 1 ELSE
C          PPFUS() WRITTEN TO PPTL(,NPTL+1)			C          PPFUS() WRITTEN TO PPTL(,NPTL+1)
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT	      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION PPFUS(5),PP52				      DOUBLE PRECISION PPFUS(5),PP52
      REAL             P(5)					      REAL             P(5)
      INTEGER          JC(NFLAV,2),JCI(NFLAV,2),JCJ(NFLAV,2)	      INTEGER          JC(NFLAV,2),JCI(NFLAV,2),JCJ(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0

      P(1)=PPTL(1,I)+PPTL(1,J)					      P(1)=PPTL(1,I)+PPTL(1,J)
      PPFUS(1)=P(1)						      PPFUS(1)=P(1)
      P(2)=PPTL(2,I)+PPTL(2,J)					      P(2)=PPTL(2,I)+PPTL(2,J)
      PPFUS(2)=P(2)						      PPFUS(2)=P(2)
      P(3)=PPTL(3,I)+PPTL(3,J)					      P(3)=PPTL(3,I)+PPTL(3,J)
      PPFUS(3)=P(3)						      PPFUS(3)=P(3)
      P(4)=PPTL(4,I)+PPTL(4,J)					      P(4)=PPTL(4,I)+PPTL(4,J)
      PPFUS(4)=P(4)						      PPFUS(4)=P(4)
      PP52=PPFUS(4)**2-PPFUS(3)**2-PPFUS(2)**2-PPFUS(1)**2	      PP52=PPFUS(4)**2-PPFUS(3)**2-PPFUS(2)**2-PPFUS(1)**2
      IF ( PP52 .LE. 0.D0 ) THEN				      IF ( PP52 .LE. 0.D0 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JINTFS')					          CALL UTMSG('JINTFS')
          WRITE(IFCH,*)'*****  MFUS**2 < 0    (',PP52,' )'	          WRITE(IFCH,*)'*****  MFUS**2 < 0    (',PP52,' )'
          WRITE(IFCH,*)(PPFUS(M),M=1,4)				          WRITE(IFCH,*)(PPFUS(M),M=1,4)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1001						        GOTO 1001
      ENDIF							      ENDIF
      PPFUS(5)=SQRT(PP52)					      PPFUS(5)=SQRT(PP52)
      IF ( NPTL+1 .GT. MXPTL ) THEN				      IF ( NPTL+1 .GT. MXPTL ) THEN
        CALL UTSTOP('JINTFS: NPTL>MXPTL                      	        CALL UTSTOP('JINTFS: NPTL>MXPTL                      
      ENDIF							      ENDIF
      DO 36 K=1,5						      DO 36 K=1,5
        PPTL(K,NPTL+1)=PPFUS(K)					        PPTL(K,NPTL+1)=PPFUS(K)
36    CONTINUE							36    CONTINUE
      AMF=PPFUS(5)						      AMF=PPFUS(5)

      ISTPTL(NPTL+1)=0						      ISTPTL(NPTL+1)=0

      CALL IDQUAC(I,NDUMMY,NDUMMY,NDUMMY,JCI)			      CALL IDQUAC(I,NDUMMY,NDUMMY,NDUMMY,JCI)
      CALL IDQUAC(J,NDUMMY,NDUMMY,NDUMMY,JCJ)			      CALL IDQUAC(J,NDUMMY,NDUMMY,NDUMMY,JCJ)
      NQI=0							      NQI=0
      DO 29 N=1,NFLAV						      DO 29 N=1,NFLAV
        JC(N,1)=JCI(N,1)+JCJ(N,1)				        JC(N,1)=JCI(N,1)+JCJ(N,1)
        JC(N,2)=JCI(N,2)+JCJ(N,2)				        JC(N,2)=JCI(N,2)+JCJ(N,2)
        NQI=NQI+JC(N,1)-JC(N,2)					        NQI=NQI+JC(N,1)-JC(N,2)
29    CONTINUE							29    CONTINUE

      CALL IDCOMJ(JC)						      CALL IDCOMJ(JC)
      AMIM=UTAMNZ(JC,5)+.200					      AMIM=UTAMNZ(JC,5)+.200
      IF ( AMF.LT.AMIM .AND. I.GT.NPTL0 .AND. J.GT.NPTL0 ) GO	      IF ( AMF.LT.AMIM .AND. I.GT.NPTL0 .AND. J.GT.NPTL0 ) GO
      GOTO 1000							      GOTO 1000

1001  IRET=1							1001  IRET=1

1000  RETURN							1000  RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTFU(I,J,JC,IACTN)				      SUBROUTINE JINTFU(I,J,JC,IACTN)

C------------------------------------------------------------	C------------------------------------------------------------
C  FUSION OF PTLS I,J: DETERMINE CLUSTER			C  FUSION OF PTLS I,J: DETERMINE CLUSTER
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXDKY=2000)					      PARAMETER (MXDKY=2000)
      PARAMETER (MXLOOK=10000)					      PARAMETER (MXLOOK=10000)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT	      COMMON /CJINT/   BX,BY,RNUP,RNUT,VELP,VELT,XAVER(4),NPT
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CTIMEL/  NTC					      COMMON /CTIMEL/  NTC
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)	      COMMON /DKYTAB/  CBR(MXDKY),LOOK(MXLOOK),MODE(5,MXDKY)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      INTEGER IB(4),IC(2),JC(NFLAV,2)				      INTEGER IB(4),IC(2),JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        WRITE(IFCH,101)NTC,SNGL(TTAUS)				        WRITE(IFCH,101)NTC,SNGL(TTAUS)
101     FORMAT(1X,'FUSION INTERACTION --- NT=',I3,' --- TAUS=	101     FORMAT(1X,'FUSION INTERACTION --- NT=',I3,' --- TAUS=
        WRITE(IFCH,115)I,IDPTL(I)				        WRITE(IFCH,115)I,IDPTL(I)
     *                  ,(PPTL(K,I),K=3,5),(XORPTL(K,I),K=3,4	     *                  ,(PPTL(K,I),K=3,5),(XORPTL(K,I),K=3,4
        WRITE(IFCH,115)J,IDPTL(J)				        WRITE(IFCH,115)J,IDPTL(J)
     *                  ,(PPTL(K,J),K=3,5),(XORPTL(K,I),K=3,4	     *                  ,(PPTL(K,J),K=3,5),(XORPTL(K,I),K=3,4
115     FORMAT(1X,'/CPTL/',I6,I10				115     FORMAT(1X,'/CPTL/',I6,I10
     *           ,1X,2(E10.2),E11.3,1X,2(E10.2),2X,I4)		     *           ,1X,2(E10.2),E11.3,1X,2(E10.2),2X,I4)
      ENDIF							      ENDIF

C  INITIALIZATION						C  INITIALIZATION
C  --------------						C  --------------
      IACTN=3							      IACTN=3
      AMF=PPTL(5,NPTL+1)					      AMF=PPTL(5,NPTL+1)
      NPTL=NPTL+1						      NPTL=NPTL+1

C  DETERMINE IDR, IB(1-4)					C  DETERMINE IDR, IB(1-4)
C  ----------------------					C  ----------------------
      IDR=0							      IDR=0
      DO 40 NF=1,NFLAV						      DO 40 NF=1,NFLAV
        IF ( JC(NF,1) .GE. 10 ) IDR=700000000			        IF ( JC(NF,1) .GE. 10 ) IDR=700000000
        IF ( JC(NF,2) .GE. 10 ) IDR=700000000			        IF ( JC(NF,2) .GE. 10 ) IDR=700000000
40    CONTINUE							40    CONTINUE
      IF ( IDR/100000000 .NE. 7 ) THEN				      IF ( IDR/100000000 .NE. 7 ) THEN
        CALL IDENCO(JC,IC,IRETEN)				        CALL IDENCO(JC,IC,IRETEN)
        IF ( IRETEN .EQ. 1 ) THEN				        IF ( IRETEN .EQ. 1 ) THEN
          CALL UTSTOP('JINTFU: IDENCO RET CODE = 1           	          CALL UTSTOP('JINTFU: IDENCO RET CODE = 1           
        ENDIF							        ENDIF
        ID=IDTRA(IC,0,0,3)					        ID=IDTRA(IC,0,0,3)
43      AMC=AMF							43      AMC=AMF
        CALL IDRES(ID,AMC,IDR,IADJ)				        CALL IDRES(ID,AMC,IDR,IADJ)
        IF ( IDR .NE. 0 ) THEN					        IF ( IDR .NE. 0 ) THEN
          LID=LOOK(IABS(IDR))					          LID=LOOK(IABS(IDR))
          IF ( LID.LE.0  .OR.  LID.GT.0 .AND. MODE(2,LID).EQ.	          IF ( LID.LE.0  .OR.  LID.GT.0 .AND. MODE(2,LID).EQ.
            IF ( PPTL(5,NPTL) .GT. AMC+1.E-3 ) THEN		            IF ( PPTL(5,NPTL) .GT. AMC+1.E-3 ) THEN
              AMF=AMF+0.010					              AMF=AMF+0.010
              GOTO 43						              GOTO 43
            ENDIF						            ENDIF
            IF ( ABS(AMC-PPTL(5,NPTL)) .GT. 1.E-3 ) THEN	            IF ( ABS(AMC-PPTL(5,NPTL)) .GT. 1.E-3 ) THEN
              IF ( ISH .GE. 90 ) THEN				              IF ( ISH .GE. 90 ) THEN
                CALL UTMSG('JINTFU')				                CALL UTMSG('JINTFU')
                WRITE(IFCH,*)'*****  NOT ON MASS SHELL AFTER 	                WRITE(IFCH,*)'*****  NOT ON MASS SHELL AFTER 
     *                       ,PPTL(5,NPTL),AMC			     *                       ,PPTL(5,NPTL),AMC
                CALL UTMSGF					                CALL UTMSGF
              ENDIF						              ENDIF
            ENDIF						            ENDIF
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        IF ( IDR .EQ. 0 ) THEN					        IF ( IDR .EQ. 0 ) THEN
          IF ( MOD(IC(1),100).NE.0 .OR. MOD(IC(2),100).NE.0 )	          IF ( MOD(IC(1),100).NE.0 .OR. MOD(IC(2),100).NE.0 )
            IDR=900000000					            IDR=900000000
          ELSE							          ELSE
            IDR=800000000+IC(1)*100+IC(2)/100			            IDR=800000000+IC(1)*100+IC(2)/100
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ELSE							      ELSE
        CALL IDTRBI(JC,IB(1),IB(2),IB(3),IB(4))			        CALL IDTRBI(JC,IB(1),IB(2),IB(3),IB(4))
        IDR=IDR							        IDR=IDR
     *      +MOD(JC(1,1)+JC(2,1)+JC(3,1)+JC(4,1),10000)*10000	     *      +MOD(JC(1,1)+JC(2,1)+JC(3,1)+JC(4,1),10000)*10000
     *      +MOD(JC(1,2)+JC(2,2)+JC(3,2)+JC(4,2),10000)		     *      +MOD(JC(1,2)+JC(2,2)+JC(3,2)+JC(4,2),10000)
        IF ( ISH .GE. 93 ) WRITE(IFCH,*) 'IB:',(IB(KK),KK=1,4	        IF ( ISH .GE. 93 ) WRITE(IFCH,*) 'IB:',(IB(KK),KK=1,4
        IBPTL(1,NPTL)=IB(1)					        IBPTL(1,NPTL)=IB(1)
        IBPTL(2,NPTL)=IB(2)					        IBPTL(2,NPTL)=IB(2)
        IBPTL(3,NPTL)=IB(3)					        IBPTL(3,NPTL)=IB(3)
        IBPTL(4,NPTL)=IB(4)					        IBPTL(4,NPTL)=IB(4)
      ENDIF							      ENDIF

C  FILL /CPTL/							C  FILL /CPTL/
C  -----------							C  -----------
      IDPTL(NPTL)=IDR						      IDPTL(NPTL)=IDR
      XORPTL(1,NPTL)=XAVER(1)					      XORPTL(1,NPTL)=XAVER(1)
      XORPTL(2,NPTL)=XAVER(2)					      XORPTL(2,NPTL)=XAVER(2)
      XORPTL(3,NPTL)=XAVER(3)					      XORPTL(3,NPTL)=XAVER(3)
      XORPTL(4,NPTL)=XAVER(4)					      XORPTL(4,NPTL)=XAVER(4)
      IORPTL(NPTL)=I						      IORPTL(NPTL)=I
      JORPTL(NPTL)=J						      JORPTL(NPTL)=J
      TIVPTL(1,NPTL)=XAVER(4)					      TIVPTL(1,NPTL)=XAVER(4)
      CALL IDTAU(IDPTL(NPTL),PPTL(4,NPTL),PPTL(5,NPTL),TAUGM)	      CALL IDTAU(IDPTL(NPTL),PPTL(4,NPTL),PPTL(5,NPTL),TAUGM)
      TIVPTL(2,NPTL)=TIVPTL(1,NPTL)+TAUGM			      TIVPTL(2,NPTL)=TIVPTL(1,NPTL)+TAUGM
      IFRPTL(1,NPTL)=0						      IFRPTL(1,NPTL)=0
      IFRPTL(2,NPTL)=0						      IFRPTL(2,NPTL)=0
      ICLPTL(NPTL)=1						      ICLPTL(NPTL)=1
      NQJPTL(NPTL)=0						      NQJPTL(NPTL)=0

C  PRINT + RETURN						C  PRINT + RETURN
C  --------------						C  --------------
      IF ( ISH .GE. 91 ) THEN					      IF ( ISH .GE. 91 ) THEN
        N=NPTL							        N=NPTL
        WRITE(IFCH,115)N,IDPTL(N)				        WRITE(IFCH,115)N,IDPTL(N)
     *                  ,(PPTL(K,N),K=3,5),(XORPTL(K,N),K=3,4	     *                  ,(PPTL(K,N),K=3,5),(XORPTL(K,N),K=3,4
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JINTPA(I,J,KMAX)				      SUBROUTINE JINTPA(I,J,KMAX)

C------------------------------------------------------------	C------------------------------------------------------------
C  WRITES PARENTS OF I,J TO IFRIJ(1-KMAX)			C  WRITES PARENTS OF I,J TO IFRIJ(1-KMAX)
C  SETS IAAPTL()=0 FOR PARENTS					C  SETS IAAPTL()=0 FOR PARENTS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXIFR=MXPTL)					      PARAMETER (MXIFR=MXPTL)
      COMMON /CIFRIJ/  IFRIJ(MXIFR)				      COMMON /CIFRIJ/  IFRIJ(MXIFR)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      KCUR=0							      KCUR=0
      KMAX=0							      KMAX=0
      LOOP=0							      LOOP=0
12    LOOP=LOOP+1						12    LOOP=LOOP+1
      IF     ( LOOP .EQ. 1 ) THEN				      IF     ( LOOP .EQ. 1 ) THEN
        N=I							        N=I
      ELSEIF ( LOOP .EQ. 2 ) THEN				      ELSEIF ( LOOP .EQ. 2 ) THEN
        N=J							        N=J
      ENDIF							      ENDIF
      IF ( IORPTL(N) .GT. 0 ) THEN				      IF ( IORPTL(N) .GT. 0 ) THEN
        IF ( ISH .GE. 92 ) WRITE(IFCH,*)N,' <--- ',IORPTL(N),	        IF ( ISH .GE. 92 ) WRITE(IFCH,*)N,' <--- ',IORPTL(N),
        IF ( KMAX+2 .GT. MXIFR ) THEN				        IF ( KMAX+2 .GT. MXIFR ) THEN
          CALL UTSTOP('JINTPA: KMAX+2 > MXIFR                	          CALL UTSTOP('JINTPA: KMAX+2 > MXIFR                
        ENDIF							        ENDIF
        IF ( IAAPTL(IORPTL(N)) .NE. 0 ) THEN			        IF ( IAAPTL(IORPTL(N)) .NE. 0 ) THEN
          KMAX=KMAX+1						          KMAX=KMAX+1
          IFRIJ(KMAX)=IORPTL(N)					          IFRIJ(KMAX)=IORPTL(N)
          IAAPTL(IORPTL(N))=0					          IAAPTL(IORPTL(N))=0
        ENDIF							        ENDIF
        IF ( JORPTL(N) .GT. 0 ) THEN				        IF ( JORPTL(N) .GT. 0 ) THEN
          IF ( IAAPTL(JORPTL(N)) .NE. 0 ) THEN			          IF ( IAAPTL(JORPTL(N)) .NE. 0 ) THEN
            KMAX=KMAX+1						            KMAX=KMAX+1
            IFRIJ(KMAX)=JORPTL(N)				            IFRIJ(KMAX)=JORPTL(N)
            IAAPTL(JORPTL(N))=0					            IAAPTL(JORPTL(N))=0
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( LOOP .EQ. 1 ) GOTO 12				      IF ( LOOP .EQ. 1 ) GOTO 12
8     KCUR=KCUR+1						8     KCUR=KCUR+1
      IF ( KCUR .LE. KMAX ) THEN				      IF ( KCUR .LE. KMAX ) THEN
        N=IFRIJ(KCUR)						        N=IFRIJ(KCUR)
        IF ( IAAPTL(N) .NE. 0 ) THEN				        IF ( IAAPTL(N) .NE. 0 ) THEN
          CALL UTSTOP('JINTPA: SHOULD NOT HAPPEN             	          CALL UTSTOP('JINTPA: SHOULD NOT HAPPEN             
        ENDIF							        ENDIF
        GOTO 12							        GOTO 12
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JRESCL(J1,J2,PSUM,IFAIL)			      SUBROUTINE JRESCL(J1,J2,PSUM,IFAIL)

C------------------------------------------------------------	C------------------------------------------------------------
C  RESCALES PTL MOMENTA OF PTLS J1-J2 TO HAVE TOTAL MOM PSUM.	C  RESCALES PTL MOMENTA OF PTLS J1-J2 TO HAVE TOTAL MOM PSUM.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CSCAL/   SCAL					      COMMON /CSCAL/   SCAL
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION ENE,PADD(5),PP(5),PPSUM(5)		      DOUBLE PRECISION ENE,PADD(5),PP(5),PPSUM(5)
      REAL             PSUM(5)					      REAL             PSUM(5)
      DATA ERRLIM/.001/						      DATA ERRLIM/.001/
C------------------------------------------------------------	C------------------------------------------------------------
      IFAIL=1							      IFAIL=1

      IF ( J1 .GE. J2 ) THEN					      IF ( J1 .GE. J2 ) THEN
        CALL UTSTOP('JRESCL: J1 .GE. J2                      	        CALL UTSTOP('JRESCL: J1 .GE. J2                      
      ENDIF							      ENDIF

      DO 100 K=1,5						      DO 100 K=1,5
        PPSUM(K)=PSUM(K)					        PPSUM(K)=PSUM(K)
        PADD(K)=0.D0						        PADD(K)=0.D0
100   CONTINUE							100   CONTINUE
      DO 110 J=J1,J2						      DO 110 J=J1,J2
        DO 110 K=1,5						        DO 110 K=1,5
          PADD(K)=PADD(K)+PPTL(K,J)				          PADD(K)=PADD(K)+PPTL(K,J)
110   CONTINUE							110   CONTINUE
      IF ( PADD (5) .GE. PPSUM(5) ) THEN			      IF ( PADD (5) .GE. PPSUM(5) ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JRESCL')					          CALL UTMSG('JRESCL')
          WRITE(IFCH,*)'*****  SUM OF PTL MASSES .GE. PPSUM(5	          WRITE(IFCH,*)'*****  SUM OF PTL MASSES .GE. PPSUM(5
          DO 1 J=J1,J2						          DO 1 J=J1,J2
            WRITE(IFCH,109)J,IDPTL(J),(PPTL(L,J),L=3,5)		            WRITE(IFCH,109)J,IDPTL(J),(PPTL(L,J),L=3,5)
109         FORMAT(' /CPTL/',I6,I10,3(E11.3))			109         FORMAT(' /CPTL/',I6,I10,3(E11.3))
 1        CONTINUE						 1        CONTINUE
          WRITE(IFCH,*)'PPSUM(345):',(SNGL(PPSUM(K)),K=3,5)	          WRITE(IFCH,*)'PPSUM(345):',(SNGL(PPSUM(K)),K=3,5)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        RETURN							        RETURN
      ENDIF							      ENDIF
      PADD(5)=PADD(4)**2-PADD(1)**2-PADD(2)**2-PADD(3)**2	      PADD(5)=PADD(4)**2-PADD(1)**2-PADD(2)**2-PADD(3)**2
      IF ( PADD(5) .LE. 0.D0 ) THEN				      IF ( PADD(5) .LE. 0.D0 ) THEN
        ENE = 0.D0						        ENE = 0.D0
        DO 111 J=J1,J2						        DO 111 J=J1,J2
          ENE = ENE + DSQRT( PPTL(1,J)**2 + PPTL(2,J)**2	          ENE = ENE + DSQRT( PPTL(1,J)**2 + PPTL(2,J)**2
     *                + DBLE(PPTL(3,J))**2 + PPTL(5,J)**2 )	     *                + DBLE(PPTL(3,J))**2 + PPTL(5,J)**2 )
111     CONTINUE						111     CONTINUE
        PADD(5) = ENE**2 - PADD(1)**2 - PADD(2)**2 - PADD(3)*	        PADD(5) = ENE**2 - PADD(1)**2 - PADD(2)**2 - PADD(3)*
        IF ( PADD(5) .LE. 0.D0 ) THEN				        IF ( PADD(5) .LE. 0.D0 ) THEN
          DO 2 J=J1,J2						          DO 2 J=J1,J2
            WRITE(IFCH,108)J,(PPTL(L,J),L=1,5)			            WRITE(IFCH,108)J,(PPTL(L,J),L=1,5)
108         FORMAT(' /CPTL/',I4,5(E11.3))			108         FORMAT(' /CPTL/',I4,5(E11.3))
 2        CONTINUE						 2        CONTINUE
          CALL UTSTOP('JRESCL: MASS**2 OF STRING-SUM NEGATIVE	          CALL UTSTOP('JRESCL: MASS**2 OF STRING-SUM NEGATIVE
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      PADD(5)=SQRT(PADD(5))					      PADD(5)=SQRT(PADD(5))

C  BOOST PTLS TO REST						C  BOOST PTLS TO REST
C  ------------------						C  ------------------
      DO 200 J=J1,J2						      DO 200 J=J1,J2
        PP(1)=PPTL(1,J)						        PP(1)=PPTL(1,J)
        PP(2)=PPTL(2,J)						        PP(2)=PPTL(2,J)
        PP(3)=PPTL(3,J)						        PP(3)=PPTL(3,J)
        PP(4)=PPTL(4,J)						        PP(4)=PPTL(4,J)
        CALL UTLOB2(1,PADD(1),PADD(2),PADD(3),PADD(4),PADD(5)	        CALL UTLOB2(1,PADD(1),PADD(2),PADD(3),PADD(4),PADD(5)
     *                 ,PP(1),PP(2),PP(3),PP(4))		     *                 ,PP(1),PP(2),PP(3),PP(4))
        PPTL(1,J)=PP(1)						        PPTL(1,J)=PP(1)
        PPTL(2,J)=PP(2)						        PPTL(2,J)=PP(2)
        PPTL(3,J)=PP(3)						        PPTL(3,J)=PP(3)
        PPTL(4,J)=PP(4)						        PPTL(4,J)=PP(4)
200   CONTINUE							200   CONTINUE

C  RESCALE MOMENTA IN REST FRAME				C  RESCALE MOMENTA IN REST FRAME
C  -----------------------------				C  -----------------------------
      SCAL=1.							      SCAL=1.
      DO 301 IPASS=1,200					      DO 301 IPASS=1,200
        SUM=0.							        SUM=0.
        DO 310 J=J1,J2						        DO 310 J=J1,J2
          PPTL(1,J)=SCAL*PPTL(1,J)				          PPTL(1,J)=SCAL*PPTL(1,J)
          PPTL(2,J)=SCAL*PPTL(2,J)				          PPTL(2,J)=SCAL*PPTL(2,J)
          PPTL(3,J)=SCAL*PPTL(3,J)				          PPTL(3,J)=SCAL*PPTL(3,J)
          PPTL(4,J)=SQRT(PPTL(1,J)**2+PPTL(2,J)**2+PPTL(3,J)*	          PPTL(4,J)=SQRT(PPTL(1,J)**2+PPTL(2,J)**2+PPTL(3,J)*
     *                  +PPTL(5,J)**2)				     *                  +PPTL(5,J)**2)
          SUM=SUM+PPTL(4,J)					          SUM=SUM+PPTL(4,J)
310     CONTINUE						310     CONTINUE
        SCAL=PSUM(5)/SUM					        SCAL=PSUM(5)/SUM
        IF ( ABS(SCAL-1.) .LE. ERRLIM ) GOTO 300		        IF ( ABS(SCAL-1.) .LE. ERRLIM ) GOTO 300
301   CONTINUE							301   CONTINUE
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('JRESCL')					        CALL UTMSG('JRESCL')
        WRITE(IFCH,*)'*****  SCAL=',SCAL			        WRITE(IFCH,*)'*****  SCAL=',SCAL
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
300   CONTINUE							300   CONTINUE

C  BOOST BACK WITH PPSUM					C  BOOST BACK WITH PPSUM
C  ---------------------					C  ---------------------
      DO 330 J=J1,J2						      DO 330 J=J1,J2
        PP(1)=PPTL(1,J)						        PP(1)=PPTL(1,J)
        PP(2)=PPTL(2,J)						        PP(2)=PPTL(2,J)
        PP(3)=PPTL(3,J)						        PP(3)=PPTL(3,J)
        PP(4)=PPTL(4,J)						        PP(4)=PPTL(4,J)
        CALL UTLOB2(-1,PPSUM(1),PPSUM(2),PPSUM(3),PPSUM(4),PP	        CALL UTLOB2(-1,PPSUM(1),PPSUM(2),PPSUM(3),PPSUM(4),PP
     *                   ,PP(1),PP(2),PP(3),PP(4))		     *                   ,PP(1),PP(2),PP(3),PP(4))
        PPTL(1,J)=PP(1)						        PPTL(1,J)=PP(1)
        PPTL(2,J)=PP(2)						        PPTL(2,J)=PP(2)
        PPTL(3,J)=PP(3)						        PPTL(3,J)=PP(3)
        PPTL(4,J)=PP(4)						        PPTL(4,J)=PP(4)
330   CONTINUE							330   CONTINUE

      IFAIL=0							      IFAIL=0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE JSPLIT(STRO,STR,KOLSP,IER,KMAXOR)		      SUBROUTINE JSPLIT(STRO,STR,KOLSP,IER,KMAXOR)

C------------------------------------------------------------	C------------------------------------------------------------
C  SPLITS STRING STRO INTO Q-QBAR STRING STR AND REMAINDER (-	C  SPLITS STRING STRO INTO Q-QBAR STRING STR AND REMAINDER (-
C  DIMENSIONS: STRO(NSI,NSIX+1),STR(NSI,2)			C  DIMENSIONS: STRO(NSI,NSIX+1),STR(NSI,2)
C  IER=0: OK ; IER=1: ERROR ; IER=2: ABSORPTION ;		C  IER=0: OK ; IER=1: ERROR ; IER=2: ABSORPTION ;
C  IER=3: AGAIN WITH NEW APART, EPART				C  IER=3: AGAIN WITH NEW APART, EPART
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NPTF=129)					      PARAMETER (NPTF=129)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      PARAMETER (NSPLIT=129)					      PARAMETER (NSPLIT=129)
      COMMON /CJSPLI/  ALEAD,APART,ELEAD,EPART,SGNSIL,JPART,N	      COMMON /CJSPLI/  ALEAD,APART,ELEAD,EPART,SGNSIL,JPART,N
      COMMON /CNFUSN/  NFUSN(NSIX+1)				      COMMON /CNFUSN/  NFUSN(NSIX+1)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTF/    FPTFS,FPTFSS,FPTFU,FPTFUS,FPTFUU		      COMMON /CPTF/    FPTFS,FPTFSS,FPTFU,FPTFUS,FPTFUU
     *                ,QPTFS(NPTF),QPTFSS(NPTF),QPTFU(NPTF),Q	     *                ,QPTFS(NPTF),QPTFSS(NPTF),QPTFU(NPTF),Q
     *                ,QPTFUU(NPTF),XPTF(NPTF)			     *                ,QPTFUU(NPTF),XPTF(NPTF)
      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL			      COMMON /CPZSTR/  ESTRL,PZSTRL,ISEA,ISTRL
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS			      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS

      DOUBLE PRECISION A,D,DAUXIL,PAM,PAP,PEM,PEP,PIM,PIP,PNL	      DOUBLE PRECISION A,D,DAUXIL,PAM,PAP,PEM,PEP,PIM,PIP,PNL
     *                ,PM,PO(5),POM,POP,POT,POX,POY,PO123,PP	     *                ,PM,PO(5),POM,POP,POT,POX,POY,PO123,PP
     *                ,PUM,PUP,PUT,PUX,PUY,PYM,PYP,SSTR(NSI,2	     *                ,PUM,PUP,PUT,PUX,PUY,PYM,PYP,SSTR(NSI,2
      REAL             STR(NSI,2),STRO(NSI,NSIX+1),STRO0(NSI,	      REAL             STR(NSI,2),STRO(NSI,NSIX+1),STRO0(NSI,
      INTEGER          IC(2),ICX(2),JC(NFLAV,2),JCX(NFLAV,2)	      INTEGER          IC(2),ICX(2),JC(NFLAV,2),JCX(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      PUDX=PUD*.945						      PUDX=PUD*.945
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 15 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 15 ) ISH=MOD(ISHSUB,100)

      CALL UTKSTR(STRO,KMAX)					      CALL UTKSTR(STRO,KMAX)
      IF ( KMAX .EQ. KMAXOR ) THEN				      IF ( KMAX .EQ. KMAXOR ) THEN
        NSCC=0							        NSCC=0
        IF ( JPART .EQ. 0 ) THEN				        IF ( JPART .EQ. 0 ) THEN
          DO  5 I=1,KMAXOR					          DO  5 I=1,KMAXOR
            NFUSN(I)=0						            NFUSN(I)=0
 5        CONTINUE						 5        CONTINUE
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      KMAX0=KMAX						      KMAX0=KMAX
      DO 10 K=1,KMAX						      DO 10 K=1,KMAX
        DO 10 I=1,NSI						        DO 10 I=1,NSI
          STRO0(I,K)=STRO(I,K)					          STRO0(I,K)=STRO(I,K)
10    CONTINUE							10    CONTINUE
C-C   PDIQ=PDIQUA*0.5						C-C   PDIQ=PDIQUA*0.5
C-C   IF ( KMAXOR .GT. KUTDIQ ) PDIQ=0.				C-C   IF ( KMAXOR .GT. KUTDIQ ) PDIQ=0.
C-C   PDIQ=PDIQUA*0.5*NSCCX/(KMAXOR-1.)				C-C   PDIQ=PDIQUA*0.5*NSCCX/(KMAXOR-1.)
      PDIQ=0.							      PDIQ=0.
      LOOP=0							      LOOP=0
      NCORN=0							      NCORN=0
      XUNTER=0.							      XUNTER=0.
      XOBER=1.							      XOBER=1.
      MESSCO=0							      MESSCO=0
      IF ( SGNSIL .LT. 0. ) THEN				      IF ( SGNSIL .LT. 0. ) THEN
        KOLSP=KTARGA(KMAX+1,ITARG)				        KOLSP=KTARGA(KMAX+1,ITARG)
      ELSE							      ELSE
        KOLSP=KPROJA(KMAX+1,IPROJ)				        KOLSP=KPROJA(KMAX+1,IPROJ)
      ENDIF							      ENDIF
      PAP=2.D0*EPART						      PAP=2.D0*EPART
      PAM=0.D0							      PAM=0.D0
      PUX=STRO(1,KMAX)						      PUX=STRO(1,KMAX)
      PUY=STRO(2,KMAX)						      PUY=STRO(2,KMAX)
      PUT=SQRT(PUX**2+PUY**2)					      PUT=SQRT(PUX**2+PUY**2)
      PUP=STRO(4,KMAX)-ABS(STRO(3,KMAX))			      PUP=STRO(4,KMAX)-ABS(STRO(3,KMAX))
      PUM=STRO(4,KMAX)+ABS(STRO(3,KMAX))			      PUM=STRO(4,KMAX)+ABS(STRO(3,KMAX))

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)		        IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)'MULTI-STRING DETECTED. SPLIT OFF Q-QBAR	        WRITE(IFCH,*)'MULTI-STRING DETECTED. SPLIT OFF Q-QBAR
        IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)		        IF ( ISH .GE. 93 ) WRITE(IFCH,*)('-',L=1,79)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,*)'INPUT STRING STRO:'			          WRITE(IFCH,*)'INPUT STRING STRO:'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I	          WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I
          DO 8 K=2,KMAX						          DO 8 K=2,KMAX
            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))	            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))
 8        CONTINUE						 8        CONTINUE
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
      ENDIF							      ENDIF

C  ABSORPTION							C  ABSORPTION
C  ----------							C  ----------
      IF ( ISTRL .EQ. 1 ) GOTO 1002				      IF ( ISTRL .EQ. 1 ) GOTO 1002

C  RESET							C  RESET
C  -----							C  -----
5001  LOOP=0							5001  LOOP=0
5000  LOOP=LOOP+1						5000  LOOP=LOOP+1
      IF ( LOOP .GE. 5 ) GOTO 1002				      IF ( LOOP .GE. 5 ) GOTO 1002
      KMAX=KMAX0						      KMAX=KMAX0
      DO 11 I=1,NSI						      DO 11 I=1,NSI
        DO 11 K=1,KMAX						        DO 11 K=1,KMAX
        STRO(I,K)=STRO0(I,K)					        STRO(I,K)=STRO0(I,K)
11    CONTINUE							11    CONTINUE

C  SPLIT OFF HADRON + DETERMINE REMAINDER STRING (MOMENTA)	C  SPLIT OFF HADRON + DETERMINE REMAINDER STRING (MOMENTA)
C  -------------------------------------------------------	C  -------------------------------------------------------
      IF ( RANGEN() .LT. PDIQ ) THEN				      IF ( RANGEN() .LT. PDIQ ) THEN
        NQU=2							        NQU=2
      ELSE							      ELSE
        NQU=1							        NQU=1
      ENDIF							      ENDIF
      IFLTT=0							      IFLTT=0
      IFLTO=0							      IFLTO=0
      DO 24 I=1,NQU						      DO 24 I=1,NQU
        IFL=INT(RANGEN()/PUDX)+1				        IFL=INT(RANGEN()/PUDX)+1
        IFLTO=IFLTO*10+IFL					        IFLTO=IFLTO*10+IFL
        IFLTT=IFLTT*10+(IFL+1)/2				        IFLTT=IFLTT*10+(IFL+1)/2
24    CONTINUE							24    CONTINUE
      R=RANGEN()						      R=RANGEN()
      IF     ( IFLTT .EQ. 1 ) THEN				      IF     ( IFLTT .EQ. 1 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFU ,R*QPTFU(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFU ,R*QPTFU(NPTF))
C##       WRITE(IFCH,*)'JSPLIT:PT(OLD)=',PT			C##       WRITE(IFCH,*)'JSPLIT:PT(OLD)=',PT
        ELSE							        ELSE
          RPT = R*FPTFU						          RPT = R*FPTFU
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(1.+RPT*2./AUXIL))			          PT=SQRT(AUXIL*LOG(1.+RPT*2./AUXIL))
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 2 ) THEN				      ELSEIF ( IFLTT .EQ. 2 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFS ,R*QPTFS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFS ,R*QPTFS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFS						          RPT = R*FPTFS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP( SMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP( SMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 11 ) THEN				      ELSEIF ( IFLTT .EQ. 11 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFUU,R*QPTFUU(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFUU,R*QPTFUU(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFUU					          RPT = R*FPTFUU
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(UUMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(UUMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 12  .OR.  IFLTT .EQ. 21 ) THEN	      ELSEIF ( IFLTT .EQ. 12  .OR.  IFLTT .EQ. 21 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFUS,R*QPTFUS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFUS,R*QPTFUS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFUS					          RPT = R*FPTFUS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(USMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(USMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ELSEIF ( IFLTT .EQ. 22 ) THEN				      ELSEIF ( IFLTT .EQ. 22 ) THEN
        IF ( IOPTF .EQ. 1 ) THEN				        IF ( IOPTF .EQ. 1 ) THEN
          PT=UTINVT(NPTF,XPTF,QPTFSS,R*QPTFSS(NPTF))		          PT=UTINVT(NPTF,XPTF,QPTFSS,R*QPTFSS(NPTF))
        ELSE							        ELSE
          RPT = R*FPTFSS					          RPT = R*FPTFSS
          AUXIL=-4.*PTF**2/PI					          AUXIL=-4.*PTF**2/PI
          PT=SQRT(AUXIL*LOG(EXP(SSMAS**2/AUXIL)+RPT*2./AUXIL)	          PT=SQRT(AUXIL*LOG(EXP(SSMAS**2/AUXIL)+RPT*2./AUXIL)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      AT=SQRT(APART**2+PT**2)					      AT=SQRT(APART**2+PT**2)
      R=RANGEN()						      R=RANGEN()
      AUXIL=2.*R-1.						      AUXIL=2.*R-1.
      IF ( AUXIL .LT. 0. ) THEN					      IF ( AUXIL .LT. 0. ) THEN
        X = SQRT( 0.5-COS( (ACOS(-AUXIL)+PI)*.33333333 ) )	        X = SQRT( 0.5-COS( (ACOS(-AUXIL)+PI)*.33333333 ) )
      ELSE							      ELSE
        X = SQRT( 0.5+COS( (ACOS(AUXIL)+PI)*.33333333 ) )	        X = SQRT( 0.5+COS( (ACOS(AUXIL)+PI)*.33333333 ) )
      ENDIF							      ENDIF
      IF ( ESTRL .LE. ABS(PZSTRL) ) THEN			      IF ( ESTRL .LE. ABS(PZSTRL) ) THEN
        XUNTER=1.						        XUNTER=1.
      ELSE							      ELSE
        YSTRL=.5*LOG((ESTRL+PZSTRL)/(ESTRL-PZSTRL))		        YSTRL=.5*LOG((ESTRL+PZSTRL)/(ESTRL-PZSTRL))
        XUNTER=ABS(0.94*SINH(YSTRL))/EPART			        XUNTER=ABS(0.94*SINH(YSTRL))/EPART
        IF ( XUNTER .GT. 1. ) XUNTER=1.				        IF ( XUNTER .GT. 1. ) XUNTER=1.
      ENDIF							      ENDIF
      XUNTER=XUNTER-(XOBER-XUNTER)				      XUNTER=XUNTER-(XOBER-XUNTER)
      X=XUNTER+X*(XOBER-XUNTER)					      X=XUNTER+X*(XOBER-XUNTER)
C-C   EN=APART+X*(EPART-APART)					C-C   EN=APART+X*(EPART-APART)
      PZ=X*EPART						      PZ=X*EPART
      IF ( PZ .LT. 0. ) THEN					      IF ( PZ .LT. 0. ) THEN
        SGNPO=-1.						        SGNPO=-1.
      ELSE							      ELSE
        SGNPO=1.						        SGNPO=1.
      ENDIF							      ENDIF
      EN=SQRT(PZ**2+AT**2)					      EN=SQRT(PZ**2+AT**2)
C-C   IF ( AT .GT. EN ) AT=APART+RANGEN()*(EN-APART)		C-C   IF ( AT .GT. EN ) AT=APART+RANGEN()*(EN-APART)
C-C   PT=SQRT((AT-APART)*(AT+APART))				C-C   PT=SQRT((AT-APART)*(AT+APART))
      PHI=2.*PI*RANGEN()					      PHI=2.*PI*RANGEN()
      PO(1)=PT*COS(PHI)						      PO(1)=PT*COS(PHI)
      PO(2)=PT*SIN(PHI)						      PO(2)=PT*SIN(PHI)
C-C   PO(3)=SGNSIL*SQRT(EN**2-AT**2)				C-C   PO(3)=SGNSIL*SQRT(EN**2-AT**2)
      PO(3)=SGNSIL*PZ						      PO(3)=SGNSIL*PZ
      PO(4)=EN							      PO(4)=EN
      PO123=SQRT(PO(3)**2+PO(2)**2+PO(1)**2)			      PO123=SQRT(PO(3)**2+PO(2)**2+PO(1)**2)
      IF ( PO(4)-PO123 .GT. 0.D0 ) THEN				      IF ( PO(4)-PO123 .GT. 0.D0 ) THEN
        PO(5)=SQRT((PO(4)-PO123)*(PO(4)+PO123))			        PO(5)=SQRT((PO(4)-PO123)*(PO(4)+PO123))
      ELSE							      ELSE
        PO(5)=0.D0						        PO(5)=0.D0
        IF ( PO(4)-PO123 .LT. -1.D-4*PO(4) ) THEN		        IF ( PO(4)-PO123 .LT. -1.D-4*PO(4) ) THEN
          IF(ISH.GE.90)THEN					          IF(ISH.GE.90)THEN
            CALL UTMSG('JSPLIT')				            CALL UTMSG('JSPLIT')
            WRITE(IFCH,*)'*****  !PO123! > PO4'			            WRITE(IFCH,*)'*****  !PO123! > PO4'
            WRITE(IFCH,*)'PO123,PO4:',PO123,PO(4)		            WRITE(IFCH,*)'PO123,PO4:',PO123,PO(4)
            WRITE(IFCH,*)'PO1:',PO(1)				            WRITE(IFCH,*)'PO1:',PO(1)
            WRITE(IFCH,*)'PO2:',PO(2)				            WRITE(IFCH,*)'PO2:',PO(2)
            WRITE(IFCH,*)'PO3:',PO(3)				            WRITE(IFCH,*)'PO3:',PO(3)
            WRITE(IFCH,*)'PO5:',PO(5)				            WRITE(IFCH,*)'PO5:',PO(5)
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      POX=PO(1)							      POX=PO(1)
      POY=PO(2)							      POY=PO(2)
      POT=SQRT(POX**2+POY**2)					      POT=SQRT(POX**2+POY**2)
      POP=PO(4)+ABS(PO(3))*SGNPO				      POP=PO(4)+ABS(PO(3))*SGNPO
      POM=PO(4)-ABS(PO(3))*SGNPO				      POM=PO(4)-ABS(PO(3))*SGNPO
      STRO(1,1)=STRO(1,1)+PO(1)					      STRO(1,1)=STRO(1,1)+PO(1)
      STRO(2,1)=STRO(2,1)+PO(2)					      STRO(2,1)=STRO(2,1)+PO(2)
      STRO(3,1)=STRO(3,1)-EPART*SGNSIL +PO(3)			      STRO(3,1)=STRO(3,1)-EPART*SGNSIL +PO(3)
      STRO(4,1)=STRO(4,1)-EPART +PO(4)				      STRO(4,1)=STRO(4,1)-EPART +PO(4)
      STRO(1,KMAX)=0.						      STRO(1,KMAX)=0.
      STRO(2,KMAX)=0.						      STRO(2,KMAX)=0.
      STRO(3,KMAX)=0.						      STRO(3,KMAX)=0.
      STRO(4,KMAX)=0.						      STRO(4,KMAX)=0.
      IF ( PO(4)-ABS(PO(3)) .GT. 0.D0 ) THEN			      IF ( PO(4)-ABS(PO(3)) .GT. 0.D0 ) THEN
        YLD=0.5*LOG((PO(4)+ABS(PO(3)))/(PO(4)-ABS(PO(3))))	        YLD=0.5*LOG((PO(4)+ABS(PO(3)))/(PO(4)-ABS(PO(3))))
      ELSE							      ELSE
        YLD=100.						        YLD=100.
      ENDIF							      ENDIF

C  DETERMINE SPLIT STRING (MOMENTA)				C  DETERMINE SPLIT STRING (MOMENTA)
C  --------------------------------				C  --------------------------------
      PP=PAP+PUP						      PP=PAP+PUP
      PM=PAM+PUM						      PM=PAM+PUM
      PEP=PP-POP						      PEP=PP-POP
      PEM=PM-POM						      PEM=PM-POM
      IF ( PEP .LE. 0.D0 ) GOTO 5000				      IF ( PEP .LE. 0.D0 ) GOTO 5000
      IF ( PEM .LE. 0.D0 ) GOTO 5000				      IF ( PEM .LE. 0.D0 ) GOTO 5000
      A=(PEM*PEP-PUT**2-POT**2)*0.5D0				      A=(PEM*PEP-PUT**2-POT**2)*0.5D0
      D=PUT*POT							      D=PUT*POT
      DAUXIL = A**2-D**2					      DAUXIL = A**2-D**2
      IF ( DAUXIL .LT. 0.D0 ) GOTO 5000				      IF ( DAUXIL .LT. 0.D0 ) GOTO 5000
      DAUXIL=SQRT(DAUXIL)					      DAUXIL=SQRT(DAUXIL)
      PYP=A+PUT**2-DAUXIL					      PYP=A+PUT**2-DAUXIL
      IF ( PYP .LT. 0.D0  .AND.  PYP .GT. -1.D-6 ) PYP=0.D0	      IF ( PYP .LT. 0.D0  .AND.  PYP .GT. -1.D-6 ) PYP=0.D0
      PYP=PYP/PEM						      PYP=PYP/PEM
      PYM=A+POT**2-DAUXIL					      PYM=A+POT**2-DAUXIL
      IF ( PYM .LT. 0.D0  .AND.  PYM .GT. -1.D-6 ) PYM=0.D0	      IF ( PYM .LT. 0.D0  .AND.  PYM .GT. -1.D-6 ) PYM=0.D0
      PYM=PYM/PEP						      PYM=PYM/PEP
      IF ( PYP .LT. 0.D0 ) GOTO 5000				      IF ( PYP .LT. 0.D0 ) GOTO 5000
      IF ( PYM .LT. 0.D0 ) GOTO 5000				      IF ( PYM .LT. 0.D0 ) GOTO 5000
      PIP=PEP-PYP						      PIP=PEP-PYP
      IF ( PIP .LT. 0.D0 ) GOTO 5000				      IF ( PIP .LT. 0.D0 ) GOTO 5000
      PIM=PYM							      PIM=PYM
      PAP=PYP							      PAP=PYP
      PAM=PEM-PYM						      PAM=PEM-PYM
      IF ( PAM .LT. 0.D0 ) GOTO 5000				      IF ( PAM .LT. 0.D0 ) GOTO 5000
      SSTR(1,1)=-POX						      SSTR(1,1)=-POX
      SSTR(2,1)=-POY						      SSTR(2,1)=-POY
      SSTR(3,1)=SGNSIL*(PIP-PIM)*0.5D0				      SSTR(3,1)=SGNSIL*(PIP-PIM)*0.5D0
      SSTR(4,1)=(PIP+PIM)*0.5D0					      SSTR(4,1)=(PIP+PIM)*0.5D0
      SSTR(1,2)=PUX						      SSTR(1,2)=PUX
      SSTR(2,2)=PUY						      SSTR(2,2)=PUY
      SSTR(3,2)=SGNSIL*(PAP-PAM)*0.5D0				      SSTR(3,2)=SGNSIL*(PAP-PAM)*0.5D0
      SSTR(4,2)=(PAP+PAM)*0.5D0					      SSTR(4,2)=(PAP+PAM)*0.5D0
      PNL3=SSTR(3,1)+SSTR(3,2)					      PNL3=SSTR(3,1)+SSTR(3,2)
      PNL4=SSTR(4,1)+SSTR(4,2)					      PNL4=SSTR(4,1)+SSTR(4,2)
      IF ( PNL4-ABS(PNL3) .NE. 0. ) THEN			      IF ( PNL4-ABS(PNL3) .NE. 0. ) THEN
        YNL=0.5*LOG((PNL4+ABS(PNL3))/(PNL4-ABS(PNL3)))		        YNL=0.5*LOG((PNL4+ABS(PNL3))/(PNL4-ABS(PNL3)))
      ELSE							      ELSE
        YNL=100.						        YNL=100.
      ENDIF							      ENDIF
      STR(1,1)=SSTR(1,1)					      STR(1,1)=SSTR(1,1)
      STR(2,1)=SSTR(2,1)					      STR(2,1)=SSTR(2,1)
      STR(3,1)=SSTR(3,1)					      STR(3,1)=SSTR(3,1)
      STR(4,1)=SSTR(4,1)					      STR(4,1)=SSTR(4,1)
      STR(1,2)=SSTR(1,2)					      STR(1,2)=SSTR(1,2)
      STR(2,2)=SSTR(2,2)					      STR(2,2)=SSTR(2,2)
      STR(3,2)=SSTR(3,2)					      STR(3,2)=SSTR(3,2)
      STR(4,2)=SSTR(4,2)					      STR(4,2)=SSTR(4,2)

C  CHECKS							C  CHECKS
C  ------							C  ------
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( ABS(PIP*PIM-POT**2) .GT. 1.D-4 ) THEN		        IF ( ABS(PIP*PIM-POT**2) .GT. 1.D-4 ) THEN
          CALL UTMSG('JSPLIT')					          CALL UTMSG('JSPLIT')
          WRITE(IFCH,*)'*****  PIP*PIM /= POT**2'		          WRITE(IFCH,*)'*****  PIP*PIM /= POT**2'
          WRITE(IFCH,*)'PIP*PIM=',PIP*PIM			          WRITE(IFCH,*)'PIP*PIM=',PIP*PIM
          WRITE(IFCH,*)'POT**2=',POT**2				          WRITE(IFCH,*)'POT**2=',POT**2
          WRITE(IFCH,*)'PIP=',PIP				          WRITE(IFCH,*)'PIP=',PIP
          WRITE(IFCH,*)'PIM=',PIM				          WRITE(IFCH,*)'PIM=',PIM
          WRITE(IFCH,*)'POT=',POT				          WRITE(IFCH,*)'POT=',POT
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ABS(PAP*PAM-PUT**2) .GT. 1.D-4 ) THEN		        IF ( ABS(PAP*PAM-PUT**2) .GT. 1.D-4 ) THEN
          CALL UTMSG('JSPLIT')					          CALL UTMSG('JSPLIT')
          WRITE(IFCH,*)'*****  PAP*PAM /= PUT**2'		          WRITE(IFCH,*)'*****  PAP*PAM /= PUT**2'
          WRITE(IFCH,*)'PAP*PAM=',PAP*PAM			          WRITE(IFCH,*)'PAP*PAM=',PAP*PAM
          WRITE(IFCH,*)'PUT**2=',PUT**2				          WRITE(IFCH,*)'PUT**2=',PUT**2
          WRITE(IFCH,*)'PAP=',PAP				          WRITE(IFCH,*)'PAP=',PAP
          WRITE(IFCH,*)'PAM=',PAM				          WRITE(IFCH,*)'PAM=',PAM
          WRITE(IFCH,*)'PUT=',PUT				          WRITE(IFCH,*)'PUT=',PUT
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ABS(SSTR(4,1)**2					        IF ( ABS(SSTR(4,1)**2
     *     -SSTR(1,1)**2-SSTR(2,1)**2-SSTR(3,1)**2) .GT. 1.D-	     *     -SSTR(1,1)**2-SSTR(2,1)**2-SSTR(3,1)**2) .GT. 1.D-
          CALL UTMSG('JSPLIT')					          CALL UTMSG('JSPLIT')
          WRITE(IFCH,*)'*****  MASS**2 OF STRING END 1 NONZER	          WRITE(IFCH,*)'*****  MASS**2 OF STRING END 1 NONZER
          WRITE(IFCH,*)'MASS**2=',SSTR(4,1)**2			          WRITE(IFCH,*)'MASS**2=',SSTR(4,1)**2
     *                         -SSTR(1,1)**2-SSTR(2,1)**2-SST	     *                         -SSTR(1,1)**2-SSTR(2,1)**2-SST
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ABS(SSTR(4,2)**2					        IF ( ABS(SSTR(4,2)**2
     *     -SSTR(1,2)**2-SSTR(2,2)**2-SSTR(3,2)**2) .GT. 1.D-	     *     -SSTR(1,2)**2-SSTR(2,2)**2-SSTR(3,2)**2) .GT. 1.D-
          CALL UTMSG('JSPLIT')					          CALL UTMSG('JSPLIT')
          WRITE(IFCH,*)'*****  MASS**2 OF STRING END 2 NONZER	          WRITE(IFCH,*)'*****  MASS**2 OF STRING END 2 NONZER
          WRITE(IFCH,*)'MASS**2=',SSTR(4,2)**2			          WRITE(IFCH,*)'MASS**2=',SSTR(4,2)**2
     *                         -SSTR(1,2)**2-SSTR(2,2)**2-SST	     *                         -SSTR(1,2)**2-SSTR(2,2)**2-SST
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        DO 14 N=1,4						        DO 14 N=1,4

          IF ( ABS(STR(N,1)+STRO(N,1)-STRO0(N,1)		          IF ( ABS(STR(N,1)+STRO(N,1)-STRO0(N,1)
     *            +STR(N,2)+STRO(N,KMAX)-STRO0(N,KMAX)) .GT. 	     *            +STR(N,2)+STRO(N,KMAX)-STRO0(N,KMAX)) .GT. 
     *      .AND.  ABS(STR(N,1)+STRO(N,1)-STRO0(N,1)		     *      .AND.  ABS(STR(N,1)+STRO(N,1)-STRO0(N,1)
     *                +STR(N,2)+STRO(N,KMAX)-STRO0(N,KMAX))	     *                +STR(N,2)+STRO(N,KMAX)-STRO0(N,KMAX))
     *           .GT. 1.E-4*ABS(STRO0(N,1)+STRO0(N,KMAX)) ) G	     *           .GT. 1.E-4*ABS(STRO0(N,1)+STRO0(N,KMAX)) ) G
14      CONTINUE						14      CONTINUE
        GOTO 16							        GOTO 16
15      CONTINUE						15      CONTINUE
        CALL UTMSG('JSPLIT')					        CALL UTMSG('JSPLIT')
        WRITE(IFCH,*)'*****  P_STR + P_STRO /= P_STRO0'		        WRITE(IFCH,*)'*****  P_STR + P_STRO /= P_STRO0'
        WRITE(IFCH,*)'P_STR + P_STRO:'				        WRITE(IFCH,*)'P_STR + P_STRO:'
        WRITE(IFCH,104)((STR(N,1)+STR(N,2)+STRO(N,1)		        WRITE(IFCH,104)((STR(N,1)+STR(N,2)+STRO(N,1)
     *                                    +STRO(N,KMAX)),N=1,	     *                                    +STRO(N,KMAX)),N=1,
        WRITE(IFCH,*)'P_STRO0:'					        WRITE(IFCH,*)'P_STRO0:'
        WRITE(IFCH,104)((STRO0(N,1)+STRO0(N,KMAX)),N=1,4)	        WRITE(IFCH,104)((STRO0(N,1)+STRO0(N,KMAX)),N=1,4)
        WRITE(IFCH,*)'STR:'					        WRITE(IFCH,*)'STR:'
        WRITE(IFCH,104)(STR(N,1),N=1,4)				        WRITE(IFCH,104)(STR(N,1),N=1,4)
        WRITE(IFCH,104)(STR(N,2),N=1,4)				        WRITE(IFCH,104)(STR(N,2),N=1,4)
        WRITE(IFCH,*)'STRO:'					        WRITE(IFCH,*)'STRO:'
        WRITE(IFCH,104)(STRO(N,1),N=1,4)			        WRITE(IFCH,104)(STRO(N,1),N=1,4)
        WRITE(IFCH,104)(STRO(N,KMAX),N=1,4)			        WRITE(IFCH,104)(STRO(N,KMAX),N=1,4)
        WRITE(IFCH,*)'STRO0:'					        WRITE(IFCH,*)'STRO0:'
        WRITE(IFCH,104)(STRO0(N,1),N=1,4)			        WRITE(IFCH,104)(STRO0(N,1),N=1,4)
        WRITE(IFCH,104)(STRO0(N,KMAX),N=1,4)			        WRITE(IFCH,104)(STRO0(N,KMAX),N=1,4)
        CALL UTMSGF						        CALL UTMSGF
16      CONTINUE						16      CONTINUE
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,100)APART,EPART,EN,PT			          WRITE(IFCH,100)APART,EPART,EN,PT
100       FORMAT(3X,'APART,EPART,EN,PT:',4F13.5)		100       FORMAT(3X,'APART,EPART,EN,PT:',4F13.5)
          WRITE(IFCH,101)(SNGL(PO(K)),K=1,5)			          WRITE(IFCH,101)(SNGL(PO(K)),K=1,5)
101       FORMAT(3X,'PO:',5F11.5/)				101       FORMAT(3X,'PO:',5F11.5/)
          IF ( NQU .EQ. 2 ) THEN				          IF ( NQU .EQ. 2 ) THEN
            WRITE(IFCH,*)'DIQUARK-ANTIDIQUARK BREAK'		            WRITE(IFCH,*)'DIQUARK-ANTIDIQUARK BREAK'
            WRITE(IFCH,*)' '					            WRITE(IFCH,*)' '
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

C  FLAVOUR							C  FLAVOUR
C  -------							C  -------
      IC(1)=NINT(ABS(STRO(4+1,KMAX)))				      IC(1)=NINT(ABS(STRO(4+1,KMAX)))
      IC(2)=NINT(ABS(STRO(4+2,KMAX)))				      IC(2)=NINT(ABS(STRO(4+2,KMAX)))
      STR(4+1,2)=IC(1)						      STR(4+1,2)=IC(1)
      STR(4+2,2)=IC(2)						      STR(4+2,2)=IC(2)
      DO 4 N=1,NFLAV						      DO 4 N=1,NFLAV
        JCX(N,1)=0						        JCX(N,1)=0
        JCX(N,2)=0						        JCX(N,2)=0
4     CONTINUE							4     CONTINUE
      M=0							      M=0
      IF     ( NQU .EQ. 1 ) THEN				      IF     ( NQU .EQ. 1 ) THEN
        IF ( IC(1) .GT. 0 ) M=2					        IF ( IC(1) .GT. 0 ) M=2
        IF ( IC(2) .GT. 0 ) M=1					        IF ( IC(2) .GT. 0 ) M=1
        NFL=MOD(IFLTO,10)					        NFL=MOD(IFLTO,10)
        JCX(NFL,M)=JCX(NFL,M)+1					        JCX(NFL,M)=JCX(NFL,M)+1
      ELSEIF ( NQU .EQ. 2 ) THEN				      ELSEIF ( NQU .EQ. 2 ) THEN
        IF ( IC(1) .GT. 0 ) M=1					        IF ( IC(1) .GT. 0 ) M=1
        IF ( IC(2) .GT. 0 ) M=2					        IF ( IC(2) .GT. 0 ) M=2
        NFL=MOD(IFLTO,10)					        NFL=MOD(IFLTO,10)
        JCX(NFL,M)=JCX(NFL,M)+1					        JCX(NFL,M)=JCX(NFL,M)+1
        NFL=IFLTO/10						        NFL=IFLTO/10
        JCX(NFL,M)=JCX(NFL,M)+1					        JCX(NFL,M)=JCX(NFL,M)+1
      ENDIF							      ENDIF
      IF ( M .EQ. 0 ) THEN					      IF ( M .EQ. 0 ) THEN
        CALL UTSTOP('JSPLIT: M = 0                           	        CALL UTSTOP('JSPLIT: M = 0                           
      ENDIF							      ENDIF
      CALL IDENCO(JCX,ICX,IRETEN)				      CALL IDENCO(JCX,ICX,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        CALL UTSTOP('JSPLIT: IDENCO RET CODE = 1             	        CALL UTSTOP('JSPLIT: IDENCO RET CODE = 1             
      ENDIF							      ENDIF
      STR(4+1,1)=ICX(1)						      STR(4+1,1)=ICX(1)
      STR(4+2,1)=ICX(2)						      STR(4+2,1)=ICX(2)
      CALL UTAMST(STR,AM,AMIN,IRET)				      CALL UTAMST(STR,AM,AMIN,IRET)
      IF ( IRET .NE. 0 ) GOTO 1002				      IF ( IRET .NE. 0 ) GOTO 1002
      IF ( NFUSN(KMAX) .EQ. 1 ) GOTO 1002			      IF ( NFUSN(KMAX) .EQ. 1 ) GOTO 1002
      IC(1)=NINT(STRO(4+1,1))					      IC(1)=NINT(STRO(4+1,1))
      IC(2)=NINT(STRO(4+2,1))					      IC(2)=NINT(STRO(4+2,1))
      CALL IDDECO(IC,JC)					      CALL IDDECO(IC,JC)
      DO 26 N=1,NQU						      DO 26 N=1,NQU
        IF ( N .EQ. 1 ) THEN					        IF ( N .EQ. 1 ) THEN
          NFL=MOD(IFLTO,10)					          NFL=MOD(IFLTO,10)
        ELSE							        ELSE
          NFL=IFLTO/10						          NFL=IFLTO/10
        ENDIF							        ENDIF
        IF ( JC(NFL,M) .GT. 0 ) THEN				        IF ( JC(NFL,M) .GT. 0 ) THEN
          JC(NFL,M)=JC(NFL,M)-1					          JC(NFL,M)=JC(NFL,M)-1
        ELSE							        ELSE
          JC(NFL,3-M)=JC(NFL,3-M)+1				          JC(NFL,3-M)=JC(NFL,3-M)+1
        ENDIF							        ENDIF
26    CONTINUE							26    CONTINUE
      NN=0							      NN=0
      DO 27 N=1,NFLAV						      DO 27 N=1,NFLAV
        NN=NN+JC(N,1)+JC(N,2)					        NN=NN+JC(N,1)+JC(N,2)
27    CONTINUE							27    CONTINUE
      IF ( NN .EQ. 0 ) THEN					      IF ( NN .EQ. 0 ) THEN
        NFL=INT(RANGEN()/PUDX)+1				        NFL=INT(RANGEN()/PUDX)+1
        JC(NFL,1)=1						        JC(NFL,1)=1
        JC(NFL,2)=1						        JC(NFL,2)=1
      ENDIF							      ENDIF
      CALL IDENCO(JC,IC,IRETEN)					      CALL IDENCO(JC,IC,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        IF ( ISH .GE. 90  .AND.  MESSCO .EQ. 0 ) THEN		        IF ( ISH .GE. 90  .AND.  MESSCO .EQ. 0 ) THEN
          CALL UTMSG('JSPLIT')					          CALL UTMSG('JSPLIT')
          WRITE(IFCH,*)'*****  IDENCO RET CODE = 1.   REDO JS	          WRITE(IFCH,*)'*****  IDENCO RET CODE = 1.   REDO JS
          WRITE(IFCH,*)'JC:'					          WRITE(IFCH,*)'JC:'
          WRITE(IFCH,*)JC					          WRITE(IFCH,*)JC
          CALL UTMSGF						          CALL UTMSGF
          MESSCO=1						          MESSCO=1
        ENDIF							        ENDIF
        GOTO 5000						        GOTO 5000
      ENDIF							      ENDIF
      STRO(4+1,1)=IC(1)						      STRO(4+1,1)=IC(1)
      STRO(4+2,1)=IC(2)						      STRO(4+2,1)=IC(2)
      STRO(4+1,KMAX)=0.						      STRO(4+1,KMAX)=0.
      STRO(4+2,KMAX)=0.						      STRO(4+2,KMAX)=0.

C  OK								C  OK
C  --								C  --
1000  IER=0							1000  IER=0
      NSCC=NSCC+1						      NSCC=NSCC+1
      GOTO 10002						      GOTO 10002

C  ERROR							C  ERROR
C  -----							C  -----
1001  IER=1							1001  IER=1
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('JSPLIT')					        CALL UTMSG('JSPLIT')
        WRITE(IFCH,*)'*****  SPLIT NOT POSSIBLE'		        WRITE(IFCH,*)'*****  SPLIT NOT POSSIBLE'
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 10001						      GOTO 10001

C  ABSORPTION							C  ABSORPTION
C  ----------							C  ----------
1002  IER=2							1002  IER=2
      NFUSN(KMAX)=1						      NFUSN(KMAX)=1
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)'ABSORPTION OF STRO(,KMAX)'		        WRITE(IFCH,*)'ABSORPTION OF STRO(,KMAX)'
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      DO 18 I=1,NSI						      DO 18 I=1,NSI
        STR(I,1)=0.						        STR(I,1)=0.
        STR(I,2)=0.						        STR(I,2)=0.
18    CONTINUE							18    CONTINUE
      DO 17 K=1,KMAX						      DO 17 K=1,KMAX
        DO 17 I=1,NSI						        DO 17 I=1,NSI
          STRO(I,K)=STRO0(I,K)					          STRO(I,K)=STRO0(I,K)
17    CONTINUE							17    CONTINUE
      STRO(1,1)=STRO(1,1)+STRO(1,KMAX)				      STRO(1,1)=STRO(1,1)+STRO(1,KMAX)
      STRO(2,1)=STRO(2,1)+STRO(2,KMAX)				      STRO(2,1)=STRO(2,1)+STRO(2,KMAX)
      STRO(3,1)=STRO(3,1)+STRO(3,KMAX)				      STRO(3,1)=STRO(3,1)+STRO(3,KMAX)
      STRO(4,1)=STRO(4,1)+STRO(4,KMAX)				      STRO(4,1)=STRO(4,1)+STRO(4,KMAX)
      STRO(1,KMAX)=0.						      STRO(1,KMAX)=0.
      STRO(2,KMAX)=0.						      STRO(2,KMAX)=0.
      STRO(3,KMAX)=0.						      STRO(3,KMAX)=0.
      STRO(4,KMAX)=0.						      STRO(4,KMAX)=0.
      IC(1)=NINT(STRO(4+1,1))					      IC(1)=NINT(STRO(4+1,1))
      IC(2)=NINT(STRO(4+2,1))					      IC(2)=NINT(STRO(4+2,1))
      CALL IDDECO(IC,JC)					      CALL IDDECO(IC,JC)
      ICX(1)=NINT(ABS(STRO(4+1,KMAX)))				      ICX(1)=NINT(ABS(STRO(4+1,KMAX)))
      ICX(2)=NINT(ABS(STRO(4+2,KMAX)))				      ICX(2)=NINT(ABS(STRO(4+2,KMAX)))
      CALL IDDECO(ICX,JCX)					      CALL IDDECO(ICX,JCX)
      DO 22 NF=1,NFLAV						      DO 22 NF=1,NFLAV
        JC(NF,1)=JC(NF,1)+JCX(NF,1)				        JC(NF,1)=JC(NF,1)+JCX(NF,1)
        JC(NF,2)=JC(NF,2)+JCX(NF,2)				        JC(NF,2)=JC(NF,2)+JCX(NF,2)
22    CONTINUE							22    CONTINUE
      CALL IDENCO(JC,IC,IRETEN)					      CALL IDENCO(JC,IC,IRETEN)
      IF ( IRETEN .EQ. 1 ) THEN					      IF ( IRETEN .EQ. 1 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('JSPLIT')					          CALL UTMSG('JSPLIT')
          WRITE(IFCH,*)'*****  IDENCO RET CODE = 1'		          WRITE(IFCH,*)'*****  IDENCO RET CODE = 1'
     *                ,'   (AFTER ABSORPTION)'			     *                ,'   (AFTER ABSORPTION)'
          WRITE(IFCH,*)'JC:'					          WRITE(IFCH,*)'JC:'
          WRITE(IFCH,*)JC					          WRITE(IFCH,*)JC
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1001						        GOTO 1001
      ENDIF							      ENDIF
      STRO(5,1)=IC(1)						      STRO(5,1)=IC(1)
      STRO(6,1)=IC(2)						      STRO(6,1)=IC(2)
      STRO(5,KMAX)=0.						      STRO(5,KMAX)=0.
      STRO(6,KMAX)=0.						      STRO(6,KMAX)=0.
      GOTO 10002						      GOTO 10002

C  CHECK NSCC							C  CHECK NSCC
C  ----------							C  ----------
10002 CONTINUE							10002 CONTINUE
      IF ( KMAXOR.GT.2 .AND. KMAX.EQ.2 .AND. MAX(1,NSCC).NE.N	      IF ( KMAXOR.GT.2 .AND. KMAX.EQ.2 .AND. MAX(1,NSCC).NE.N
        IER=3							        IER=3
        IF ( ISH .GE. 91 ) THEN					        IF ( ISH .GE. 91 ) THEN
          WRITE(IFCH,*)'REDO STRING PROCESSING WITH NEW APART	          WRITE(IFCH,*)'REDO STRING PROCESSING WITH NEW APART
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
        GOTO 10001						        GOTO 10001
      ENDIF							      ENDIF

C  PRINT							C  PRINT
C  -----							C  -----
      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,*)'REMAINDER STRING:'			          WRITE(IFCH,*)'REMAINDER STRING:'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I	          WRITE(IFCH,105)(STRO(I,1),I=1,4),(NINT(STRO(I,1)),I
          DO 9 K=2,KMAX						          DO 9 K=2,KMAX
            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))	            WRITE(IFCH,104)(STRO(I,K),I=1,4),(NINT(STRO(I,K))
 9        CONTINUE						 9        CONTINUE
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'SPLIT STRING:'				          WRITE(IFCH,*)'SPLIT STRING:'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
        WRITE(IFCH,105)(STR(I,1),I=1,4),(NINT(STR(I,1)),I=5,6	        WRITE(IFCH,105)(STR(I,1),I=1,4),(NINT(STR(I,1)),I=5,6
105     FORMAT(' STR: ',4F13.5,2I8)				105     FORMAT(' STR: ',4F13.5,2I8)
        WRITE(IFCH,104)(STR(I,2),I=1,4),(NINT(STR(I,2)),I=5,6	        WRITE(IFCH,104)(STR(I,2),I=1,4),(NINT(STR(I,2)),I=5,6
104     FORMAT('      ',4F13.5,2I8)				104     FORMAT('      ',4F13.5,2I8)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
10001 CONTINUE							10001 CONTINUE
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,*)('-',L=1,25)				        WRITE(IFCH,*)('-',L=1,25)
        WRITE(IFCH,*)'   RETURN FROM JSPLIT   '			        WRITE(IFCH,*)'   RETURN FROM JSPLIT   '
        WRITE(IFCH,*)('-',L=1,25)				        WRITE(IFCH,*)('-',L=1,25)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE LEPEXP(RXBJ,RQSQ)				      SUBROUTINE LEPEXP(RXBJ,RQSQ)

C------------------------------------------------------------	C------------------------------------------------------------
C  GENERATES X_BJORKEN AND Q**2 ACCORDING TO AN EXPERIMENTAL	C  GENERATES X_BJORKEN AND Q**2 ACCORDING TO AN EXPERIMENTAL
C  DISTRIBUTION ( GIVEN IN ARRAY XQ(NXBJ,NQSQ) ).		C  DISTRIBUTION ( GIVEN IN ARRAY XQ(NXBJ,NQSQ) ).
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NQSQ=10)					      PARAMETER (NQSQ=10)
      PARAMETER (NXBJ=10)					      PARAMETER (NXBJ=10)
      REAL  XQ(NXBJ,NQSQ),VXQ(NXBJ*NQSQ)			      REAL  XQ(NXBJ,NQSQ),VXQ(NXBJ*NQSQ)
      EQUIVALENCE (XQ(1,1),VXQ(1))				      EQUIVALENCE (XQ(1,1),VXQ(1))

      DATA VXQ/1304.02,   366.40,    19.84,    10.79,     6.4	      DATA VXQ/1304.02,   366.40,    19.84,    10.79,     6.4
     *            4.54,     4.15,     3.38,     2.03,     1.5	     *            4.54,     4.15,     3.38,     2.03,     1.5
     *          241.63,  1637.26,   427.36,   164.51,    73.7	     *          241.63,  1637.26,   427.36,   164.51,    73.7
     *           43.07,    20.73,    12.78,     9.34,     5.8	     *           43.07,    20.73,    12.78,     9.34,     5.8
     *            0.01,   724.66,   563.79,   275.08,   176.1	     *            0.01,   724.66,   563.79,   275.08,   176.1
     *          106.44,    85.82,    54.52,    37.12,    28.6	     *          106.44,    85.82,    54.52,    37.12,    28.6
     *            0.01,   202.40,   491.10,   245.13,   157.0	     *            0.01,   202.40,   491.10,   245.13,   157.0
     *          104.43,    61.05,    49.42,    37.84,    26.7	     *          104.43,    61.05,    49.42,    37.84,    26.7
     *            0.01,     3.77,   316.38,   226.92,   133.4	     *            0.01,     3.77,   316.38,   226.92,   133.4
     *           90.30,    63.67,    48.42,    35.73,    28.0	     *           90.30,    63.67,    48.42,    35.73,    28.0
     *            0.01,     0.01,   153.74,   213.09,   114.1	     *            0.01,     0.01,   153.74,   213.09,   114.1
     *           76.26,    60.02,    43.15,    43.47,    25.6	     *           76.26,    60.02,    43.15,    43.47,    25.6
     *            0.01,     0.01,    39.31,   185.74,   108.5	     *            0.01,     0.01,    39.31,   185.74,   108.5
     *           88.40,    47.29,    39.35,    31.80,    22.9	     *           88.40,    47.29,    39.35,    31.80,    22.9
     *            0.01,     0.01,     0.01,   104.61,   107.0	     *            0.01,     0.01,     0.01,   104.61,   107.0
     *           66.24,    45.34,    37.45,    33.44,    23.7	     *           66.24,    45.34,    37.45,    33.44,    23.7
     *            0.01,     0.01,     0.01,    56.58,    99.3	     *            0.01,     0.01,     0.01,    56.58,    99.3
     *           67.78,    43.28,    35.98,    34.63,    18.3	     *           67.78,    43.28,    35.98,    34.63,    18.3
     *            0.01,     0.01,     0.01,    13.56,    76.2	     *            0.01,     0.01,     0.01,    13.56,    76.2
     *           64.30,    42.80,    28.56,    21.19,    20.7	     *           64.30,    42.80,    28.56,    21.19,    20.7
      DATA QSQMIN/4./,QSQWID/4./,XBJMIN/0./,XBJWID/.025/,INIT	      DATA QSQMIN/4./,QSQWID/4./,XBJMIN/0./,XBJWID/.025/,INIT
C------------------------------------------------------------	C------------------------------------------------------------
      INIT=INIT+1						      INIT=INIT+1
      IF ( INIT .EQ. 1 ) THEN					      IF ( INIT .EQ. 1 ) THEN
        N=NXBJ*NQSQ						        N=NXBJ*NQSQ
        SUM=VXQ(1)						        SUM=VXQ(1)
        DO 1 I=2,N						        DO 1 I=2,N
          SUM=SUM+VXQ(I)					          SUM=SUM+VXQ(I)
          VXQ(I)=VXQ(I)+VXQ(I-1)				          VXQ(I)=VXQ(I)+VXQ(I-1)
 1      CONTINUE						 1      CONTINUE
        DO 3 I=1,N						        DO 3 I=1,N
          VXQ(I)=VXQ(I)/SUM					          VXQ(I)=VXQ(I)/SUM
 3      CONTINUE						 3      CONTINUE
      ENDIF							      ENDIF

      N=NXBJ*NQSQ						      N=NXBJ*NQSQ
      R=RANGEN()						      R=RANGEN()
      CALL UTLOC(VXQ,N,R,ILOC)					      CALL UTLOC(VXQ,N,R,ILOC)
      IF ( ILOC .GE. N ) ILOC=ILOC-1				      IF ( ILOC .GE. N ) ILOC=ILOC-1
      I=MOD(ILOC,NXBJ)+1					      I=MOD(ILOC,NXBJ)+1
      IF ( I .EQ. 0 ) I=NXBJ					      IF ( I .EQ. 0 ) I=NXBJ
      J=ILOC/NXBJ + 1						      J=ILOC/NXBJ + 1
      IF ( ILOC .GT. 0 ) THEN					      IF ( ILOC .GT. 0 ) THEN
        DXINT=VXQ(ILOC+1)-VXQ(ILOC)				        DXINT=VXQ(ILOC+1)-VXQ(ILOC)
      ELSE							      ELSE
        DXINT=VXQ(1)						        DXINT=VXQ(1)
      ENDIF							      ENDIF
      DXBJ=XBJWID*ABS(R-VXQ(ILOC+1))/DXINT			      DXBJ=XBJWID*ABS(R-VXQ(ILOC+1))/DXINT
      DY  =QSQWID*RANGEN()					      DY  =QSQWID*RANGEN()
      RXBJ=XBJMIN+XBJWID*FLOAT(I-1)+DXBJ			      RXBJ=XBJMIN+XBJWID*FLOAT(I-1)+DXBJ
      RQSQ=QSQMIN+QSQWID*FLOAT(J-1)+DY				      RQSQ=QSQMIN+QSQWID*FLOAT(J-1)+DY
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE LEPSTR(NUCLON,XBJ,QSQ,NSTRNG)			      SUBROUTINE LEPSTR(NUCLON,XBJ,QSQ,NSTRNG)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS STRING CODE NSTRNG FOR GIVEN NUCLON, XBJ, QSQ.	C  RETURNS STRING CODE NSTRNG FOR GIVEN NUCLON, XBJ, QSQ.
C  NUCLON  : THE STRUCK NUCLEON (1120/1220 = PROTON/NEUTRON)	C  NUCLON  : THE STRUCK NUCLEON (1120/1220 = PROTON/NEUTRON)
C  XBJ,QSQ : X-BJORKEN AND Q**2					C  XBJ,QSQ : X-BJORKEN AND Q**2
C  NSTRNG  : STRING CODE:					C  NSTRNG  : STRING CODE:
C        PROTON STRINGS:          NEUTRON STRINGS:		C        PROTON STRINGS:          NEUTRON STRINGS:
C        1 : U  ---  UD           11 : U  ---  DD		C        1 : U  ---  UD           11 : U  ---  DD
C        2 : D  ---  UU           12 : D  ---  UD		C        2 : D  ---  UU           12 : D  ---  UD
C        3 : U  ---  UB(UUD)      13 : U  ---  UB(UDD)		C        3 : U  ---  UB(UUD)      13 : U  ---  UB(UDD)
C        4 : D  ---  DB(UUD)      14 : D  ---  DB(UDD)		C        4 : D  ---  DB(UUD)      14 : D  ---  DB(UDD)
C        5 : S  ---  SB(UUD)      15 : S  ---  SB(UDD)		C        5 : S  ---  SB(UUD)      15 : S  ---  SB(UDD)
C        6 : UB ---  U(UUD)       16 : UB ---  U(UDD)		C        6 : UB ---  U(UUD)       16 : UB ---  U(UDD)
C        7 : DB ---  D(UUD)       17 : DB ---  D(UDD)		C        7 : DB ---  D(UUD)       17 : DB ---  D(UDD)
C        8 : SB ---  S(UUD)       18 : SB ---  S(UDD)		C        8 : SB ---  S(UUD)       18 : SB ---  S(UDD)
C------------------------------------------------------------	C------------------------------------------------------------
      REAL QUARKS(9)						      REAL QUARKS(9)
C------------------------------------------------------------	C------------------------------------------------------------
      NSTRNG=0							      NSTRNG=0

C  PROTON-STRING (VALENCE PART)					C  PROTON-STRING (VALENCE PART)
      IF     ( NUCLON .EQ. 1120 ) THEN				      IF     ( NUCLON .EQ. 1120 ) THEN
        QUARKS(1) = 4.* STXU(XBJ,QSQ)				        QUARKS(1) = 4.* STXU(XBJ,QSQ)
        QUARKS(2) =     STXD(XBJ,QSQ)				        QUARKS(2) =     STXD(XBJ,QSQ)

C  NEUTRON-STRING (VALENCE PART)				C  NEUTRON-STRING (VALENCE PART)
      ELSEIF ( NUCLON .EQ. 1220 ) THEN				      ELSEIF ( NUCLON .EQ. 1220 ) THEN
        QUARKS(1) = 4.* STXD(XBJ,QSQ)				        QUARKS(1) = 4.* STXD(XBJ,QSQ)
        QUARKS(2) =     STXU(XBJ,QSQ)				        QUARKS(2) =     STXU(XBJ,QSQ)

      ELSE							      ELSE
        RETURN							        RETURN
      ENDIF							      ENDIF

C  THE SEA CONTRIBUTIONS (PROTON/NEUTRON)			C  THE SEA CONTRIBUTIONS (PROTON/NEUTRON)
      UDSEA     =     STXUS(XBJ,QSQ)				      UDSEA     =     STXUS(XBJ,QSQ)
      SSEA      =     STXS(XBJ,QSQ)				      SSEA      =     STXS(XBJ,QSQ)
      QUARKS(3) = 4.* UDSEA					      QUARKS(3) = 4.* UDSEA
      QUARKS(4) =     UDSEA					      QUARKS(4) =     UDSEA
      QUARKS(5) =     SSEA					      QUARKS(5) =     SSEA
      QUARKS(6) = 4.* UDSEA					      QUARKS(6) = 4.* UDSEA
      QUARKS(7) =     UDSEA					      QUARKS(7) =     UDSEA
      QUARKS(8) =     SSEA					      QUARKS(8) =     SSEA

      QUARKS(9) = 0.						      QUARKS(9) = 0.
      DO 11 I=1,8						      DO 11 I=1,8
        QUARKS(9) = QUARKS(9)+QUARKS(I)				        QUARKS(9) = QUARKS(9)+QUARKS(I)
11    CONTINUE							11    CONTINUE

      R = RANGEN() * QUARKS(9)					      R = RANGEN() * QUARKS(9)
      SUMQ = 0.							      SUMQ = 0.
      DO 12 I=1,8						      DO 12 I=1,8
        NSTRNG = I						        NSTRNG = I
        SUMQ = SUMQ + QUARKS(I)					        SUMQ = SUMQ + QUARKS(I)
        IF ( R .LE. SUMQ ) GO TO 13				        IF ( R .LE. SUMQ ) GO TO 13
12    CONTINUE							12    CONTINUE
13    CONTINUE							13    CONTINUE

      IF ( NUCLON .EQ. 1220 ) NSTRNG=NSTRNG+10			      IF ( NUCLON .EQ. 1220 ) NSTRNG=NSTRNG+10

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE LEPTAR(XBJ,QSQ,MATARG,LATARG,NUCLON)		      SUBROUTINE LEPTAR(XBJ,QSQ,MATARG,LATARG,NUCLON)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS NUCLON = ID OF HIT TARGET NUCLEON.			C  RETURNS NUCLON = ID OF HIT TARGET NUCLEON.
C  XBJ   : X BJORKEN						C  XBJ   : X BJORKEN
C  QSQ   : Q SQUARED						C  QSQ   : Q SQUARED
C  MATARG : A  OF TARGET					C  MATARG : A  OF TARGET
C  LATARG : Z  OF TARGET					C  LATARG : Z  OF TARGET
C  NUCLON: ID OF TARGET NUCLEON (1120/1220 FOR PROTON/NEUTRON	C  NUCLON: ID OF TARGET NUCLEON (1120/1220 FOR PROTON/NEUTRON
C------------------------------------------------------------	C------------------------------------------------------------
C  PROTON PART OF THE STRUCTURE FUNCTION:			C  PROTON PART OF THE STRUCTURE FUNCTION:
      F2P = LATARG * STXZPR(XBJ,QSQ)				      F2P = LATARG * STXZPR(XBJ,QSQ)
C  NEUTRON PART OF THE STRUCTURE FUNCTION:			C  NEUTRON PART OF THE STRUCTURE FUNCTION:
      F2N = (MATARG-LATARG) * STXZNE(XBJ,QSQ)			      F2N = (MATARG-LATARG) * STXZNE(XBJ,QSQ)
C  STRUCTURE FUNCTION OF NUCLEUS:				C  STRUCTURE FUNCTION OF NUCLEUS:
      F2A = F2P + F2N						      F2A = F2P + F2N
C  SELECT  THE TARGET-NUCLEON  ( PROTON OR NEUTRON ):		C  SELECT  THE TARGET-NUCLEON  ( PROTON OR NEUTRON ):
      RN = RANGEN()						      RN = RANGEN()
      F2RNDM = F2A * RN						      F2RNDM = F2A * RN
      IF ( F2RNDM .LT. F2N ) THEN				      IF ( F2RNDM .LT. F2N ) THEN
        NUCLON = 1220						        NUCLON = 1220
      ELSE							      ELSE
        NUCLON = 1120						        NUCLON = 1120
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE NUCINI(OPT,ANUC,LA,MA,ISI)			      SUBROUTINE NUCINI(OPT,ANUC,LA,MA,ISI)

C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZES NUCLEON-MOMENTA.					C  INITIALIZES NUCLEON-MOMENTA.
C  WRITES NUCLEONS ON /CPTL/ (P,IFR,ICL).			C  WRITES NUCLEONS ON /CPTL/ (P,IFR,ICL).
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MAMX2=MAMX*2)					      PARAMETER (MAMX2=MAMX*2)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /CNNN/    NNNPTL(MAMX2)				      COMMON /CNNN/    NNNPTL(MAMX2)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL      ANUC(NSI,NHA,MAMX)				      REAL      ANUC(NSI,NHA,MAMX)
      CHARACTER OPT*3						      CHARACTER OPT*3
C------------------------------------------------------------	C------------------------------------------------------------
      NHAX=3							      NHAX=3
      IF ( NHA .LT. NHAX ) THEN					      IF ( NHA .LT. NHAX ) THEN
        CALL UTSTOP('NUCINI: NHA TOO SMALL                   	        CALL UTSTOP('NUCINI: NHA TOO SMALL                   
      ENDIF							      ENDIF
      LAS=0							      LAS=0
      MAS=0							      MAS=0

      DO 1 L=1,MA						      DO 1 L=1,MA
        DO 2 M=1,NHA						        DO 2 M=1,NHA
          DO 3 N=1,NSI						          DO 3 N=1,NSI
            ANUC(N,M,L)=0.					            ANUC(N,M,L)=0.
 3        CONTINUE						 3        CONTINUE
 2      CONTINUE						 2      CONTINUE

        IF     ( OPT .EQ. 'NUC' ) THEN				        IF     ( OPT .EQ. 'NUC' ) THEN
          IF     ( ISI .GT. 0  .AND.  LAPROJ .LT. 0 ) THEN	          IF     ( ISI .GT. 0  .AND.  LAPROJ .LT. 0 ) THEN
            ID=IDPROJ						            ID=IDPROJ
          ELSEIF ( ISI .LT. 0  .AND.  LATARG .LT. 0 ) THEN	          ELSEIF ( ISI .LT. 0  .AND.  LATARG .LT. 0 ) THEN
            ID=IDTARG						            ID=IDTARG
          ELSE							          ELSE
            IF ( RANGEN() .LE. (LA-LAS)/FLOAT(MA-MAS)) THEN	            IF ( RANGEN() .LE. (LA-LAS)/FLOAT(MA-MAS)) THEN
              ID=1120						              ID=1120
              LAS=LAS+1						              LAS=LAS+1
            ELSE						            ELSE
              ID=1220						              ID=1220
            ENDIF						            ENDIF
            MAS=MAS+1						            MAS=MAS+1
          ENDIF							          ENDIF
          CALL IDMASS(ID,AMS)					          CALL IDMASS(ID,AMS)
          IC1=IDTRAI(1,ID,1)					          IC1=IDTRAI(1,ID,1)
          IC2=IDTRAI(2,ID,1)					          IC2=IDTRAI(2,ID,1)
          P1=0.							          P1=0.
          P2=0.							          P2=0.
          P3=ISI*PNLLX						          P3=ISI*PNLLX
          P0=SQRT(PNLLX**2+AMS**2)				          P0=SQRT(PNLLX**2+AMS**2)
          P0X=PNLLX						          P0X=PNLLX
          P5=AMS						          P5=AMS

        ELSEIF ( OPT .EQ. 'STR' ) THEN				        ELSEIF ( OPT .EQ. 'STR' ) THEN
          IF ( RANGEN() .LE. (LA-LAS)/FLOAT(MA-MAS) ) THEN	          IF ( RANGEN() .LE. (LA-LAS)/FLOAT(MA-MAS) ) THEN
            ID=1120						            ID=1120
            LAS=LAS+1						            LAS=LAS+1
          ELSE							          ELSE
            ID=1220						            ID=1220
          ENDIF							          ENDIF
          MAS=MAS+1						          MAS=MAS+1
          IC1=IDTRAI(1,ID,1)					          IC1=IDTRAI(1,ID,1)
          IC2=IDTRAI(2,ID,1)					          IC2=IDTRAI(2,ID,1)
          P1=0.							          P1=0.
          P2=0.							          P2=0.
          P3=0.							          P3=0.
          P0=PROM						          P0=PROM
          P5=PROM						          P5=PROM
        ENDIF							        ENDIF

        ANUC(5,1,L)=IC1						        ANUC(5,1,L)=IC1
        ANUC(6,1,L)=IC2						        ANUC(6,1,L)=IC2
        ANUC(3,2,L)=P3						        ANUC(3,2,L)=P3
        ANUC(4,2,L)=P0X						        ANUC(4,2,L)=P0X
        ANUC(5,2,L)=IC1						        ANUC(5,2,L)=IC1
        ANUC(6,2,L)=IC2						        ANUC(6,2,L)=IC2
        NPTL=NPTL+1						        NPTL=NPTL+1
        IF ( NPTL .NE. NNNPTL(NPTL) ) THEN			        IF ( NPTL .NE. NNNPTL(NPTL) ) THEN
          CALL UTSTOP('NUCINI: NPTL AND NNNPTL DONT MATCH    	          CALL UTSTOP('NUCINI: NPTL AND NNNPTL DONT MATCH    
        ENDIF							        ENDIF
        IDPTL(NPTL)=ID						        IDPTL(NPTL)=ID
        PPTL(1,NPTL)=P1						        PPTL(1,NPTL)=P1
        PPTL(2,NPTL)=P2						        PPTL(2,NPTL)=P2
        PPTL(3,NPTL)=P3						        PPTL(3,NPTL)=P3
        PPTL(4,NPTL)=P0						        PPTL(4,NPTL)=P0
        PPTL(5,NPTL)=P5						        PPTL(5,NPTL)=P5
        IFRPTL(1,NPTL)=0					        IFRPTL(1,NPTL)=0
        IFRPTL(2,NPTL)=0					        IFRPTL(2,NPTL)=0
        ICLPTL(NPTL)=1						        ICLPTL(NPTL)=1
        NQJPTL(NPTL)=0						        NQJPTL(NPTL)=0
 1    CONTINUE							 1    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE NUCLCO(MASSNR,N,X,Y,Z,YNUC)			      SUBROUTINE NUCLCO(MASSNR,N,X,Y,Z,YNUC)

C------------------------------------------------------------	C------------------------------------------------------------
C  CALCULATES COORDINATES OF THE NUCLEONS IN A NUCLEUS.		C  CALCULATES COORDINATES OF THE NUCLEONS IN A NUCLEUS.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL X(N),Y(N),Z(N)					      REAL X(N),Y(N),Z(N)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( MASSNR .EQ. 0 ) RETURN				      IF ( MASSNR .EQ. 0 ) RETURN
      IF ( MASSNR .GT. N ) THEN					      IF ( MASSNR .GT. N ) THEN
        CALL UTSTOP('NUCLCO: MASSNR.GT.N                     	        CALL UTSTOP('NUCLCO: MASSNR.GT.N                     
      ENDIF							      ENDIF
      IF ( MASSNR .EQ. 1 ) THEN					      IF ( MASSNR .EQ. 1 ) THEN
        X(1)=0.							        X(1)=0.
        Y(1)=0.							        Y(1)=0.
        Z(1)=0.							        Z(1)=0.
        RETURN							        RETURN
      ENDIF							      ENDIF
      DO 3 I=1,MASSNR						      DO 3 I=1,MASSNR
10      CONTINUE						10      CONTINUE
        IF ( MASSNR .EQ. MAPROJ )				        IF ( MASSNR .EQ. MAPROJ )
     *                      R=UTINVT(NDEP,XDEP,QDEP,RANGEN()*	     *                      R=UTINVT(NDEP,XDEP,QDEP,RANGEN()*
        IF ( MASSNR .EQ. MATARG ) THEN				        IF ( MASSNR .EQ. MATARG ) THEN
          IF     ( LTARG .EQ. 1 ) THEN				          IF     ( LTARG .EQ. 1 ) THEN
            R=UTINVT(NDET,XDET14,QDET14,RANGEN()*QDET14(NDET)	            R=UTINVT(NDET,XDET14,QDET14,RANGEN()*QDET14(NDET)
          ELSEIF ( LTARG .EQ. 2 ) THEN				          ELSEIF ( LTARG .EQ. 2 ) THEN
            R=UTINVT(NDET,XDET16,QDET16,RANGEN()*QDET16(NDET)	            R=UTINVT(NDET,XDET16,QDET16,RANGEN()*QDET16(NDET)
          ELSEIF ( LTARG .EQ. 3 ) THEN				          ELSEIF ( LTARG .EQ. 3 ) THEN
            R=UTINVT(NDET,XDET40,QDET40,RANGEN()*QDET40(NDET)	            R=UTINVT(NDET,XDET40,QDET40,RANGEN()*QDET40(NDET)
          ELSE							          ELSE
            R=UTINVT(NDET,XDET99,QDET99,RANGEN()*QDET99(NDET)	            R=UTINVT(NDET,XDET99,QDET99,RANGEN()*QDET99(NDET)
          ENDIF							          ENDIF
        ENDIF							        ENDIF
        IF ( MASSNR.NE.MAPROJ .AND. MASSNR.NE.MATARG ) THEN	        IF ( MASSNR.NE.MAPROJ .AND. MASSNR.NE.MATARG ) THEN
          CALL UTSTOP('NUCLCO: NUCLEUS NEITHER PROJ NOR TARG 	          CALL UTSTOP('NUCLCO: NUCLEUS NEITHER PROJ NOR TARG 
        ENDIF							        ENDIF
        COSTHE=1.-2.*RANGEN()					        COSTHE=1.-2.*RANGEN()
        SINTHE= SQRT(1. - COSTHE**2)				        SINTHE= SQRT(1. - COSTHE**2)
        PHI=2.*PI*RANGEN()					        PHI=2.*PI*RANGEN()
        X(I)=R*SINTHE*COS(PHI)					        X(I)=R*SINTHE*COS(PHI)
        Y(I)=R*SINTHE*SIN(PHI)					        Y(I)=R*SINTHE*SIN(PHI)
        Z(I)=R*COSTHE						        Z(I)=R*COSTHE
        IF ( I .EQ. 1 ) GOTO 3					        IF ( I .EQ. 1 ) GOTO 3
        IF ( CORE .EQ. 0. ) GOTO 3				        IF ( CORE .EQ. 0. ) GOTO 3
        DO 2 J=1,I-1						        DO 2 J=1,I-1
          IF ( (X(I)-X(J))**2+(Y(I)-Y(J))**2+(Z(I)-Z(J))**2	          IF ( (X(I)-X(J))**2+(Y(I)-Y(J))**2+(Z(I)-Z(J))**2
     *                               .LT. CORE**2 ) GOTO 10	     *                               .LT. CORE**2 ) GOTO 10
2       CONTINUE						2       CONTINUE
3     CONTINUE							3     CONTINUE
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'NUCLEON COORDINATES:'			        WRITE(IFCH,*)'NUCLEON COORDINATES:'
      ENDIF							      ENDIF
      AUXIL = 1./COSH(YNUC)					      AUXIL = 1./COSH(YNUC)
      DO 4 I=1,MASSNR						      DO 4 I=1,MASSNR
        Z(I)=Z(I)*AUXIL						        Z(I)=Z(I)*AUXIL
4     CONTINUE							4     CONTINUE
      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        DO 5 I=1,MASSNR						        DO 5 I=1,MASSNR
          WRITE(IFCH,*)'I X Y Z: ',I,X(I),Y(I),Z(I)		          WRITE(IFCH,*)'I X Y Z: ',I,X(I),Y(I),Z(I)
5       CONTINUE						5       CONTINUE
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE NUCOGE						      SUBROUTINE NUCOGE

C------------------------------------------------------------	C------------------------------------------------------------
C  WRITES NUCLEONS ON /CPTL/ (XOR,TIV,IST,IOR,JOR,NST).		C  WRITES NUCLEONS ON /CPTL/ (XOR,TIV,IST,IOR,JOR,NST).
C  DETERMINES SEQUENCE OF COLLISIONS ACCORDING TO NUCLEAR GEO	C  DETERMINES SEQUENCE OF COLLISIONS ACCORDING TO NUCLEAR GEO
C    IF MAPROJ>0.						C    IF MAPROJ>0.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MAMX2=MAMX*2)					      PARAMETER (MAMX2=MAMX*2)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CNCL/    XPROJ(MAMX),XTARG(MAMX),YPROJ(MAMX)	      COMMON /CNCL/    XPROJ(MAMX),XTARG(MAMX),YPROJ(MAMX)
     *                ,YTARG(MAMX),ZPROJ(MAMX),ZTARG(MAMX)	     *                ,YTARG(MAMX),ZPROJ(MAMX),ZTARG(MAMX)
      COMMON /CNNN/    NNNPTL(MAMX2)				      COMMON /CNNN/    NNNPTL(MAMX2)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN		      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'NUCOGE (ENTRY)'				        WRITE(IFCH,*)'NUCOGE (ENTRY)'
      ENDIF							      ENDIF
      VELI=1./TANH(YPJTL-YHAHA)+TANH(YHAHA)			      VELI=1./TANH(YPJTL-YHAHA)+TANH(YHAHA)
      NPROJ=1							      NPROJ=1
      NTARG=1							      NTARG=1
      DO 15 N=1,KOLLMX						      DO 15 N=1,KOLLMX
        NORD(N)=N						        NORD(N)=N
        COORD(1,N)=0.						        COORD(1,N)=0.
        COORD(2,N)=0.						        COORD(2,N)=0.
        COORD(3,N)=0.						        COORD(3,N)=0.
        COORD(4,N)=0.						        COORD(4,N)=0.
15    CONTINUE							15    CONTINUE

      IF     ( MATARG .LT. 0 ) THEN				      IF     ( MATARG .LT. 0 ) THEN
        KOLL=-MATARG						        KOLL=-MATARG
        NTARG=KOLL						        NTARG=KOLL
        BIMP=0.							        BIMP=0.
        NPTL=NPTL+1						        NPTL=NPTL+1
        XORPTL(1,NPTL)=0.					        XORPTL(1,NPTL)=0.
        XORPTL(2,NPTL)=0.					        XORPTL(2,NPTL)=0.
        XORPTL(3,NPTL)=0.					        XORPTL(3,NPTL)=0.
        XORPTL(4,NPTL)=0.					        XORPTL(4,NPTL)=0.
        TIVPTL(1,NPTL)=-AINFIN					        TIVPTL(1,NPTL)=-AINFIN
        TIVPTL(2,NPTL)=0.					        TIVPTL(2,NPTL)=0.
        ISTPTL(NPTL)=1						        ISTPTL(NPTL)=1
        IORPTL(NPTL)=-1						        IORPTL(NPTL)=-1
        JORPTL(NPTL)=0						        JORPTL(NPTL)=0
        NNNPTL(NPTL)=NPTL					        NNNPTL(NPTL)=NPTL
        DO 1 K=1,KOLL						        DO 1 K=1,KOLL
          NRPROJ(K)=1						          NRPROJ(K)=1
          NRTARG(K)=K						          NRTARG(K)=K
          NPTL=NPTL+1						          NPTL=NPTL+1
          XORPTL(1,NPTL)=0.					          XORPTL(1,NPTL)=0.
          XORPTL(2,NPTL)=0.					          XORPTL(2,NPTL)=0.
          XORPTL(3,NPTL)=0.					          XORPTL(3,NPTL)=0.
          XORPTL(4,NPTL)=0.					          XORPTL(4,NPTL)=0.
          TIVPTL(1,NPTL)=-AINFIN				          TIVPTL(1,NPTL)=-AINFIN
          TIVPTL(2,NPTL)=0.					          TIVPTL(2,NPTL)=0.
          ISTPTL(NPTL)=1					          ISTPTL(NPTL)=1
          IORPTL(NPTL)=-1					          IORPTL(NPTL)=-1
          JORPTL(NPTL)=0					          JORPTL(NPTL)=0
          NNNPTL(NPTL)=NPTL					          NNNPTL(NPTL)=NPTL
1       CONTINUE						1       CONTINUE
        GOTO 9999						        GOTO 9999

      ELSEIF ( MAPROJ .EQ. 1  .AND.  MATARG .EQ. 1 ) THEN	      ELSEIF ( MAPROJ .EQ. 1  .AND.  MATARG .EQ. 1 ) THEN
        KOLL=1							        KOLL=1
        BIMP=0.							        BIMP=0.
        NRPROJ(1)=1						        NRPROJ(1)=1
        NRTARG(1)=1						        NRTARG(1)=1
        DO 5 II=1,2						        DO 5 II=1,2
          NPTL=NPTL+1						          NPTL=NPTL+1
          XORPTL(1,NPTL)=0.					          XORPTL(1,NPTL)=0.
          XORPTL(2,NPTL)=0.					          XORPTL(2,NPTL)=0.
          XORPTL(3,NPTL)=0.					          XORPTL(3,NPTL)=0.
          XORPTL(4,NPTL)=0.					          XORPTL(4,NPTL)=0.
          TIVPTL(1,NPTL)=-AINFIN				          TIVPTL(1,NPTL)=-AINFIN
          TIVPTL(2,NPTL)= 0.					          TIVPTL(2,NPTL)= 0.
          ISTPTL(NPTL)  = 1					          ISTPTL(NPTL)  = 1
          IORPTL(NPTL)  =-1					          IORPTL(NPTL)  =-1
          JORPTL(NPTL)  = 0					          JORPTL(NPTL)  = 0
          NNNPTL(NPTL)  = NPTL					          NNNPTL(NPTL)  = NPTL
 5      CONTINUE						 5      CONTINUE
        GOTO 9999						        GOTO 9999
      ENDIF							      ENDIF

      CALL NUCLCO(MAPROJ,MAMX,XPROJ,YPROJ,ZPROJ,YPJTL-YHAHA)	      CALL NUCLCO(MAPROJ,MAMX,XPROJ,YPROJ,ZPROJ,YPJTL-YHAHA)
      CALL NUCLCO(MATARG,MAMX,XTARG,YTARG,ZTARG,YHAHA)		      CALL NUCLCO(MATARG,MAMX,XTARG,YTARG,ZTARG,YHAHA)
      BX=0.							      BX=0.
      BY=0.							      BY=0.
      IF ( MAPROJ .GT. 0 ) THEN					      IF ( MAPROJ .GT. 0 ) THEN
        IF ( BIMEVT .LT. 0. ) THEN				        IF ( BIMEVT .LT. 0. ) THEN
          B1=BMINIM						          B1=BMINIM
          B2=MIN(RMPROJ+RMTARG(LTARG),BMAXIM)			          B2=MIN(RMPROJ+RMTARG(LTARG),BMAXIM)
          IF ( B1 .GT. B2 ) THEN				          IF ( B1 .GT. B2 ) THEN
            CALL UTSTOP('NUCOGE: BMIN > BMAX                 	            CALL UTSTOP('NUCOGE: BMIN > BMAX                 
          ENDIF							          ENDIF
          BIMP=SQRT(B1**2+(B2**2-B1**2)*RANGEN())		          BIMP=SQRT(B1**2+(B2**2-B1**2)*RANGEN())
          PHI=2.*PI*RANGEN()					          PHI=2.*PI*RANGEN()
        ELSE							        ELSE
          PHI=PHIEVT						          PHI=PHIEVT
          BIMP=BIMEVT						          BIMP=BIMEVT
        ENDIF							        ENDIF
        BX=COS(PHI)*BIMP					        BX=COS(PHI)*BIMP
        BY=SIN(PHI)*BIMP					        BY=SIN(PHI)*BIMP
        DO 6 I=1,MAPROJ						        DO 6 I=1,MAPROJ
          NPTL=NPTL+1						          NPTL=NPTL+1
          XORPTL(1,NPTL)=XPROJ(I)+BX*0.5			          XORPTL(1,NPTL)=XPROJ(I)+BX*0.5
          XORPTL(2,NPTL)=YPROJ(I)+BY*0.5			          XORPTL(2,NPTL)=YPROJ(I)+BY*0.5
          XORPTL(3,NPTL)=ZPROJ(I)				          XORPTL(3,NPTL)=ZPROJ(I)
          XORPTL(4,NPTL)=0.					          XORPTL(4,NPTL)=0.
          TIVPTL(1,NPTL)=-AINFIN				          TIVPTL(1,NPTL)=-AINFIN
          TIVPTL(2,NPTL)= AINFIN				          TIVPTL(2,NPTL)= AINFIN
          ISTPTL(NPTL)=0					          ISTPTL(NPTL)=0
          IORPTL(NPTL)=0					          IORPTL(NPTL)=0
          JORPTL(NPTL)=0					          JORPTL(NPTL)=0
          NNNPTL(NPTL)=NPTL					          NNNPTL(NPTL)=NPTL
 6      CONTINUE						 6      CONTINUE
      ENDIF							      ENDIF
      DO 7 I=1,MATARG						      DO 7 I=1,MATARG
        NPTL=NPTL+1						        NPTL=NPTL+1
        XORPTL(1,NPTL)=XTARG(I)-BX*0.5				        XORPTL(1,NPTL)=XTARG(I)-BX*0.5
        XORPTL(2,NPTL)=YTARG(I)-BY*0.5				        XORPTL(2,NPTL)=YTARG(I)-BY*0.5
        XORPTL(3,NPTL)=ZTARG(I)					        XORPTL(3,NPTL)=ZTARG(I)
        XORPTL(4,NPTL)=0.					        XORPTL(4,NPTL)=0.
        TIVPTL(1,NPTL)=-AINFIN					        TIVPTL(1,NPTL)=-AINFIN
        TIVPTL(2,NPTL)= AINFIN					        TIVPTL(2,NPTL)= AINFIN
        ISTPTL(NPTL)=0						        ISTPTL(NPTL)=0
        IORPTL(NPTL)=0						        IORPTL(NPTL)=0
        JORPTL(NPTL)=0						        JORPTL(NPTL)=0
        NNNPTL(NPTL)=NPTL					        NNNPTL(NPTL)=NPTL
 7    CONTINUE							 7    CONTINUE
      IF ( MAPROJ .EQ. 0 ) GOTO 1000				      IF ( MAPROJ .EQ. 0 ) GOTO 1000
      KOLL=0							      KOLL=0
      DO 12 I=1,MAPROJ						      DO 12 I=1,MAPROJ
        DO 12 J=1,MATARG					        DO 12 J=1,MATARG
          IF ( PI*( (XPROJ(I)+BX-XTARG(J))**2			          IF ( PI*( (XPROJ(I)+BX-XTARG(J))**2
     *        +(YPROJ(I)+BY-YTARG(J))**2 ) .GT. SIGPPI ) GOTO	     *        +(YPROJ(I)+BY-YTARG(J))**2 ) .GT. SIGPPI ) GOTO
          IF ( KOLL .GT. 0 ) THEN				          IF ( KOLL .GT. 0 ) THEN
            KP=0						            KP=0
            KT=0						            KT=0
            DO 30 KL=1,KOLL					            DO 30 KL=1,KOLL
              IF ( NRPROJ(KL) .EQ. I ) KP=1			              IF ( NRPROJ(KL) .EQ. I ) KP=1
              IF ( NRTARG(KL) .EQ. J ) KT=1			              IF ( NRTARG(KL) .EQ. J ) KT=1
30          CONTINUE						30          CONTINUE
CDH         FTRSIG=1.0						CDH         FTRSIG=1.0
            FTR=1.0						            FTR=1.0
CDH         IF ( KP .EQ. 1 ) FTR=FTR*FTRSIG			CDH         IF ( KP .EQ. 1 ) FTR=FTR*FTRSIG
CDH         IF ( KT .EQ. 1 ) FTR=FTR*FTRSIG			CDH         IF ( KT .EQ. 1 ) FTR=FTR*FTRSIG
            IF ( KP.EQ.1 .OR. KT.EQ.1 ) THEN			            IF ( KP.EQ.1 .OR. KT.EQ.1 ) THEN
              IF ( PI*( (XPROJ(I)+BX-XTARG(J))**2		              IF ( PI*( (XPROJ(I)+BX-XTARG(J))**2
     *           +(YPROJ(I)+BY-YTARG(J))**2 ) .GT. FTR*SIGPPI	     *           +(YPROJ(I)+BY-YTARG(J))**2 ) .GT. FTR*SIGPPI
            ENDIF						            ENDIF
          ENDIF							          ENDIF
          KOLL=KOLL+1						          KOLL=KOLL+1
          IF ( KOLL .GT. KOLLMX ) THEN				          IF ( KOLL .GT. KOLLMX ) THEN
            CALL UTSTOP('NUCOGE: KOLLMX TOO SMALL            	            CALL UTSTOP('NUCOGE: KOLLMX TOO SMALL            
          ENDIF							          ENDIF
          NRPROJ(KOLL)=I					          NRPROJ(KOLL)=I
          NRTARG(KOLL)=J					          NRTARG(KOLL)=J
          DISTCE(KOLL)=ZTARG(J)-ZPROJ(I)			          DISTCE(KOLL)=ZTARG(J)-ZPROJ(I)
          COORD(1,KOLL)=(XPROJ(I)+XTARG(J))*0.5			          COORD(1,KOLL)=(XPROJ(I)+XTARG(J))*0.5
          COORD(2,KOLL)=(YPROJ(I)+YTARG(J))*0.5			          COORD(2,KOLL)=(YPROJ(I)+YTARG(J))*0.5
          COORD(3,KOLL)=(ZPROJ(I)+ZTARG(J))*0.5			          COORD(3,KOLL)=(ZPROJ(I)+ZTARG(J))*0.5
          COORD(4,KOLL)=DISTCE(KOLL)*VELI			          COORD(4,KOLL)=DISTCE(KOLL)*VELI
          ISTPTL(I)=1						          ISTPTL(I)=1
          IORPTL(I)=-1						          IORPTL(I)=-1
          TIVPTL(2,I)=COORD(4,KOLL)				          TIVPTL(2,I)=COORD(4,KOLL)
          ISTPTL(MAPROJ+J)=1					          ISTPTL(MAPROJ+J)=1
          IORPTL(MAPROJ+J)=-1					          IORPTL(MAPROJ+J)=-1
          TIVPTL(2,MAPROJ+J)=COORD(4,KOLL)			          TIVPTL(2,MAPROJ+J)=COORD(4,KOLL)
12    CONTINUE							12    CONTINUE
      IF ( KOLL .LE. 1 ) GOTO 9999				      IF ( KOLL .LE. 1 ) GOTO 9999

      DO 21 N=2,KOLL						      DO 21 N=2,KOLL
        DO 22 M=1,N-1						        DO 22 M=1,N-1
          IF ( NRPROJ(M) .EQ. NRPROJ(N) ) GOTO 21		          IF ( NRPROJ(M) .EQ. NRPROJ(N) ) GOTO 21
22      CONTINUE						22      CONTINUE
        NPROJ=NPROJ+1						        NPROJ=NPROJ+1
21    CONTINUE							21    CONTINUE
      DO 23 N=2,KOLL						      DO 23 N=2,KOLL
        DO 24 M=1,N-1						        DO 24 M=1,N-1
          IF ( NRTARG(M) .EQ. NRTARG(N) ) GOTO 23		          IF ( NRTARG(M) .EQ. NRTARG(N) ) GOTO 23
24      CONTINUE						24      CONTINUE
        NTARG=NTARG+1						        NTARG=NTARG+1
23    CONTINUE							23    CONTINUE

      DO 20 N=1,KOLL-1						      DO 20 N=1,KOLL-1
        DO 20 M=N+1,KOLL					        DO 20 M=N+1,KOLL
          IF ( DISTCE(NORD(M)) .LT. DISTCE(NORD(N)) ) THEN	          IF ( DISTCE(NORD(M)) .LT. DISTCE(NORD(N)) ) THEN
            NORDM=NORD(M)					            NORDM=NORD(M)
            NORD(M)=NORD(N)					            NORD(M)=NORD(N)
            NORD(N)=NORDM					            NORD(N)=NORDM
          ENDIF							          ENDIF
20    CONTINUE							20    CONTINUE

9999  CONTINUE							9999  CONTINUE
      IF ( KOLL .LE. 0 ) GOTO 1000				      IF ( KOLL .LE. 0 ) GOTO 1000
      IF ( KOLL .LT. KO1KO2/10000  .OR.  KOLL .GT. MOD(KO1KO2	      IF ( KOLL .LT. KO1KO2/10000  .OR.  KOLL .GT. MOD(KO1KO2
     *                                                     GO	     *                                                     GO
      NEVT=1							      NEVT=1
      BIMEVT=BIMP						      BIMEVT=BIMP
      PHIEVT=PHI						      PHIEVT=PHI
      KOLEVT=KOLL						      KOLEVT=KOLL
      NPJEVT=NPROJ						      NPJEVT=NPROJ
      NTGEVT=NTARG						      NTGEVT=NTARG
      PMXEVT=PNLL						      PMXEVT=PNLL
      EGYEVT=ENGY						      EGYEVT=ENGY

1000  CONTINUE							1000  CONTINUE
      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN		      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN
        WRITE(IFCH,*)'NUCOGE (EXIT)'				        WRITE(IFCH,*)'NUCOGE (EXIT)'
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE NUCOLL						      SUBROUTINE NUCOLL

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS A  NUCLEUS-NUCLEUS COLLISION (INCL. NUCLEON-NUCLE	C  PERFORMS A  NUCLEUS-NUCLEUS COLLISION (INCL. NUCLEON-NUCLE
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NPRBMS=20)					      PARAMETER (NPRBMS=20)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CIV/     IVP,IVP0,IVT,IVT0			      COMMON /CIV/     IVP,IVP0,IVT,IVT0
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CNCE/    NCES,NCOLEX				      COMMON /CNCE/    NCES,NCOLEX
      COMMON /CNEW/    KOTRI,NEWCOL,NEWICO			      COMMON /CNEW/    KOTRI,NEWCOL,NEWICO
      COMMON /CNFR/    NRFRA					      COMMON /CNFR/    NRFRA
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CNTEVM/  NTEVM					      COMMON /CNTEVM/  NTEVM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPRBMS/  PRBMS(NPRBMS)				      COMMON /CPRBMS/  PRBMS(NPRBMS)
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS		      COMMON /PARTNR/  PEX,PEY,PEZET,PE0,PX4,PY4,SUMMAS
     *                ,IC4,IPTNR,JS4,NPS			     *                ,IC4,IPTNR,JS4,NPS

      REAL      PROJ(NSI,NHA),PROJA(NSI,NHA,MAMX)		      REAL      PROJ(NSI,NHA),PROJA(NSI,NHA,MAMX)
     *         ,TARG(NSI,NHA),TARGA(NSI,NHA,MAMX)		     *         ,TARG(NSI,NHA),TARGA(NSI,NHA,MAMX)
      INTEGER   IC4(2)						      INTEGER   IC4(2)
      CHARACTER DASH*1						      CHARACTER DASH*1
      DATA DASH/'-'/						      DATA DASH/'-'/
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 6 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 6 ) ISH=MOD(ISHSUB,100)
      IF     ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN		      IF     ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'NUCOLL (ENTRY)'				        WRITE(IFCH,*)'NUCOLL (ENTRY)'
CDH   ELSEIF ( ISH .EQ. 14 ) THEN				CDH   ELSEIF ( ISH .EQ. 14 ) THEN
CDH     CALL UTTIMA('*** NUCOLL *** ')				CDH     CALL UTTIMA('*** NUCOLL *** ')
      ENDIF							      ENDIF

      IF ( ISHSUB/100 .EQ. 7 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 7 ) ISH=MOD(ISHSUB,100)
      NEVT=0							      NEVT=0
      NPTL=0							      NPTL=0
      CALL NUCOGE						      CALL NUCOGE
      IF ( ICHOIC .EQ. 3  .OR.  KOLL .EQ. 0 ) GOTO 1000		      IF ( ICHOIC .EQ. 3  .OR.  KOLL .EQ. 0 ) GOTO 1000
      NAEVT=NAEVT+1						      NAEVT=NAEVT+1
      IF ( KOLL .LT. KO1KO2/10000  .OR.				      IF ( KOLL .LT. KO1KO2/10000  .OR.
     *     KOLL .GT. MOD(KO1KO2,10000) ) GOTO 1000		     *     KOLL .GT. MOD(KO1KO2,10000) ) GOTO 1000
      COLEVT=KOLL						      COLEVT=KOLL
      AMSEV=SQRT((NPJEVT*SQRT(AMPROJ**2+PNLLX**2)		      AMSEV=SQRT((NPJEVT*SQRT(AMPROJ**2+PNLLX**2)
     *           +NTGEVT*SQRT(AMTARG**2+PNLLX**2))**2		     *           +NTGEVT*SQRT(AMTARG**2+PNLLX**2))**2
     *                -((NPJEVT-NTGEVT)*PNLLX)**2)		     *                -((NPJEVT-NTGEVT)*PNLLX)**2)
      IF ( ISHSUB/100 .EQ. 7 ) ISH=ISH0				      IF ( ISHSUB/100 .EQ. 7 ) ISH=ISH0

      ITRY=0							      ITRY=0
38    CONTINUE							38    CONTINUE
      ITRY=ITRY+1						      ITRY=ITRY+1
      NSTR=0							      NSTR=0
      NPTL=0							      NPTL=0
      SUMPT2=0.							      SUMPT2=0.
      AMSAC=0.							      AMSAC=0.
      CALL NUCINI('NUC',PROJA,LAPROJ,MAPROJ,1)			      CALL NUCINI('NUC',PROJA,LAPROJ,MAPROJ,1)
      CALL NUCINI('NUC',TARGA,LATARG,IABS(MATARG),-1)		      CALL NUCINI('NUC',TARGA,LATARG,IABS(MATARG),-1)

      KOLRAN=RANGEN()*KOLL+1					      KOLRAN=RANGEN()*KOLL+1
      KOLRAN=MIN(KOLRAN,KOLL)					      KOLRAN=MIN(KOLRAN,KOLL)
      KOLRAN=MAX(KOLRAN,1)					      KOLRAN=MAX(KOLRAN,1)

      DO 2 KOLS=1,KOLL						      DO 2 KOLS=1,KOLL
        KOL=KOLS						        KOL=KOLS
        ISKIP=0							        ISKIP=0
        I=NRPROJ(NORD(KOL))					        I=NRPROJ(NORD(KOL))
        J=NRTARG(NORD(KOL))					        J=NRTARG(NORD(KOL))
        IPROJ=I							        IPROJ=I
        ITARG=J							        ITARG=J
        NRECOP=0						        NRECOP=0
        NRECOT=0						        NRECOT=0
        IF ( KOL .LT. KOLL ) THEN				        IF ( KOL .LT. KOLL ) THEN
          DO 33 K=KOL+1,KOLL					          DO 33 K=KOL+1,KOLL
            IF ( NRPROJ(NORD(K)) .EQ. I ) NRECOP=NRECOP+1	            IF ( NRPROJ(NORD(K)) .EQ. I ) NRECOP=NRECOP+1
            IF ( NRTARG(NORD(K)) .EQ. J ) NRECOT=NRECOT+1	            IF ( NRTARG(NORD(K)) .EQ. J ) NRECOT=NRECOT+1
33        CONTINUE						33        CONTINUE
        ENDIF							        ENDIF
        NCOP=0							        NCOP=0
        NCOT=0							        NCOT=0
        IF ( KOL .GT. 1 ) THEN					        IF ( KOL .GT. 1 ) THEN
          DO 34 K=1,KOL-1					          DO 34 K=1,KOL-1
            IF ( NRPROJ(NORD(K)) .EQ. I ) NCOP=NCOP+1		            IF ( NRPROJ(NORD(K)) .EQ. I ) NCOP=NCOP+1
            IF ( NRTARG(NORD(K)) .EQ. J ) NCOT=NCOT+1		            IF ( NRTARG(NORD(K)) .EQ. J ) NCOT=NCOT+1
34        CONTINUE						34        CONTINUE
        ENDIF							        ENDIF
        IF ( NCOP.GE.NCOLMX  .OR.  NCOT.GE.NCOLMX ) ISKIP=1	        IF ( NCOP.GE.NCOLMX  .OR.  NCOT.GE.NCOLMX ) ISKIP=1

        DO 56 M=1,NHA						        DO 56 M=1,NHA
          SM=0.							          SM=0.
          DO 57 N=1,NSI						          DO 57 N=1,NSI
            PROJ(N,M)=PROJA(N,M,I)				            PROJ(N,M)=PROJA(N,M,I)
            SM=SM+PROJ(N,M)**2					            SM=SM+PROJ(N,M)**2
57        CONTINUE						57        CONTINUE
          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 58		          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 58
56      CONTINUE						56      CONTINUE
58      CONTINUE						58      CONTINUE
        DO 53 M=1,NHA						        DO 53 M=1,NHA
          SM=0.							          SM=0.
          DO 54 N=1,NSI						          DO 54 N=1,NSI
            TARG(N,M)=TARGA(N,M,J)				            TARG(N,M)=TARGA(N,M,J)
            SM=SM+TARG(N,M)**2					            SM=SM+TARG(N,M)**2
54        CONTINUE						54        CONTINUE
          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 55		          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 55
53      CONTINUE						53      CONTINUE
55      CONTINUE						55      CONTINUE

        IF ( KOL .EQ. KOLRAN  .AND.  JPSI .EQ. 1 ) THEN		        IF ( KOL .EQ. KOLRAN  .AND.  JPSI .EQ. 1 ) THEN
          CALL PVJPSF(PROJ,TARG)				          CALL PVJPSF(PROJ,TARG)
          ISKIP=1						          ISKIP=1
        ENDIF							        ENDIF

C  NR OF COLOUR EXCHANGES					C  NR OF COLOUR EXCHANGES
C  ----------------------					C  ----------------------

        AMSAC0=AMSAC						        AMSAC0=AMSAC
        ISKIP0=ISKIP						        ISKIP0=ISKIP
        SMPT2=SUMPT2						        SMPT2=SUMPT2
        CALL UTREMB(PROJ,TARG,1)				        CALL UTREMB(PROJ,TARG,1)
        GOTO 4							        GOTO 4
 3      CONTINUE						 3      CONTINUE
        IF ( ISH .GE. 91 ) WRITE(IFCH,*)'REDO HH COLLISION'	        IF ( ISH .GE. 91 ) WRITE(IFCH,*)'REDO HH COLLISION'
        CALL UTREST(PROJ,TARG,1)				        CALL UTREST(PROJ,TARG,1)
        SUMPT2=SMPT2						        SUMPT2=SMPT2
        ISKIP=ISKIP0						        ISKIP=ISKIP0
        AMSAC=AMSAC0						        AMSAC=AMSAC0
 4      CONTINUE						 4      CONTINUE

        NCOLEX=1						        NCOLEX=1
        IF ( ISKIP .NE. 1 ) THEN				        IF ( ISKIP .NE. 1 ) THEN
          LO=0							          LO=0
16        LO=LO+1						16        LO=LO+1
          IF ( LO .EQ. 3 ) THEN					          IF ( LO .EQ. 3 ) THEN
            IF ( ISH .GE. 90 ) THEN				            IF ( ISH .GE. 90 ) THEN
              CALL UTMSG('NUCOLL')				              CALL UTMSG('NUCOLL')
              WRITE(IFCH,*)'*****  LO=3'			              WRITE(IFCH,*)'*****  LO=3'
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
          ENDIF							          ENDIF
          R=RANGEN()						          R=RANGEN()
          NCOLEX=0						          NCOLEX=0
15        NCOLEX=NCOLEX+1					15        NCOLEX=NCOLEX+1
          IF ( NCOLEX .GT. NPRBMS ) GOTO 16			          IF ( NCOLEX .GT. NPRBMS ) GOTO 16
          IF ( R .GT. PRBMS(NCOLEX) ) GOTO 15			          IF ( R .GT. PRBMS(NCOLEX) ) GOTO 15
        ENDIF							        ENDIF

C  HADRON-HADRON COLLISION					C  HADRON-HADRON COLLISION
C  -----------------------					C  -----------------------

        DO 31 NCE=1,NCOLEX					        DO 31 NCE=1,NCOLEX
          NCES=NCE						          NCES=NCE
          CALL UTPAGE						          CALL UTPAGE
          IF ( ISH .GE. 91 ) THEN				          IF ( ISH .GE. 91 ) THEN
            WRITE(IFCH,101)(DASH,L=1,79),IPAGE,KOL,NCE		            WRITE(IFCH,101)(DASH,L=1,79),IPAGE,KOL,NCE
     *        ,NRPROJ(NORD(KOL)),NRTARG(NORD(KOL)),(DASH,L=1,	     *        ,NRPROJ(NORD(KOL)),NRTARG(NORD(KOL)),(DASH,L=1,
101         FORMAT(/1X,79A1/1X,I5,'.PAGE             COL: ',I	101         FORMAT(/1X,79A1/1X,I5,'.PAGE             COL: ',I
     *           ,'   CEX: ',I2,'   PRJ: ',I3,'   TRG: ',I3/1	     *           ,'   CEX: ',I2,'   PRJ: ',I3,'   TRG: ',I3/1
          ENDIF							          ENDIF
          IF ( NRECOP .EQ. 0 ) THEN				          IF ( NRECOP .EQ. 0 ) THEN
            ISTORP=1						            ISTORP=1
          ELSE							          ELSE
            ISTORP=0						            ISTORP=0
          ENDIF							          ENDIF
          IF ( NRECOT .EQ. 0 ) THEN				          IF ( NRECOT .EQ. 0 ) THEN
            ISTORT=1						            ISTORT=1
          ELSE							          ELSE
            ISTORT=0						            ISTORT=0
          ENDIF							          ENDIF
          CALL HAHABS(PROJ,TARG					          CALL HAHABS(PROJ,TARG
     *           ,ISTORP*(NCE/NCOLEX),ISTORT*(NCE/NCOLEX),ISK	     *           ,ISTORP*(NCE/NCOLEX),ISTORT*(NCE/NCOLEX),ISK
          IF ( ISKIP .GE. 2 ) GOTO 9997				          IF ( ISKIP .GE. 2 ) GOTO 9997
          IF ( IRETHH .EQ. 1 ) GOTO 3				          IF ( IRETHH .EQ. 1 ) GOTO 3
          IF ( IRESCL .EQ. 1  .AND.  AMSAC .GT. AMSEV ) GOTO 	          IF ( IRESCL .EQ. 1  .AND.  AMSAC .GT. AMSEV ) GOTO 
          SUMPT2=SUMPT2+					          SUMPT2=SUMPT2+
     *            PROJ(1,2)**2+PROJ(2,2)**2+TARG(1,2)**2+TARG	     *            PROJ(1,2)**2+PROJ(2,2)**2+TARG(1,2)**2+TARG
          IF ( ISH .EQ. 11 ) WRITE(IFCH,*)'SUMPT2:',NREVT,KOL	          IF ( ISH .EQ. 11 ) WRITE(IFCH,*)'SUMPT2:',NREVT,KOL
          ISKIP=0						          ISKIP=0
31      CONTINUE						31      CONTINUE

        DO 40 M=1,NHA						        DO 40 M=1,NHA
          SM=0.							          SM=0.
          DO 41 N=1,NSI						          DO 41 N=1,NSI
            PROJA(N,M,I)=PROJ(N,M)				            PROJA(N,M,I)=PROJ(N,M)
            SM=SM+PROJ(N,M)**2					            SM=SM+PROJ(N,M)**2
41        CONTINUE						41        CONTINUE
          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 42		          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 42
40      CONTINUE						40      CONTINUE
42      CONTINUE						42      CONTINUE
        DO 43 M=1,NHA						        DO 43 M=1,NHA
          SM=0.							          SM=0.
          DO 44 N=1,NSI						          DO 44 N=1,NSI
            TARGA(N,M,J)=TARG(N,M)				            TARGA(N,M,J)=TARG(N,M)
            SM=SM+TARG(N,M)**2					            SM=SM+TARG(N,M)**2
44        CONTINUE						44        CONTINUE
          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 45		          IF ( M .GE. 3  .AND.  SM .LT. 1.E-5 ) GOTO 45
43      CONTINUE						43      CONTINUE
45      CONTINUE						45      CONTINUE
  2   CONTINUE							  2   CONTINUE

      IF ( SUMPT2 .LT. 1.E-5 ) GOTO 9999			      IF ( SUMPT2 .LT. 1.E-5 ) GOTO 9999

1000  CONTINUE							1000  CONTINUE
CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('    NUCOLL F   ')		CDH   IF ( ISH .EQ. 14 ) CALL UTTIMA('    NUCOLL F   ')
      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN		      IF ( ISH .EQ. 17  .OR.  ISH .GT. 92 ) THEN
        WRITE(IFCH,*)'NUCOLL (EXIT)'				        WRITE(IFCH,*)'NUCOLL (EXIT)'
      ENDIF							      ENDIF
      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN

9999  INOIAC=INOIAC+1						9999  INOIAC=INOIAC+1
      IF ( ISH .GE. 91  .OR.  ISH .EQ. 11 ) THEN		      IF ( ISH .GE. 91  .OR.  ISH .EQ. 11 ) THEN
        CALL UTMSG('NUCOLL')					        CALL UTMSG('NUCOLL')
        WRITE(IFCH,*)'*****  NO INTERACTION. REDO NUCOLL'	        WRITE(IFCH,*)'*****  NO INTERACTION. REDO NUCOLL'
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 38							      GOTO 38

9998  ILAMAS=ILAMAS+1						9998  ILAMAS=ILAMAS+1
      IF ( ISH .GE. 91  .OR. ISH .EQ. 12 ) THEN			      IF ( ISH .GE. 91  .OR. ISH .EQ. 12 ) THEN
        CALL UTMSG('NUCOLL')					        CALL UTMSG('NUCOLL')
        WRITE(IFCH,*)'*****  AMSAC>AMSEV: ',AMSAC,AMSEV		        WRITE(IFCH,*)'*****  AMSAC>AMSEV: ',AMSAC,AMSEV
     *    ,' . REDO NUCOLL'					     *    ,' . REDO NUCOLL'
        DO 1 NS=1,NSTR						        DO 1 NS=1,NSTR
          WRITE(IFCH,109)NS,(ICSTR(L,NS)/100,L=1,4)		          WRITE(IFCH,109)NS,(ICSTR(L,NS)/100,L=1,4)
     *              ,(PSTR(L,NS),L=3,5)				     *              ,(PSTR(L,NS),L=3,5)
109       FORMAT(1X,I3,3X,4I5,3(E11.3))				109       FORMAT(1X,I3,3X,4I5,3(E11.3))
1       CONTINUE						1       CONTINUE
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 38							      GOTO 38

9997  CONTINUE							9997  CONTINUE
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('NUCOLL')					        CALL UTMSG('NUCOLL')
        WRITE(IFCH,*)'*****  ISKIP>=2. REDO NUCOLL'		        WRITE(IFCH,*)'*****  ISKIP>=2. REDO NUCOLL'
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 38							      GOTO 38

      END							      END
C============================================================	C============================================================

      SUBROUTINE NUCSTR(IER)					      SUBROUTINE NUCSTR(IER)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMES X AND P TRAFOS FOR NUCLEONS FOR STRING DECAY IN 	C  PERFORMES X AND P TRAFOS FOR NUCLEONS FOR STRING DECAY IN 
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CLEP/    ICINPU,IDSCAT				      COMMON /CLEP/    ICINPU,IDSCAT
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( MATARG .NE. NPTL ) THEN				      IF ( MATARG .NE. NPTL ) THEN
        CALL UTSTOP('NUCSTR: MATARG /= NPTL                  	        CALL UTSTOP('NUCSTR: MATARG /= NPTL                  
      ENDIF							      ENDIF
      NCNT=0							      NCNT=0
3     NCNT=NCNT+1						3     NCNT=NCNT+1
      IF ( NCNT .GE. 10 ) GOTO 1001				      IF ( NCNT .GE. 10 ) GOTO 1001
      N0=MIN(1+INT(RANGEN()*NPTL),NPTL)				      N0=MIN(1+INT(RANGEN()*NPTL),NPTL)
      IF ( ICINPU .GT. 0  .AND.  IDPTL(N0) .NE. IDSCAT ) GOTO	      IF ( ICINPU .GT. 0  .AND.  IDPTL(N0) .NE. IDSCAT ) GOTO
      ISTPTL(N0)=1						      ISTPTL(N0)=1
      IORPTL(N0)=-1						      IORPTL(N0)=-1
      TIVPTL(2,N0)=0.						      TIVPTL(2,N0)=0.
      DO 2 N=1,NPTL						      DO 2 N=1,NPTL
        XORPTL(1,N)=XORPTL(1,N)-XORPTL(1,N0)			        XORPTL(1,N)=XORPTL(1,N)-XORPTL(1,N0)
        XORPTL(2,N)=XORPTL(2,N)-XORPTL(2,N0)			        XORPTL(2,N)=XORPTL(2,N)-XORPTL(2,N0)
        XORPTL(3,N)=XORPTL(3,N)-XORPTL(3,N0)			        XORPTL(3,N)=XORPTL(3,N)-XORPTL(3,N0)
        PHI=2.*PI*RANGEN()					        PHI=2.*PI*RANGEN()
        P1=      -ELEPTO*SIN(ANGMUE)*SIN(PHI)			        P1=      -ELEPTO*SIN(ANGMUE)*SIN(PHI)
        P2=      -ELEPTO*SIN(ANGMUE)*COS(PHI)			        P2=      -ELEPTO*SIN(ANGMUE)*COS(PHI)
        P3=ELEPTI-ELEPTO*COS(ANGMUE)				        P3=ELEPTI-ELEPTO*COS(ANGMUE)
        CALL UTROTA(1,P1,P2,P3,XORPTL(1,N),XORPTL(2,N),XORPTL	        CALL UTROTA(1,P1,P2,P3,XORPTL(1,N),XORPTL(2,N),XORPTL
        P3=SQRT(P1**2+P2**2+P3**2)				        P3=SQRT(P1**2+P2**2+P3**2)
        P1=0.							        P1=0.
        P2=0.							        P2=0.
        P4=PROM+ELEPTI-ELEPTO					        P4=PROM+ELEPTI-ELEPTO
        CALL UTLOBO(1,P1,P2,P3,P4,SQRT(P4**2-P3**2-P2**2-P1**	        CALL UTLOBO(1,P1,P2,P3,P4,SQRT(P4**2-P3**2-P2**2-P1**
     *        ,XORPTL(1,N),XORPTL(2,N),XORPTL(3,N),XORPTL(4,N	     *        ,XORPTL(1,N),XORPTL(2,N),XORPTL(3,N),XORPTL(4,N
        CALL UTLOBO(1,P1,P2,P3,P4,SQRT(P4**2-P3**2-P2**2-P1**	        CALL UTLOBO(1,P1,P2,P3,P4,SQRT(P4**2-P3**2-P2**2-P1**
     *         ,PPTL(1,N),PPTL(2,N),PPTL(3,N),PPTL(4,N))	     *         ,PPTL(1,N),PPTL(2,N),PPTL(3,N),PPTL(4,N))
2     CONTINUE							2     CONTINUE
      IER=0							      IER=0
      RETURN							      RETURN

1001  IER=1							1001  IER=1
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('NUCSTR')					        CALL UTMSG('NUCSTR')
        WRITE(IFCH,*)'*****  IDSCAT NOT POSSIBLE ==> REDO EVE	        WRITE(IFCH,*)'*****  IDSCAT NOT POSSIBLE ==> REDO EVE
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE PVJPSF(PROJ,TARG)				      SUBROUTINE PVJPSF(PROJ,TARG)

C------------------------------------------------------------	C------------------------------------------------------------
C  FORMS A JPSI							C  FORMS A JPSI
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KOLLMX=2500)					      PARAMETER (KOLLMX=2500)
      PARAMETER (MAMX=56)					      PARAMETER (MAMX=56)
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NDEP=129)					      PARAMETER (NDEP=129)
      PARAMETER (NDET=129)					      PARAMETER (NDET=129)
      PARAMETER (NGAU=129)					      PARAMETER (NGAU=129)
      PARAMETER (NPTJ=129)					      PARAMETER (NPTJ=129)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CGAU/    QGAU(NGAU),XGAU(NGAU)			      COMMON /CGAU/    QGAU(NGAU),XGAU(NGAU)
      COMMON /CKOL/    KOL					      COMMON /CKOL/    KOL
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM	      COMMON /COL/     BIMP,BMAX,COORD(4,KOLLMX),DISTCE(KOLLM
     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q	     *                ,QDEP(NDEP),QDET14(NDET),QDET16(NDET),Q
     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE	     *                ,QDET99(NDET),RMPROJ,RMTARG(4),XDEP(NDE
     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)	     *                ,XDET14(NDET),XDET16(NDET),XDET40(NDET)
     *                ,XDET99(NDET)				     *                ,XDET99(NDET)
     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K	     *                ,KOLL,LTARG,NORD(KOLLMX),NPROJ,NRPROJ(K
     *                ,NRTARG(KOLLMX),NTARG			     *                ,NRTARG(KOLLMX),NTARG
      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH	      COMMON /CPROJA/  IPROJ,ITARG,KPROJA(NHA,MAMX),KTARGA(NH
      COMMON /CPTJ/    QPTJ(NPTJ),XPTJ(NPTJ)			      COMMON /CPTJ/    QPTJ(NPTJ),XPTJ(NPTJ)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL PROJ(NSI,NHA),PR(4),TARG(NSI,NHA),TG(4)		      REAL PROJ(NSI,NHA),PR(4),TARG(NSI,NHA),TG(4)
C------------------------------------------------------------	C------------------------------------------------------------
      PAX=0.19							      PAX=0.19
      PROX=PROJ(3,2)						      PROX=PROJ(3,2)
      TARX=TARG(3,2)						      TARX=TARG(3,2)
      LOOP=0							      LOOP=0
      PR(1)=PROJ(1,2)						      PR(1)=PROJ(1,2)
      PR(2)=PROJ(2,2)						      PR(2)=PROJ(2,2)
      PR(3)=PROJ(3,2)						      PR(3)=PROJ(3,2)
      PR(4)=PROJ(4,2)						      PR(4)=PROJ(4,2)
      TG(1)=TARG(1,2)						      TG(1)=TARG(1,2)
      TG(2)=TARG(2,2)						      TG(2)=TARG(2,2)
      TG(3)=TARG(3,2)						      TG(3)=TARG(3,2)
      TG(4)=TARG(4,2)						      TG(4)=TARG(4,2)

      CALL UTPAGE						      CALL UTPAGE
      IF ( ISH .GE. 91 ) WRITE(IFCH,110)('-',L=1,79),IPAGE,('	      IF ( ISH .GE. 91 ) WRITE(IFCH,110)('-',L=1,79),IPAGE,('
110   FORMAT(1X,79A1/1X,I5,'.PAGE            '			110   FORMAT(1X,79A1/1X,I5,'.PAGE            '
     *         ,'JPSI FORMATION'/1X,79A1/)			     *         ,'JPSI FORMATION'/1X,79A1/)

5000  LOOP=LOOP+1						5000  LOOP=LOOP+1
      IF ( LOOP .GT. 100 ) THEN					      IF ( LOOP .GT. 100 ) THEN
        IF(ISH.GE.90)THEN					        IF(ISH.GE.90)THEN
          CALL UTMSG('PVJPSF')					          CALL UTMSG('PVJPSF')
          WRITE(IFCH,*)'*****  JPSI FORMATION NOT POSSIBLE'	          WRITE(IFCH,*)'*****  JPSI FORMATION NOT POSSIBLE'
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF
      PROJ(1,2)=PR(1)						      PROJ(1,2)=PR(1)
      PROJ(2,2)=PR(2)						      PROJ(2,2)=PR(2)
      PROJ(3,2)=PR(3)						      PROJ(3,2)=PR(3)
      PROJ(4,2)=PR(4)						      PROJ(4,2)=PR(4)
      TARG(1,2)=TG(1)						      TARG(1,2)=TG(1)
      TARG(2,2)=TG(2)						      TARG(2,2)=TG(2)
      TARG(3,2)=TG(3)						      TARG(3,2)=TG(3)
      TARG(4,2)=TG(4)						      TARG(4,2)=TG(4)

C  JPSI MOMENTA							C  JPSI MOMENTA
C  ------------							C  ------------
      ID=441							      ID=441
      CALL IDMASS(ID,AM)					      CALL IDMASS(ID,AM)
      S=AM**2							      S=AM**2
      PT=UTINVT(NPTJ,XPTJ,QPTJ,RANGEN()*QPTJ(NPTJ))		      PT=UTINVT(NPTJ,XPTJ,QPTJ,RANGEN()*QPTJ(NPTJ))
      PHI=2.*PI*RANGEN()					      PHI=2.*PI*RANGEN()
      PX=PT*COS(PHI)						      PX=PT*COS(PHI)
      PY=PT*SIN(PHI)						      PY=PT*SIN(PHI)
      LO=0							      LO=0
 1    LO=LO+1							 1    LO=LO+1
      IF ( LO .GT. 10 ) THEN					      IF ( LO .GT. 10 ) THEN
        CALL UTSTOP('PVJPSF: LO > 10                         	        CALL UTSTOP('PVJPSF: LO > 10                         
      ENDIF							      ENDIF
      Z=PAX*UTINVT(NGAU,XGAU,QGAU,RANGEN()*QGAU(NGAU))		      Z=PAX*UTINVT(NGAU,XGAU,QGAU,RANGEN()*QGAU(NGAU))
      IF ( Z .GT. 1. ) GOTO 1					      IF ( Z .GT. 1. ) GOTO 1
      IF ( RANGEN() .LE. 0.5 ) THEN				      IF ( RANGEN() .LE. 0.5 ) THEN
        PZ=Z*PNLLX						        PZ=Z*PNLLX
      ELSE							      ELSE
        PZ=-Z*PNLLX						        PZ=-Z*PNLLX
      ENDIF							      ENDIF
      E=SQRT(S+PX**2+PY**2+PZ**2)				      E=SQRT(S+PX**2+PY**2+PZ**2)
      PP=E+PZ							      PP=E+PZ
      PM=E-PZ							      PM=E-PZ

C  PROJ AND TARG MOMENTA					C  PROJ AND TARG MOMENTA
C  ---------------------					C  ---------------------
      R=RANGEN()						      R=RANGEN()
      POX=PROJ(1,2)-R*PX					      POX=PROJ(1,2)-R*PX
      POY=PROJ(2,2)-R*PY					      POY=PROJ(2,2)-R*PY
      POT2=(POX**2+POY**2)					      POT2=(POX**2+POY**2)
      R=1.-R							      R=1.-R
      PUX=TARG(1,2)-R*PX					      PUX=TARG(1,2)-R*PX
      PUY=TARG(2,2)-R*PY					      PUY=TARG(2,2)-R*PY
      PUT2=(PUX**2+PUY**2)					      PUT2=(PUX**2+PUY**2)
      POP=PROJ(4,2)+PROJ(3,2)					      POP=PROJ(4,2)+PROJ(3,2)
      POM=PROJ(4,2)-PROJ(3,2)					      POM=PROJ(4,2)-PROJ(3,2)
      PUP=TARG(4,2)+TARG(3,2)					      PUP=TARG(4,2)+TARG(3,2)
      PUM=TARG(4,2)-TARG(3,2)					      PUM=TARG(4,2)-TARG(3,2)
      PEP=POP+PUP-PP						      PEP=POP+PUP-PP
      PEM=POM+PUM-PM						      PEM=POM+PUM-PM
      A=(PEM*PEP-PUT2-POT2)*0.5					      A=(PEM*PEP-PUT2-POT2)*0.5
      D2=PUT2*POT2						      D2=PUT2*POT2
      AUXIL = A**2 - D2						      AUXIL = A**2 - D2
      IF ( AUXIL .LT. 0. ) GOTO 5000				      IF ( AUXIL .LT. 0. ) GOTO 5000
      AUXIL = SQRT(AUXIL)					      AUXIL = SQRT(AUXIL)
      PYP=(A+PUT2-AUXIL)/PEM					      PYP=(A+PUT2-AUXIL)/PEM
      PYM=(A+POT2-AUXIL)/PEP					      PYM=(A+POT2-AUXIL)/PEP
      IF ( PYP .LT. 0. ) GOTO 5000				      IF ( PYP .LT. 0. ) GOTO 5000
      IF ( PYM. LT. 0. ) GOTO 5000				      IF ( PYM. LT. 0. ) GOTO 5000
      PIP=PEP-PYP						      PIP=PEP-PYP
      IF ( PIP .LT. 0. ) GOTO 5000				      IF ( PIP .LT. 0. ) GOTO 5000
      PIM=PYM							      PIM=PYM
      PAP=PYP							      PAP=PYP
      PAM=PEM-PYM						      PAM=PEM-PYM
      IF ( PAM .LT. 0. ) GOTO 5000				      IF ( PAM .LT. 0. ) GOTO 5000
      PROJ(1,2)=POX						      PROJ(1,2)=POX
      PROJ(2,2)=POY						      PROJ(2,2)=POY
      PROJ(3,2)=(PIP-PIM)*0.5					      PROJ(3,2)=(PIP-PIM)*0.5
      PROJ(4,2)=(PIP+PIM)*0.5					      PROJ(4,2)=(PIP+PIM)*0.5
      TARG(1,2)=PUX						      TARG(1,2)=PUX
      TARG(2,2)=PUY						      TARG(2,2)=PUY
      TARG(3,2)=(PAP-PAM)*0.5					      TARG(3,2)=(PAP-PAM)*0.5
      TARG(4,2)=(PAP+PAM)*0.5					      TARG(4,2)=(PAP+PAM)*0.5
      KPROJA(2,IPROJ)=KOL					      KPROJA(2,IPROJ)=KOL
      KTARGA(2,ITARG)=KOL					      KTARGA(2,ITARG)=KOL
      IF ( PROJ(3,2)*PROX .LT. 0. ) GOTO 5000			      IF ( PROJ(3,2)*PROX .LT. 0. ) GOTO 5000
      IF ( TARG(3,2)*TARX .LT. 0. ) GOTO 5000			      IF ( TARG(3,2)*TARX .LT. 0. ) GOTO 5000

C  JPSI STRING							C  JPSI STRING
C  -----------							C  -----------
      NSTR=NSTR+1						      NSTR=NSTR+1
      IF ( NSTR .GT. MXSTR ) THEN				      IF ( NSTR .GT. MXSTR ) THEN
        CALL UTSTOP('PVJPSF: NSTR>MXSTR                      	        CALL UTSTOP('PVJPSF: NSTR>MXSTR                      
      ENDIF							      ENDIF
      IORSTR(NSTR)=-KOL						      IORSTR(NSTR)=-KOL
      ICSTR(1,NSTR)=000100					      ICSTR(1,NSTR)=000100
      ICSTR(2,NSTR)=0						      ICSTR(2,NSTR)=0
      ICSTR(3,NSTR)=0						      ICSTR(3,NSTR)=0
      ICSTR(4,NSTR)=000100					      ICSTR(4,NSTR)=000100
      PSTR(1,NSTR)=PX						      PSTR(1,NSTR)=PX
      PSTR(2,NSTR)=PY						      PSTR(2,NSTR)=PY
      PSTR(3,NSTR)=PZ						      PSTR(3,NSTR)=PZ
      PSTR(4,NSTR)=E						      PSTR(4,NSTR)=E
      PSTR(5,NSTR)=AM						      PSTR(5,NSTR)=AM
      ROTSTR(1,NSTR)=0.						      ROTSTR(1,NSTR)=0.
      ROTSTR(2,NSTR)=0.						      ROTSTR(2,NSTR)=0.
      ROTSTR(3,NSTR)=1.						      ROTSTR(3,NSTR)=1.
      XORSTR(1,NSTR)=COORD(1,KOL)				      XORSTR(1,NSTR)=COORD(1,KOL)
      XORSTR(2,NSTR)=COORD(2,KOL)				      XORSTR(2,NSTR)=COORD(2,KOL)
      XORSTR(3,NSTR)=COORD(3,KOL)				      XORSTR(3,NSTR)=COORD(3,KOL)
      XORSTR(4,NSTR)=COORD(4,KOL)				      XORSTR(4,NSTR)=COORD(4,KOL)
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( ISH .GE. 91 ) THEN					        IF ( ISH .GE. 91 ) THEN
          J=NSTR						          J=NSTR
          WRITE(IFCH,100)J,(ICSTR(K,J)/100,K=1,4)		          WRITE(IFCH,100)J,(ICSTR(K,J)/100,K=1,4)
     *           ,PSTR(3,J),PSTR(4,J),PSTR(5,J)			     *           ,PSTR(3,J),PSTR(4,J),PSTR(5,J)
100       FORMAT(' /CSTR/',I4,3X,4I5,3(E11.3))			100       FORMAT(' /CSTR/',I4,3X,4I5,3(E11.3))
        ENDIF							        ENDIF

C  CHECKS							C  CHECKS
C  ------							C  ------
        IF ( ABS(PIP*PIM-POT2) .GT. 1.E-4 ) THEN		        IF ( ABS(PIP*PIM-POT2) .GT. 1.E-4 ) THEN
          CALL UTMSG('PVJPSF')					          CALL UTMSG('PVJPSF')
          WRITE(IFCH,*)'*****  PIP*PIM /= POT**2'		          WRITE(IFCH,*)'*****  PIP*PIM /= POT**2'
          WRITE(IFCH,*)'PIP*PIM=',PIP*PIM,'POT**2=',POT2	          WRITE(IFCH,*)'PIP*PIM=',PIP*PIM,'POT**2=',POT2
          WRITE(IFCH,*)'PIP=',PIP,'   PIM=',PIM			          WRITE(IFCH,*)'PIP=',PIP,'   PIM=',PIM
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ABS(PAP*PAM-PUT2) .GT. 1.E-4 ) THEN		        IF ( ABS(PAP*PAM-PUT2) .GT. 1.E-4 ) THEN
          CALL UTMSG('PVJPSF')					          CALL UTMSG('PVJPSF')
          WRITE(IFCH,*)'*****  PAP*PAM /= PUT**2'		          WRITE(IFCH,*)'*****  PAP*PAM /= PUT**2'
          WRITE(IFCH,*)'PAP*PAM=',PAP*PAM,'PUT**2=',PUT2	          WRITE(IFCH,*)'PAP*PAM=',PAP*PAM,'PUT**2=',PUT2
          WRITE(IFCH,*)'PAP=',PAP,'   PAM=',PAM			          WRITE(IFCH,*)'PAP=',PAP,'   PAM=',PAM
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ABS(PROJ(4,2)**2					        IF ( ABS(PROJ(4,2)**2
     *      -PROJ(1,2)**2-PROJ(2,2)**2-PROJ(3,2)**2) .GT. 1.E	     *      -PROJ(1,2)**2-PROJ(2,2)**2-PROJ(3,2)**2) .GT. 1.E
          CALL UTMSG('PVJPSF')					          CALL UTMSG('PVJPSF')
          WRITE(IFCH,*)'*****  MASS**2 OF PROJ NONZERO'		          WRITE(IFCH,*)'*****  MASS**2 OF PROJ NONZERO'
          WRITE(IFCH,*)'MASS**2=',PROJ(4,2)**2			          WRITE(IFCH,*)'MASS**2=',PROJ(4,2)**2
     *              -PROJ(1,2)**2-PROJ(2,2)**2-PROJ(3,2)**2	     *              -PROJ(1,2)**2-PROJ(2,2)**2-PROJ(3,2)**2
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        IF ( ABS(TARG(4,2)**2					        IF ( ABS(TARG(4,2)**2
     *       -TARG(1,2)**2-TARG(2,2)**2-TARG(3,2)**2) .GT. 1.	     *       -TARG(1,2)**2-TARG(2,2)**2-TARG(3,2)**2) .GT. 1.
          CALL UTMSG('PVJPSF')					          CALL UTMSG('PVJPSF')
          WRITE(IFCH,*)'*****  MASS**2 OF TARG NONZERO'		          WRITE(IFCH,*)'*****  MASS**2 OF TARG NONZERO'
          WRITE(IFCH,*)'MASS**2=',TARG(4,2)**2			          WRITE(IFCH,*)'MASS**2=',TARG(4,2)**2
     *             -TARG(1,2)**2-TARG(2,2)**2-TARG(3,2)**2	     *             -TARG(1,2)**2-TARG(2,2)**2-TARG(3,2)**2
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        DO 14 N=1,4						        DO 14 N=1,4
          IF ( ABS(PR(N)+TG(N)					          IF ( ABS(PR(N)+TG(N)
     *       -PROJ(N,2)-TARG(N,2)-PSTR(N,NSTR)) .GT. 1.E-4 ) 	     *       -PROJ(N,2)-TARG(N,2)-PSTR(N,NSTR)) .GT. 1.E-4 ) 
14      CONTINUE						14      CONTINUE
        GOTO 16							        GOTO 16
15      CONTINUE						15      CONTINUE
        CALL UTMSG('PVJPSF')					        CALL UTMSG('PVJPSF')
        WRITE(IFCH,*)'*****  PROJ + TARG /= PROJ_NEW + TARG_N	        WRITE(IFCH,*)'*****  PROJ + TARG /= PROJ_NEW + TARG_N
        WRITE(IFCH,*)'PROJ,TARG:'				        WRITE(IFCH,*)'PROJ,TARG:'
        WRITE(IFCH,*)PR						        WRITE(IFCH,*)PR
        WRITE(IFCH,*)TG						        WRITE(IFCH,*)TG
        WRITE(IFCH,*)'PROJ_NEW,TARG_NEW,JPSI:'			        WRITE(IFCH,*)'PROJ_NEW,TARG_NEW,JPSI:'
        WRITE(IFCH,*)(PROJ(N,2),N=1,4)				        WRITE(IFCH,*)(PROJ(N,2),N=1,4)
        WRITE(IFCH,*)(TARG(N,2),N=1,4)				        WRITE(IFCH,*)(TARG(N,2),N=1,4)
        WRITE(IFCH,*)(PSTR(N,NSTR),N=1,4)			        WRITE(IFCH,*)(PSTR(N,NSTR),N=1,4)
        CALL UTMSGF						        CALL UTMSGF
16      CONTINUE						16      CONTINUE
      ENDIF							      ENDIF

      AMSAC=AMSAC+AM						      AMSAC=AMSAC+AM

1000  RETURN							1000  RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE RACPRO(TYP,QMU,N,ACPROB)			      SUBROUTINE RACPRO(TYP,QMU,N,ACPROB)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS THE ARRAY ACPROB CONTAINING ACCUMULATED PROB FOR:	C  RETURNS THE ARRAY ACPROB CONTAINING ACCUMULATED PROB FOR:
C    EXPONENTIAL OR POISSON DISTRIBUTION (FOR TYP = EXP OR PO	C    EXPONENTIAL OR POISSON DISTRIBUTION (FOR TYP = EXP OR PO
C    MULTI POMERON CUTS ACC TO GRIBOV (FOR TYP = GRI).		C    MULTI POMERON CUTS ACC TO GRIBOV (FOR TYP = GRI).
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP	      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP
     *                ,IWZZZZ					     *                ,IWZZZZ
      COMMON /PARO4/   GRICEL,GRIDEL,GRIGAM,GRIRSQ,GRISLO	      COMMON /PARO4/   GRICEL,GRIDEL,GRIGAM,GRIRSQ,GRISLO

      DOUBLE PRECISION DENOM,FZ,FZH,Q,QZ,QZH,Z			      DOUBLE PRECISION DENOM,FZ,FZH,Q,QZ,QZH,Z
      REAL             ACPROB(N)				      REAL             ACPROB(N)
      CHARACTER        TYP*3					      CHARACTER        TYP*3
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 17 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 17 ) ISH=MOD(ISHSUB,100)

C  GRIBOV-REGGE							C  GRIBOV-REGGE
C  ------------							C  ------------
      IF     ( TYP .EQ. 'GRI' ) THEN				      IF     ( TYP .EQ. 'GRI' ) THEN
        XI=LOG(ENGY**2)						        XI=LOG(ENGY**2)
        AUXIL = EXP(XI*GRIDEL)*GRIGAM				        AUXIL = EXP(XI*GRIDEL)*GRIGAM
        SIG=8.*PI*AUXIL						        SIG=8.*PI*AUXIL
        Z=2.D0*GRICEL/(GRIRSQ+GRISLO*XI)*AUXIL			        Z=2.D0*GRICEL/(GRIRSQ+GRISLO*XI)*AUXIL

C  0-CUT-POMERON PROBABILITY					C  0-CUT-POMERON PROBABILITY
C  -------------------------					C  -------------------------
        QZ=-1.D0/Z						        QZ=-1.D0/Z
        QZH=-2.D0/Z						        QZH=-2.D0/Z
        FZ=0.D0							        FZ=0.D0
        FZH=0.D0						        FZH=0.D0
        DO 10 I=1,20						        DO 10 I=1,20
          DENOM=1.D0/I						          DENOM=1.D0/I
          QZ=(-Z)*DENOM*QZ					          QZ=(-Z)*DENOM*QZ
          QZH=(-Z)*DENOM*0.5*QZH				          QZH=(-Z)*DENOM*0.5*QZH
          FZ=DENOM*QZ+FZ					          FZ=DENOM*QZ+FZ
          FZH=DENOM*QZH+FZH					          FZH=DENOM*QZH+FZH
10      CONTINUE						10      CONTINUE
        RELER=ABS( QZ/(I*FZ) )					        RELER=ABS( QZ/(I*FZ) )
        RELERH=ABS( QZH/(I*FZH) )				        RELERH=ABS( QZH/(I*FZH) )
        SIGPPZ=SIG*(FZH-FZ)					        SIGPPZ=SIG*(FZH-FZ)
        SIGPPE=SIGPPZ/GRICEL					        SIGPPE=SIGPPZ/GRICEL
        SIGPPD=SIGPPE*(GRICEL-1)				        SIGPPD=SIGPPE*(GRICEL-1)

C  N-CUT-POMERON PROBABILITIES, N>0				C  N-CUT-POMERON PROBABILITIES, N>0
C  --------------------------------				C  --------------------------------
        AUXIL = EXP(-Z)						        AUXIL = EXP(-Z)
        Q=1.							        Q=1.
        R=1.							        R=1.
        ACPROB(1)=SIG/Z*(1.-AUXIL)				        ACPROB(1)=SIG/Z*(1.-AUXIL)
        DO 21 I=2,N						        DO 21 I=2,N
          Q=Q*Z/(I-1)						          Q=Q*Z/(I-1)
          R=R+Q							          R=R+Q
          SI=SIG/(I*Z)*(1.-R*AUXIL)				          SI=SIG/(I*Z)*(1.-R*AUXIL)
          ACPROB(I)=ACPROB(I-1)+SI				          ACPROB(I)=ACPROB(I-1)+SI
21      CONTINUE						21      CONTINUE
        IF ( SIGPPI .LT. 0. ) SIGPPI=ACPROB(N)			        IF ( SIGPPI .LT. 0. ) SIGPPI=ACPROB(N)
        AUXIL2 = 1./ACPROB(N)					        AUXIL2 = 1./ACPROB(N)
        DO 22 I=1,N						        DO 22 I=1,N
          ACPROB(I)=AUXIL2*ACPROB(I)				          ACPROB(I)=AUXIL2*ACPROB(I)
22      CONTINUE						22      CONTINUE

C  WARNINGS							C  WARNINGS
C  --------							C  --------
        IF ( ISH.GE.90 ) THEN					        IF ( ISH.GE.90 ) THEN
          IF ( RELER .GT. 1.E-3 ) THEN				          IF ( RELER .GT. 1.E-3 ) THEN
            CALL UTMSG('RACPRO')				            CALL UTMSG('RACPRO')
            WRITE(IFCH,*)'*****  RELER TOO LARGE'		            WRITE(IFCH,*)'*****  RELER TOO LARGE'
            WRITE(IFCH,*)'RELER,QZ/I,FZ:',RELER,QZ/I,FZ		            WRITE(IFCH,*)'RELER,QZ/I,FZ:',RELER,QZ/I,FZ
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          IF ( RELERH .GT. 1.E-3 ) THEN				          IF ( RELERH .GT. 1.E-3 ) THEN
            CALL UTMSG('RACPRO')				            CALL UTMSG('RACPRO')
            WRITE(IFCH,*)'*****  RELERH TOO LARGE'		            WRITE(IFCH,*)'*****  RELERH TOO LARGE'
            WRITE(IFCH,*)'RELERH,QZH/I,FZH:',RELERH,QZH/I,FZH	            WRITE(IFCH,*)'RELERH,QZH/I,FZH:',RELERH,QZH/I,FZH
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          IF ( SIGPPZ .LT. 0. ) THEN				          IF ( SIGPPZ .LT. 0. ) THEN
            CALL UTMSG('RACPRO')				            CALL UTMSG('RACPRO')
            WRITE(IFCH,*)'*****  NEGATIVE SIGPPZ'		            WRITE(IFCH,*)'*****  NEGATIVE SIGPPZ'
            WRITE(IFCH,*)'SIGPPZ,SIG,FZH,FZ:',SIGPPZ,SIG,FZH,	            WRITE(IFCH,*)'SIGPPZ,SIG,FZH,FZ:',SIGPPZ,SIG,FZH,
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
          DO 24 I=1,N						          DO 24 I=1,N
            IF ( ACPROB(I) .LT. 0. ) THEN			            IF ( ACPROB(I) .LT. 0. ) THEN
              CALL UTMSG('RACPRO')				              CALL UTMSG('RACPRO')
              WRITE(IFCH,*)'*****  NEGATIVE ACPROB(I)'		              WRITE(IFCH,*)'*****  NEGATIVE ACPROB(I)'
              WRITE(IFCH,*)'I,ACPROB(I):',I,ACPROB(I)		              WRITE(IFCH,*)'I,ACPROB(I):',I,ACPROB(I)
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
24        CONTINUE						24        CONTINUE
          RELERN=ACPROB(N)-ACPROB(N-1)				          RELERN=ACPROB(N)-ACPROB(N-1)
          IF ( RELERN .GT. 1.E-3 ) THEN				          IF ( RELERN .GT. 1.E-3 ) THEN
            CALL UTMSG('RACPRO')				            CALL UTMSG('RACPRO')
            WRITE(IFCH,*)'*****  RELERN TOO LARGE'		            WRITE(IFCH,*)'*****  RELERN TOO LARGE'
            WRITE(IFCH,*)'RELERN:',RELERN			            WRITE(IFCH,*)'RELERN:',RELERN
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
        ENDIF							        ENDIF

C  PRINT							C  PRINT
C  -----							C  -----
        IF ( ISH .GE. 92 ) THEN					        IF ( ISH .GE. 92 ) THEN
100       FORMAT(1X,79A1)					100       FORMAT(1X,79A1)
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,100)('-',IC=1,79)				          WRITE(IFCH,100)('-',IC=1,79)
          WRITE(IFCH,*)'   CROSS SECTIONS AND',			          WRITE(IFCH,*)'   CROSS SECTIONS AND',
     *      ' CUT-POMERON WEIGHTS ACC TO GRIBOV-REGGE-THEORY'	     *      ' CUT-POMERON WEIGHTS ACC TO GRIBOV-REGGE-THEORY'
          WRITE(IFCH,100)('-',IC=1,79)				          WRITE(IFCH,100)('-',IC=1,79)
          WRITE(IFCH,*)'   CMS-ENERGY (GEV):',ENGY		          WRITE(IFCH,*)'   CMS-ENERGY (GEV):',ENGY
          WRITE(IFCH,100)('-',IC=1,79)				          WRITE(IFCH,100)('-',IC=1,79)
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'   PARAMETERS: '			          WRITE(IFCH,*)'   PARAMETERS: '
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'     GAMMA: ',GRIGAM			          WRITE(IFCH,*)'     GAMMA: ',GRIGAM
          WRITE(IFCH,*)'     R**2:  ',GRIRSQ			          WRITE(IFCH,*)'     R**2:  ',GRIRSQ
          WRITE(IFCH,*)'     DELTA: ',GRIDEL			          WRITE(IFCH,*)'     DELTA: ',GRIDEL
          WRITE(IFCH,*)'     SLOPE: ',GRISLO			          WRITE(IFCH,*)'     SLOPE: ',GRISLO
          WRITE(IFCH,*)'     C:     ',GRICEL			          WRITE(IFCH,*)'     C:     ',GRICEL
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'   CROSS SECTIONS:'			          WRITE(IFCH,*)'   CROSS SECTIONS:'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'     ELASTIC:     ',SIGPPE		          WRITE(IFCH,*)'     ELASTIC:     ',SIGPPE
          WRITE(IFCH,*)'     DIFFRACTIVE: ',SIGPPD		          WRITE(IFCH,*)'     DIFFRACTIVE: ',SIGPPD
          WRITE(IFCH,*)'     INELASTIC:   ',SIGPPI		          WRITE(IFCH,*)'     INELASTIC:   ',SIGPPI
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'   WEIGHTS W(N) OF N CUT POMERONS:'	          WRITE(IFCH,*)'   WEIGHTS W(N) OF N CUT POMERONS:'
          WRITE(IFCH,*)'      ( N - W(N) - W(N)_EXP )'		          WRITE(IFCH,*)'      ( N - W(N) - W(N)_EXP )'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          A=QMU/(QMU+1.)					          A=QMU/(QMU+1.)
          I=1							          I=1
          WRITE(IFCH,*)I,ACPROB(I),(1-A)*A**(I-1)		          WRITE(IFCH,*)I,ACPROB(I),(1-A)*A**(I-1)
          DO 25 I=2,N						          DO 25 I=2,N
            WRITE(IFCH,*)I,ACPROB(I)-ACPROB(I-1),(1-A)*A**(I-	            WRITE(IFCH,*)I,ACPROB(I)-ACPROB(I-1),(1-A)*A**(I-
25        CONTINUE						25        CONTINUE
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF

C  POISSON							C  POISSON
C  -------							C  -------
      ELSEIF ( TYP .EQ. 'POI' ) THEN				      ELSEIF ( TYP .EQ. 'POI' ) THEN
        Z=QMU							        Z=QMU
        IF ( Z .GE. N-1. ) THEN					        IF ( Z .GE. N-1. ) THEN
          CALL UTSTOP('RACPRO: Z >= N-1.                     	          CALL UTSTOP('RACPRO: Z >= N-1.                     
        ENDIF							        ENDIF
        K=MAX( 0.D0, Z-(N-1-Z) )+1.				        K=MAX( 0.D0, Z-(N-1-Z) )+1.
        IF ( K .GE. N ) THEN					        IF ( K .GE. N ) THEN
          CALL UTSTOP('RACPRO: K >= N.                       	          CALL UTSTOP('RACPRO: K >= N.                       
        ENDIF							        ENDIF
        IF     ( K .EQ. 1 ) THEN				        IF     ( K .EQ. 1 ) THEN
          PRBAB=EXP(-Z)						          PRBAB=EXP(-Z)
          ACPROB(1)=PRBAB					          ACPROB(1)=PRBAB
          DO 1 I=2,N						          DO 1 I=2,N
            PRBAB=PRBAB*Z/(I-1)					            PRBAB=PRBAB*Z/(I-1)
            ACPROB(I)=ACPROB(I-1)+PRBAB				            ACPROB(I)=ACPROB(I-1)+PRBAB
1         CONTINUE						1         CONTINUE
        ELSEIF ( K .GT. 1 ) THEN				        ELSEIF ( K .GT. 1 ) THEN
          X=Z*EXP(-Z/(K-1.))					          X=Z*EXP(-Z/(K-1.))
          PRBAB=1.						          PRBAB=1.
          DO 3 I=1,K-1						          DO 3 I=1,K-1
            PRBAB=PRBAB*X/I					            PRBAB=PRBAB*X/I
            ACPROB(I)=0.					            ACPROB(I)=0.
3         CONTINUE						3         CONTINUE
          ACPROB(K)=PRBAB					          ACPROB(K)=PRBAB
          DO 4 I=K+1,N						          DO 4 I=K+1,N
            PRBAB=PRBAB*Z/(I-1)					            PRBAB=PRBAB*Z/(I-1)
            ACPROB(I)=ACPROB(I-1)+PRBAB				            ACPROB(I)=ACPROB(I-1)+PRBAB
4         CONTINUE						4         CONTINUE
        ELSE							        ELSE
          CALL UTSTOP('RACPRO: K <= 0.                       	          CALL UTSTOP('RACPRO: K <= 0.                       
        ENDIF							        ENDIF

C  EXPONENTIAL							C  EXPONENTIAL
C  -----------							C  -----------
      ELSEIF ( TYP .EQ. 'EXP' ) THEN				      ELSEIF ( TYP .EQ. 'EXP' ) THEN
        A=QMU/(QMU+1.)						        A=QMU/(QMU+1.)
        PRBAB=1.-A						        PRBAB=1.-A
        ACPROB(1)=PRBAB						        ACPROB(1)=PRBAB
        DO 2 I=2,N						        DO 2 I=2,N
          PRBAB=PRBAB*A						          PRBAB=PRBAB*A
          ACPROB(I)=ACPROB(I-1)+PRBAB				          ACPROB(I)=ACPROB(I-1)+PRBAB
2       CONTINUE						2       CONTINUE
      ENDIF							      ENDIF

      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION RANSTC(XFL,XMIN)					      FUNCTION RANSTC(XFL,XMIN)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS RANDOM NUMBER ACCORDING TO A QUARK STRUCTURE FCTN	C  RETURNS RANDOM NUMBER ACCORDING TO A QUARK STRUCTURE FCTN
C  WITH X>=XMIN							C  WITH X>=XMIN
C								C
C  CHANGES  : D. HECK    IK3  KFK KARLSRUHE			C  CHANGES  : D. HECK    IK3  KFK KARLSRUHE
C  DATE     : MAR  22, 1994					C  DATE     : MAR  22, 1994
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSTRU=2049)					      PARAMETER (NSTRU=2049)
      COMMON /CIPIO/   IPIO					      COMMON /CIPIO/   IPIO
      COMMON /CUTINV/  LUTINV					      COMMON /CUTINV/  LUTINV
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /STRU/    QSEP(NSTRU),QSET(NSTRU),QVAP(NSTRU)	      COMMON /STRU/    QSEP(NSTRU),QSET(NSTRU),QVAP(NSTRU)
     *                ,QVAT(NSTRU),XCUTAR,XSTRU(NSTRU)		     *                ,QVAT(NSTRU),XCUTAR,XSTRU(NSTRU)
     *                ,IDTG					     *                ,IDTG
      COMMON /STRU2/   DELTA0,DELTA1,QSEH(NSTRU),QSEPI(NSTRU)	      COMMON /STRU2/   DELTA0,DELTA1,QSEH(NSTRU),QSEPI(NSTRU)
     *                ,QVAH(NSTRU),QVAPI(NSTRU),XSE(NSTRU),XV	     *                ,QVAH(NSTRU),QVAPI(NSTRU),XSE(NSTRU),XV
      CHARACTER XFL*3						      CHARACTER XFL*3
C -----------------------------------------------------------	C -----------------------------------------------------------
      NSTRUC = NSTRU						      NSTRUC = NSTRU
      IF     ( XFL .EQ. 'SEP' ) THEN				      IF     ( XFL .EQ. 'SEP' ) THEN
        RANSTC=RANXQ(NSTRUC,XSE  ,QSEP,XMIN)			        RANSTC=RANXQ(NSTRUC,XSE  ,QSEP,XMIN)
      ELSEIF ( XFL .EQ. 'SET' ) THEN				      ELSEIF ( XFL .EQ. 'SET' ) THEN
        RANSTC=RANXQ(NSTRUC,XSE  ,QSET,XMIN)			        RANSTC=RANXQ(NSTRUC,XSE  ,QSET,XMIN)
      ELSEIF ( XFL .EQ. 'VAP' ) THEN				      ELSEIF ( XFL .EQ. 'VAP' ) THEN
        RANSTC=RANXQ(NSTRUC,XVA  ,QVAP,XMIN)			        RANSTC=RANXQ(NSTRUC,XVA  ,QVAP,XMIN)
      ELSEIF ( XFL .EQ. 'VAT' ) THEN				      ELSEIF ( XFL .EQ. 'VAT' ) THEN
        RANSTC=RANXQ(NSTRUC,XVA  ,QVAT,XMIN)			        RANSTC=RANXQ(NSTRUC,XVA  ,QVAT,XMIN)
      ENDIF							      ENDIF
1     RETURN							1     RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION RANXQ(N,X,Q,XMIN)				      FUNCTION RANXQ(N,X,Q,XMIN)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS RANDOM NUMBER ACCORDING TO X(I) Q(I) WITH X>=XMIN	C  RETURNS RANDOM NUMBER ACCORDING TO X(I) Q(I) WITH X>=XMIN
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      REAL X(N),Q(N)						      REAL X(N),Q(N)
      REAL XMIN,QRAN						      REAL XMIN,QRAN
C------------------------------------------------------------	C------------------------------------------------------------
      IMIN=1							      IMIN=1
      IF ( XMIN .EQ. 0. ) GOTO 3				      IF ( XMIN .EQ. 0. ) GOTO 3
      I1=1							      I1=1
      I2=N							      I2=N
 1    I=I1+(I2-I1)/2						 1    I=I1+(I2-I1)/2
      IF     ( X(I) .LT. XMIN ) THEN				      IF     ( X(I) .LT. XMIN ) THEN
        I1=I							        I1=I
      ELSEIF ( X(I) .GT. XMIN ) THEN				      ELSEIF ( X(I) .GT. XMIN ) THEN
        I2=I							        I2=I
      ELSE							      ELSE
        IMIN=I							        IMIN=I
        GOTO 3							        GOTO 3
      ENDIF							      ENDIF
      IF ( I2-I1 .GT. 1 ) GOTO 1				      IF ( I2-I1 .GT. 1 ) GOTO 1
      IMIN=I2							      IMIN=I2
 3    CONTINUE							 3    CONTINUE
      IF ( Q(IMIN) .GT. Q(N)*.9999 ) THEN			      IF ( Q(IMIN) .GT. Q(N)*.9999 ) THEN
        RANXQ=XMIN						        RANXQ=XMIN
        GOTO 4							        GOTO 4
      ENDIF							      ENDIF
      QRAN=Q(IMIN)+RANGEN()*(Q(N)-Q(IMIN))			      QRAN=Q(IMIN)+RANGEN()*(Q(N)-Q(IMIN))
      RANXQ=UTINVT(N,X,Q,QRAN)					      RANXQ=UTINVT(N,X,Q,QRAN)
 4    CONTINUE							 4    CONTINUE
      IF ( RANXQ .LT. XMIN ) THEN				      IF ( RANXQ .LT. XMIN ) THEN
        IF(ISH.GE.90)THEN					        IF(ISH.GE.90)THEN
          CALL UTMSG('RANXQ ')					          CALL UTMSG('RANXQ ')
          WRITE(IFCH,*)'*****  RANXQ=',RANXQ,' <       XMIN='	          WRITE(IFCH,*)'*****  RANXQ=',RANXQ,' <       XMIN='
          WRITE(IFCH,*)'Q(IMIN) Q Q(N):',Q(IMIN),QRAN,Q(N)	          WRITE(IFCH,*)'Q(IMIN) Q Q(N):',Q(IMIN),QRAN,Q(N)
          WRITE(IFCH,*)'X(IMIN) X X(N):',X(IMIN),RANXQ,X(N)	          WRITE(IFCH,*)'X(IMIN) X X(N):',X(IMIN),RANXQ,X(N)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        RANXQ=XMIN						        RANXQ=XMIN
      ENDIF							      ENDIF
      IF ( ISH .GT. 91 ) THEN					      IF ( ISH .GT. 91 ) THEN
        WRITE(IFCH,*)'RANXQ:'					        WRITE(IFCH,*)'RANXQ:'
        WRITE(IFCH,*)'   Q(IMIN) Q Q(N):',Q(IMIN),QRAN,Q(N)	        WRITE(IFCH,*)'   Q(IMIN) Q Q(N):',Q(IMIN),QRAN,Q(N)
        WRITE(IFCH,*)'   X(IMIN) X X(N):',X(IMIN),RANXQ,X(N)	        WRITE(IFCH,*)'   X(IMIN) X X(N):',X(IMIN),RANXQ,X(N)
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SBET(Z,W)					      FUNCTION SBET(Z,W)

C------------------------------------------------------------	C------------------------------------------------------------
      SBET=SGAM(Z)*SGAM(W)/SGAM(Z+W)				      SBET=SGAM(Z)*SGAM(W)/SGAM(Z+W)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SDENSI(R)					      FUNCTION SDENSI(R)

C------------------------------------------------------------	C------------------------------------------------------------
C  NUCLEAR DENSITY						C  NUCLEAR DENSITY
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CDEN/   MASSNR,RMX,R0				      COMMON /CDEN/   MASSNR,RMX,R0
C  AI IS INVERSE OF A=0.54					C  AI IS INVERSE OF A=0.54
      REAL AI							      REAL AI
      DATA AI/1.85185185/					      DATA AI/1.85185185/
C------------------------------------------------------------	C------------------------------------------------------------
      SDENSI=R**2 / ( 1. + EXP((R-R0)*AI) )			      SDENSI=R**2 / ( 1. + EXP((R-R0)*AI) )
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SGAM(X)						      FUNCTION SGAM(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  GAMMA FUNCTION						C  GAMMA FUNCTION
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      DOUBLE PRECISION GC(13),GF,GP,GX,GY,GZ			      DOUBLE PRECISION GC(13),GF,GP,GX,GY,GZ
      DATA GC/							      DATA GC/
     *  0.000539698958808D0, 0.002619307282746D0, 0.020449630	     *  0.000539698958808D0, 0.002619307282746D0, 0.020449630
     *  0.073094836414370D0, 0.279643691578538D0, 0.553387692	     *  0.073094836414370D0, 0.279643691578538D0, 0.553387692
     *  0.999999999999998D0,-0.000832724708684D0, 0.004698658	     *  0.999999999999998D0,-0.000832724708684D0, 0.004698658
     *  0.022523834747260D0,-0.170447932874746D0,-0.056810335	     *  0.022523834747260D0,-0.170447932874746D0,-0.056810335
     *  1.130603357286556D0/					     *  1.130603357286556D0/
      DATA GP / 3.141592653589793D0 /				      DATA GP / 3.141592653589793D0 /
C------------------------------------------------------------	C------------------------------------------------------------
      GF = 0.D0							      GF = 0.D0
      GX = DBLE(X)						      GX = DBLE(X)
      GZ = GX							      GZ = GX
      IF ( GX .GT. 0.D0 ) GOTO 1				      IF ( GX .GT. 0.D0 ) GOTO 1
      IF ( GX .EQ. DINT(GX) ) THEN				      IF ( GX .EQ. DINT(GX) ) THEN
        WRITE(IFCH,'('' ARGUMENT OF GAMMA FUNCTION ='',E20.5)	        WRITE(IFCH,'('' ARGUMENT OF GAMMA FUNCTION ='',E20.5)
        CALL UTSTOP('SGAM : NEGATIVE INTEGER ARGUMENT        	        CALL UTSTOP('SGAM : NEGATIVE INTEGER ARGUMENT        
         GOTO 5							         GOTO 5
      ENDIF							      ENDIF
      GZ = 1.D0 - GZ						      GZ = 1.D0 - GZ
 1    CONTINUE							 1    CONTINUE
      GY = 1.D0 / GZ						      GY = 1.D0 / GZ
      IF ( GZ .LE. 1.D0 ) GOTO 4				      IF ( GZ .LE. 1.D0 ) GOTO 4
      GY = 1.D0							      GY = 1.D0
 2    CONTINUE							 2    CONTINUE
      IF ( GZ .LT. 2.D0 ) GOTO 3				      IF ( GZ .LT. 2.D0 ) GOTO 3
      GZ = GZ - 1.D0						      GZ = GZ - 1.D0
      GY = GY * GZ						      GY = GY * GZ
      GOTO 2							      GOTO 2
 3    CONTINUE							 3    CONTINUE
      GZ = GZ - 1.D0						      GZ = GZ - 1.D0
 4    CONTINUE							 4    CONTINUE
      GF = GY * ((((((GC(1)*GZ+GC(2))*GZ+GC(3))*GZ+GC(4))*GZ+	      GF = GY * ((((((GC(1)*GZ+GC(2))*GZ+GC(3))*GZ+GC(4))*GZ+
     *       GC(5))*GZ+GC(6))*GZ+GC(7))/((((((GC(8)*GZ+GC(9))	     *       GC(5))*GZ+GC(6))*GZ+GC(7))/((((((GC(8)*GZ+GC(9))
     *       GC(10))*GZ+GC(11))*GZ+GC(12))*GZ+GC(13))*GZ+1.D0	     *       GC(10))*GZ+GC(11))*GZ+GC(12))*GZ+GC(13))*GZ+1.D0
      IF ( GX .LE. 0.D0 ) GF = GP / ( SIN(GP*GX) * GF )		      IF ( GX .LE. 0.D0 ) GF = GP / ( SIN(GP*GX) * GF )
 5    CONTINUE							 5    CONTINUE
      SGAM = GF							      SGAM = GF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SGAU(X)						      FUNCTION SGAU(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS GAUSSIAN DISTRIBUTION (NOT NORMALIZED)		C  RETURNS GAUSSIAN DISTRIBUTION (NOT NORMALIZED)
C------------------------------------------------------------	C------------------------------------------------------------
      SGAU=EXP(-0.5*X**2)					      SGAU=EXP(-0.5*X**2)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE SHOPAR						      SUBROUTINE SHOPAR

C------------------------------------------------------------	C------------------------------------------------------------
      DOUBLE PRECISION SEEDC,SEEDI				      DOUBLE PRECISION SEEDC,SEEDI
      COMMON /CSEED/   SEEDC,SEEDI				      COMMON /CSEED/   SEEDC,SEEDI
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP	      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP
     *                ,IWZZZZ					     *                ,IWZZZZ
      COMMON /PARO4/   GRICEL,GRIDEL,GRIGAM,GRIRSQ,GRISLO	      COMMON /PARO4/   GRICEL,GRIDEL,GRIGAM,GRIRSQ,GRISLO
      COMMON /PARO5/   DELEPS,DELVOL				      COMMON /PARO5/   DELEPS,DELVOL
      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS			      COMMON /QUARKM/  SMAS,SSMAS,USMAS,UUMAS
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( ISUP .NE. 1  .AND.  ISH .GE. 90 ) THEN		      IF ( ISUP .NE. 1  .AND.  ISH .GE. 90 ) THEN
        WRITE(IFMT,102)('*',I=1,69)				        WRITE(IFMT,102)('*',I=1,69)
     *    ,TAUNLL,MAXRES,PTF,PTQ,IOPTQ,PTMX,NEQMN,IAQU,WTARG	     *    ,TAUNLL,MAXRES,PTF,PTQ,IOPTQ,PTMX,NEQMN,IAQU,WTARG
     *    ,WPROJ,QMUST,SIGPPI,CORE,FCTRMX,NCOLMX,LABSYS,IRESC	     *    ,WPROJ,QMUST,SIGPPI,CORE,FCTRMX,NCOLMX,LABSYS,IRESC
     *    ,NTRYMX,DELMSS,SEEDI,GAUMX,BMAXIM,PUD,PSPINL,PSPINH	     *    ,NTRYMX,DELMSS,SEEDI,GAUMX,BMAXIM,PUD,PSPINL,PSPINH
     *    ,NCLEAN,JPSI,CUTMSS,RSTRAS,ISTMAX,TENSN,NEQMX,IPAGI	     *    ,NCLEAN,JPSI,CUTMSS,RSTRAS,ISTMAX,TENSN,NEQMX,IPAGI
     *    ,PDIQUA,PAREA,DELREM,TAUMX,NSTTAU,SIGJ,JPSIFI,BMINI	     *    ,PDIQUA,PAREA,DELREM,TAUMX,NSTTAU,SIGJ,JPSIFI,BMINI
     *    ,RADIAC,TAUMIN,TAUMAX,NUMTAU,THEMAS,AMSIAC,ELEPTI	     *    ,RADIAC,TAUMIN,TAUMAX,NUMTAU,THEMAS,AMSIAC,ELEPTI
102     FORMAT(' ',69A1						102     FORMAT(' ',69A1
     */' *  TAUNLL=',F7.3,'  MAXRES=',I7,'  PTF   =',F7.3	     */' *  TAUNLL=',F7.3,'  MAXRES=',I7,'  PTF   =',F7.3
     *,'  PTQ   =',F7.3,'   *'/' *  IOPTQ =',I7,'  PTMX  =',F	     *,'  PTQ   =',F7.3,'   *'/' *  IOPTQ =',I7,'  PTMX  =',F
     *,'  NEQMN =',I7,'  IAQU  =',I7,'   *'/' *  WTARG =',F7.	     *,'  NEQMN =',I7,'  IAQU  =',I7,'   *'/' *  WTARG =',F7.
     *,'  WPROJ =',F7.3,'  QMUST =',F7.3,'  SIGPPI=',F7.3,'  	     *,'  WPROJ =',F7.3,'  QMUST =',F7.3,'  SIGPPI=',F7.3,'  
     */' *  CORE  =',F7.3,'  FCTRMX=',F7.3,'  NCOLMX=',I7	     */' *  CORE  =',F7.3,'  FCTRMX=',F7.3,'  NCOLMX=',I7
     *,'  LABSYS=',  I7,'   *'/' *  IRESCL=',I7,'  OVERLP=',F	     *,'  LABSYS=',  I7,'   *'/' *  IRESCL=',I7,'  OVERLP=',F
     *,'  NTRYMX=',I7,'  DELMSS=',F7.3,'   *'/' *  SEEDI=',D2	     *,'  NTRYMX=',I7,'  DELMSS=',F7.3,'   *'/' *  SEEDI=',D2
     *,'  GAUMX =',F7.3,'  BMAXIM=',F7.1,'   *'/' *  PUD   ='	     *,'  GAUMX =',F7.3,'  BMAXIM=',F7.1,'   *'/' *  PUD   ='
     *,'  PSPINL=',F7.3,'  PSPINH=',F7.3,'  PISPN =',F7.3,'  	     *,'  PSPINL=',F7.3,'  PSPINH=',F7.3,'  PISPN =',F7.3,'  
     */' *  NCLEAN=',I7,'  JPSI  =',I7,'  CUTMSS=',F7.3		     */' *  NCLEAN=',I7,'  JPSI  =',I7,'  CUTMSS=',F7.3
     *,'  RSTRAS=',F7.3,'   *'/' *  ISTMAX=',I7,'  TENSN =',F	     *,'  RSTRAS=',F7.3,'   *'/' *  ISTMAX=',I7,'  TENSN =',F
     *,'  NEQMX =',I7,'  IPAGI =',I7,'   *'/' *  NDECAY=',I7	     *,'  NEQMX =',I7,'  IPAGI =',I7,'   *'/' *  NDECAY=',I7
     *,'  PDIQUA=',F7.3,'  PAREA =',F7.3,'  DELREM=',F7.3,'  	     *,'  PDIQUA=',F7.3,'  PAREA =',F7.3,'  DELREM=',F7.3,'  
     */' *  TAUMX =',F7.3,'  NSTTAU=',I7,'  SIGJ  =',F7.3	     */' *  TAUMX =',F7.3,'  NSTTAU=',I7,'  SIGJ  =',F7.3
     *,'  JPSIFI=',I7,'   *'/' *  BMINIM=',F7.1,'  RADIAC=',F	     *,'  JPSIFI=',I7,'   *'/' *  BMINIM=',F7.1,'  RADIAC=',F
     *,'  TAUMIN=',F7.3,'  TAUMAX=',F7.3,'   *'/' *  NUMTAU='	     *,'  TAUMIN=',F7.3,'  TAUMAX=',F7.3,'   *'/' *  NUMTAU='
     *,'  THEMAS=',F7.3,'  AMSIAC=',F7.3,'  ELEPTI=',F7.3,'  	     *,'  THEMAS=',F7.3,'  AMSIAC=',F7.3,'  ELEPTI=',F7.3,'  
        WRITE(IFMT,108)						        WRITE(IFMT,108)
     *    ELEPTO,ANGMUE,SMAS,UUMAS,USMAS,SSMAS,IOPBRK,NDECAW	     *    ELEPTO,ANGMUE,SMAS,UUMAS,USMAS,SSMAS,IOPBRK,NDECAW
     *   ,IMIHIS,KENTRO,RADIAS,ISPHIS,RHOPHI,ICLHIS,ISHSUB,IO	     *   ,IMIHIS,KENTRO,RADIAS,ISPHIS,RHOPHI,ICLHIS,ISHSUB,IO
     *   ,IOPENT,CUTMSQ,KUTDIQ,IDPM,TAUREA,ISPALL,YMXIMI,PTH,	     *   ,IOPENT,CUTMSQ,KUTDIQ,IDPM,TAUREA,ISPALL,YMXIMI,PTH,
     *   ,IOPTF,PROSEA,NDECAX,WTMINI,WTSTEP,IWCENT,ISHEVT,PVA	     *   ,IOPTF,PROSEA,NDECAX,WTMINI,WTSTEP,IWCENT,ISHEVT,PVA
     *   ,IFRADE,IENTRO,GRIGAM,GRIRSQ,GRIDEL,GRISLO,GRICEL,IJ	     *   ,IFRADE,IENTRO,GRIGAM,GRIRSQ,GRIDEL,GRISLO,GRICEL,IJ
     *   ,UENTRO,IWZZZZ,IOJINT,AMPRIF,DELVOL,DELEPS		     *   ,UENTRO,IWZZZZ,IOJINT,AMPRIF,DELVOL,DELEPS
     *   ,('*',I=1,69)						     *   ,('*',I=1,69)
108     FORMAT(							108     FORMAT(
     * ' *  ELEPTO=',F7.3,'  ANGMUE=',F7.3,'  SMAS  =',F7.3	     * ' *  ELEPTO=',F7.3,'  ANGMUE=',F7.3,'  SMAS  =',F7.3
     *,'  UUMAS =',F7.3,'   *'/' *  USMAS =',F7.3,'  SSMAS ='	     *,'  UUMAS =',F7.3,'   *'/' *  USMAS =',F7.3,'  SSMAS ='
     *,'  IOPBRK=',I7,'  NDECAW=',I7  ,'   *'/' *  IMIHIS=',I	     *,'  IOPBRK=',I7,'  NDECAW=',I7  ,'   *'/' *  IMIHIS=',I
     *,'  KENTRO=',I7,'  RADIAS=',F7.3,'  ISPHIS=',I7  ,'   *	     *,'  KENTRO=',I7,'  RADIAS=',F7.3,'  ISPHIS=',I7  ,'   *
     */' *  RHOPHI=',F7.3,'  ICLHIS=',I7  ,'  ISHSUB=',I7	     */' *  RHOPHI=',F7.3,'  ICLHIS=',I7  ,'  ISHSUB=',I7
     *,'  IOPENU=',I7  ,'   *'/' *  IOPENT=',I7,'  CUTMSQ=',F	     *,'  IOPENU=',I7  ,'   *'/' *  IOPENT=',I7,'  CUTMSQ=',F
     *,'  KUTDIQ=',I7  ,'  IDPM  =',I7  ,'   *'/' *  TAUREA='	     *,'  KUTDIQ=',I7  ,'  IDPM  =',I7  ,'   *'/' *  TAUREA='
     *,'  ISPALL=',I7  ,'  YMXIMI=',F7.3,'  PTH   =',F7.3,'  	     *,'  ISPALL=',I7  ,'  YMXIMI=',F7.3,'  PTH   =',F7.3,'  
     */' *  PHARD =',F7.3,'  IOPTF =',I7  ,'  PROSEA=',F7.3	     */' *  PHARD =',F7.3,'  IOPTF =',I7  ,'  PROSEA=',F7.3
     *,'  NDECAX=',I7  ,'   *'/' *  WTMINI=',F7.3,'  WTSTEP='	     *,'  NDECAX=',I7  ,'   *'/' *  WTMINI=',F7.3,'  WTSTEP='
     *,'  IWCENT=',I7  ,'  ISHEVT=',I7  ,'   *'/' *  PVALEN='	     *,'  IWCENT=',I7  ,'  ISHEVT=',I7  ,'   *'/' *  PVALEN='
     *,'  IFRADE=',I7  ,'  IENTRO=',I7  ,'  GRIGAM=',F7.3,'  	     *,'  IFRADE=',I7  ,'  IENTRO=',I7  ,'  GRIGAM=',F7.3,'  
     */' *  GRIRSQ=',F7.3,'  GRIDEL=',F7.3,'  GRISLO=',F7.3	     */' *  GRIRSQ=',F7.3,'  GRIDEL=',F7.3,'  GRISLO=',F7.3
     *,'  GRICEL=',F7.3,'   *'/' *  IJPHIS=',I7  ,'  UENTRO='	     *,'  GRICEL=',F7.3,'   *'/' *  IJPHIS=',I7  ,'  UENTRO='
     *,'  IWZZZZ=',I7  ,'  IOJINT=',I7  ,'   *'/' *  AMPRIF='	     *,'  IWZZZZ=',I7  ,'  IOJINT=',I7  ,'   *'/' *  AMPRIF='
     *,'  DELVOL=',F7.3,'  DELEPS=',F7.3,'         ',7X  ,'  	     *,'  DELVOL=',F7.3,'  DELEPS=',F7.3,'         ',7X  ,'  
     */' ',69A1)						     */' ',69A1)
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SJCENT(K,KU,U)					      FUNCTION SJCENT(K,KU,U)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS ENTROPY.						C  RETURNS ENTROPY.
C  INPUT: QUARK NUMBER K; ENERGY U (GEV).			C  INPUT: QUARK NUMBER K; ENERGY U (GEV).
C  IOPENT=1: OSCILLATOR MODEL.					C  IOPENT=1: OSCILLATOR MODEL.
C    INTERPOLATES AND EXTRAPOLATES ENTRO(1+K,1+N)		C    INTERPOLATES AND EXTRAPOLATES ENTRO(1+K,1+N)
C    FROM SR JCENTR (JCENTD).					C    FROM SR JCENTR (JCENTD).
C    SR JCENTR (JCENTD) HAS TO BE CALLED BEFORE!!		C    SR JCENTR (JCENTD) HAS TO BE CALLED BEFORE!!
C  IOPENT=2,3: FERMI GAS MODEL; JOERG  AICHELIN.		C  IOPENT=2,3: FERMI GAS MODEL; JOERG  AICHELIN.
C    IOPENT=2: CONST VOLUME, IOPENT=3: CONST DENSITY		C    IOPENT=2: CONST VOLUME, IOPENT=3: CONST DENSITY
C  IOPENT=4: FERMI GAS (NEW)					C  IOPENT=4: FERMI GAS (NEW)
C  IOPENT=5: HAGEDORN						C  IOPENT=5: HAGEDORN
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KPARX=15)					      PARAMETER (KPARX=15)
      PARAMETER (NQUAX=12)					      PARAMETER (NQUAX=12)
      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)			      COMMON /CENTRO/  ENTRO(1+KPARX,1+NQUAX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP	      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP
     *                ,IWZZZZ					     *                ,IWZZZZ
C------------------------------------------------------------	C------------------------------------------------------------
      SJCENT=0.							      SJCENT=0.
      IF     ( IOPENT .EQ. 0 ) THEN				      IF     ( IOPENT .EQ. 0 ) THEN
        RETURN							        RETURN

      ELSEIF ( IOPENT .EQ. 1 ) THEN				      ELSEIF ( IOPENT .EQ. 1 ) THEN
        IF ( K .LE. KENTRO ) RETURN				        IF ( K .LE. KENTRO ) RETURN
        IF ( MOD(K,3) .NE. 0 ) THEN				        IF ( MOD(K,3) .NE. 0 ) THEN
          CALL UTSTOP('SJCENT: K MUST BE MULTIPLE OF 3       	          CALL UTSTOP('SJCENT: K MUST BE MULTIPLE OF 3       
        ENDIF							        ENDIF
        E=U/OMEGA						        E=U/OMEGA
        IF ( K .GT. KPARX ) GOTO 5001				        IF ( K .GT. KPARX ) GOTO 5001
        N=INT(E)						        N=INT(E)
        IF ( N .LT. 0 ) THEN					        IF ( N .LT. 0 ) THEN
          CALL UTSTOP('SJCENT: NEGATIVE ENERGY               	          CALL UTSTOP('SJCENT: NEGATIVE ENERGY               
        ENDIF							        ENDIF
        IF ( N .GE. NQUAX ) N=NQUAX-1				        IF ( N .GE. NQUAX ) N=NQUAX-1
        SJCENT=ENTRO(1+K,1+N)+(E-N)*(ENTRO(1+K,1+N+1)-ENTRO(1	        SJCENT=ENTRO(1+K,1+N)+(E-N)*(ENTRO(1+K,1+N+1)-ENTRO(1
        IF ( K .LE. 3 ) RETURN					        IF ( K .LE. 3 ) RETURN
5002    E3=E*3./K						5002    E3=E*3./K
        N3=INT(E3)						        N3=INT(E3)
        IF ( N3 .GE. NQUAX ) N3=NQUAX-1				        IF ( N3 .GE. NQUAX ) N3=NQUAX-1
        SENTR3=ENTRO(1+3,1+N3)+(E3-N3)				        SENTR3=ENTRO(1+3,1+N3)+(E3-N3)
     *                              *(ENTRO(1+3,1+N3+1)-ENTRO	     *                              *(ENTRO(1+3,1+N3+1)-ENTRO
        SJCENT=MIN(SJCENT,K/3.*SENTR3)				        SJCENT=MIN(SJCENT,K/3.*SENTR3)
        RETURN							        RETURN
5001    CONTINUE						5001    CONTINUE
        L=KPARX							        L=KPARX
        EL=(E*L)/K						        EL=(E*L)/K
        NL=INT(EL)						        NL=INT(EL)
        IF ( NL .GE. NQUAX ) NL=NQUAX-1				        IF ( NL .GE. NQUAX ) NL=NQUAX-1
        SENTRL=ENTRO(1+L,1+NL)+(EL-NL)				        SENTRL=ENTRO(1+L,1+NL)+(EL-NL)
     *                              *(ENTRO(1+L,1+NL+1)-ENTRO	     *                              *(ENTRO(1+L,1+NL+1)-ENTRO
        SJCENT=FLOAT(K)/L*SENTRL				        SJCENT=FLOAT(K)/L*SENTRL
        GOTO 5002						        GOTO 5002

      ELSEIF ( IOPENT .EQ. 2 ) THEN				      ELSEIF ( IOPENT .EQ. 2 ) THEN
C  CONSTANT VOLUME 5 FM**3					C  CONSTANT VOLUME 5 FM**3
        IF ( K .LE. KENTRO ) RETURN				        IF ( K .LE. KENTRO ) RETURN
        X1=12.96*K**(-.315)					        X1=12.96*K**(-.315)
        IF ( K .LT. 19 ) THEN					        IF ( K .LT. 19 ) THEN
          X2=.785 + .005*K					          X2=.785 + .005*K
        ELSE							        ELSE
          X2=.88						          X2=.88
        ENDIF							        ENDIF
        SJCENT=K*X1*(U/K)**X2					        SJCENT=K*X1*(U/K)**X2
        RETURN							        RETURN

      ELSEIF ( IOPENT .EQ. 3 ) THEN				      ELSEIF ( IOPENT .EQ. 3 ) THEN
C  CONSTANT DENSITY						C  CONSTANT DENSITY
        IF ( K .LE. KENTRO ) RETURN				        IF ( K .LE. KENTRO ) RETURN
        X1=9.785						        X1=9.785
        X2=.7926						        X2=.7926
        SJCENT=K*X1*(U/K)**X2					        SJCENT=K*X1*(U/K)**X2
        RETURN							        RETURN

      ELSEIF ( IOPENT .EQ. 4 ) THEN				      ELSEIF ( IOPENT .EQ. 4 ) THEN
C  CONSTANT VOLUME 15 FM**3					C  CONSTANT VOLUME 15 FM**3
        IF ( K .LE. KENTRO ) RETURN				        IF ( K .LE. KENTRO ) RETURN
        SJCENT=SJCEN4(K,KU,U)					        SJCENT=SJCEN4(K,KU,U)
        RETURN							        RETURN

      ELSEIF ( IOPENT .EQ. 5 ) THEN				      ELSEIF ( IOPENT .EQ. 5 ) THEN
C  HAGEDORN							C  HAGEDORN
        IF ( U .LE. UENTRO  .AND.  K .LE. KENTRO ) THEN		        IF ( U .LE. UENTRO  .AND.  K .LE. KENTRO ) THEN
          RETURN						          RETURN
        ENDIF							        ENDIF
CDH     THAGED=.250						CDH     THAGED=.250
CDH     SJCENT = U/THAGED					CDH     SJCENT = U/THAGED
        SJCENT = U*4.						        SJCENT = U*4.

      ELSE							      ELSE
        CALL UTSTOP('SJCENT: INVALID OPTION IOPENT           	        CALL UTSTOP('SJCENT: INVALID OPTION IOPENT           
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SJCEN4(K,KU,U)					      FUNCTION SJCEN4(K,KU,U)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS TOTAL ENTROPY.					C  RETURNS TOTAL ENTROPY.
C  CONSTANT VOLUME 15 FM**3.					C  CONSTANT VOLUME 15 FM**3.
C  INPUT: TOTAL QUARK NUMBER K; UP AND DOWN QUARKS KU;		C  INPUT: TOTAL QUARK NUMBER K; UP AND DOWN QUARKS KU;
C  TOTAL EXCITATION ENERGY U(GEV).				C  TOTAL EXCITATION ENERGY U(GEV).
C  INITIAL CALL OF SJCEN0 REQUIRED!!!				C  INITIAL CALL OF SJCEN0 REQUIRED!!!
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CSJCEN/  ENT(16000)				      COMMON /CSJCEN/  ENT(16000)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      SJCEN4 = 0.						      SJCEN4 = 0.

      IF ( K .LT. KU ) THEN					      IF ( K .LT. KU ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('SJCEN4')					          CALL UTMSG('SJCEN4')
          WRITE(IFCH,*)'*****  K < KU'				          WRITE(IFCH,*)'*****  K < KU'
          WRITE(IFCH,*)'*****  K: ',K,'   KU: ',KU		          WRITE(IFCH,*)'*****  K: ',K,'   KU: ',KU
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        RETURN							        RETURN
      ENDIF							      ENDIF

      IF ( K .GT. 45 ) THEN					      IF ( K .GT. 45 ) THEN
        KO=K							        KO=K
        K=45							        K=45
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('SJCEN4')					          CALL UTMSG('SJCEN4')
          WRITE(IFCH,*)'*****  K > 45'				          WRITE(IFCH,*)'*****  K > 45'
          WRITE(IFCH,*)'*****  K: ',KO,'   K_NEW: ',K		          WRITE(IFCH,*)'*****  K: ',KO,'   K_NEW: ',K
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      IF ( MOD(K,3) .NE. 0 ) THEN				      IF ( MOD(K,3) .NE. 0 ) THEN
        CALL UTSTOP('SJCEN4: NONINTEGER BARYON NUMBER        	        CALL UTSTOP('SJCEN4: NONINTEGER BARYON NUMBER        
      ENDIF							      ENDIF

      IK=0							      IK=0
      DO 1 I=3,K-3,3						      DO 1 I=3,K-3,3
        IK=IK+I+1						        IK=IK+I+1
 1    CONTINUE							 1    CONTINUE
      IF ( U .LT. 10. ) THEN					      IF ( U .LT. 10. ) THEN
        DU=MOD(U,.25)						        DU=MOD(U,.25)
        IU=INT(U/.25)+1						        IU=INT(U/.25)+1
        IENTRY=(IK+KU)*41+IU					        IENTRY=(IK+KU)*41+IU
        SJCEN4=ENT(IENTRY)+(ENT(IENTRY+1)-ENT(IENTRY))*DU*4.	        SJCEN4=ENT(IENTRY)+(ENT(IENTRY+1)-ENT(IENTRY))*DU*4.
      ELSE							      ELSE
        IU=40							        IU=40
        IENTRY=(IK+KU)*41+IU					        IENTRY=(IK+KU)*41+IU
        SJCEN4=ENT(IENTRY)+(ENT(IENTRY+1)-ENT(IENTRY))*4.*(U-	        SJCEN4=ENT(IENTRY)+(ENT(IENTRY+1)-ENT(IENTRY))*4.*(U-
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SJCGAM(KEUX,KEDX,KESX,KECX,AMA,AMO,PO,MOX)	      FUNCTION SJCGAM(KEUX,KEDX,KESX,KECX,AMA,AMO,PO,MOX)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS PARTIAL DECAY WIDTH DGAMMA = PHASE SPACE * DENSITY	C  RETURNS PARTIAL DECAY WIDTH DGAMMA = PHASE SPACE * DENSITY
C    FOR DECAY OF CLUSTER INTO CLUSTER AND HADRON.		C    FOR DECAY OF CLUSTER INTO CLUSTER AND HADRON.
C  KE*X: NET QUARK NUMBER					C  KE*X: NET QUARK NUMBER
C  AMA: CLUSTER MASS;  AMO: HADRON MASS;  PO: HADRON MOMENTUM	C  AMA: CLUSTER MASS;  AMO: HADRON MASS;  PO: HADRON MOMENTUM
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CENTEX/  ENTEXP					      COMMON /CENTEX/  ENTEXP
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CSJCGA/  AMEGAM,AMNULL,ASUHA(7),ENTRPY,NOPHA,NS	      COMMON /CSJCGA/  AMEGAM,AMNULL,ASUHA(7),ENTRPY,NOPHA,NS
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP	      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP
     *                ,IWZZZZ					     *                ,IWZZZZ
C------------------------------------------------------------	C------------------------------------------------------------
      ENTRPY=-99.9						      ENTRPY=-99.9
      IF ( MOX .EQ. 1 ) THEN					      IF ( MOX .EQ. 1 ) THEN
        ENTEXP=0.						        ENTEXP=0.
        AMNULL=UTAMNU(KEUX,KEDX,KESX,KECX,IOPENU)		        AMNULL=UTAMNU(KEUX,KEDX,KESX,KECX,IOPENU)
      ELSE							      ELSE
        ENTRPY=ENTRPY-ENTEXP					        ENTRPY=ENTRPY-ENTEXP
      ENDIF							      ENDIF
      EO=SQRT(AMO**2+PO**2)					      EO=SQRT(AMO**2+PO**2)
      IF ( EO .GT. AMA ) GOTO 999				      IF ( EO .GT. AMA ) GOTO 999
      AME2=(AMA-EO)**2-PO**2					      AME2=(AMA-EO)**2-PO**2
      IF ( AME2 .LT. 0. ) GOTO 999				      IF ( AME2 .LT. 0. ) GOTO 999
      AMEGAM=SQRT(AME2)						      AMEGAM=SQRT(AME2)
      E=AMEGAM-AMNULL						      E=AMEGAM-AMNULL
      IF ( E .LT. 0. ) GOTO 998					      IF ( E .LT. 0. ) GOTO 998
      KE=ABS(KEUX+KEDX+KESX+KECX)				      KE=ABS(KEUX+KEDX+KESX+KECX)

      IF ( IOPENT .EQ. 5 ) THEN					      IF ( IOPENT .EQ. 5 ) THEN
        IF ( E .LE. UENTRO  .AND.  KE .LE. KENTRO ) THEN	        IF ( E .LE. UENTRO  .AND.  KE .LE. KENTRO ) THEN
          ENTRPY=0.						          ENTRPY=0.
        ELSE							        ELSE
C  ENTROPY AFTER HAGEDORN					C  ENTROPY AFTER HAGEDORN
          ENTRPY = E*4.						          ENTRPY = E*4.
        ENDIF							        ENDIF
      ELSE							      ELSE
        KU=ABS(KEUX+KEDX)					        KU=ABS(KEUX+KEDX)
        ENTRPY=SJCENT(KE,KU,E)					        ENTRPY=SJCENT(KE,KU,E)
      ENDIF							      ENDIF

      IF ( MOX .EQ. 1 ) THEN					      IF ( MOX .EQ. 1 ) THEN
        ENTEXP=ENTRPY						        ENTEXP=ENTRPY
        ENTRPY=0.						        ENTRPY=0.
        SJCGAM=.125* PO**2/( PI**2*AMA*EO )			        SJCGAM=.125* PO**2/( PI**2*AMA*EO )
      ELSE							      ELSE
        ENTRPY=ENTRPY-ENTEXP					        ENTRPY=ENTRPY-ENTEXP
        SJCGAM=.125*EXP(ENTRPY)* PO**2/( PI**2*AMA*EO )		        SJCGAM=.125*EXP(ENTRPY)* PO**2/( PI**2*AMA*EO )
      ENDIF							      ENDIF
      RETURN							      RETURN
 999  AMEGAM = 0.						 999  AMEGAM = 0.
 998  SJCGAM= 0.						 998  SJCGAM= 0.
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SMASS(A,Y,Z)					      FUNCTION SMASS(A,Y,Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS CLUSTER MASS (IN GEV) (PER CLUSTER, NOT (!) PER NU	C  RETURNS CLUSTER MASS (IN GEV) (PER CLUSTER, NOT (!) PER NU
C  ACCORDING TO BERGER/JAFFE MASS FORMULA, PRC35(1987)213 EQ.	C  ACCORDING TO BERGER/JAFFE MASS FORMULA, PRC35(1987)213 EQ.
C  SEE ALSO C. DOVER, BNL-46322, INTERSECTIONS-MEETING, TUCSO	C  SEE ALSO C. DOVER, BNL-46322, INTERSECTIONS-MEETING, TUCSO
C  A: MASSNR, Y: HYPERCHARGE, Z: CHARGE,			C  A: MASSNR, Y: HYPERCHARGE, Z: CHARGE,
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CMASS/   AC,AS,CZ,DY,DZ,EPSI,RZERO,SIGMA,THET,Y	      COMMON /CMASS/   AC,AS,CZ,DY,DZ,EPSI,RZERO,SIGMA,THET,Y
C------------------------------------------------------------	C------------------------------------------------------------
      YMIN=YM*A							      YMIN=YM*A
      ZMIN=CZ/(DZ/A+ZM/A**.3333333)				      ZMIN=CZ/(DZ/A+ZM/A**.3333333)
      SMASS=EPSI*A +AS*A**.6666667				      SMASS=EPSI*A +AS*A**.6666667
     *             +(AC/A**.3333333 +DZ/A*0.5)*(Z-ZMIN)**2	     *             +(AC/A**.3333333 +DZ/A*0.5)*(Z-ZMIN)**2
     *              +DY/A*0.5*(Y-YMIN)**2			     *              +DY/A*0.5*(Y-YMIN)**2
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE SMASSI(THETA)					      SUBROUTINE SMASSI(THETA)

C------------------------------------------------------------	C------------------------------------------------------------
C  INITIALIZATION FOR SMASS.					C  INITIALIZATION FOR SMASS.
C  CALCULATES PARAMETERS FOR BERGER/JAFFE MASS FORMULA		C  CALCULATES PARAMETERS FOR BERGER/JAFFE MASS FORMULA
C  (PRC35(1987)213 EQ.2.31, SEE ALSO C. DOVER, BNL-46322).	C  (PRC35(1987)213 EQ.2.31, SEE ALSO C. DOVER, BNL-46322).
C  THETA: PARAMETER THAT DETERMINES ALL PARAMETERS IN MASS FO	C  THETA: PARAMETER THAT DETERMINES ALL PARAMETERS IN MASS FO
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CMASS/   AC,AS,CZ,DY,DZ,EPSI,RZERO,SIGMA,THET,Y	      COMMON /CMASS/   AC,AS,CZ,DY,DZ,EPSI,RZERO,SIGMA,THET,Y
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      DATA ALP /0.007297145/					      DATA ALP /0.007297145/
C------------------------------------------------------------	C------------------------------------------------------------
      THET=THETA						      THET=THETA

      ASTR=.150							      ASTR=.150

      CO=COS(THETA)						      CO=COS(THETA)
      SI=SIN(THETA)						      SI=SIN(THETA)
      BET=(1.+CO**3)*0.5					      BET=(1.+CO**3)*0.5
      RZERO=SI/ASTR/(0.6666667/PI*(1.+CO**3)  )**0.3333333	      RZERO=SI/ASTR/(0.6666667/PI*(1.+CO**3)  )**0.3333333
      CS=ASTR/SI						      CS=ASTR/SI
      CZ=CS*(1.-BET**0.3333333 )				      CZ=CS*(1.-BET**0.3333333 )
      SIGMA=0.75/PI*(ASTR/SI)**3*0.3333333*(CO**2*0.5 -SI**2*	      SIGMA=0.75/PI*(ASTR/SI)**3*0.3333333*(CO**2*0.5 -SI**2*
     *    -1./PI*(PI*0.5-THETA-SIN(2*THETA)+SI**3*LOG((1+CO)/	     *    -1./PI*(PI*0.5-THETA-SIN(2*THETA)+SI**3*LOG((1+CO)/

      EPSI=ASTR*(BET**0.3333333+2.)/SI				      EPSI=ASTR*(BET**0.3333333+2.)/SI
      AS=4.*PI*SIGMA*RZERO**2					      AS=4.*PI*SIGMA*RZERO**2
      AC=0.6*ALP/RZERO						      AC=0.6*ALP/RZERO
      DZ=ASTR/SI*BET**0.3333333 *CO**2 *			      DZ=ASTR/SI*BET**0.3333333 *CO**2 *
     *  (CO**4*(1.+BET**0.3333333)+(1+BET)**2)/			     *  (CO**4*(1.+BET**0.3333333)+(1+BET)**2)/
     *( (2.*CO**2+BET**.3333333)*(CO**4*(1+BET**.6666667)+(1.	     *( (2.*CO**2+BET**.3333333)*(CO**4*(1+BET**.6666667)+(1.
     *        (CO**4+BET**0.3333333*(1+BET))			     *        (CO**4+BET**0.3333333*(1+BET))
     *                     *( (2.*BET**0.6666667-1.)*CO**2+1.	     *                     *( (2.*BET**0.6666667-1.)*CO**2+1.
      DY=ASTR/6.*(1.+CO**3)**3/SI*				      DY=ASTR/6.*(1.+CO**3)**3/SI*
     *       (  1.+(1.+CO)/(4.*(1.+CO**3))**0.6666667  )/	     *       (  1.+(1.+CO)/(4.*(1.+CO**3))**0.6666667  )/
     *       ( CO**6 + CO + CO*(.5*(1+CO**3))**1.333333 )	     *       ( CO**6 + CO + CO*(.5*(1+CO**3))**1.333333 )
      ZM=6.*ALP/(5.*RZERO)					      ZM=6.*ALP/(5.*RZERO)
      YM=(1.-CO**3)/(1.+CO**3)					      YM=(1.-CO**3)/(1.+CO**3)

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE SMASSP						      SUBROUTINE SMASSP

C------------------------------------------------------------	C------------------------------------------------------------
C  PRINTS SMASS.						C  PRINTS SMASS.
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CMASS/   AC,AS,CZ,DY,DZ,EPSI,RZERO,SIGMA,THET,Y	      COMMON /CMASS/   AC,AS,CZ,DY,DZ,EPSI,RZERO,SIGMA,THET,Y
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      REAL ENG(14),YMI(14),ZMI(14)				      REAL ENG(14),YMI(14),ZMI(14)
C------------------------------------------------------------	C------------------------------------------------------------
      WRITE(IFCH,*)'PARAMETERS OF MASS FORMULA:'		      WRITE(IFCH,*)'PARAMETERS OF MASS FORMULA:'
      WRITE(IFCH,*)'---------------------------'		      WRITE(IFCH,*)'---------------------------'
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      WRITE(IFCH,*)'THETA=',THET,'   EPSI=',EPSI		      WRITE(IFCH,*)'THETA=',THET,'   EPSI=',EPSI
      WRITE(IFCH,*)'AS=',AS,'   AC=',AC				      WRITE(IFCH,*)'AS=',AS,'   AC=',AC
      WRITE(IFCH,*)'DY=',DY,'   DZ=',DZ				      WRITE(IFCH,*)'DY=',DY,'   DZ=',DZ
      WRITE(IFCH,*)'YM=',YM					      WRITE(IFCH,*)'YM=',YM
      WRITE(IFCH,*)'CZ DZ ZM=',CZ,DZ,ZM				      WRITE(IFCH,*)'CZ DZ ZM=',CZ,DZ,ZM
      WRITE(IFCH,*)'SIGMA**1/3=',SIGMA**(1./3.),'   RZERO=',R	      WRITE(IFCH,*)'SIGMA**1/3=',SIGMA**(1./3.),'   RZERO=',R
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      WRITE(IFCH,*)'MASS:'					      WRITE(IFCH,*)'MASS:'
      WRITE(IFCH,*)'-----'					      WRITE(IFCH,*)'-----'
      WRITE(IFCH,5000)(J,J=1,14)				      WRITE(IFCH,5000)(J,J=1,14)
5000  FORMAT(/5X,'A:',14I5/)					5000  FORMAT(/5X,'A:',14I5/)
      DO 4 J=1,14						      DO 4 J=1,14
        A=J							        A=J
        YMI(J)=YM*A						        YMI(J)=YM*A
        ZMI(J)=CZ/(DZ/A+ZM/A**0.3333333)			        ZMI(J)=CZ/(DZ/A+ZM/A**0.3333333)
 4    CONTINUE							 4    CONTINUE
      WRITE(IFCH,5002)(YMI(J),J=1,14)				      WRITE(IFCH,5002)(YMI(J),J=1,14)
5002  FORMAT(1X,'YMIN: ',14F5.2/)				5002  FORMAT(1X,'YMIN: ',14F5.2/)
      WRITE(IFCH,5003)(ZMI(J),J=1,14)				      WRITE(IFCH,5003)(ZMI(J),J=1,14)
5003  FORMAT(1X,'ZMIN: ',14F5.2/)				5003  FORMAT(1X,'ZMIN: ',14F5.2/)
      DO 2 I=1,15						      DO 2 I=1,15
        NS=11-I							        NS=11-I
        DO 3 J=1,14						        DO 3 J=1,14
          A=J							          A=J
          Y=A-NS						          Y=A-NS
          Z=0.							          Z=0.
          ENG(J)=SMASS(A,Y,Z)/A					          ENG(J)=SMASS(A,Y,Z)/A
 3      CONTINUE						 3      CONTINUE
        WRITE(IFCH,5001)NS,(ENG(J),J=1,14)			        WRITE(IFCH,5001)NS,(ENG(J),J=1,14)
5001    FORMAT(1X,'S=',I2,2X,14F5.2)				5001    FORMAT(1X,'S=',I2,2X,14F5.2)
 2    CONTINUE							 2    CONTINUE
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      WRITE(IFCH,*)'MASS-MASS(FREE):'				      WRITE(IFCH,*)'MASS-MASS(FREE):'
      WRITE(IFCH,*)'----------------'				      WRITE(IFCH,*)'----------------'
      WRITE(IFCH,5000)(J,J=1,14)				      WRITE(IFCH,5000)(J,J=1,14)
      DO 5 I=1,15						      DO 5 I=1,15
        NS=11-I							        NS=11-I
        DO 6 J=1,14						        DO 6 J=1,14
          A=J							          A=J
          Y=A-NS						          Y=A-NS
          Z=0.							          Z=0.
          SG=SIGN(1.,A)						          SG=SIGN(1.,A)
          AX=SG*A						          AX=SG*A
          YX=SG*Y						          YX=SG*Y
          ZX=SG*Z						          ZX=SG*Z
          KU=NINT(AX+ZX)					          KU=NINT(AX+ZX)
          KD=NINT(AX-ZX+YX)					          KD=NINT(AX-ZX+YX)
          KS=NINT(AX-YX)					          KS=NINT(AX-YX)
          KC=0							          KC=0
          ENG(J)=(SMASS(A,Y,Z)-UTAMNU(KU,KD,KS,KC,3))/A		          ENG(J)=(SMASS(A,Y,Z)-UTAMNU(KU,KD,KS,KC,3))/A
 6      CONTINUE						 6      CONTINUE
        WRITE(IFCH,5001)NS,(ENG(J),J=1,14)			        WRITE(IFCH,5001)NS,(ENG(J),J=1,14)
5     CONTINUE							5     CONTINUE

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE SMASST(KUX,KDX,KSX,KCX,A,Y,Z)			      SUBROUTINE SMASST(KUX,KDX,KSX,KCX,A,Y,Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  INPUT: KUX,KDX,KSX,KCX = NET QUARK NUMBERS (FOR U,D,S,C QU	C  INPUT: KUX,KDX,KSX,KCX = NET QUARK NUMBERS (FOR U,D,S,C QU
C  OUTPUT: MASSNR A, HYPERCHARGE Y AND CHARGE Z.		C  OUTPUT: MASSNR A, HYPERCHARGE Y AND CHARGE Z.
C------------------------------------------------------------	C------------------------------------------------------------
      SG=1.							      SG=1.
      IF ( KUX+KDX+KSX+KCX .LT. 0 ) SG=-1.			      IF ( KUX+KDX+KSX+KCX .LT. 0 ) SG=-1.
      KU=SG*KUX							      KU=SG*KUX
      KD=SG*KDX							      KD=SG*KDX
      KS=SG*KSX							      KS=SG*KSX
      KC=SG*KCX							      KC=SG*KCX
      K=KU+KD+KS+KC						      K=KU+KD+KS+KC
      IF ( MOD(K,3) .NE. 0 ) THEN				      IF ( MOD(K,3) .NE. 0 ) THEN
        CALL UTSTOP('SMASST: NONINTEGER BARYON NUMBER        	        CALL UTSTOP('SMASST: NONINTEGER BARYON NUMBER        
      ENDIF							      ENDIF
      A=K/3							      A=K/3
      Y=A-KS							      Y=A-KS
      NZ=2*KU-KD-KS+2*KC					      NZ=2*KU-KD-KS+2*KC
      IF ( MOD(NZ,3) .NE. 0 ) THEN				      IF ( MOD(NZ,3) .NE. 0 ) THEN
        CALL UTSTOP('SMASST: NONINTEGER CHARGE               	        CALL UTSTOP('SMASST: NONINTEGER CHARGE               
      ENDIF							      ENDIF
      Z=NZ/3							      Z=NZ/3
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SPTF(X)						      FUNCTION SPTF(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS PT-DISTRIBUTION FOR FRAGMENTATION			C  RETURNS PT-DISTRIBUTION FOR FRAGMENTATION
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CQUAMA/  QUAMA					      COMMON /CQUAMA/  QUAMA
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
C------------------------------------------------------------	C------------------------------------------------------------
      IF     ( IOPTF .EQ. 1 ) THEN				      IF     ( IOPTF .EQ. 1 ) THEN
        SPTF = X * EXP(-2./PTF*SQRT(X**2+QUAMA**2))		        SPTF = X * EXP(-2./PTF*SQRT(X**2+QUAMA**2))
      ELSEIF ( IOPTF .EQ. 2 ) THEN				      ELSEIF ( IOPTF .EQ. 2 ) THEN
        SPTF = X * EXP(-PI*0.25*(X**2+QUAMA**2)/PTF**2)		        SPTF = X * EXP(-PI*0.25*(X**2+QUAMA**2)/PTF**2)
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SPTH(X)						      FUNCTION SPTH(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS PT-DISTRIBUTION FOR HARD SCATTERING			C  RETURNS PT-DISTRIBUTION FOR HARD SCATTERING
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
C------------------------------------------------------------	C------------------------------------------------------------
      SPTH=PTH**2*2.*X/(X**2+PTH**2)**3				      SPTH=PTH**2*2.*X/(X**2+PTH**2)**3
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SPTJ(X)						      FUNCTION SPTJ(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  JPSI PT-DISTRIBUTION IN 200 GEV PP				C  JPSI PT-DISTRIBUTION IN 200 GEV PP
C------------------------------------------------------------	C------------------------------------------------------------
      DATA AI/1.052631579/, C/2.75482/, C1/1.75482/, CC/16.30	      DATA AI/1.052631579/, C/2.75482/, C1/1.75482/, CC/16.30
C  AI IS THE INVERSE OF A					C  AI IS THE INVERSE OF A
C------------------------------------------------------------	C------------------------------------------------------------
CDH   A=0.95							CDH   A=0.95
CDH   C=1./0.363						CDH   C=1./0.363
CDH   Z=X/A							CDH   Z=X/A
      Z=X*AI							      Z=X*AI
CDH   SPTJ=1./A*C**C/SGAM(C)*Z**(C-1.)*EXP(-C*Z)		CDH   SPTJ=1./A*C**C/SGAM(C)*Z**(C-1.)*EXP(-C*Z)
      SPTJ = AI * CC * 0.619299158 * Z**C1 * EXP(-C*Z)		      SPTJ = AI * CC * 0.619299158 * Z**C1 * EXP(-C*Z)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SPTQ(X)						      FUNCTION SPTQ(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS PT-DISTRIBUTION OF QUARKS IN NUCLEONS		C  RETURNS PT-DISTRIBUTION OF QUARKS IN NUCLEONS
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
C------------------------------------------------------------	C------------------------------------------------------------
      IF     ( IOPTQ .EQ. 2 ) THEN				      IF     ( IOPTQ .EQ. 2 ) THEN
        AUXIL2 = PI/PTQ**2					        AUXIL2 = PI/PTQ**2
        SPTQ=(0.5*X)* AUXIL2 * EXP(-(0.5*X)**2*AUXIL2)		        SPTQ=(0.5*X)* AUXIL2 * EXP(-(0.5*X)**2*AUXIL2)
      ELSEIF ( IOPTQ .EQ. 1 ) THEN				      ELSEIF ( IOPTQ .EQ. 1 ) THEN
        AUXIL1 = 2./PTQ						        AUXIL1 = 2./PTQ
        SPTQ=AUXIL1**2 * X * EXP(-X*AUXIL1)			        SPTQ=AUXIL1**2 * X * EXP(-X*AUXIL1)
      ELSEIF ( IOPTQ .EQ. 3 ) THEN				      ELSEIF ( IOPTQ .EQ. 3 ) THEN
        SPTQ=PTQ**2 * 2. * X / (X**2+PTQ**2)**2			        SPTQ=PTQ**2 * 2. * X / (X**2+PTQ**2)**2
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      DOUBLE PRECISION FUNCTION SSE0(Z)				      DOUBLE PRECISION FUNCTION SSE0(Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  SEA QUARK STRUCTURE FUNCTION FOR HADRONS			C  SEA QUARK STRUCTURE FUNCTION FOR HADRONS
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      DOUBLE PRECISION Z					      DOUBLE PRECISION Z
C------------------------------------------------------------	C------------------------------------------------------------
      SSE0 = (1.D0-Z)**8.05D0 * 1.265D0 / SQRT(Z**2+XCUT**2)	      SSE0 = (1.D0-Z)**8.05D0 * 1.265D0 / SQRT(Z**2+XCUT**2)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      DOUBLE PRECISION FUNCTION SSE1(Z)				      DOUBLE PRECISION FUNCTION SSE1(Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  SEA QUARK STRUCTURE FUNCTION FOR PIONS			C  SEA QUARK STRUCTURE FUNCTION FOR PIONS
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      DOUBLE PRECISION Z					      DOUBLE PRECISION Z
C------------------------------------------------------------	C------------------------------------------------------------
      SSE1 = (1.D0-Z)**5.D0 * 0.9D0 / SQRT(Z**2+XCUT**2)	      SSE1 = (1.D0-Z)**5.D0 * 0.9D0 / SQRT(Z**2+XCUT**2)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SSPLIT(X)					      FUNCTION SSPLIT(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS SPLITTING FUNCTION					C  RETURNS SPLITTING FUNCTION
C------------------------------------------------------------	C------------------------------------------------------------
C-C   SSPLIT= ( 0.3 + 10.0*X**7 - 10.3*X**15 ) /SQRT(X**2+.2*	C-C   SSPLIT= ( 0.3 + 10.0*X**7 - 10.3*X**15 ) /SQRT(X**2+.2*
C-C   SSPLIT=   0.2 +  2.4*X**2 -  2.6*X**5			C-C   SSPLIT=   0.2 +  2.4*X**2 -  2.6*X**5
C-C   SSPLIT=   0.4 +  2.0*X    -  2.4*X**3			C-C   SSPLIT=   0.4 +  2.0*X    -  2.4*X**3
C-C   SSPLIT= ( 0.8 +  2.0*X    -  2.8*X**3  ) /SQRT(X**2+.2*	C-C   SSPLIT= ( 0.8 +  2.0*X    -  2.8*X**3  ) /SQRT(X**2+.2*
      SSPLIT= X**3 - X**5					      SSPLIT= X**3 - X**5
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION SSPLIX(X)					      FUNCTION SSPLIX(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS SPLITTING FUNCTION					C  RETURNS SPLITTING FUNCTION
C------------------------------------------------------------	C------------------------------------------------------------
C-C   SSPLIX= (1-X) - (1-X)**7					C-C   SSPLIX= (1-X) - (1-X)**7
C-C   SSPLIX= 1							C-C   SSPLIX= 1
C-C   Z=2*X-.5							C-C   Z=2*X-.5
C-C   SSPLIX= Z**3 - Z**5					C-C   SSPLIX= Z**3 - Z**5
C-C   IF ( Z .LT. 0. ) SSPLIX=0.				C-C   IF ( Z .LT. 0. ) SSPLIX=0.
C-C   IF ( Z .GT. 1. ) SSPLIX=0.				C-C   IF ( Z .GT. 1. ) SSPLIX=0.
      SSPLIX= X**3 - X**5					      SSPLIX= X**3 - X**5
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE STAA(X,Q2I,Z,S)				      SUBROUTINE STAA(X,Q2I,Z,S)

C------------------------------------------------------------	C------------------------------------------------------------
C  STRUCTURE FUNCTIONS.						C  STRUCTURE FUNCTIONS.
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
C------------------------------------------------------------	C------------------------------------------------------------
      Z=SQRT(X**2+XCUT**2)					      Z=SQRT(X**2+XCUT**2)
      Q2=MAX(4.00001,Q2I)					      Q2=MAX(4.00001,Q2I)
CDH   S=LOG(LOG(Q2/.2**2)/LOG(4/.2**2))				CDH   S=LOG(LOG(Q2/.2**2)/LOG(4/.2**2))
      S=LOG(LOG(Q2*25.  )*0.21714724)				      S=LOG(LOG(Q2*25.  )*0.21714724)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION STXD(X,Q2)					      FUNCTION STXD(X,Q2)

C------------------------------------------------------------	C------------------------------------------------------------
C  VALENCE D-QUARK DISTRIBUTION.				C  VALENCE D-QUARK DISTRIBUTION.
C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.	C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.
C------------------------------------------------------------	C------------------------------------------------------------
      CALL STAA(X,Q2,Z,S)					      CALL STAA(X,Q2,Z,S)
      A=.364-.0368*S						      A=.364-.0368*S
      C=2.-.5414*S**.8						      C=2.-.5414*S**.8
      D=5.09+.3463*S						      D=5.09+.3463*S
      STXD=C*X**A*(1.-X**C)**D/SBET(D+1.,A/C)			      STXD=C*X**A*(1.-X**C)**D/SBET(D+1.,A/C)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION STXS(X,Q2)					      FUNCTION STXS(X,Q2)

C------------------------------------------------------------	C------------------------------------------------------------
C  S-SEA DISTRIBUTION.						C  S-SEA DISTRIBUTION.
C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.	C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.
C------------------------------------------------------------	C------------------------------------------------------------
      CALL STAA(X,Q2,Z,S)					      CALL STAA(X,Q2,Z,S)
      A=.0625+.1132*S**1.3					      A=.0625+.1132*S**1.3
      B=12.64*S-51.70*S**1.8+38.02*S**2				      B=12.64*S-51.70*S**1.8+38.02*S**2
      C=4.448*S							      C=4.448*S
      D=7.+1.562*S						      D=7.+1.562*S
      E=.3081*S**2.5						      E=.3081*S**2.5
      F=47.24+67.91*S						      F=47.24+67.91*S
      STXS=A*(1.+B*X+C*X**2)*(1.-X)**D + E*EXP(-F*X)		      STXS=A*(1.+B*X+C*X**2)*(1.-X)**D + E*EXP(-F*X)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION STXU(X,Q2)					      FUNCTION STXU(X,Q2)

C------------------------------------------------------------	C------------------------------------------------------------
C  VALENCE U-QUARK DISTRIBUTION.				C  VALENCE U-QUARK DISTRIBUTION.
C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.	C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.
C------------------------------------------------------------	C------------------------------------------------------------
      CALL STAA(X,Q2,Z,S)					      CALL STAA(X,Q2,Z,S)
      A=.421-.0412*S						      A=.421-.0412*S
      C=2.-.6223*S**.8						      C=2.-.6223*S**.8
      D=3.37+.4319*S						      D=3.37+.4319*S
      STXU=2.*C*X**A*(1.-X**C)**D/SBET(D+1.,A/C)		      STXU=2.*C*X**A*(1.-X**C)**D/SBET(D+1.,A/C)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION STXUS(X,Q2)					      FUNCTION STXUS(X,Q2)

C------------------------------------------------------------	C------------------------------------------------------------
C  U-SEA DISTRIBUTION.						C  U-SEA DISTRIBUTION.
C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.	C  FROM GLUECK, HOFFMANN, REYA, Z. PHYS. C13 (1982) 119.
C------------------------------------------------------------	C------------------------------------------------------------
      CALL STAA(X,Q2,Z,S)					      CALL STAA(X,Q2,Z,S)
      A=.25+.088*S**1.3						      A=.25+.088*S**1.3
      B=.8128*S-2.003*S**1.8+.0831*S**2				      B=.8128*S-2.003*S**1.8+.0831*S**2
      C=3.97*S							      C=3.97*S
      D=7.+1.666*S						      D=7.+1.666*S
      E=.2487*S**2.5						      E=.2487*S**2.5
      F=27.8+59.68*S						      F=27.8+59.68*S
      STXUS=A*(1.+B*X+C*X**2)*(1.-X)**D + E*EXP(-F*X)		      STXUS=A*(1.+B*X+C*X**2)*(1.-X)**D + E*EXP(-F*X)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION STXZNE(X,Q2)					      FUNCTION STXZNE(X,Q2)

C------------------------------------------------------------	C------------------------------------------------------------
C  STRUCTURE FUNCTION OF NEUTRON				C  STRUCTURE FUNCTION OF NEUTRON
C------------------------------------------------------------	C------------------------------------------------------------
      STXZNE=(4.*STXD(X,Q2) + STXU(X,Q2) +			      STXZNE=(4.*STXD(X,Q2) + STXU(X,Q2) +
     *        10.*STXUS(X,Q2) + 2.*STXS(X,Q2))/9.		     *        10.*STXUS(X,Q2) + 2.*STXS(X,Q2))/9.
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION STXZPR(X,Q2)					      FUNCTION STXZPR(X,Q2)

C------------------------------------------------------------	C------------------------------------------------------------
C  STRUCTURE FUNCTION OF PROTON					C  STRUCTURE FUNCTION OF PROTON
C------------------------------------------------------------	C------------------------------------------------------------
      STXZPR=(4.*STXU(X,Q2) + STXD(X,Q2) +			      STXZPR=(4.*STXU(X,Q2) + STXD(X,Q2) +
     *        10.*STXUS(X,Q2) + 2.*STXS(X,Q2))/9.		     *        10.*STXUS(X,Q2) + 2.*STXS(X,Q2))/9.
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      DOUBLE PRECISION FUNCTION SVA0(Z)				      DOUBLE PRECISION FUNCTION SVA0(Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  VALENCE QUARK STRUCTURE FUNCTION FOR HADRONS			C  VALENCE QUARK STRUCTURE FUNCTION FOR HADRONS
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      DOUBLE PRECISION Z					      DOUBLE PRECISION Z
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( Z .NE. 0.D0 ) THEN					      IF ( Z .NE. 0.D0 ) THEN
        SVA0=(1.D0-Z)**3.46 * Z**0.419 * (2.74793064D0*Z + 0.	        SVA0=(1.D0-Z)**3.46 * Z**0.419 * (2.74793064D0*Z + 0.
     *                   / SQRT(Z**2+XCUT**2)			     *                   / SQRT(Z**2+XCUT**2)
      ELSE							      ELSE
        SVA0=0.D0						        SVA0=0.D0
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      DOUBLE PRECISION FUNCTION SVA1(Z)				      DOUBLE PRECISION FUNCTION SVA1(Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  VALENCE QUARK STRUCTURE FUNCTION FOR PIONS			C  VALENCE QUARK STRUCTURE FUNCTION FOR PIONS
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      DOUBLE PRECISION Z					      DOUBLE PRECISION Z
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( Z .NE. 0.D0 ) THEN					      IF ( Z .NE. 0.D0 ) THEN
        SVA1 = (1.D0-Z)**0.7D0 * Z**0.4D0 * 0.1730725D0		        SVA1 = (1.D0-Z)**0.7D0 * Z**0.4D0 * 0.1730725D0
     *                                   / SQRT(Z**2+XCUT**2)	     *                                   / SQRT(Z**2+XCUT**2)
      ELSE							      ELSE
        SVA1=0.D0						        SVA1=0.D0
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UINTEG(VAL,FUNC,A,B,AERR,RERR,LEVEL,ERROR,IF	      SUBROUTINE UINTEG(VAL,FUNC,A,B,AERR,RERR,LEVEL,ERROR,IF

C------------------------------------------------------------	C------------------------------------------------------------
C  CACLULATION OF DEFINITE INTEGRAL OF FUNC(X) FROM A TO B	C  CACLULATION OF DEFINITE INTEGRAL OF FUNC(X) FROM A TO B
C------------------------------------------------------------	C------------------------------------------------------------
C        RELERR=1.D-12						C        RELERR=1.D-12
C        ABSERR=0.D0						C        ABSERR=0.D0
C        LEVEL=1						C        LEVEL=1
C        CALL UINTEG(VALUE,FUNCTN,A,B,ABSERR,RELERR,LEVEL,ERR	C        CALL UINTEG(VALUE,FUNCTN,A,B,ABSERR,RELERR,LEVEL,ERR
C        IF (IFLAG.GT.3) WRITE(*,'('' IFLAG ='',I7)') IFLAG	C        IF (IFLAG.GT.3) WRITE(*,'('' IFLAG ='',I7)') IFLAG
C------------------------------------------------------------	C------------------------------------------------------------
      IMPLICIT  DOUBLE PRECISION (A-H,O-Z)			      IMPLICIT  DOUBLE PRECISION (A-H,O-Z)
      DIMENSION T(10,10),R(10),AIT(10),DIF(10),RN(4)		      DIMENSION T(10,10),R(10),AIT(10),DIF(10),RN(4)
      DIMENSION TS(2049),IBEGS(30),BEGIN(30),FINIS(30),EST(30	      DIMENSION TS(2049),IBEGS(30),BEGIN(30),FINIS(30),EST(30
      LOGICAL   H2CONV,AITKEN,RIGHT,REGLAR,REGLSV(30)		      LOGICAL   H2CONV,AITKEN,RIGHT,REGLAR,REGLSV(30)
      DATA      TOLSAV,AITLOW,H2TOL,AITTOL,VJUMP,MAXTS,MAXTBL	      DATA      TOLSAV,AITLOW,H2TOL,AITTOL,VJUMP,MAXTS,MAXTBL
     *          / 1.D-16, 1.1D0, .15D0, .1D0, .01D0, 2049, 10	     *          / 1.D-16, 1.1D0, .15D0, .1D0, .01D0, 2049, 10
      DATA      RN /.71420053D0,.34662815D0,.843751D0,.126330	      DATA      RN /.71420053D0,.34662815D0,.843751D0,.126330
      DATA      ALG402 /.3010299956639795D0 /			      DATA      ALG402 /.3010299956639795D0 /
C------------------------------------------------------------	C------------------------------------------------------------
      TOLMCH=TOLSAV						      TOLMCH=TOLSAV
      VAL=0.D0							      VAL=0.D0
      ERROR=0.D0						      ERROR=0.D0
      IFLAG=1							      IFLAG=1
      VLONG=DABS(B-A)						      VLONG=DABS(B-A)
      IF ( VLONG .EQ. 0.D0 ) RETURN				      IF ( VLONG .EQ. 0.D0 ) RETURN
      ERRR=DMIN1( .1D0, DMAX1(DABS(RERR),1.D1*TOLMCH) )		      ERRR=DMIN1( .1D0, DMAX1(DABS(RERR),1.D1*TOLMCH) )
      ERRA=DABS(AERR)						      ERRA=DABS(AERR)
      STEPMN=DMAX1(VLONG/FLOAT(2**MXSTGE),			      STEPMN=DMAX1(VLONG/FLOAT(2**MXSTGE),
     *   DMAX1(VLONG,DABS(A),DABS(B))*TOLMCH)			     *   DMAX1(VLONG,DABS(A),DABS(B))*TOLMCH)
      STAGE=.5D0						      STAGE=.5D0
      ISTAGE=1							      ISTAGE=1
      CUREST=0.D0						      CUREST=0.D0
      FNSIZE=0.D0						      FNSIZE=0.D0
      PREVER=0.D0						      PREVER=0.D0
      REGLAR=.FALSE.						      REGLAR=.FALSE.
      BEGI=A							      BEGI=A
      FBEG=FUNC(A)/2.D0						      FBEG=FUNC(A)/2.D0
      TS(1)=FBEG						      TS(1)=FBEG
      IBEG=1							      IBEG=1
      ENDE=B							      ENDE=B
      FEND=FUNC(B)/2.D0						      FEND=FUNC(B)/2.D0
      TS(2)=FEND						      TS(2)=FEND
      IEND=2							      IEND=2
 60   CONTINUE							 60   CONTINUE
      RIGHT=.FALSE.						      RIGHT=.FALSE.
 61   CONTINUE							 61   CONTINUE
      STEP=ENDE-BEGI						      STEP=ENDE-BEGI
      ASTEP=DABS(STEP)						      ASTEP=DABS(STEP)
      IF ( ASTEP .LT. STEPMN ) GOTO 97				      IF ( ASTEP .LT. STEPMN ) GOTO 97
      IF ( LEVEL .GE. 3 ) WRITE(*,101) BEGI,STEP,ISTAGE		      IF ( LEVEL .GE. 3 ) WRITE(*,101) BEGI,STEP,ISTAGE
101   FORMAT(' BEGI,STEP',1P,2E16.7,I5)				101   FORMAT(' BEGI,STEP',1P,2E16.7,I5)
      T(1,1)=FBEG+FEND						      T(1,1)=FBEG+FEND
      TABS=DABS(FBEG)+DABS(FEND)				      TABS=DABS(FBEG)+DABS(FEND)
      L=1							      L=1
      N=1							      N=1
      H2CONV=.FALSE.						      H2CONV=.FALSE.
      AITKEN=.FALSE.						      AITKEN=.FALSE.
      GOTO 63							      GOTO 63
 62   IF ( LEVEL .GE. 4 ) WRITE(*,102) L,T(1,LM1)		 62   IF ( LEVEL .GE. 4 ) WRITE(*,102) L,T(1,LM1)
102   FORMAT(1X,I5,7E16.8/1X,3E16.8)				102   FORMAT(1X,I5,7E16.8/1X,3E16.8)
 63   LM1=L							 63   LM1=L
      L=L+1							      L=L+1
      N2=N*2							      N2=N*2
      FN=N2							      FN=N2
      ISTEP=(IEND-IBEG)/N					      ISTEP=(IEND-IBEG)/N
      IF ( ISTEP .LE. 1 ) THEN					      IF ( ISTEP .LE. 1 ) THEN
        II=IEND							        II=IEND
        IEND=IEND+N						        IEND=IEND+N
        IF ( IEND .GT. MAXTS ) GOTO 96				        IF ( IEND .GT. MAXTS ) GOTO 96
        HOVN=STEP/FN						        HOVN=STEP/FN
        III=IEND						        III=IEND
        DO  64  I=1,N2,2					        DO  64  I=1,N2,2
          TS(III)=TS(II)					          TS(III)=TS(II)
          TS(III-1)=FUNC(ENDE-FLOAT(I)*HOVN)			          TS(III-1)=FUNC(ENDE-FLOAT(I)*HOVN)
          III=III-2						          III=III-2
          II=II-1						          II=II-1
 64     CONTINUE						 64     CONTINUE
        ISTEP=2							        ISTEP=2
      ENDIF							      ENDIF
      ISTEP2=IBEG+ISTEP/2					      ISTEP2=IBEG+ISTEP/2
      SUM=0.D0							      SUM=0.D0
      SUMABS=0.D0						      SUMABS=0.D0
      DO  65  I=ISTEP2,IEND,ISTEP				      DO  65  I=ISTEP2,IEND,ISTEP
        SUM=SUM+TS(I)						        SUM=SUM+TS(I)
        SUMABS=SUMABS+DABS(TS(I))				        SUMABS=SUMABS+DABS(TS(I))
 65   CONTINUE							 65   CONTINUE
      T(L,1)=T(L-1,1)/2.D0 + SUM/FN				      T(L,1)=T(L-1,1)/2.D0 + SUM/FN
      TABS=TABS/2.D0+SUMABS/FN					      TABS=TABS/2.D0+SUMABS/FN
      ABSI=ASTEP*TABS						      ABSI=ASTEP*TABS
      N=N2							      N=N2
      IT=1							      IT=1
      VINT=STEP*T(L,1)						      VINT=STEP*T(L,1)
      TABTLM=TABS*TOLMCH					      TABTLM=TABS*TOLMCH
      FNSIZE=DMAX1(FNSIZE,DABS(T(L,1)))				      FNSIZE=DMAX1(FNSIZE,DABS(T(L,1)))
      ERGOAL=DMAX1(ASTEP*TOLMCH*FNSIZE,				      ERGOAL=DMAX1(ASTEP*TOLMCH*FNSIZE,
     *       STAGE*DMAX1(ERRA,ERRR*DABS((CUREST)+VINT)))	     *       STAGE*DMAX1(ERRA,ERRR*DABS((CUREST)+VINT)))
      FEXTRP=1.D0						      FEXTRP=1.D0
      DO  66  I=1,LM1						      DO  66  I=1,LM1
        FEXTRP=FEXTRP*4.D0					        FEXTRP=FEXTRP*4.D0
        T(I,L)=T(L,I)-T(L-1,I)					        T(I,L)=T(L,I)-T(L-1,I)
        T(L,I+1)=T(L,I)+T(I,L)/(FEXTRP-1.D0)			        T(L,I+1)=T(L,I)+T(I,L)/(FEXTRP-1.D0)
 66   CONTINUE							 66   CONTINUE
      ERRER=ASTEP*DABS(T(1,L))					      ERRER=ASTEP*DABS(T(1,L))
      IF ( L .LE. 2 ) THEN					      IF ( L .LE. 2 ) THEN
        IF ( DABS(T(1,2)) .LE. TABTLM)  GOTO 81			        IF ( DABS(T(1,2)) .LE. TABTLM)  GOTO 81
        GOTO 63							        GOTO 63
      ENDIF							      ENDIF
      DO  67  I=2,LM1						      DO  67  I=2,LM1
        DIFF=0.D0						        DIFF=0.D0
        IF ( DABS(T(I-1,L)) .GT. TABTLM ) DIFF=T(I-1,LM1)/T(I	        IF ( DABS(T(I-1,L)) .GT. TABTLM ) DIFF=T(I-1,LM1)/T(I
        T(I-1,LM1)=DIFF						        T(I-1,LM1)=DIFF
 67   CONTINUE							 67   CONTINUE
      IF ( DABS(4.D0-T(1,LM1)) .LE. H2TOL ) GOTO 69		      IF ( DABS(4.D0-T(1,LM1)) .LE. H2TOL ) GOTO 69
      IF ( T(1,LM1) .EQ. 0.D0 ) GOTO 68				      IF ( T(1,LM1) .EQ. 0.D0 ) GOTO 68
      IF ( DABS(2.D0-DABS(T(1,LM1))) .LT. VJUMP ) GOTO 80	      IF ( DABS(2.D0-DABS(T(1,LM1))) .LT. VJUMP ) GOTO 80
      IF ( L .EQ. 3 ) GOTO 62					      IF ( L .EQ. 3 ) GOTO 62
      H2CONV=.FALSE.						      H2CONV=.FALSE.
      IF ( DABS((T(1,LM1)-T(1,L-2))/T(1,LM1)) .LE. AITTOL ) G	      IF ( DABS((T(1,LM1)-T(1,L-2))/T(1,LM1)) .LE. AITTOL ) G
      IF ( REGLAR ) GOTO 68					      IF ( REGLAR ) GOTO 68
      IF ( L .EQ. 4 ) GOTO 62					      IF ( L .EQ. 4 ) GOTO 62
 68   IF ( ERRER .LE. ERGOAL ) GOTO 83				 68   IF ( ERRER .LE. ERGOAL ) GOTO 83
      IF ( LEVEL .GE. 4 ) WRITE(*,103) L,T(1,LM1)		      IF ( LEVEL .GE. 4 ) WRITE(*,103) L,T(1,LM1)
103   FORMAT(1X,I5,7E16.8/1X,3E16.8)				103   FORMAT(1X,I5,7E16.8/1X,3E16.8)
      GOTO 90							      GOTO 90
 69   CONTINUE							 69   CONTINUE
      IF ( LEVEL .GE. 4 ) WRITE(*,104) L,T(1,LM1)		      IF ( LEVEL .GE. 4 ) WRITE(*,104) L,T(1,LM1)
104   FORMAT(1X,I5,E16.8,5X,'H2CONV')				104   FORMAT(1X,I5,E16.8,5X,'H2CONV')
      IF ( H2CONV ) GOTO 70					      IF ( H2CONV ) GOTO 70
      AITKEN=.FALSE.						      AITKEN=.FALSE.
      H2CONV=.TRUE.						      H2CONV=.TRUE.
      IF ( LEVEL .GE. 3 ) WRITE(*,105) L			      IF ( LEVEL .GE. 3 ) WRITE(*,105) L
105   FORMAT(' H2 CONVERGENCE AT ROW',I4)			105   FORMAT(' H2 CONVERGENCE AT ROW',I4)
 70   FEXTRP=4.D0						 70   FEXTRP=4.D0
 71   IT=IT+1							 71   IT=IT+1
      VINT=STEP*T(L,IT)						      VINT=STEP*T(L,IT)
      ERRER=DABS(STEP/(FEXTRP-1.D0)*T(IT-1,L))			      ERRER=DABS(STEP/(FEXTRP-1.D0)*T(IT-1,L))
      IF ( ERRER .LE. ERGOAL ) GOTO 86				      IF ( ERRER .LE. ERGOAL ) GOTO 86
      IF ( IT .EQ. LM1 ) GOTO 79				      IF ( IT .EQ. LM1 ) GOTO 79
      IF ( T(IT,LM1) .EQ. 0.D0 ) GOTO 71			      IF ( T(IT,LM1) .EQ. 0.D0 ) GOTO 71
      IF ( T(IT,LM1) .LE. FEXTRP ) GOTO 79			      IF ( T(IT,LM1) .LE. FEXTRP ) GOTO 79
      IF ( DABS(T(IT,LM1)/4.D0-FEXTRP)/FEXTRP .LT. AITTOL )	      IF ( DABS(T(IT,LM1)/4.D0-FEXTRP)/FEXTRP .LT. AITTOL )
     *                                       FEXTRP=FEXTRP*4.	     *                                       FEXTRP=FEXTRP*4.
      GOTO 71							      GOTO 71
 72   IF ( LEVEL .GE. 4 ) WRITE(*,106) L,T(1,LM1)		 72   IF ( LEVEL .GE. 4 ) WRITE(*,106) L,T(1,LM1)
106   FORMAT(1X,I5,E16.8,5X,'AITKEN')				106   FORMAT(1X,I5,E16.8,5X,'AITKEN')
      IF ( T(1,LM1) .LT. AITLOW ) GOTO 90			      IF ( T(1,LM1) .LT. AITLOW ) GOTO 90
      IF ( AITKEN ) GOTO 73					      IF ( AITKEN ) GOTO 73
      H2CONV=.FALSE.						      H2CONV=.FALSE.
      AITKEN=.TRUE.						      AITKEN=.TRUE.
      IF ( LEVEL .GE. 3 ) WRITE(*,107) L			      IF ( LEVEL .GE. 3 ) WRITE(*,107) L
107   FORMAT(' AITKEN AT ROW',I4)				107   FORMAT(' AITKEN AT ROW',I4)
 73   FEXTRP=T(L-2,LM1)						 73   FEXTRP=T(L-2,LM1)
      IF ( FEXTRP .GT. 4.5 ) GOTO 70				      IF ( FEXTRP .GT. 4.5 ) GOTO 70
      IF ( FEXTRP .LT. AITLOW ) GOTO 90				      IF ( FEXTRP .LT. AITLOW ) GOTO 90
      IF ( DABS(FEXTRP-T(L-3,LM1))/T(1,LM1) .GT. H2TOL ) GOTO	      IF ( DABS(FEXTRP-T(L-3,LM1))/T(1,LM1) .GT. H2TOL ) GOTO
      IF ( LEVEL .GE. 3 ) WRITE(*,108) FEXTRP			      IF ( LEVEL .GE. 3 ) WRITE(*,108) FEXTRP
108   FORMAT(' RATIO',F13.8)					108   FORMAT(' RATIO',F13.8)
      SING=FEXTRP						      SING=FEXTRP
      FEXTM1=FEXTRP-1						      FEXTM1=FEXTRP-1
      AIT(1)=0.							      AIT(1)=0.
      DO  74  I=2,L						      DO  74  I=2,L
        AIT(I)=T(I,1)+(T(I,1)-T(I-1,1))/FEXTM1			        AIT(I)=T(I,1)+(T(I,1)-T(I-1,1))/FEXTM1
        R(I)=T(1,I-1)						        R(I)=T(1,I-1)
        DIF(I)=AIT(I)-AIT(I-1)					        DIF(I)=AIT(I)-AIT(I-1)
 74   CONTINUE							 74   CONTINUE
      IT=2							      IT=2
 75   VINT=STEP*AIT(L)						 75   VINT=STEP*AIT(L)
      IF ( LEVEL .GE. 5 ) THEN					      IF ( LEVEL .GE. 5 ) THEN
        WRITE(*,109) (R(I+1),I=IT,LM1)				        WRITE(*,109) (R(I+1),I=IT,LM1)
109     FORMAT(1X,8E15.8)					109     FORMAT(1X,8E15.8)
        WRITE(*,109) (AIT(I),I=IT,L)				        WRITE(*,109) (AIT(I),I=IT,L)
        WRITE(*,109) (DIF(I+1),I=IT,LM1)			        WRITE(*,109) (DIF(I+1),I=IT,LM1)
      ENDIF							      ENDIF
      ERRER=ERRER/FEXTM1					      ERRER=ERRER/FEXTM1
      IF ( ERRER .GT. ERGOAL ) GOTO 76				      IF ( ERRER .GT. ERGOAL ) GOTO 76
      ALPHA=DLOG10(SING)/ALG402-1.D0				      ALPHA=DLOG10(SING)/ALG402-1.D0
      IF ( LEVEL .GE. 2 ) WRITE(*,110) ALPHA,BEGI,ENDE		      IF ( LEVEL .GE. 2 ) WRITE(*,110) ALPHA,BEGI,ENDE
110   FORMAT(11X,'INTEGRAND SHOWS SINGULAR ',			110   FORMAT(11X,'INTEGRAND SHOWS SINGULAR ',
     *   'BEHAVIOUR OF TYPE X**(',F5.2,') BETWEEN',1P,E15.7,	     *   'BEHAVIOUR OF TYPE X**(',F5.2,') BETWEEN',1P,E15.7,
     *   ' AND',1P,E15.7)					     *   ' AND',1P,E15.7)
      IFLAG=MAX0(IFLAG,2)					      IFLAG=MAX0(IFLAG,2)
      GOTO 86							      GOTO 86
 76   IT=IT+1							 76   IT=IT+1
      IF ( IT .EQ. LM1 ) GOTO 79				      IF ( IT .EQ. LM1 ) GOTO 79
      IF ( IT .LE. 3 ) THEN					      IF ( IT .LE. 3 ) THEN
        H2NEXT=4.D0						        H2NEXT=4.D0
        SINGNX=2.D0*SING					        SINGNX=2.D0*SING
      ENDIF							      ENDIF
      IF ( H2NEXT .GE. SINGNX)  THEN				      IF ( H2NEXT .GE. SINGNX)  THEN
        FEXTRP=SINGNX						        FEXTRP=SINGNX
        SINGNX=2.D0*SINGNX					        SINGNX=2.D0*SINGNX
      ELSE							      ELSE
        FEXTRP=H2NEXT						        FEXTRP=H2NEXT
        H2NEXT=4.D0*H2NEXT					        H2NEXT=4.D0*H2NEXT
      ENDIF							      ENDIF
      DO 77 I=IT,LM1						      DO 77 I=IT,LM1
        R(I+1)=0.D0						        R(I+1)=0.D0
        IF ( DABS(DIF(I+1)) .GT. TABTLM ) R(I+1)=DIF(I)/DIF(I	        IF ( DABS(DIF(I+1)) .GT. TABTLM ) R(I+1)=DIF(I)/DIF(I
 77   CONTINUE							 77   CONTINUE
      IF ( LEVEL .GE. 4 ) WRITE(*,111) FEXTRP,R(L-1),R(L)	      IF ( LEVEL .GE. 4 ) WRITE(*,111) FEXTRP,R(L-1),R(L)
111   FORMAT(' FEXTRP + RATIOS',1P,3E15.7)			111   FORMAT(' FEXTRP + RATIOS',1P,3E15.7)
      H2TFEX=-H2TOL*FEXTRP					      H2TFEX=-H2TOL*FEXTRP
      IF ( R(L)-FEXTRP .LT. H2TFEX ) GOTO 79			      IF ( R(L)-FEXTRP .LT. H2TFEX ) GOTO 79
      IF ( R(L-1)-FEXTRP .LT. H2TFEX ) GOTO 79			      IF ( R(L-1)-FEXTRP .LT. H2TFEX ) GOTO 79
      ERRER=ASTEP*DABS(DIF(L))					      ERRER=ASTEP*DABS(DIF(L))
      FEXTM1=FEXTRP-1.D0					      FEXTM1=FEXTRP-1.D0
      DO 78 I=IT,L						      DO 78 I=IT,L
        AIT(I)=AIT(I)+DIF(I)/FEXTM1				        AIT(I)=AIT(I)+DIF(I)/FEXTM1
        DIF(I)=AIT(I)-AIT(I-1)					        DIF(I)=AIT(I)-AIT(I-1)
 78   CONTINUE							 78   CONTINUE
      GOTO 75							      GOTO 75
 79   FEXTRP=DMAX1(PREVER/ERRER,AITLOW)				 79   FEXTRP=DMAX1(PREVER/ERRER,AITLOW)
      PREVER=ERRER						      PREVER=ERRER
      IF ( L .LT. 5 ) GOTO 63					      IF ( L .LT. 5 ) GOTO 63
      IF ( LEVEL .GE. 3 ) WRITE(*,112)  ERRER,ERGOAL,FEXTRP,I	      IF ( LEVEL .GE. 3 ) WRITE(*,112)  ERRER,ERGOAL,FEXTRP,I
112   FORMAT(' ERRER,ERGOAL,FEXTRP,IT',1P,2E15.7,1P,E14.5,0P,	112   FORMAT(' ERRER,ERGOAL,FEXTRP,IT',1P,2E15.7,1P,E14.5,0P,
      IF ( L-IT .GT. 2  .AND.  ISTAGE .LT. MXSTGE ) GOTO 89	      IF ( L-IT .GT. 2  .AND.  ISTAGE .LT. MXSTGE ) GOTO 89
      IF ( ERRER/FEXTRP**(MAXTBL-L) .LT. ERGOAL ) GOTO 63	      IF ( ERRER/FEXTRP**(MAXTBL-L) .LT. ERGOAL ) GOTO 63
      GOTO 89							      GOTO 89
 80   IF ( LEVEL .GE. 4 ) WRITE(*,113) L,T(1,LM1)		 80   IF ( LEVEL .GE. 4 ) WRITE(*,113) L,T(1,LM1)
113   FORMAT(1X,I5,E16.8,5X,'JUMP')				113   FORMAT(1X,I5,E16.8,5X,'JUMP')
      IF ( ERRER .GT. ERGOAL ) GOTO 89				      IF ( ERRER .GT. ERGOAL ) GOTO 89
      DIFF=DABS(T(1,L))*2.D0*FN					      DIFF=DABS(T(1,L))*2.D0*FN
      IF ( LEVEL .GE. 2 ) WRITE(*,114) DIFF,BEGI,ENDE		      IF ( LEVEL .GE. 2 ) WRITE(*,114) DIFF,BEGI,ENDE
114   FORMAT(13X,'INTEGRAND SEEMS TO HAVE JUMP OF SIZE',	114   FORMAT(13X,'INTEGRAND SEEMS TO HAVE JUMP OF SIZE',
     *   1P,E15.7,' BETWEEN',1P,E15.7,' AND',1P,E15.7)		     *   1P,E15.7,' BETWEEN',1P,E15.7,' AND',1P,E15.7)
      GOTO 86							      GOTO 86
 81   IF ( LEVEL .GE. 4 ) WRITE(*,115) L			 81   IF ( LEVEL .GE. 4 ) WRITE(*,115) L
115   FORMAT(1X,I5,21X,'STRAIGHT LINE')				115   FORMAT(1X,I5,21X,'STRAIGHT LINE')
      SLOPE=(FEND-FBEG)*2.D0					      SLOPE=(FEND-FBEG)*2.D0
      FBEG2=FBEG*2.D0						      FBEG2=FBEG*2.D0
      DO  82  I=1,4						      DO  82  I=1,4
        DIFF=DABS(FUNC(BEGI+RN(I)*STEP)-FBEG2-RN(I)*SLOPE)	        DIFF=DABS(FUNC(BEGI+RN(I)*STEP)-FBEG2-RN(I)*SLOPE)
        IF ( DIFF .GT. TABTLM)  GOTO 85				        IF ( DIFF .GT. TABTLM)  GOTO 85
 82   CONTINUE							 82   CONTINUE
      IF ( LEVEL .GE. 3 ) WRITE(*,116) BEGI,ENDE		      IF ( LEVEL .GE. 3 ) WRITE(*,116) BEGI,ENDE
116   FORMAT(27X,'INTEGRAND SEEMS TO BE STRAIGHT LINE BETWEEN	116   FORMAT(27X,'INTEGRAND SEEMS TO BE STRAIGHT LINE BETWEEN
     *       1P,E15.7,' AND',1P,E15.7)				     *       1P,E15.7,' AND',1P,E15.7)
      GOTO 86							      GOTO 86
 83   IF ( LEVEL .GE. 4 ) WRITE(*,117) L,T(1,LM1)		 83   IF ( LEVEL .GE. 4 ) WRITE(*,117) L,T(1,LM1)
117   FORMAT(1X,I5,1P,E15.7,5X,'NOISE')				117   FORMAT(1X,I5,1P,E15.7,5X,'NOISE')
      SLOPE=(FEND-FBEG)*2.D0					      SLOPE=(FEND-FBEG)*2.D0
      FBEG2=FBEG*2.D0						      FBEG2=FBEG*2.D0
      I=1							      I=1
 84   DIFF=DABS(FUNC(BEGI+RN(I)*STEP)-FBEG2-RN(I)*SLOPE)	 84   DIFF=DABS(FUNC(BEGI+RN(I)*STEP)-FBEG2-RN(I)*SLOPE)
 85   ERRER=DMAX1(ERRER,ASTEP*DIFF)				 85   ERRER=DMAX1(ERRER,ASTEP*DIFF)
      IF ( ERRER .GT. ERGOAL ) GOTO 90				      IF ( ERRER .GT. ERGOAL ) GOTO 90
      I=I+1							      I=I+1
      IF ( I .LE. 4 ) GOTO 84					      IF ( I .LE. 4 ) GOTO 84
      IF ( LEVEL .GE. 3 ) WRITE(*,118) BEGI,ENDE		      IF ( LEVEL .GE. 3 ) WRITE(*,118) BEGI,ENDE
118   FORMAT(' NOISE BETWEEN',1P,E15.7,' AND',1P,E15.7)		118   FORMAT(' NOISE BETWEEN',1P,E15.7,' AND',1P,E15.7)
      IFLAG=3							      IFLAG=3
 86   VAL=VAL+VINT						 86   VAL=VAL+VINT
      ERROR=ERROR+ERRER						      ERROR=ERROR+ERRER
      IF ( LEVEL .GE. 3 ) THEN					      IF ( LEVEL .GE. 3 ) THEN
        IF ( LEVEL .GE. 5 ) THEN				        IF ( LEVEL .GE. 5 ) THEN
          DO 87 I=1,L						          DO 87 I=1,L
            IF ( LEVEL .GE. 4 ) WRITE(*,119) I,(T(I,J),J=1,L)	            IF ( LEVEL .GE. 4 ) WRITE(*,119) I,(T(I,J),J=1,L)
119         FORMAT(1X,I5,7E16.8/1X,3E16.8)			119         FORMAT(1X,I5,7E16.8/1X,3E16.8)
 87       CONTINUE						 87       CONTINUE
        ENDIF							        ENDIF
        WRITE(*,120) VINT,ERRER,L,IT				        WRITE(*,120) VINT,ERRER,L,IT
120     FORMAT(' INTEGRAL IS',1P,E16.8,', ERROR',1P,E16.8,	120     FORMAT(' INTEGRAL IS',1P,E16.8,', ERROR',1P,E16.8,
     *         '  FROM T(',I1,',',I1,'1H)')			     *         '  FROM T(',I1,',',I1,'1H)')
      ENDIF							      ENDIF
      IF ( RIGHT ) GOTO 88					      IF ( RIGHT ) GOTO 88
      ISTAGE=ISTAGE-1						      ISTAGE=ISTAGE-1
      IF ( ISTAGE .EQ. 0 ) RETURN				      IF ( ISTAGE .EQ. 0 ) RETURN
      REGLAR=REGLSV(ISTAGE)					      REGLAR=REGLSV(ISTAGE)
      BEGI=BEGIN(ISTAGE)					      BEGI=BEGIN(ISTAGE)
      ENDE=FINIS(ISTAGE)					      ENDE=FINIS(ISTAGE)
      CUREST=CUREST-EST(ISTAGE+1)+VINT				      CUREST=CUREST-EST(ISTAGE+1)+VINT
      IEND=IBEG-1						      IEND=IBEG-1
      FEND=TS(IEND)						      FEND=TS(IEND)
      IBEG=IBEGS(ISTAGE)					      IBEG=IBEGS(ISTAGE)
      GOTO 92							      GOTO 92
 88   CUREST=CUREST+VINT					 88   CUREST=CUREST+VINT
      STAGE=STAGE*2.D0						      STAGE=STAGE*2.D0
      IEND=IBEG							      IEND=IBEG
      IBEG=IBEGS(ISTAGE)					      IBEG=IBEGS(ISTAGE)
      ENDE=BEGI							      ENDE=BEGI
      BEGI=BEGIN(ISTAGE)					      BEGI=BEGIN(ISTAGE)
      FEND=FBEG							      FEND=FBEG
      FBEG=TS(IBEG)						      FBEG=TS(IBEG)
      GOTO 60							      GOTO 60
 89   REGLAR=.TRUE.						 89   REGLAR=.TRUE.
 90   IF ( ISTAGE .EQ. MXSTGE ) GOTO 97				 90   IF ( ISTAGE .EQ. MXSTGE ) GOTO 97
      IF ( LEVEL .GE. 5 ) THEN					      IF ( LEVEL .GE. 5 ) THEN
        DO 91 I=1,L						        DO 91 I=1,L
          IF ( LEVEL .GE. 4 ) WRITE(*,121) I,(T(I,J),J=1,L)	          IF ( LEVEL .GE. 4 ) WRITE(*,121) I,(T(I,J),J=1,L)
121       FORMAT(1X,I5,7E16.8/1X,3E16.8)			121       FORMAT(1X,I5,7E16.8/1X,3E16.8)
 91     CONTINUE						 91     CONTINUE
      ENDIF							      ENDIF
      IF ( RIGHT ) GOTO 93					      IF ( RIGHT ) GOTO 93
      REGLSV(ISTAGE+1)=REGLAR					      REGLSV(ISTAGE+1)=REGLAR
      BEGIN(ISTAGE)=BEGI					      BEGIN(ISTAGE)=BEGI
      IBEGS(ISTAGE)=IBEG					      IBEGS(ISTAGE)=IBEG
      STAGE=STAGE/2.D0						      STAGE=STAGE/2.D0
 92   RIGHT=.TRUE.						 92   RIGHT=.TRUE.
      BEGI=(BEGI+ENDE)/2.D0					      BEGI=(BEGI+ENDE)/2.D0
      IBEG=(IBEG+IEND)/2					      IBEG=(IBEG+IEND)/2
      TS(IBEG)=TS(IBEG)/2.D0					      TS(IBEG)=TS(IBEG)/2.D0
      FBEG=TS(IBEG)						      FBEG=TS(IBEG)
      GOTO 61							      GOTO 61
 93   NNLEFT=IBEG-IBEGS(ISTAGE)					 93   NNLEFT=IBEG-IBEGS(ISTAGE)
      IF ( IEND+NNLEFT .GE. MAXTS ) GOTO 96			      IF ( IEND+NNLEFT .GE. MAXTS ) GOTO 96
      III=IBEGS(ISTAGE)						      III=IBEGS(ISTAGE)
      II=IEND							      II=IEND
      DO 94 I=III,IBEG						      DO 94 I=III,IBEG
        II=II+1							        II=II+1
        TS(II)=TS(I)						        TS(II)=TS(I)
 94   CONTINUE							 94   CONTINUE
      DO 95 I=IBEG,II						      DO 95 I=IBEG,II
        TS(III)=TS(I)						        TS(III)=TS(I)
        III=III+1						        III=III+1
 95   CONTINUE							 95   CONTINUE
      IEND=IEND+1						      IEND=IEND+1
      IBEG=IEND-NNLEFT						      IBEG=IEND-NNLEFT
      FEND=FBEG							      FEND=FBEG
      FBEG=TS(IBEG)						      FBEG=TS(IBEG)
      FINIS(ISTAGE)=ENDE					      FINIS(ISTAGE)=ENDE
      ENDE=BEGI							      ENDE=BEGI
      BEGI=BEGIN(ISTAGE)					      BEGI=BEGIN(ISTAGE)
      BEGIN(ISTAGE)=ENDE					      BEGIN(ISTAGE)=ENDE
      REGLSV(ISTAGE)=REGLAR					      REGLSV(ISTAGE)=REGLAR
      ISTAGE=ISTAGE+1						      ISTAGE=ISTAGE+1
      REGLAR=REGLSV(ISTAGE)					      REGLAR=REGLSV(ISTAGE)
      EST(ISTAGE)=VINT						      EST(ISTAGE)=VINT
      CUREST=CUREST+EST(ISTAGE)					      CUREST=CUREST+EST(ISTAGE)
      GOTO 60							      GOTO 60
 96   CONTINUE							 96   CONTINUE
      IF ( LEVEL .GE. 2 ) WRITE(*,122) BEGI,ENDE		      IF ( LEVEL .GE. 2 ) WRITE(*,122) BEGI,ENDE
122   FORMAT(' TOO MANY FUNCTION EVALUATIONS AROUND'/		122   FORMAT(' TOO MANY FUNCTION EVALUATIONS AROUND'/
     *       11X,1P,E15.7,' AND',1P,E15.7)			     *       11X,1P,E15.7,' AND',1P,E15.7)
      IFLAG=4							      IFLAG=4
      GOTO 99							      GOTO 99
 97   CONTINUE							 97   CONTINUE
      IFLAG=5							      IFLAG=5
      IF ( LEVEL .GE. 2 ) THEN					      IF ( LEVEL .GE. 2 ) THEN
        IF ( LEVEL .GE. 5 ) THEN				        IF ( LEVEL .GE. 5 ) THEN
          DO  98  I =1,L					          DO  98  I =1,L
            IF ( LEVEL .GE. 4 ) WRITE(*,123) I,(T(I,J),J=1,L)	            IF ( LEVEL .GE. 4 ) WRITE(*,123) I,(T(I,J),J=1,L)
123         FORMAT(1X,I5,7E16.8/1X,3E16.8)			123         FORMAT(1X,I5,7E16.8/1X,3E16.8)
 98       CONTINUE						 98       CONTINUE
        ENDIF							        ENDIF
        WRITE(*,124) BEGI,ENDE					        WRITE(*,124) BEGI,ENDE
124     FORMAT(11X,'INTEGRAND SHOWS SINGULAR BEHAVIOUR OF ',	124     FORMAT(11X,'INTEGRAND SHOWS SINGULAR BEHAVIOUR OF ',
     *      'UNKNOWN TYPE BETWEEN',1P,E15.7,' AND',1P,E15.7)	     *      'UNKNOWN TYPE BETWEEN',1P,E15.7,' AND',1P,E15.7)
      ENDIF							      ENDIF
 99   CONTINUE							 99   CONTINUE
      VAL=CUREST+VINT						      VAL=CUREST+VINT
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTACOS(X)					      FUNCTION UTACOS(X)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS ACOS(X) FOR -1 <= X <= 1 , ACOS(+-1) ELSE		C  RETURNS ACOS(X) FOR -1 <= X <= 1 , ACOS(+-1) ELSE
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      ARGUM=X							      ARGUM=X
      IF     ( X .LT. -1. ) THEN				      IF     ( X .LT. -1. ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('UTACOS')					          CALL UTMSG('UTACOS')
          WRITE(IFCH,*)'*****  ARGUM = ',ARGUM,' SET -1'	          WRITE(IFCH,*)'*****  ARGUM = ',ARGUM,' SET -1'
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        ARGUM=-1.						        ARGUM=-1.
      ELSEIF ( X .GT.  1. ) THEN				      ELSEIF ( X .GT.  1. ) THEN
        IF ( ISH .GE .90 ) THEN					        IF ( ISH .GE .90 ) THEN
          CALL UTMSG('UTACOS')					          CALL UTMSG('UTACOS')
          WRITE(IFCH,*)'*****  ARGUM = ',ARGUM,' SET 1'		          WRITE(IFCH,*)'*****  ARGUM = ',ARGUM,' SET 1'
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        ARGUM=1.						        ARGUM=1.
      ENDIF							      ENDIF
      UTACOS=ACOS(ARGUM)					      UTACOS=ACOS(ARGUM)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTAMNU(KEUX,KEDX,KESX,KECX,MODUS)		      FUNCTION UTAMNU(KEUX,KEDX,KESX,KECX,MODUS)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS MIN MASS OF CLUSTER WITH GIVEN U,D,S,C CONTENT	C  RETURNS MIN MASS OF CLUSTER WITH GIVEN U,D,S,C CONTENT
C  KEUX: NET U QUARK NUMBER					C  KEUX: NET U QUARK NUMBER
C  KEDX: NET D QUARK NUMBER					C  KEDX: NET D QUARK NUMBER
C  KESX: NET S QUARK NUMBER					C  KESX: NET S QUARK NUMBER
C  KECX: NET C QUARK NUMBER					C  KECX: NET C QUARK NUMBER
C  MODUS:0,1,2,3,4,5,6						C  MODUS:0,1,2,3,4,5,6
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CSJCGA/  AMEGAM,AMNULL,ASUHA(7),ENTRPY,NOPHA,NS	      COMMON /CSJCGA/  AMEGAM,AMNULL,ASUHA(7),ENTRPY,NOPHA,NS
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP	      COMMON /PARO3/   ASUHAX(7),ASUHAY(7),OMEGA,SIGPPD,SIGPP
     *                ,IWZZZZ					     *                ,IWZZZZ
C------------------------------------------------------------	C------------------------------------------------------------
      AMNULL=0.							      AMNULL=0.

      IF     ( MODUS .EQ. 0 ) THEN				      IF     ( MODUS .EQ. 0 ) THEN
        DO 21 I=1,7						        DO 21 I=1,7
          ASUHA(I)=ASUHAY(I)					          ASUHA(I)=ASUHAY(I)
          NSUHA(I)=0						          NSUHA(I)=0
21      CONTINUE						21      CONTINUE
      ELSEIF ( MODUS .EQ. 1 ) THEN				      ELSEIF ( MODUS .EQ. 1 ) THEN
        IF     ( NOPHA .EQ. 0 ) THEN				        IF     ( NOPHA .EQ. 0 ) THEN
          DO 22 I=1,7						          DO 22 I=1,7
            ASUHA(I)=ASUHAX(I)					            ASUHA(I)=ASUHAX(I)
            NSUHA(I)=0						            NSUHA(I)=0
22        CONTINUE						22        CONTINUE
        ELSEIF ( NOPHA .GE. 1 ) THEN				        ELSEIF ( NOPHA .GE. 1 ) THEN
          DO 23 I=1,7						          DO 23 I=1,7
            ASUHA(I)=ASUHAY(I)					            ASUHA(I)=ASUHAY(I)
            NSUHA(I)=0						            NSUHA(I)=0
23        CONTINUE						23        CONTINUE
        ENDIF							        ENDIF
      ELSEIF ( MODUS .EQ. 2 ) THEN				      ELSEIF ( MODUS .EQ. 2 ) THEN
        DO 24 I=1,7						        DO 24 I=1,7
          ASUHA(I)=ASUHAY(I)					          ASUHA(I)=ASUHAY(I)
          NSUHA(I)=0						          NSUHA(I)=0
24      CONTINUE						24      CONTINUE
      ELSEIF ( MODUS .EQ. 3 ) THEN				      ELSEIF ( MODUS .EQ. 3 ) THEN
        DO 25 I=1,7						        DO 25 I=1,7
          ASUHA(I)=ASUHAY(I)					          ASUHA(I)=ASUHAY(I)
          NSUHA(I)=0						          NSUHA(I)=0
25      CONTINUE						25      CONTINUE
      ELSEIF ( MODUS .EQ. 4 ) THEN				      ELSEIF ( MODUS .EQ. 4 ) THEN
        DO 26 I=1,7						        DO 26 I=1,7
          ASUHA(I)=ASUHAX(I)					          ASUHA(I)=ASUHAX(I)
          NSUHA(I)=0						          NSUHA(I)=0
26      CONTINUE						26      CONTINUE
      ELSEIF ( MODUS .EQ. 5 ) THEN				      ELSEIF ( MODUS .EQ. 5 ) THEN
        DO 27 I=1,7						        DO 27 I=1,7
          ASUHA(I)=ASUHAY(I)					          ASUHA(I)=ASUHAY(I)
          NSUHA(I)=0						          NSUHA(I)=0
27      CONTINUE						27      CONTINUE
      ELSEIF ( MODUS .EQ. 6 ) THEN				      ELSEIF ( MODUS .EQ. 6 ) THEN
        DO 28 I=1,7						        DO 28 I=1,7
          ASUHA(I)=SQRT(ASUHAY(I)**2+DELMSS**2)			          ASUHA(I)=SQRT(ASUHAY(I)**2+DELMSS**2)
          NSUHA(I)=0						          NSUHA(I)=0
28      CONTINUE						28      CONTINUE
      ENDIF							      ENDIF
      IAUX=KEUX+KEDX+KESX+KECX					      IAUX=KEUX+KEDX+KESX+KECX
      KE=ABS(IAUX)						      KE=ABS(IAUX)

      IF ( IAUX .GE. 0 ) THEN					      IF ( IAUX .GE. 0 ) THEN
        KEU=KEUX						        KEU=KEUX
        KED=KEDX						        KED=KEDX
        KES=KESX						        KES=KESX
        KEC=KECX						        KEC=KECX
      ELSE							      ELSE
        KEU=-KEUX						        KEU=-KEUX
        KED=-KEDX						        KED=-KEDX
        KES=-KESX						        KES=-KESX
        KEC=-KECX						        KEC=-KECX
      ENDIF							      ENDIF

      IF ( KEC .NE. 0 ) THEN					      IF ( KEC .NE. 0 ) THEN
10      CONTINUE						10      CONTINUE
        IF   ( KEC .LT. 0 ) THEN				        IF   ( KEC .LT. 0 ) THEN
          KEC=KEC+1						          KEC=KEC+1
          IF ( KEU .GT. KED ) THEN				          IF ( KEU .GT. KED ) THEN
            KEU=KEU-1						            KEU=KEU-1
          ELSE							          ELSE
            KED=KED-1						            KED=KED-1
          ENDIF							          ENDIF
          AMNULL=AMNULL+1.87					          AMNULL=AMNULL+1.87
          GOTO 10						          GOTO 10
        ENDIF							        ENDIF
11      CONTINUE						11      CONTINUE
        IF ( KEC .GT. 0 ) THEN					        IF ( KEC .GT. 0 ) THEN
          KEC=KEC-1						          KEC=KEC-1
          IF ( KEU .LT. KED ) THEN				          IF ( KEU .LT. KED ) THEN
            KEU=KEU+1						            KEU=KEU+1
          ELSE							          ELSE
            KED=KED+1						            KED=KED+1
          ENDIF							          ENDIF
          AMNULL=AMNULL+1.87					          AMNULL=AMNULL+1.87
          GOTO 11						          GOTO 11
        ENDIF							        ENDIF
      ENDIF							      ENDIF

 5    CONTINUE							 5    CONTINUE
      IF ( KES .LT. 0 ) THEN					      IF ( KES .LT. 0 ) THEN
        AMNULL=AMNULL+ASUHA(6)					        AMNULL=AMNULL+ASUHA(6)
        IF ( KEU .GE. KED ) THEN				        IF ( KEU .GE. KED ) THEN
          KEU=KEU-1						          KEU=KEU-1
        ELSE							        ELSE
          KED=KED-1						          KED=KED-1
        ENDIF							        ENDIF
        KES=KES+1						        KES=KES+1
        GOTO 5							        GOTO 5
      ENDIF							      ENDIF

 6    CONTINUE							 6    CONTINUE
      IF ( KED .LT. 0 ) THEN					      IF ( KED .LT. 0 ) THEN
        IF ( KEU .GE. KES ) THEN				        IF ( KEU .GE. KES ) THEN
          AMNULL=AMNULL+ASUHA(5)				          AMNULL=AMNULL+ASUHA(5)
          KEU=KEU-1						          KEU=KEU-1
        ELSE							        ELSE
          AMNULL=AMNULL+ASUHA(6)				          AMNULL=AMNULL+ASUHA(6)
          KES=KES-1						          KES=KES-1
        ENDIF							        ENDIF
        KED=KED+1						        KED=KED+1
        GOTO 6							        GOTO 6
      ENDIF							      ENDIF

 7    CONTINUE							 7    CONTINUE
      IF ( KEU .LT. 0 ) THEN					      IF ( KEU .LT. 0 ) THEN
        IF ( KED .GE. KES ) THEN				        IF ( KED .GE. KES ) THEN
          AMNULL=AMNULL+ASUHA(5)				          AMNULL=AMNULL+ASUHA(5)
          KED=KED-1						          KED=KED-1
        ELSE							        ELSE
          AMNULL=AMNULL+ASUHA(6)				          AMNULL=AMNULL+ASUHA(6)
          KES=KES-1						          KES=KES-1
        ENDIF							        ENDIF
        KEU=KEU+1						        KEU=KEU+1
        GOTO 7							        GOTO 7
      ENDIF							      ENDIF

      IF ( KEU+KED+KES+KEC .NE. KE ) THEN			      IF ( KEU+KED+KES+KEC .NE. KE ) THEN
        CALL UTSTOP('UTAMNU: SUM_KEI /= KE                   	        CALL UTSTOP('UTAMNU: SUM_KEI /= KE                   
      ENDIF							      ENDIF
      KEQ=KEU+KED						      KEQ=KEU+KED
      KEQX=KEQ							      KEQX=KEQ

      IF ( MODUS .EQ. 2  .AND.  KE .GT. 3 ) THEN		      IF ( MODUS .EQ. 2  .AND.  KE .GT. 3 ) THEN
        CALL SMASST(KEU,KED,KES,KEC,A,Y,Z)			        CALL SMASST(KEU,KED,KES,KEC,A,Y,Z)
        AMNUZ=SMASS(A,Y,Z)					        AMNUZ=SMASS(A,Y,Z)
      ENDIF							      ENDIF

      AMNUX=0.							      AMNUX=0.

      I=4							      I=4
 2    I=I-1							 2    I=I-1
 3    CONTINUE							 3    CONTINUE
      IF ( (4-I)*KES .GT. (I-1)*KEQ ) THEN			      IF ( (4-I)*KES .GT. (I-1)*KEQ ) THEN
        AMNUX=AMNUX+ASUHA(1+I)					        AMNUX=AMNUX+ASUHA(1+I)
        KEQ=KEQ-3+I						        KEQ=KEQ-3+I
        KES=KES-I						        KES=KES-I
        IF ( KES .LT. 0 ) THEN					        IF ( KES .LT. 0 ) THEN
          CALL UTSTOP('UTAMNU: NEGATIVE KES                  	          CALL UTSTOP('UTAMNU: NEGATIVE KES                  
        ENDIF							        ENDIF
        IF ( KEQ .LT. 0 ) THEN					        IF ( KEQ .LT. 0 ) THEN
          CALL UTSTOP('UTAMNU: NEGATIVE KEQ                  	          CALL UTSTOP('UTAMNU: NEGATIVE KEQ                  
        ENDIF							        ENDIF
        GOTO 3							        GOTO 3
      ENDIF							      ENDIF
      IF ( I .GT. 1 ) GOTO 2					      IF ( I .GT. 1 ) GOTO 2

      IF ( KEQX .GT. KEQ ) THEN					      IF ( KEQX .GT. KEQ ) THEN
        DO 8 K=1,KEQX-KEQ					        DO 8 K=1,KEQX-KEQ
          IF ( KEU .GE. KED ) THEN				          IF ( KEU .GE. KED ) THEN
            KEU=KEU-1						            KEU=KEU-1
          ELSE							          ELSE
            KED=KED-1						            KED=KED-1
          ENDIF							          ENDIF
 8      CONTINUE						 8      CONTINUE
      ENDIF							      ENDIF
      IF ( KEU+KED .NE. KEQ ) THEN				      IF ( KEU+KED .NE. KEQ ) THEN
        CALL UTSTOP('UTAMNU: KEU+KED /= KEQ                  	        CALL UTSTOP('UTAMNU: KEU+KED /= KEQ                  
      ENDIF							      ENDIF

 9    CONTINUE							 9    CONTINUE
      IF ( KEU .GT. 2*KED ) THEN				      IF ( KEU .GT. 2*KED ) THEN
        AMNUX=AMNUX+ASUHA(7)					        AMNUX=AMNUX+ASUHA(7)
        KEU=KEU-3						        KEU=KEU-3
        IF ( KEU .LT. 0 ) THEN					        IF ( KEU .LT. 0 ) THEN
          CALL UTSTOP('UTAMNU: NEGATIVE KEU                  	          CALL UTSTOP('UTAMNU: NEGATIVE KEU                  
        ENDIF							        ENDIF
        GOTO 9							        GOTO 9
      ENDIF							      ENDIF
      IF ( KED .GT. 2*KEU ) THEN				      IF ( KED .GT. 2*KEU ) THEN
        AMNUX=AMNUX+ASUHA(7)					        AMNUX=AMNUX+ASUHA(7)
        KED=KED-3						        KED=KED-3
        IF ( KED .LT. 0 ) THEN					        IF ( KED .LT. 0 ) THEN
          CALL UTSTOP('UTAMNU: NEGATIVE KED                  	          CALL UTSTOP('UTAMNU: NEGATIVE KED                  
        ENDIF							        ENDIF
        GOTO 9							        GOTO 9
      ENDIF							      ENDIF

      KEQ=KEU+KED						      KEQ=KEU+KED
      IF ( MOD(KEQ,3) .NE. 0 ) THEN				      IF ( MOD(KEQ,3) .NE. 0 ) THEN
        CALL UTSTOP('UTAMNU: MOD(KEQ,3) /= 0                 	        CALL UTSTOP('UTAMNU: MOD(KEQ,3) /= 0                 
      ENDIF							      ENDIF
      AMNUX=AMNUX+ASUHA(1)*KEQ/3				      AMNUX=AMNUX+ASUHA(1)*KEQ/3

      AMNU=AMNUX						      AMNU=AMNUX
      IF ( MODUS.EQ.2 .AND. KE.GT.3 ) AMNU=MIN(AMNUX,AMNUZ)	      IF ( MODUS.EQ.2 .AND. KE.GT.3 ) AMNU=MIN(AMNUX,AMNUZ)
      AMNULL=AMNULL+AMNU					      AMNULL=AMNULL+AMNU

      IF ( AMNULL.EQ.0. .AND. MODUS.GT.0 ) AMNULL=ASUHA(5)	      IF ( AMNULL.EQ.0. .AND. MODUS.GT.0 ) AMNULL=ASUHA(5)

1000  UTAMNU=AMNULL						1000  UTAMNU=AMNULL
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTAMNX(JCP,JCM)					      FUNCTION UTAMNX(JCP,JCM)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS MINIMUM MASS FOR THE DECAY OF JCP---JCM (BY CALLIN	C  RETURNS MINIMUM MASS FOR THE DECAY OF JCP---JCM (BY CALLIN
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER JCM(NFLAV,2),JCP(NFLAV,2)				      INTEGER JCM(NFLAV,2),JCP(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 3 I=1,NFLAV						      DO 3 I=1,NFLAV
        IF ( JCP(I,1) .NE. 0 ) GOTO 1				        IF ( JCP(I,1) .NE. 0 ) GOTO 1
        IF ( JCP(I,2) .NE. 0 ) GOTO 1				        IF ( JCP(I,2) .NE. 0 ) GOTO 1
 3    CONTINUE							 3    CONTINUE
      KEU=JCM(1,1)-JCM(1,2)					      KEU=JCM(1,1)-JCM(1,2)
      KED=JCM(2,1)-JCM(2,2)					      KED=JCM(2,1)-JCM(2,2)
      KES=JCM(3,1)-JCM(3,2)					      KES=JCM(3,1)-JCM(3,2)
      KEC=JCM(4,1)-JCM(4,2)					      KEC=JCM(4,1)-JCM(4,2)
      UTAMNX=UTAMNU(KEU,KED,KES,KEC,5)				      UTAMNX=UTAMNU(KEU,KED,KES,KEC,5)
      RETURN							      RETURN
 1    CONTINUE							 1    CONTINUE

      DO  4 I=1,NFLAV						      DO  4 I=1,NFLAV
        IF ( JCM(I,1) .NE. 0 ) GOTO 2				        IF ( JCM(I,1) .NE. 0 ) GOTO 2
        IF ( JCM(I,2) .NE. 0 ) GOTO 2				        IF ( JCM(I,2) .NE. 0 ) GOTO 2
 4    CONTINUE							 4    CONTINUE
      KEU=JCP(1,1)-JCP(1,2)					      KEU=JCP(1,1)-JCP(1,2)
      KED=JCP(2,1)-JCP(2,2)					      KED=JCP(2,1)-JCP(2,2)
      KES=JCP(3,1)-JCP(3,2)					      KES=JCP(3,1)-JCP(3,2)
      KEC=JCP(4,1)-JCP(4,2)					      KEC=JCP(4,1)-JCP(4,2)
      UTAMNX=UTAMNU(KEU,KED,KES,KEC,5)				      UTAMNX=UTAMNU(KEU,KED,KES,KEC,5)
      RETURN							      RETURN
 2    CONTINUE							 2    CONTINUE

      KEU=JCP(1,1)-JCP(1,2)					      KEU=JCP(1,1)-JCP(1,2)
      KED=JCP(2,1)-JCP(2,2)					      KED=JCP(2,1)-JCP(2,2)
      KES=JCP(3,1)-JCP(3,2)					      KES=JCP(3,1)-JCP(3,2)
      KEC=JCP(4,1)-JCP(4,2)					      KEC=JCP(4,1)-JCP(4,2)
      KE=KEU+KED+KES+KEC					      KE=KEU+KED+KES+KEC
      IF     ( MOD(KE+1,3) .EQ. 0 ) THEN			      IF     ( MOD(KE+1,3) .EQ. 0 ) THEN
        KEU=KEU+1						        KEU=KEU+1
      ELSEIF ( MOD(KE-1,3) .EQ. 0 ) THEN			      ELSEIF ( MOD(KE-1,3) .EQ. 0 ) THEN
        KEU=KEU-1						        KEU=KEU-1
      ELSE							      ELSE
        CALL UTSTOP('UTAMNX: NO SINGLET POSSIBLE (1)         	        CALL UTSTOP('UTAMNX: NO SINGLET POSSIBLE (1)         
      ENDIF							      ENDIF
      AMMS=UTAMNU(KEU,KED,KES,KEC,5)				      AMMS=UTAMNU(KEU,KED,KES,KEC,5)
      KEU=JCM(1,1)-JCM(1,2)					      KEU=JCM(1,1)-JCM(1,2)
      KED=JCM(2,1)-JCM(2,2)					      KED=JCM(2,1)-JCM(2,2)
      KES=JCM(3,1)-JCM(3,2)					      KES=JCM(3,1)-JCM(3,2)
      KEC=JCM(4,1)-JCM(4,2)					      KEC=JCM(4,1)-JCM(4,2)
      KE=KEU+KED+KES+KEC					      KE=KEU+KED+KES+KEC
      IF     ( MOD(KE+1,3) .EQ. 0 ) THEN			      IF     ( MOD(KE+1,3) .EQ. 0 ) THEN
        KEU=KEU+1						        KEU=KEU+1
      ELSEIF ( MOD(KE-1,3) .EQ. 0 ) THEN			      ELSEIF ( MOD(KE-1,3) .EQ. 0 ) THEN
        KEU=KEU-1						        KEU=KEU-1
      ELSE							      ELSE
        CALL UTSTOP('UTAMNX: NO SINGLET POSSIBLE (2)         	        CALL UTSTOP('UTAMNX: NO SINGLET POSSIBLE (2)         
      ENDIF							      ENDIF
      UTAMNX=AMMS+UTAMNU(KEU,KED,KES,KEC,5)			      UTAMNX=AMMS+UTAMNU(KEU,KED,KES,KEC,5)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTAMNY(JCP,JCM)					      FUNCTION UTAMNY(JCP,JCM)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS MINIMUM MASS OF JCP+JCM (BY CALLING UTAMNU).		C  RETURNS MINIMUM MASS OF JCP+JCM (BY CALLING UTAMNU).
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER JC(NFLAV,2),JCM(NFLAV,2),JCP(NFLAV,2)		      INTEGER JC(NFLAV,2),JCM(NFLAV,2),JCP(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 7 NF=1,NFLAV						      DO 7 NF=1,NFLAV
        JC(NF,1)=JCP(NF,1)+JCM(NF,1)				        JC(NF,1)=JCP(NF,1)+JCM(NF,1)
        JC(NF,2)=JCP(NF,2)+JCM(NF,2)				        JC(NF,2)=JCP(NF,2)+JCM(NF,2)
 7    CONTINUE							 7    CONTINUE
      KEU=JC(1,1)-JC(1,2)					      KEU=JC(1,1)-JC(1,2)
      KED=JC(2,1)-JC(2,2)					      KED=JC(2,1)-JC(2,2)
      KES=JC(3,1)-JC(3,2)					      KES=JC(3,1)-JC(3,2)
      KEC=JC(4,1)-JC(4,2)					      KEC=JC(4,1)-JC(4,2)
      UTAMNY=UTAMNU(KEU,KED,KES,KEC,5)				      UTAMNY=UTAMNU(KEU,KED,KES,KEC,5)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTAMNZ(JC,MODUS)					      FUNCTION UTAMNZ(JC,MODUS)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS MINIMUM MASS OF JC (BY CALLING UTAMNU).		C  RETURNS MINIMUM MASS OF JC (BY CALLING UTAMNU).
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER JC(NFLAV,2)					      INTEGER JC(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      KEU=JC(1,1)-JC(1,2)					      KEU=JC(1,1)-JC(1,2)
      KED=JC(2,1)-JC(2,2)					      KED=JC(2,1)-JC(2,2)
      KES=JC(3,1)-JC(3,2)					      KES=JC(3,1)-JC(3,2)
      KEC=JC(4,1)-JC(4,2)					      KEC=JC(4,1)-JC(4,2)
      UTAMNZ=UTAMNU(KEU,KED,KES,KEC,MODUS)			      UTAMNZ=UTAMNU(KEU,KED,KES,KEC,MODUS)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTAMST(STS,AM,AMIN,IRET)			      SUBROUTINE UTAMST(STS,AM,AMIN,IRET)

C------------------------------------------------------------	C------------------------------------------------------------
C  INPUT:  STS   = STRING  (SINGLE)				C  INPUT:  STS   = STRING  (SINGLE)
C  OUTPUT: AM    = MASS						C  OUTPUT: AM    = MASS
C          AMIN  = MINIMUM MASS					C          AMIN  = MINIMUM MASS
C          IRET  = RETURN CODE (=3 IF AM**2.LT.AMIN**2, 0 ELS	C          IRET  = RETURN CODE (=3 IF AM**2.LT.AMIN**2, 0 ELS
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU

      REAL    STS(NSI,2)					      REAL    STS(NSI,2)
      INTEGER IC1(2),IC2(2),JC(NFLAV,2),JC1(NFLAV,2),JC2(NFLA	      INTEGER IC1(2),IC2(2),JC(NFLAV,2),JC1(NFLAV,2),JC2(NFLA
C------------------------------------------------------------	C------------------------------------------------------------
      IRET=0							      IRET=0
      AM2= (STS(4,1)+STS(4,2))**2 - (STS(3,1)+STS(3,2))**2 -	      AM2= (STS(4,1)+STS(4,2))**2 - (STS(3,1)+STS(3,2))**2 -
     *     (STS(2,1)+STS(2,2))**2 - (STS(1,1)+STS(1,2))**2	     *     (STS(2,1)+STS(2,2))**2 - (STS(1,1)+STS(1,2))**2
      AM=-AM2							      AM=-AM2
      IC1(1)=NINT(STS(4+1,1))					      IC1(1)=NINT(STS(4+1,1))
      IC1(2)=NINT(STS(4+2,1))					      IC1(2)=NINT(STS(4+2,1))
      IC2(1)=NINT(STS(4+1,2))					      IC2(1)=NINT(STS(4+1,2))
      IC2(2)=NINT(STS(4+2,2))					      IC2(2)=NINT(STS(4+2,2))
      CALL IDDECO(IC1,JC1)					      CALL IDDECO(IC1,JC1)
      CALL IDDECO(IC2,JC2)					      CALL IDDECO(IC2,JC2)
      DO 2 NF=1,NFLAV						      DO 2 NF=1,NFLAV
        JC(NF,1)=JC1(NF,1)+JC2(NF,1)				        JC(NF,1)=JC1(NF,1)+JC2(NF,1)
        JC(NF,2)=JC1(NF,2)+JC2(NF,2)				        JC(NF,2)=JC1(NF,2)+JC2(NF,2)
        IF ( NF.GT.4 .AND. (JC(NF,1).NE.0 .OR. JC(NF,2).NE.0)	        IF ( NF.GT.4 .AND. (JC(NF,1).NE.0 .OR. JC(NF,2).NE.0)
          CALL UTSTOP('UTAMST: FLAVOUR > 4                   	          CALL UTSTOP('UTAMST: FLAVOUR > 4                   
        ENDIF							        ENDIF
 2    CONTINUE							 2    CONTINUE
      KEU=JC(1,1)-JC(1,2)					      KEU=JC(1,1)-JC(1,2)
      KED=JC(2,1)-JC(2,2)					      KED=JC(2,1)-JC(2,2)
      KES=JC(3,1)-JC(3,2)					      KES=JC(3,1)-JC(3,2)
      KEC=JC(4,1)-JC(4,2)					      KEC=JC(4,1)-JC(4,2)
      AMIN=UTAMNU(KEU,KED,KES,KEC,4)				      AMIN=UTAMNU(KEU,KED,KES,KEC,4)
      IF ( AM2. LT. AMIN**2 ) THEN				      IF ( AM2. LT. AMIN**2 ) THEN
        IRET=3							        IRET=3
        RETURN							        RETURN
      ELSE							      ELSE
        AM=SQRT(AM2)						        AM=SQRT(AM2)
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTAXIS(I,J,A1,A2,A3)				      SUBROUTINE UTAXIS(I,J,A1,A2,A3)

C------------------------------------------------------------	C------------------------------------------------------------
C  CALCULATES THE AXIS DEFINED BY THE PTLS I,J IN THE I,J CM 	C  CALCULATES THE AXIS DEFINED BY THE PTLS I,J IN THE I,J CM 
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      A1=0.							      A1=0.
      A2=0.							      A2=0.
      A3=1.							      A3=1.
      PI1=PPTL(1,I)						      PI1=PPTL(1,I)
      PI2=PPTL(2,I)						      PI2=PPTL(2,I)
      PI3=PPTL(3,I)						      PI3=PPTL(3,I)
      PI4=PPTL(4,I)						      PI4=PPTL(4,I)
      PJ1=PPTL(1,J)						      PJ1=PPTL(1,J)
      PJ2=PPTL(2,J)						      PJ2=PPTL(2,J)
      PJ3=PPTL(3,J)						      PJ3=PPTL(3,J)
      PJ4=PPTL(4,J)						      PJ4=PPTL(4,J)
      P1=PI1+PJ1						      P1=PI1+PJ1
      P2=PI2+PJ2						      P2=PI2+PJ2
      P3=PI3+PJ3						      P3=PI3+PJ3
      P4=PI4+PJ4						      P4=PI4+PJ4
      P5=SQRT(P4**2-P3**2-P2**2-P1**2)				      P5=SQRT(P4**2-P3**2-P2**2-P1**2)
      CALL UTLOBO(1,P1,P2,P3,P4,P5,PI1,PI2,PI3,PI4)		      CALL UTLOBO(1,P1,P2,P3,P4,P5,PI1,PI2,PI3,PI4)
      CALL UTLOBO(1,P1,P2,P3,P4,P5,PJ1,PJ2,PJ3,PJ4)		      CALL UTLOBO(1,P1,P2,P3,P4,P5,PJ1,PJ2,PJ3,PJ4)
      ERR=(PI1+PJ1)**2+(PI2+PJ2)**2+(PI3+PJ3)**2		      ERR=(PI1+PJ1)**2+(PI2+PJ2)**2+(PI3+PJ3)**2
      IF ( ISH.GE.90 .AND. ERR .GT. 1.E-3 ) THEN		      IF ( ISH.GE.90 .AND. ERR .GT. 1.E-3 ) THEN
        CALL UTMSG('UTAXIS')					        CALL UTMSG('UTAXIS')
        WRITE(IFCH,*)'*****  ERR=',ERR				        WRITE(IFCH,*)'*****  ERR=',ERR
        WRITE(IFCH,*)'PI:',PI1,PI2,PI3,PI4			        WRITE(IFCH,*)'PI:',PI1,PI2,PI3,PI4
        WRITE(IFCH,*)'PJ:',PJ1,PJ2,PJ3,PJ4			        WRITE(IFCH,*)'PJ:',PJ1,PJ2,PJ3,PJ4
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      A=SQRT( (PJ1-PI1)**2 + (PJ2-PI2)**2 + (PJ3-PI3)**2 )	      A=SQRT( (PJ1-PI1)**2 + (PJ2-PI2)**2 + (PJ3-PI3)**2 )
      IF ( A .EQ. 0. ) RETURN					      IF ( A .EQ. 0. ) RETURN
      A1=(PI1-PJ1)/A						      A1=(PI1-PJ1)/A
      A2=(PI2-PJ2)/A						      A2=(PI2-PJ2)/A
      A3=(PI3-PJ3)/A						      A3=(PI3-PJ3)/A
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTCHM(ARP,ARM,II)				      SUBROUTINE UTCHM(ARP,ARM,II)

C------------------------------------------------------------	C------------------------------------------------------------
C  CHECKS WHETHER ARP**2=0. AND ARM**2=0.			C  CHECKS WHETHER ARP**2=0. AND ARM**2=0.
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      DOUBLE PRECISION ARM(4),ARP(4),DIFM,DIFP			      DOUBLE PRECISION ARM(4),ARP(4),DIFM,DIFP
C------------------------------------------------------------	C------------------------------------------------------------
      IF(ISH.LT.90)RETURN					      IF(ISH.LT.90)RETURN
      DIFP=ARP(4)**2-ARP(1)**2-ARP(2)**2-ARP(3)**2		      DIFP=ARP(4)**2-ARP(1)**2-ARP(2)**2-ARP(3)**2
      DIFM=ARM(4)**2-ARM(1)**2-ARM(2)**2-ARM(3)**2		      DIFM=ARM(4)**2-ARM(1)**2-ARM(2)**2-ARM(3)**2
      IF ( ABS(DIFP) .GT. 1.D-3*ARP(4)**2   .OR.		      IF ( ABS(DIFP) .GT. 1.D-3*ARP(4)**2   .OR.
     *     ABS(DIFM) .GT. 1.D-3*ARM(4)**2 ) THEN		     *     ABS(DIFM) .GT. 1.D-3*ARM(4)**2 ) THEN
        CALL UTMSG('UTCHM ')					        CALL UTMSG('UTCHM ')
        WRITE(IFCH,*)'*****  MASS NON ZERO  -  ',II		        WRITE(IFCH,*)'*****  MASS NON ZERO  -  ',II
        WRITE(IFCH,*)'JET-MASS**2`S:    ',DIFP,DIFM		        WRITE(IFCH,*)'JET-MASS**2`S:    ',DIFP,DIFM
        WRITE(IFCH,*)'ENERGY**2`S:      ',ARP(4)**2,ARM(4)**2	        WRITE(IFCH,*)'ENERGY**2`S:      ',ARP(4)**2,ARM(4)**2
        WRITE(IFCH,*)(SNGL(ARP(I)),I=1,4)			        WRITE(IFCH,*)(SNGL(ARP(I)),I=1,4)
        WRITE(IFCH,*)(SNGL(ARM(I)),I=1,4)			        WRITE(IFCH,*)(SNGL(ARM(I)),I=1,4)
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTCLEA(NPTL0)					      SUBROUTINE UTCLEA(NPTL0)

C------------------------------------------------------------	C------------------------------------------------------------
C  OVERWRITES ISTPTL=2 PARTICLES IN /CPTL/, REDUCES SO NPTL.	C  OVERWRITES ISTPTL=2 PARTICLES IN /CPTL/, REDUCES SO NPTL.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      INTEGER NEWPTL(MXPTL)					      INTEGER NEWPTL(MXPTL)
C------------------------------------------------------------	C------------------------------------------------------------
      ISH0=ISH							      ISH0=ISH
      IF ( ISHSUB/100 .EQ. 18 ) ISH=MOD(ISHSUB,100)		      IF ( ISHSUB/100 .EQ. 18 ) ISH=MOD(ISHSUB,100)

      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)('-',L=1,68)				        WRITE(IFCH,*)('-',L=1,68)
        WRITE(IFCH,*)'SR UTCLEA. INITIAL.'			        WRITE(IFCH,*)'SR UTCLEA. INITIAL.'
        WRITE(IFCH,*)('-',L=1,68)				        WRITE(IFCH,*)('-',L=1,68)
        DO 34 N=1,NPTL						        DO 34 N=1,NPTL
          WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),IF	          WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),IF
     *     ,IDPTL(N),SQRT(PPTL(1,N)**2+PPTL(2,N)**2),PPTL(3,N	     *     ,IDPTL(N),SQRT(PPTL(1,N)**2+PPTL(2,N)**2),PPTL(3,N
     *     ,ISTPTL(N)						     *     ,ISTPTL(N)
34      CONTINUE						34      CONTINUE
116     FORMAT(1X,I6,I6,2X,I6,2X,I4,I4,I12,3(E10.2),I3,I3)	116     FORMAT(1X,I6,I6,2X,I6,2X,I4,I4,I12,3(E10.2),I3,I3)
      ENDIF							      ENDIF

      I=0							      I=0
 1    I=I+1							 1    I=I+1
      IF ( I .GT. NPTL ) GOTO 1000				      IF ( I .GT. NPTL ) GOTO 1000
      IF ( ISTPTL(I) .EQ. 2 ) GOTO 2				      IF ( ISTPTL(I) .EQ. 2 ) GOTO 2
      NEWPTL(I)=I						      NEWPTL(I)=I
      GOTO 1							      GOTO 1

 2    I=I-1							 2    I=I-1
      J=I							      J=I
 3    I=I+1							 3    I=I+1
 4    J=J+1							 4    J=J+1
      IF ( J .GT. NPTL ) GOTO 5					      IF ( J .GT. NPTL ) GOTO 5
      NEWPTL(J)=0						      NEWPTL(J)=0
      IF ( ISTPTL(J) .EQ. 2 ) GOTO 4				      IF ( ISTPTL(J) .EQ. 2 ) GOTO 4
      NEWPTL(J)=I						      NEWPTL(J)=I
      CALL UTREPL(I,J)						      CALL UTREPL(I,J)
      GOTO 3							      GOTO 3

 5    NPTL=I-1							 5    NPTL=I-1
      IF ( NPTL .EQ. 0 ) THEN					      IF ( NPTL .EQ. 0 ) THEN
        NPTL0=0							        NPTL0=0
        GOTO 1000						        GOTO 1000
      ENDIF							      ENDIF

20    N0=NEWPTL(NPTL0)						20    N0=NEWPTL(NPTL0)
      IF ( N0 .GT. 0 ) THEN					      IF ( N0 .GT. 0 ) THEN
        NPTL0=N0						        NPTL0=N0
      ELSE							      ELSE
        NPTL0=NPTL0-1						        NPTL0=NPTL0-1
        IF ( NPTL0 .GT. 0 ) GOTO 20				        IF ( NPTL0 .GT. 0 ) GOTO 20
      ENDIF							      ENDIF

      DO 11 K=1,NPTL						      DO 11 K=1,NPTL
        IO=IORPTL(K)						        IO=IORPTL(K)
        IF ( IO .LE. 0 ) THEN					        IF ( IO .LE. 0 ) THEN
          IORPTL(K)=IO						          IORPTL(K)=IO
        ELSE							        ELSE
          IORPTL(K)=NEWPTL(IO)					          IORPTL(K)=NEWPTL(IO)
        ENDIF							        ENDIF

        JO=JORPTL(K)						        JO=JORPTL(K)
        IF ( JO .LE. 0 ) THEN					        IF ( JO .LE. 0 ) THEN
          JORPTL(K)=JO						          JORPTL(K)=JO
        ELSE							        ELSE
          JORPTL(K)=NEWPTL(JO)					          JORPTL(K)=NEWPTL(JO)
        ENDIF							        ENDIF

        IF1=IFRPTL(1,K)						        IF1=IFRPTL(1,K)
        IF ( IF1 .LE. 0 ) THEN					        IF ( IF1 .LE. 0 ) THEN
          IFRPTL(1,K)=IF1					          IFRPTL(1,K)=IF1
        ELSE							        ELSE
          IFRPTL(1,K)=NEWPTL(IF1)				          IFRPTL(1,K)=NEWPTL(IF1)
        ENDIF							        ENDIF

        IF2=IFRPTL(2,K)						        IF2=IFRPTL(2,K)
        IF ( IF2 .LE. 0 ) THEN					        IF ( IF2 .LE. 0 ) THEN
          IFRPTL(2,K)=IF2					          IFRPTL(2,K)=IF2
        ELSE							        ELSE
          IFRPTL(2,K)=NEWPTL(IF2)				          IFRPTL(2,K)=NEWPTL(IF2)
        ENDIF							        ENDIF
11    CONTINUE							11    CONTINUE

      DO 19 K=1,NPTL						      DO 19 K=1,NPTL
        IF ( IFRPTL(1,K).EQ.0 .AND. IFRPTL(2,K).GT.0 )		        IF ( IFRPTL(1,K).EQ.0 .AND. IFRPTL(2,K).GT.0 )
     *                                         IFRPTL(1,K)=IF	     *                                         IFRPTL(1,K)=IF
        IF ( IFRPTL(1,K).GT.0 .AND. IFRPTL(2,K).EQ.0 )		        IF ( IFRPTL(1,K).GT.0 .AND. IFRPTL(2,K).EQ.0 )
     *                                         IFRPTL(2,K)=IF	     *                                         IFRPTL(2,K)=IF
19    CONTINUE							19    CONTINUE

1000  CONTINUE							1000  CONTINUE

      IF ( ISH .GE. 92 ) THEN					      IF ( ISH .GE. 92 ) THEN
        WRITE(IFCH,*)('-',L=1,68)				        WRITE(IFCH,*)('-',L=1,68)
        WRITE(IFCH,*)'SR UTCLEA. FINAL.'			        WRITE(IFCH,*)'SR UTCLEA. FINAL.'
        WRITE(IFCH,*)('-',L=1,68)				        WRITE(IFCH,*)('-',L=1,68)
        DO 35 N=1,NPTL						        DO 35 N=1,NPTL
          WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),IF	          WRITE(IFCH,116)IORPTL(N),JORPTL(N),N,IFRPTL(1,N),IF
     *     ,IDPTL(N),SQRT(PPTL(1,N)**2+PPTL(2,N)**2),PPTL(3,N	     *     ,IDPTL(N),SQRT(PPTL(1,N)**2+PPTL(2,N)**2),PPTL(3,N
     *     ,ISTPTL(N)						     *     ,ISTPTL(N)
35      CONTINUE						35      CONTINUE
        WRITE(IFCH,*)('-',L=1,79)				        WRITE(IFCH,*)('-',L=1,79)
      ENDIF							      ENDIF

      ISH=ISH0							      ISH=ISH0
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTHIST(X1,X2,Y1,Y2,N,X,Y,LITY,LILO,TEXT1,TEX	      SUBROUTINE UTHIST(X1,X2,Y1,Y2,N,X,Y,LITY,LILO,TEXT1,TEX

C------------------------------------------------------------	C------------------------------------------------------------
C  WRITES ARRAYS X,Y IN HISTO-FORMAT				C  WRITES ARRAYS X,Y IN HISTO-FORMAT
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      REAL      X(N),Y(N)					      REAL      X(N),Y(N)
      CHARACTER LILO*6,LITY*3,TEXT1*50,TEXT2*50,TEXT3*50	      CHARACTER LILO*6,LITY*3,TEXT1*50,TEXT2*50,TEXT3*50
C------------------------------------------------------------	C------------------------------------------------------------
      WRITE(IFCH,100)('-',I=1,69)				      WRITE(IFCH,100)('-',I=1,69)
      WRITE(IFCH,100)('-',I=1,69)				      WRITE(IFCH,100)('-',I=1,69)
100   FORMAT(1X,1H',69A1,1H')					100   FORMAT(1X,1H',69A1,1H')
      WRITE(IFCH,101)X1,X2,0.,Y1,Y2,0.,'_____',0		      WRITE(IFCH,101)X1,X2,0.,Y1,Y2,0.,'_____',0
     *,'___',LITY,'___','_______',LILO,0.,3,N,0.		     *,'___',LITY,'___','_______',LILO,0.,3,N,0.
101   FORMAT(1X,6F8.2,2X,1H',A5,1H',I11				101   FORMAT(1X,6F8.2,2X,1H',A5,1H',I11
     */4X,1H',A3,1H',3X,1H',A3,A3,1H',3X,1H',A7,A6,1H',F8.2,2	     */4X,1H',A3,1H',3X,1H',A3,A3,1H',3X,1H',A7,A6,1H',F8.2,2
      WRITE(IFCH,100)('-',I=1,69)				      WRITE(IFCH,100)('-',I=1,69)
      WRITE(IFCH,102)0.,0.,TEXT1				      WRITE(IFCH,102)0.,0.,TEXT1
      WRITE(IFCH,102)0.,0.,TEXT2				      WRITE(IFCH,102)0.,0.,TEXT2
      WRITE(IFCH,102)0.,0.,TEXT3				      WRITE(IFCH,102)0.,0.,TEXT3
102   FORMAT(4X,F4.2,2X,F4.2,2X,1H',A50,1H')			102   FORMAT(4X,F4.2,2X,F4.2,2X,1H',A50,1H')
      WRITE(IFCH,100)('-',I=1,69)				      WRITE(IFCH,100)('-',I=1,69)
      DO 36 K=1,N						      DO 36 K=1,N
        WRITE(IFCH,103)K,X(K),0.,Y(K),0.,0.			        WRITE(IFCH,103)K,X(K),0.,Y(K),0.,0.
103     FORMAT(4X,I5,2X,5E12.4)					103     FORMAT(4X,I5,2X,5E12.4)
36    CONTINUE							36    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTHSEA						      SUBROUTINE UTHSEA

C------------------------------------------------------------	C------------------------------------------------------------
C  CREATES HISTOGRAM OF SEA STRUCTURE FUNCTION			C  CREATES HISTOGRAM OF SEA STRUCTURE FUNCTION
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSTRU=2049)					      PARAMETER (NSTRU=2049)
      COMMON /STRU/    QSEP(NSTRU),QSET(NSTRU),QVAP(NSTRU)	      COMMON /STRU/    QSEP(NSTRU),QSET(NSTRU),QVAP(NSTRU)
     *                ,QVAT(NSTRU),XCUTAR,XSTRU(NSTRU)		     *                ,QVAT(NSTRU),XCUTAR,XSTRU(NSTRU)
     *                ,IDTG					     *                ,IDTG
      REAL XAR(1000),YAR(1000)					      REAL XAR(1000),YAR(1000)
C------------------------------------------------------------	C------------------------------------------------------------
      DX=1.							      DX=1.
      X1=-1.							      X1=-1.
      DO 3 K=1,2						      DO 3 K=1,2
        DX=DX*0.001						        DX=DX*0.001
        X1=X1-3.						        X1=X1-3.
        DO 2 N=1,1000						        DO 2 N=1,1000
          YAR(N)=0.						          YAR(N)=0.
          XAR(N)=-DX*0.5+N*DX					          XAR(N)=-DX*0.5+N*DX
 2      CONTINUE						 2      CONTINUE
        DO 1 I=1,100000						        DO 1 I=1,100000
          X=UTINVT(NSTRU,XSTRU,QSEP,RANGEN()*QSEP(NSTRU))	          X=UTINVT(NSTRU,XSTRU,QSEP,RANGEN()*QSEP(NSTRU))
          N=1+X/DX						          N=1+X/DX
          IF ( N .LE. 1000 ) YAR(N)=YAR(N)+1.			          IF ( N .LE. 1000 ) YAR(N)=YAR(N)+1.
 1      CONTINUE						 1      CONTINUE
        CALL UTHIST(X1,X1+4,0.,5.,1000,XAR,YAR,'POC','LOGLOG'	        CALL UTHIST(X1,X1+4,0.,5.,1000,XAR,YAR,'POC','LOGLOG'
     *        ,'XAXIS X                         $            	     *        ,'XAXIS X                         $            
     *        ,'YAXIS COUNTS                    $            	     *        ,'YAXIS COUNTS                    $            
     *        ,'TITLE SEA QUARK STRUCTURE FUNCTION           	     *        ,'TITLE SEA QUARK STRUCTURE FUNCTION           
 3    CONTINUE							 3    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTINVT(N,X,Q,YY)					      FUNCTION UTINVT(N,X,Q,YY)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS X WITH Y=Q(X)					C  RETURNS X WITH Y=Q(X)
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CUTINV/  LUTINV					      COMMON /CUTINV/  LUTINV
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      REAL Q(N),X(N)						      REAL Q(N),X(N)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( Q(N) .EQ. 0. ) THEN					      IF ( Q(N) .EQ. 0. ) THEN
        CALL UTSTOP('UTINVT: Q(N)=0. DIMENSIONS TOO BIG      	        CALL UTSTOP('UTINVT: Q(N)=0. DIMENSIONS TOO BIG      
      ENDIF							      ENDIF
      Y = YY							      Y = YY
      IF     ( Y .LT. 0. ) THEN					      IF     ( Y .LT. 0. ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('UTINVT')					          CALL UTMSG('UTINVT')
          WRITE(IFCH,*)'*****  Y=',Y,' < 0'			          WRITE(IFCH,*)'*****  Y=',Y,' < 0'
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        Y=0.							        Y=0.
      ELSEIF ( Y .GT. Q(N) ) THEN				      ELSEIF ( Y .GT. Q(N) ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('UTINVT')					          CALL UTMSG('UTINVT')
          WRITE(IFCH,*)'*****  Y=',Y,' > ',Q(N)			          WRITE(IFCH,*)'*****  Y=',Y,' > ',Q(N)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        Y=Q(N)							        Y=Q(N)
      ENDIF							      ENDIF
      LU=1							      LU=1
      LO=N							      LO=N
 1    LZ=(LO+LU)/2						 1    LZ=(LO+LU)/2
      IF     ( Q(LU).LE.Y .AND. Y.LE.Q(LZ) ) THEN		      IF     ( Q(LU).LE.Y .AND. Y.LE.Q(LZ) ) THEN
        LO=LZ							        LO=LZ
      ELSEIF ( Q(LZ).LT.Y .AND. Y.LE.Q(LO) ) THEN		      ELSEIF ( Q(LZ).LT.Y .AND. Y.LE.Q(LO) ) THEN
        LU=LZ							        LU=LZ
      ELSE							      ELSE
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'Q(1),Y,Q(N):',Q(1),Y,Q(N)			        WRITE(IFCH,*)'Q(1),Y,Q(N):',Q(1),Y,Q(N)
        WRITE(IFCH,*)'LU,LZ,LO:',LU,LZ,LO			        WRITE(IFCH,*)'LU,LZ,LO:',LU,LZ,LO
        WRITE(IFCH,*)'Q(LU),Q(LZ),Q(LO):',Q(LU),Q(LZ),Q(LO)	        WRITE(IFCH,*)'Q(LU),Q(LZ),Q(LO):',Q(LU),Q(LZ),Q(LO)
        CALL UTSTOP('UTINVT: NO INTERVAL FOUND               	        CALL UTSTOP('UTINVT: NO INTERVAL FOUND               
      ENDIF							      ENDIF
      IF ( LO-LU .GE. 2 ) GOTO 1				      IF ( LO-LU .GE. 2 ) GOTO 1
      IF ( LO .LE. LU ) THEN					      IF ( LO .LE. LU ) THEN
        CALL UTSTOP('UTINVT: LO.LE.LU                        	        CALL UTSTOP('UTINVT: LO.LE.LU                        
      ENDIF							      ENDIF
      UTINVT=X(LU)+(Y-Q(LU))*(X(LO)-X(LU))/(Q(LO)-Q(LU))	      UTINVT=X(LU)+(Y-Q(LU))*(X(LO)-X(LU))/(Q(LO)-Q(LU))
      LUTINV=LU							      LUTINV=LU
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTKSIX(SIX,KMAX)				      SUBROUTINE UTKSIX(SIX,KMAX)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS KMAX FOR SIX						C  RETURNS KMAX FOR SIX
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      REAL SIX(NSI,NSIX)					      REAL SIX(NSI,NSIX)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 10 K=0,NSIX-1						      DO 10 K=0,NSIX-1
        KMAX=K							        KMAX=K
        SIXSQR=0.						        SIXSQR=0.
        DO 20 I=1,NSI						        DO 20 I=1,NSI
          SIXSQR=SIXSQR+SIX(I,K+1)**2				          SIXSQR=SIXSQR+SIX(I,K+1)**2
20      CONTINUE						20      CONTINUE
        IF ( SIXSQR .LE. 1.E-5 ) RETURN				        IF ( SIXSQR .LE. 1.E-5 ) RETURN
10    CONTINUE							10    CONTINUE
      CALL UTSTOP('UTKSIX: DIMENSION NSIX TOO SMALL        ')	      CALL UTSTOP('UTKSIX: DIMENSION NSIX TOO SMALL        ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTKSTR(STR,KMAX)				      SUBROUTINE UTKSTR(STR,KMAX)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS KMAX FOR STR						C  RETURNS KMAX FOR STR
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      REAL STR(NSI,NSIX+1)					      REAL STR(NSI,NSIX+1)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 10 K=0,NSIX						      DO 10 K=0,NSIX
        KMAX=K							        KMAX=K
        STRSQR=0.						        STRSQR=0.
        DO 20 I=1,NSI						        DO 20 I=1,NSI
          STRSQR=STRSQR+STR(I,K+1)**2				          STRSQR=STRSQR+STR(I,K+1)**2
20      CONTINUE						20      CONTINUE
        IF ( STRSQR .LE. 1.E-5 ) RETURN				        IF ( STRSQR .LE. 1.E-5 ) RETURN
10    CONTINUE							10    CONTINUE
      CALL UTSTOP('UTKSTR: DIMENSION NSIX TOO SMALL        ')	      CALL UTSTOP('UTKSTR: DIMENSION NSIX TOO SMALL        ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTLOBO(ISIG,P1,P2,P3,P4,P5,X1,X2,X3,X4)	      SUBROUTINE UTLOBO(ISIG,P1,P2,P3,P4,P5,X1,X2,X3,X4)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS A LORENTZ BOOST					C  PERFORMS A LORENTZ BOOST
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      REAL BETA(4),Z(4)						      REAL BETA(4),Z(4)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( P5 .LE. 0. ) THEN					      IF ( P5 .LE. 0. ) THEN
        CALL UTMSG('UTLOBO')					        CALL UTMSG('UTLOBO')
        WRITE(IFCH,*)'*****  MASS <= 0.'			        WRITE(IFCH,*)'*****  MASS <= 0.'
        WRITE(IFCH,*)'P(5): ',P1,P2,P3,P4,P5			        WRITE(IFCH,*)'P(5): ',P1,P2,P3,P4,P5
        CALL UTMSGF						        CALL UTMSGF
        CALL UTSTOP('UTLOBO: MASS <= 0.                      	        CALL UTSTOP('UTLOBO: MASS <= 0.                      
      ENDIF							      ENDIF
      Z(1)=X1							      Z(1)=X1
      Z(2)=X2							      Z(2)=X2
      Z(3)=X3							      Z(3)=X3
      Z(4)=X4							      Z(4)=X4
      BETA(1)=-P1/P5						      BETA(1)=-P1/P5
      BETA(2)=-P2/P5						      BETA(2)=-P2/P5
      BETA(3)=-P3/P5						      BETA(3)=-P3/P5
      BETA(4)= P4/P5						      BETA(4)= P4/P5
      BP=ISIG*(Z(1)*BETA(1)+Z(2)*BETA(2)+Z(3)*BETA(3))		      BP=ISIG*(Z(1)*BETA(1)+Z(2)*BETA(2)+Z(3)*BETA(3))
      AUXIL= ISIG*Z(4)+ISIG*BP/(BETA(4)+1.)			      AUXIL= ISIG*Z(4)+ISIG*BP/(BETA(4)+1.)
      Z(1)=Z(1)+BETA(1)*AUXIL					      Z(1)=Z(1)+BETA(1)*AUXIL
      Z(2)=Z(2)+BETA(2)*AUXIL					      Z(2)=Z(2)+BETA(2)*AUXIL
      Z(3)=Z(3)+BETA(3)*AUXIL					      Z(3)=Z(3)+BETA(3)*AUXIL
      Z(4)=BETA(4)*Z(4)+BP					      Z(4)=BETA(4)*Z(4)+BP
      X1=Z(1)							      X1=Z(1)
      X2=Z(2)							      X2=Z(2)
      X3=Z(3)							      X3=Z(3)
      X4=Z(4)							      X4=Z(4)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTLOB2(ISIG,P1,P2,P3,P4,P5,X1,X2,X3,X4)	      SUBROUTINE UTLOB2(ISIG,P1,P2,P3,P4,P5,X1,X2,X3,X4)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS A LORENTZ BOOST, DOUBLE PREC.			C  PERFORMS A LORENTZ BOOST, DOUBLE PREC.
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION BETA(4),BP,DAUXIL,PP,P1,P2,P3,P4,P5,P5	      DOUBLE PRECISION BETA(4),BP,DAUXIL,PP,P1,P2,P3,P4,P5,P5
     *                ,XX0,X1,X10,X2,X20,X3,X30,X4,X4X,X40,Z(	     *                ,XX0,X1,X10,X2,X20,X3,X30,X4,X4X,X40,Z(
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4)	          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4)
     *                  ,SNGL(X4**2-X3**2-X2**2-X1**2)		     *                  ,SNGL(X4**2-X3**2-X2**2-X1**2)
101       FORMAT(' UTLOB2:',F9.5,4F13.5)			101       FORMAT(' UTLOB2:',F9.5,4F13.5)
        ENDIF							        ENDIF
        PP=P4**2-P3**2-P2**2-P1**2				        PP=P4**2-P3**2-P2**2-P1**2
        IF ( ABS(PP-P5**2) .GT. 1.D-3*P4**2   .AND.		        IF ( ABS(PP-P5**2) .GT. 1.D-3*P4**2   .AND.
     *       ABS(PP-P5**2) .GT. 1.D-3        ) THEN		     *       ABS(PP-P5**2) .GT. 1.D-3        ) THEN
          CALL UTMSG('UTLOB2')					          CALL UTMSG('UTLOB2')
          WRITE(IFCH,*)'*****  P**2 .NE. P5**2'			          WRITE(IFCH,*)'*****  P**2 .NE. P5**2'
          WRITE(IFCH,*)'P**2,P5**2: ',PP,P5**2			          WRITE(IFCH,*)'P**2,P5**2: ',PP,P5**2
          WRITE(IFCH,*)'P: ',P1,P2,P3,P4,P5			          WRITE(IFCH,*)'P: ',P1,P2,P3,P4,P5
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        X10=X1							        X10=X1
        X20=X2							        X20=X2
        X30=X3							        X30=X3
        X40=X4							        X40=X4
      ENDIF							      ENDIF
      XX0=X4**2-X3**2-X2**2-X1**2				      XX0=X4**2-X3**2-X2**2-X1**2
      IF ( P5 .LE. 0.D0 ) THEN					      IF ( P5 .LE. 0.D0 ) THEN
        CALL UTMSG('UTLOB2')					        CALL UTMSG('UTLOB2')
        WRITE(IFCH,*)'*****  P5 NEGATIVE.'			        WRITE(IFCH,*)'*****  P5 NEGATIVE.'
        WRITE(IFCH,*)'P(5): ',P1,P2,P3,P4,P5			        WRITE(IFCH,*)'P(5): ',P1,P2,P3,P4,P5
        CALL UTMSGF						        CALL UTMSGF
        CALL UTSTOP('UTLOB2: P5 NEGATIVE.                    	        CALL UTSTOP('UTLOB2: P5 NEGATIVE.                    
      ENDIF							      ENDIF
      Z(1)=X1							      Z(1)=X1
      Z(2)=X2							      Z(2)=X2
      Z(3)=X3							      Z(3)=X3
      Z(4)=X4							      Z(4)=X4
      P5I=1.D0/P5						      P5I=1.D0/P5
      BETA(4)= P5I*P4						      BETA(4)= P5I*P4
      BETA(1)=-P5I*P1						      BETA(1)=-P5I*P1
      BETA(2)=-P5I*P2						      BETA(2)=-P5I*P2
      BETA(3)=-P5I*P3						      BETA(3)=-P5I*P3
      BP=ISIG*( BETA(1)*Z(1)+BETA(2)*Z(2)+BETA(3)*Z(3) )	      BP=ISIG*( BETA(1)*Z(1)+BETA(2)*Z(2)+BETA(3)*Z(3) )
      DAUXIL = ISIG*( Z(4) + BP/(BETA(4)+1.D0) )		      DAUXIL = ISIG*( Z(4) + BP/(BETA(4)+1.D0) )
      Z(1)=Z(1)+BETA(1)*DAUXIL					      Z(1)=Z(1)+BETA(1)*DAUXIL
      Z(2)=Z(2)+BETA(2)*DAUXIL					      Z(2)=Z(2)+BETA(2)*DAUXIL
      Z(3)=Z(3)+BETA(3)*DAUXIL					      Z(3)=Z(3)+BETA(3)*DAUXIL
      Z(4)=BETA(4)*Z(4)+BP					      Z(4)=BETA(4)*Z(4)+BP
      X1=Z(1)							      X1=Z(1)
      X2=Z(2)							      X2=Z(2)
      X3=Z(3)							      X3=Z(3)
      X4=Z(4)							      X4=Z(4)
      IF ( ISH .GE. 93 )					      IF ( ISH .GE. 93 )
     *        WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(	     *        WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(
     *                      ,SNGL(X4**2-X3**2-X2**2-X1**2)	     *                      ,SNGL(X4**2-X3**2-X2**2-X1**2)
      X4X=X4							      X4X=X4
      X4=SQRT(XX0+X1**2+X2**2+X3**2)				      X4=SQRT(XX0+X1**2+X2**2+X3**2)
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( ISH .GE. 93 ) THEN					        IF ( ISH .GE. 93 ) THEN
          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4)	          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4)
     *                ,SNGL(X4**2-X3**2-X2**2-X1**2)		     *                ,SNGL(X4**2-X3**2-X2**2-X1**2)
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
        ENDIF							        ENDIF
        IF ( ABS(X4-X4X) .GT. 1.D-2*ABS(X4)    .AND.		        IF ( ABS(X4-X4X) .GT. 1.D-2*ABS(X4)    .AND.
     *       ABS(X4-X4X) .GT. 1.D-2        )   THEN		     *       ABS(X4-X4X) .GT. 1.D-2        )   THEN
          CALL UTMSG('UTLOB2')					          CALL UTMSG('UTLOB2')
          WRITE(IFCH,*)'*****  X**2_INI .NE. X**2_FIN.'		          WRITE(IFCH,*)'*****  X**2_INI .NE. X**2_FIN.'
          WRITE(IFCH,*)'X1 X2 X3 X4 X**2 (INITIAL/FINAL/CORRE	          WRITE(IFCH,*)'X1 X2 X3 X4 X**2 (INITIAL/FINAL/CORRE
          WRITE(IFCH,101)SNGL(X10),SNGL(X20),SNGL(X30),SNGL(X	          WRITE(IFCH,101)SNGL(X10),SNGL(X20),SNGL(X30),SNGL(X
     *                  ,SNGL(X40**2-X30**2-X20**2-X10**2)	     *                  ,SNGL(X40**2-X30**2-X20**2-X10**2)
          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4X)	          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4X)
     *                  ,SNGL(X4X**2-X3**2-X2**2-X1**2)		     *                  ,SNGL(X4X**2-X3**2-X2**2-X1**2)
          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4)	          WRITE(IFCH,101)SNGL(X1),SNGL(X2),SNGL(X3),SNGL(X4)
     *                  ,SNGL(X4**2-X3**2-X2**2-X1**2)		     *                  ,SNGL(X4**2-X3**2-X2**2-X1**2)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTLOC(AR,N,A,L)				      SUBROUTINE UTLOC(AR,N,A,L)

C------------------------------------------------------------	C------------------------------------------------------------
      REAL AR(N)						      REAL AR(N)
C------------------------------------------------------------	C------------------------------------------------------------
      DO 1 I=1,N						      DO 1 I=1,N
        IF ( A .LT. AR(I) ) THEN				        IF ( A .LT. AR(I) ) THEN
          L=I-1							          L=I-1
          RETURN						          RETURN
        ENDIF							        ENDIF
 1    CONTINUE							 1    CONTINUE
      L=N							      L=N
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTLOW(CONE)					      SUBROUTINE UTLOW(CONE)

C------------------------------------------------------------	C------------------------------------------------------------
C  CONVERTS LOWER CASE CHARACTERS TO UPPER CASE CHARACTERS	C  CONVERTS LOWER CASE CHARACTERS TO UPPER CASE CHARACTERS
C------------------------------------------------------------	C------------------------------------------------------------
      CHARACTER*1 CONE						      CHARACTER*1 CONE
C------------------------------------------------------------	C------------------------------------------------------------
      IF     ( CONE .EQ. 'a' ) THEN				      IF     ( CONE .EQ. 'a' ) THEN
        CONE='A'						        CONE='A'
      ELSEIF ( CONE .EQ. 'b' ) THEN				      ELSEIF ( CONE .EQ. 'b' ) THEN
        CONE='B'						        CONE='B'
      ELSEIF ( CONE .EQ. 'c' ) THEN				      ELSEIF ( CONE .EQ. 'c' ) THEN
        CONE='C'						        CONE='C'
      ELSEIF ( CONE .EQ. 'd' ) THEN				      ELSEIF ( CONE .EQ. 'd' ) THEN
        CONE='D'						        CONE='D'
      ELSEIF ( CONE .EQ. 'e' ) THEN				      ELSEIF ( CONE .EQ. 'e' ) THEN
        CONE='E'						        CONE='E'
      ELSEIF ( CONE .EQ. 'f' ) THEN				      ELSEIF ( CONE .EQ. 'f' ) THEN
        CONE='F'						        CONE='F'
      ELSEIF ( CONE .EQ. 'g' ) THEN				      ELSEIF ( CONE .EQ. 'g' ) THEN
        CONE='G'						        CONE='G'
      ELSEIF ( CONE .EQ. 'h' ) THEN				      ELSEIF ( CONE .EQ. 'h' ) THEN
        CONE='H'						        CONE='H'
      ELSEIF ( CONE .EQ. 'i' ) THEN				      ELSEIF ( CONE .EQ. 'i' ) THEN
        CONE='I'						        CONE='I'
      ELSEIF ( CONE .EQ. 'j' ) THEN				      ELSEIF ( CONE .EQ. 'j' ) THEN
        CONE='J'						        CONE='J'
      ELSEIF ( CONE .EQ. 'k' ) THEN				      ELSEIF ( CONE .EQ. 'k' ) THEN
        CONE='K'						        CONE='K'
      ELSEIF ( CONE .EQ. 'l' ) THEN				      ELSEIF ( CONE .EQ. 'l' ) THEN
        CONE='L'						        CONE='L'
      ELSEIF ( CONE .EQ. 'm' ) THEN				      ELSEIF ( CONE .EQ. 'm' ) THEN
        CONE='M'						        CONE='M'
      ELSEIF ( CONE .EQ. 'n' ) THEN				      ELSEIF ( CONE .EQ. 'n' ) THEN
        CONE='N'						        CONE='N'
      ELSEIF ( CONE .EQ. 'o' ) THEN				      ELSEIF ( CONE .EQ. 'o' ) THEN
        CONE='O'						        CONE='O'
      ELSEIF ( CONE .EQ. 'p' ) THEN				      ELSEIF ( CONE .EQ. 'p' ) THEN
        CONE='P'						        CONE='P'
      ELSEIF ( CONE .EQ. 'q' ) THEN				      ELSEIF ( CONE .EQ. 'q' ) THEN
        CONE='Q'						        CONE='Q'
      ELSEIF ( CONE .EQ. 'r' ) THEN				      ELSEIF ( CONE .EQ. 'r' ) THEN
        CONE='R'						        CONE='R'
      ELSEIF ( CONE .EQ. 's' ) THEN				      ELSEIF ( CONE .EQ. 's' ) THEN
        CONE='S'						        CONE='S'
      ELSEIF ( CONE .EQ. 't' ) THEN				      ELSEIF ( CONE .EQ. 't' ) THEN
        CONE='T'						        CONE='T'
      ELSEIF ( CONE .EQ. 'u' ) THEN				      ELSEIF ( CONE .EQ. 'u' ) THEN
        CONE='U'						        CONE='U'
      ELSEIF ( CONE .EQ. 'v' ) THEN				      ELSEIF ( CONE .EQ. 'v' ) THEN
        CONE='V'						        CONE='V'
      ELSEIF ( CONE .EQ. 'w' ) THEN				      ELSEIF ( CONE .EQ. 'w' ) THEN
        CONE='W'						        CONE='W'
      ELSEIF ( CONE .EQ. 'x' ) THEN				      ELSEIF ( CONE .EQ. 'x' ) THEN
        CONE='X'						        CONE='X'
      ELSEIF ( CONE .EQ. 'y' ) THEN				      ELSEIF ( CONE .EQ. 'y' ) THEN
        CONE='Y'						        CONE='Y'
      ELSEIF ( CONE .EQ. 'z' ) THEN				      ELSEIF ( CONE .EQ. 'z' ) THEN
        CONE='Z'						        CONE='Z'
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTLOW6(CSIX)					      SUBROUTINE UTLOW6(CSIX)

C------------------------------------------------------------	C------------------------------------------------------------
      CHARACTER CSIX*6						      CHARACTER CSIX*6
C------------------------------------------------------------	C------------------------------------------------------------
      DO 1 I=1,6						      DO 1 I=1,6
        CALL UTLOW(CSIX(I:I))					        CALL UTLOW(CSIX(I:I))
 1    CONTINUE							 1    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTMSG(TXT)					      SUBROUTINE UTMSG(TXT)

C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      DOUBLE PRECISION SEEDC,SEEDI				      DOUBLE PRECISION SEEDC,SEEDI
      COMMON /CSEED/   SEEDC,SEEDI				      COMMON /CSEED/   SEEDC,SEEDI
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      CHARACTER*6      TXT					      CHARACTER*6      TXT
C------------------------------------------------------------	C------------------------------------------------------------
      IMSG=IMSG+1						      IMSG=IMSG+1
      IF ( ISH.NE.90 .OR. ISHSUB.NE.0 ) WRITE(IFCH,*)' '	      IF ( ISH.NE.90 .OR. ISHSUB.NE.0 ) WRITE(IFCH,*)' '
      WRITE(IFCH,*)('-',J=1,77)					      WRITE(IFCH,*)('-',J=1,77)
      WRITE(IFCH,100)TXT,NREVT+1,IPAGE,SEEDC			      WRITE(IFCH,100)TXT,NREVT+1,IPAGE,SEEDC
100   FORMAT(1X,'***** MSG FROM ',A6,'.   EPS:',I7,I5,2X,D23.	100   FORMAT(1X,'***** MSG FROM ',A6,'.   EPS:',I7,I5,2X,D23.
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTMSGF						      SUBROUTINE UTMSGF

C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( ISH.EQ.90 .AND. ISHSUB.EQ.0 ) RETURN			      IF ( ISH.EQ.90 .AND. ISHSUB.EQ.0 ) RETURN
      WRITE(IFCH,*)('-',J=1,77)					      WRITE(IFCH,*)('-',J=1,77)
      WRITE(IFCH,*)' '						      WRITE(IFCH,*)' '
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTOVEL						      SUBROUTINE UTOVEL

C------------------------------------------------------------	C------------------------------------------------------------
C  FILLS ARRAY OVEL(1+I,1+J) CONTAINING THE LOGARITHM (LN) OF	C  FILLS ARRAY OVEL(1+I,1+J) CONTAINING THE LOGARITHM (LN) OF
C    I_OVER_J:							C    I_OVER_J:
C  OVEL(1+I,1+J)=LOG(I!/J!/(J-I)!)      I>=0 J>=0		C  OVEL(1+I,1+J)=LOG(I!/J!/(J-I)!)      I>=0 J>=0
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (IOVMAX=100)					      PARAMETER (IOVMAX=100)
      PARAMETER (JOVMAX=100)					      PARAMETER (JOVMAX=100)
      COMMON /COVEL/   OVEL(1+IOVMAX,1+JOVMAX)			      COMMON /COVEL/   OVEL(1+IOVMAX,1+JOVMAX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      DO 1 I=0,IOVMAX						      DO 1 I=0,IOVMAX
        OVEL(1+I,1)=0.						        OVEL(1+I,1)=0.
        OVEL(1+I,1+I)=0.					        OVEL(1+I,1+I)=0.
 1    CONTINUE							 1    CONTINUE
      DO 2 J=1,JOVMAX-1						      DO 2 J=1,JOVMAX-1
        DO 3 I=J+1,IOVMAX					        DO 3 I=J+1,IOVMAX
          OVEL(1+I,1+J)=OVEL(1+I,J)+LOG((I-J+1.)/J)		          OVEL(1+I,1+J)=OVEL(1+I,J)+LOG((I-J+1.)/J)
 3      CONTINUE						 3      CONTINUE
 2    CONTINUE							 2    CONTINUE

      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        DO 5 J=1,49						        DO 5 J=1,49
          DO 5 I=J+1,50						          DO 5 I=J+1,50
            RELERR=ABS((EXP(OVEL(1+I,1+J))			            RELERR=ABS((EXP(OVEL(1+I,1+J))
     *           -EXP(OVEL(I,J))-EXP(OVEL(I,1+J)))/EXP(OVEL(1	     *           -EXP(OVEL(I,J))-EXP(OVEL(I,1+J)))/EXP(OVEL(1
            IF ( RELERR .GT. 1.E-4 ) THEN			            IF ( RELERR .GT. 1.E-4 ) THEN
              CALL UTMSG('UTOVEL')				              CALL UTMSG('UTOVEL')
              WRITE(IFCH,*)'*****  OVEL(,) VIOLATES RECURRENC	              WRITE(IFCH,*)'*****  OVEL(,) VIOLATES RECURRENC
              WRITE(IFCH,*)EXP(OVEL(1+I,1+J))			              WRITE(IFCH,*)EXP(OVEL(1+I,1+J))
     *                    ,EXP(OVEL(I,J))+EXP(OVEL(I,1+J))	     *                    ,EXP(OVEL(I,J))+EXP(OVEL(I,1+J))
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
 5      CONTINUE						 5      CONTINUE

        IF ( ISH .GE. 95 ) THEN					        IF ( ISH .GE. 95 ) THEN
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'   EXP( OVEL(1+I,1+J) )'		          WRITE(IFCH,*)'   EXP( OVEL(1+I,1+J) )'
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          DO 6 I=0,15						          DO 6 I=0,15
            WRITE(IFCH,*)(EXP( OVEL(1+I,1+J) ),J=0,MIN(4,I))	            WRITE(IFCH,*)(EXP( OVEL(1+I,1+J) ),J=0,MIN(4,I))
 6        CONTINUE						 6        CONTINUE
        ENDIF							        ENDIF
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTPAGE						      SUBROUTINE UTPAGE

C------------------------------------------------------------	C------------------------------------------------------------
C  INCREASES IPAGE BY 1, CHANGES ISH				C  INCREASES IPAGE BY 1, CHANGES ISH
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CISHI/   ISHI					      COMMON /CISHI/   ISHI
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
C------------------------------------------------------------	C------------------------------------------------------------
      IPAGE=IPAGE+1						      IPAGE=IPAGE+1
      IF ( IPAGI .LE. 0 ) RETURN				      IF ( IPAGI .LE. 0 ) RETURN
      IF ( IPAGE .EQ. 1 ) ISHI=ISH				      IF ( IPAGE .EQ. 1 ) ISHI=ISH
      ISH=0							      ISH=0
      IF ( IPAGE.GE.IPAGI/10000.AND.IPAGE.LE.MOD(IPAGI,10000)	      IF ( IPAGE.GE.IPAGI/10000.AND.IPAGE.LE.MOD(IPAGI,10000)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTPART						      SUBROUTINE UTPART

C------------------------------------------------------------	C------------------------------------------------------------
C  FILLS ARRAY PARTX(K,N) CONTAINING THE NUMBER			C  FILLS ARRAY PARTX(K,N) CONTAINING THE NUMBER
C    OF PARTITIONS OF N INTO AT MOST K INTEGERS (K>=1 N>=1)  	C    OF PARTITIONS OF N INTO AT MOST K INTEGERS (K>=1 N>=1)  
C  FILLS ARRAY PART(K,N) CONTAINING  THE NUMBER			C  FILLS ARRAY PART(K,N) CONTAINING  THE NUMBER
C    OF PARTITIONS OF N INTO K INTEGERS (K>=1 N>=1)  .		C    OF PARTITIONS OF N INTO K INTEGERS (K>=1 N>=1)  .
C  FILLS ARRAY IPART(N,J) CONTAINING THE PARTITIONS OF N.	C  FILLS ARRAY IPART(N,J) CONTAINING THE PARTITIONS OF N.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NQUAX=12)					      PARAMETER (NQUAX=12)
      PARAMETER (JPAMAX=NQUAX*NQUAX*NQUAX)			      PARAMETER (JPAMAX=NQUAX*NQUAX*NQUAX)
      PARAMETER (KPAMAX=NQUAX)					      PARAMETER (KPAMAX=NQUAX)
      COMMON /CPART/   PART(KPAMAX,NQUAX)			      COMMON /CPART/   PART(KPAMAX,NQUAX)
      COMMON /CPARTA/  PARTA(NQUAX),IPART(NQUAX,JPAMAX)		      COMMON /CPARTA/  PARTA(NQUAX),IPART(NQUAX,JPAMAX)
      COMMON /CPARTX/  PARTX(KPAMAX,NQUAX)			      COMMON /CPARTX/  PARTX(KPAMAX,NQUAX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      INTEGER ISWAP(JPAMAX)					      INTEGER ISWAP(JPAMAX)
C------------------------------------------------------------	C------------------------------------------------------------
      WRITE(IFMT,*)'EXECUTE SR UTPART ...'			      WRITE(IFMT,*)'EXECUTE SR UTPART ...'
      DO 10 N=1,NQUAX						      DO 10 N=1,NQUAX
        PARTX(1,N)=1.						        PARTX(1,N)=1.
        PART(1,N)=1.						        PART(1,N)=1.
        DO 10 J=1,JPAMAX					        DO 10 J=1,JPAMAX
          IPART(N,J)=0						          IPART(N,J)=0
10    CONTINUE							10    CONTINUE

      DO 1 K=2,KPAMAX						      DO 1 K=2,KPAMAX
        DO 2 N=1,NQUAX						        DO 2 N=1,NQUAX
          U=0.							          U=0.
          DO 3 I=0,N/K						          DO 3 I=0,N/K
            IF ( N-I*K .EQ. 0 ) THEN				            IF ( N-I*K .EQ. 0 ) THEN
              U=U+1.						              U=U+1.
            ELSE						            ELSE
              U=U+PARTX(K-1,N-I*K)				              U=U+PARTX(K-1,N-I*K)
            ENDIF						            ENDIF
 3        CONTINUE						 3        CONTINUE
          PARTX(K,N)=U						          PARTX(K,N)=U
 2      CONTINUE						 2      CONTINUE
 1    CONTINUE							 1    CONTINUE
      DO 7 N=1,NQUAX						      DO 7 N=1,NQUAX
        PARTA(N)=PART(1,N)					        PARTA(N)=PART(1,N)
        DO 7 K=2,KPAMAX						        DO 7 K=2,KPAMAX
          PART(K,N)=PARTX(K,N)-PARTX(K-1,N)			          PART(K,N)=PARTX(K,N)-PARTX(K-1,N)
          PARTA(N)=PARTA(N)+PART(K,N)				          PARTA(N)=PARTA(N)+PART(K,N)
 7    CONTINUE							 7    CONTINUE

      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
121     FORMAT(1X,79A1)						121     FORMAT(1X,79A1)
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   PARTITIONS OF N INTO AT MOST K INTEG	        WRITE(IFCH,*)'   PARTITIONS OF N INTO AT MOST K INTEG
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,101)((K),K=1,10),KPAMAX			        WRITE(IFCH,101)((K),K=1,10),KPAMAX
101     FORMAT(9X,'K =',10I5,3X,I5)				101     FORMAT(9X,'K =',10I5,3X,I5)
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        DO 8 N=1,NQUAX						        DO 8 N=1,NQUAX
          WRITE(IFCH,100)N,(NINT(PARTX(K,N)),K=1,10),NINT(PAR	          WRITE(IFCH,100)N,(NINT(PARTX(K,N)),K=1,10),NINT(PAR
100       FORMAT(3X,'N = ',I2,3X,10I5,3X,I5)			100       FORMAT(3X,'N = ',I2,3X,10I5,3X,I5)
 8      CONTINUE						 8      CONTINUE
      ENDIF							      ENDIF

C  N=1								C  N=1
C  ---								C  ---
      IPART(1,1)=-1						      IPART(1,1)=-1
      IPART(1,2)=-1						      IPART(1,2)=-1
      IPART(1,3)=1						      IPART(1,3)=1

C  N>1								C  N>1
C  ---								C  ---
      DO 11 N=2,NQUAX						      DO 11 N=2,NQUAX
        WRITE(IFMT,*)'SR UTPART: N=',N				        WRITE(IFMT,*)'SR UTPART: N=',N
        IF ( ISH .GE. 95 ) THEN					        IF ( ISH .GE. 95 ) THEN
          WRITE(IFCH,*)' '					          WRITE(IFCH,*)' '
          WRITE(IFCH,*)'N=',N					          WRITE(IFCH,*)'N=',N
        ENDIF							        ENDIF
        IPART(N,1)=-1						        IPART(N,1)=-1
        IPART(N,2)=-1						        IPART(N,2)=-1
        IPART(N,3)=N						        IPART(N,3)=N
        II=3							        II=3

C  N=N1+N2, MULTIPLY PARTITIONS OF N1 AND N2			C  N=N1+N2, MULTIPLY PARTITIONS OF N1 AND N2
C  -----------------------------------------			C  -----------------------------------------
        DO 12 N1=1,N/2						        DO 12 N1=1,N/2
          N2=N-N1						          N2=N-N1
          IF ( ISH .GE. 95 ) THEN				          IF ( ISH .GE. 95 ) THEN
            WRITE(IFCH,*)' '					            WRITE(IFCH,*)' '
            WRITE(IFCH,*)'N1,N2=',N1,N2				            WRITE(IFCH,*)'N1,N2=',N1,N2
          ENDIF							          ENDIF
          K1MAX=-IPART(N1,1)					          K1MAX=-IPART(N1,1)
          K2MAX=-IPART(N2,1)					          K2MAX=-IPART(N2,1)
          IF ( K1MAX .LT. 0  .OR.  K2MAX .LT. 0 ) THEN		          IF ( K1MAX .LT. 0  .OR.  K2MAX .LT. 0 ) THEN
            CALL UTSTOP('UTPART: KIMAX NEGATIVE              	            CALL UTSTOP('UTPART: KIMAX NEGATIVE              
          ENDIF							          ENDIF
          J1=2							          J1=2
          DO 13 K1=1,K1MAX					          DO 13 K1=1,K1MAX
            L1=-IPART(N1,J1)					            L1=-IPART(N1,J1)
            IF ( L1 .LT. 0 ) THEN				            IF ( L1 .LT. 0 ) THEN
              CALL UTSTOP('UTPART: L1 NEGATIVE (1)           	              CALL UTSTOP('UTPART: L1 NEGATIVE (1)           
            ENDIF						            ENDIF
            J2=2						            J2=2
            DO 15 K2=1,K2MAX					            DO 15 K2=1,K2MAX
              L2=-IPART(N2,J2)					              L2=-IPART(N2,J2)
              IF ( L2 .LT. 0 ) THEN				              IF ( L2 .LT. 0 ) THEN
                CALL UTSTOP('UTPART: L2 NEGATIVE (1)         	                CALL UTSTOP('UTPART: L2 NEGATIVE (1)         
              ENDIF						              ENDIF

              IPART(N,1)=IPART(N,1)-1				              IPART(N,1)=IPART(N,1)-1
              II=II+1						              II=II+1
              IF ( II .GT. JPAMAX ) GOTO 1000			              IF ( II .GT. JPAMAX ) GOTO 1000
              IPART(N,II)=-L1-L2				              IPART(N,II)=-L1-L2
              II0=II+1						              II0=II+1
              DO 17 I1=1,L1					              DO 17 I1=1,L1
                II=II+1						                II=II+1
                IF ( II .GT. JPAMAX ) GOTO 1000			                IF ( II .GT. JPAMAX ) GOTO 1000
                IPART(N,II)=IPART(N1,J1+I1)			                IPART(N,II)=IPART(N1,J1+I1)
17            CONTINUE						17            CONTINUE
              DO 18 I2=1,L2					              DO 18 I2=1,L2
                II=II+1						                II=II+1
                IF ( II .GT. JPAMAX ) GOTO 1000			                IF ( II .GT. JPAMAX ) GOTO 1000
                IPART(N,II)=IPART(N2,J2+I2)			                IPART(N,II)=IPART(N2,J2+I2)
18            CONTINUE						18            CONTINUE

              IF ( ISH .GE. 95 ) THEN				              IF ( ISH .GE. 95 ) THEN
                WRITE(IFCH,*)' '				                WRITE(IFCH,*)' '
                WRITE(IFCH,*)'K1,K2=',K1,K2			                WRITE(IFCH,*)'K1,K2=',K1,K2
                WRITE(IFCH,103)N,-IPART(N,1),NINT(PARTA(N))	                WRITE(IFCH,103)N,-IPART(N,1),NINT(PARTA(N))
103             FORMAT(/3X,'N = ',I2,'   P(N) = ',I4		103             FORMAT(/3X,'N = ',I2,'   P(N) = ',I4
     *                                    ,'   P0(N) = ',I4/)	     *                                    ,'   P0(N) = ',I4/)
                JY=2						                JY=2
                DO 29 KY=1,-IPART(N,1)				                DO 29 KY=1,-IPART(N,1)
                  LY=-IPART(N,JY)				                  LY=-IPART(N,JY)
                  WRITE(IFCH,102)KY,LY,(IPART(N,I)		                  WRITE(IFCH,102)KY,LY,(IPART(N,I)
     *                                        ,I=JY+1,JY+MIN(	     *                                        ,I=JY+1,JY+MIN(
102               FORMAT(3X,I2,3X,I2,3X,20I3)			102               FORMAT(3X,I2,3X,I2,3X,20I3)
                  JY=JY+LY+1					                  JY=JY+LY+1
29              CONTINUE					29              CONTINUE
              ENDIF						              ENDIF

              IPRI=0						              IPRI=0
              DO 19 I=II0,II-1					              DO 19 I=II0,II-1
                DO 19 J=I+1,II					                DO 19 J=I+1,II
                  IF ( IPART(N,I) .LT. IPART(N,J) ) THEN	                  IF ( IPART(N,I) .LT. IPART(N,J) ) THEN
                    IPRI=1					                    IPRI=1
                    ISTI=IPART(N,I)				                    ISTI=IPART(N,I)
                    IPART(N,I)=IPART(N,J)			                    IPART(N,I)=IPART(N,J)
                    IPART(N,J)=ISTI				                    IPART(N,J)=ISTI
                  ENDIF						                  ENDIF
19            CONTINUE						19            CONTINUE
              IF ( IPRI.EQ.1 .AND. ISH.GE.95 ) THEN		              IF ( IPRI.EQ.1 .AND. ISH.GE.95 ) THEN
                WRITE(IFCH,*)' '				                WRITE(IFCH,*)' '
                WRITE(IFCH,*)'SEQUENCE CHANGED'			                WRITE(IFCH,*)'SEQUENCE CHANGED'
              ENDIF						              ENDIF

              JX=2						              JX=2
              DO 28 KX=1,-IPART(N,1)-1				              DO 28 KX=1,-IPART(N,1)-1
                LX=-IPART(N,JX)					                LX=-IPART(N,JX)
                IF ( LX .LT. 0 ) THEN				                IF ( LX .LT. 0 ) THEN
                 CALL UTSTOP('UTPART: LX NEGATIVE            	                 CALL UTSTOP('UTPART: LX NEGATIVE            
                ENDIF						                ENDIF
                IF ( LX .EQ. L1+L2 ) THEN			                IF ( LX .EQ. L1+L2 ) THEN
                  DO 22 L=1,LX					                  DO 22 L=1,LX
                    IF ( IPART(N,JX+L) .NE. IPART(N,II0-1+L) 	                    IF ( IPART(N,JX+L) .NE. IPART(N,II0-1+L) 
22                CONTINUE					22                CONTINUE
                  IF ( ISH .GE. 95 ) THEN			                  IF ( ISH .GE. 95 ) THEN
                    WRITE(IFCH,*)' '				                    WRITE(IFCH,*)' '
                    WRITE(IFCH,*)'EXISTS ALREADY'		                    WRITE(IFCH,*)'EXISTS ALREADY'
                  ENDIF						                  ENDIF
                  IPRI=1					                  IPRI=1
                  DO 33 I=II0-1,II				                  DO 33 I=II0-1,II
                    IPART(N,I)=0				                    IPART(N,I)=0
33                CONTINUE					33                CONTINUE
                  II=II0-2					                  II=II0-2
                  IPART(N,1)=IPART(N,1)+1			                  IPART(N,1)=IPART(N,1)+1
                  GOTO 30					                  GOTO 30
23                CONTINUE					23                CONTINUE
                ENDIF						                ENDIF
                JX=JX+LX+1					                JX=JX+LX+1
28            CONTINUE						28            CONTINUE
30            CONTINUE						30            CONTINUE

              IF ( IPRI.EQ.1 .AND. ISH.GE.95 ) THEN		              IF ( IPRI.EQ.1 .AND. ISH.GE.95 ) THEN
                WRITE(IFCH,103)N,-IPART(N,1),NINT(PARTA(N))	                WRITE(IFCH,103)N,-IPART(N,1),NINT(PARTA(N))
                JY=2						                JY=2
                DO 32 KY=1,-IPART(N,1)				                DO 32 KY=1,-IPART(N,1)
                  LY=-IPART(N,JY)				                  LY=-IPART(N,JY)
                  WRITE(IFCH,102)KY,LY,(IPART(N,I)		                  WRITE(IFCH,102)KY,LY,(IPART(N,I)
     *                                ,I=JY+1,JY+MIN(20,LY))	     *                                ,I=JY+1,JY+MIN(20,LY))
                  JY=JY+LY+1					                  JY=JY+LY+1
32              CONTINUE					32              CONTINUE
              ENDIF						              ENDIF

              J2=J2+L2+1					              J2=J2+L2+1
15          CONTINUE						15          CONTINUE
            J1=J1+L1+1						            J1=J1+L1+1
13        CONTINUE						13        CONTINUE
12      CONTINUE						12      CONTINUE

C  ORDERING							C  ORDERING
C  --------							C  --------
        KM=-IPART(N,1)						        KM=-IPART(N,1)
        IF ( KM .LT. 0 ) THEN					        IF ( KM .LT. 0 ) THEN
          CALL UTSTOP('UTPART: KM NEGATIVE                   	          CALL UTSTOP('UTPART: KM NEGATIVE                   
        ENDIF							        ENDIF
        J1=2							        J1=2
        DO 20 K1=1,KM-1						        DO 20 K1=1,KM-1
          L1=-IPART(N,J1)					          L1=-IPART(N,J1)
          IF ( L1 .LT. 0 ) THEN					          IF ( L1 .LT. 0 ) THEN
            CALL UTSTOP('UTPART: L1 NEGATIVE (2)             	            CALL UTSTOP('UTPART: L1 NEGATIVE (2)             
          ENDIF							          ENDIF
          J2=2							          J2=2
          DO 21 K2=1,KM						          DO 21 K2=1,KM
            L2=-IPART(N,J2)					            L2=-IPART(N,J2)
            IF ( L2 .LT. 0 ) THEN				            IF ( L2 .LT. 0 ) THEN
              CALL UTSTOP('UTPART: L2 NEGATIVE (2)           	              CALL UTSTOP('UTPART: L2 NEGATIVE (2)           
            ENDIF						            ENDIF
            IF ( K2 .LE. K1 ) GOTO 21				            IF ( K2 .LE. K1 ) GOTO 21
            IF ( L1 .GT. L2 ) THEN				            IF ( L1 .GT. L2 ) THEN
              DO 24 L=1,L2+1					              DO 24 L=1,L2+1
                ISWAP(L)=IPART(N,J2-1+L)			                ISWAP(L)=IPART(N,J2-1+L)
24            CONTINUE						24            CONTINUE
              DO 25 L=1,J2-J1					              DO 25 L=1,J2-J1
                I=J2-L						                I=J2-L
                IPART(N,I+L2+1)=IPART(N,I)			                IPART(N,I+L2+1)=IPART(N,I)
25            CONTINUE						25            CONTINUE
              DO 26 L=1,L2+1					              DO 26 L=1,L2+1
                IPART(N,J1-1+L)=ISWAP(L)			                IPART(N,J1-1+L)=ISWAP(L)
26            CONTINUE						26            CONTINUE
              L1=-IPART(N,J1)					              L1=-IPART(N,J1)
              IF ( L1 .LT. 0 ) THEN				              IF ( L1 .LT. 0 ) THEN
                CALL UTSTOP('UTPART: L1 NEGATIVE (2)         	                CALL UTSTOP('UTPART: L1 NEGATIVE (2)         
              ENDIF						              ENDIF
              IF ( ISH .GE. 95 ) THEN				              IF ( ISH .GE. 95 ) THEN
                WRITE(IFCH,*)' '				                WRITE(IFCH,*)' '
                WRITE(IFCH,*)'ORDER CHANGED.      K1,K2=',K1,	                WRITE(IFCH,*)'ORDER CHANGED.      K1,K2=',K1,
                WRITE(IFCH,103)N,-IPART(N,1),NINT(PARTA(N))	                WRITE(IFCH,103)N,-IPART(N,1),NINT(PARTA(N))
                JY=2						                JY=2
                DO 31 KY=1,-IPART(N,1)				                DO 31 KY=1,-IPART(N,1)
                  LY=-IPART(N,JY)				                  LY=-IPART(N,JY)
                  WRITE(IFCH,102)KY,LY,(IPART(N,I)		                  WRITE(IFCH,102)KY,LY,(IPART(N,I)
     *                                ,I=JY+1,JY+MIN(20,LY))	     *                                ,I=JY+1,JY+MIN(20,LY))
                  JY=JY+LY+1					                  JY=JY+LY+1
31              CONTINUE					31              CONTINUE
              ENDIF						              ENDIF
            ENDIF						            ENDIF
            J2=J2+L2+1						            J2=J2+L2+1
21        CONTINUE						21        CONTINUE
          J1=J1+L1+1						          J1=J1+L1+1
20      CONTINUE						20      CONTINUE

        IF ( ISH.GE.93 .AND. N.LE.8 ) THEN			        IF ( ISH.GE.93 .AND. N.LE.8 ) THEN
          WRITE(IFCH,113)('-',IC=1,79),N,-IPART(N,1),('-',IC=	          WRITE(IFCH,113)('-',IC=1,79),N,-IPART(N,1),('-',IC=
113       FORMAT(/1X,79A1/7X,'N = ',I2,'   --->   ',I4,		113       FORMAT(/1X,79A1/7X,'N = ',I2,'   --->   ',I4,
     *                           ' PARTITIONS'/1X,79A1)		     *                           ' PARTITIONS'/1X,79A1)
          JY=2							          JY=2
          DO 27 KY=1,-IPART(N,1)				          DO 27 KY=1,-IPART(N,1)
            LY=-IPART(N,JY)					            LY=-IPART(N,JY)
            WRITE(IFCH,112)KY,(IPART(N,I),I=JY+1,JY+MIN(20,LY	            WRITE(IFCH,112)KY,(IPART(N,I),I=JY+1,JY+MIN(20,LY
112         FORMAT(2X,I2,'. PARTITION:',3X,20I3)		112         FORMAT(2X,I2,'. PARTITION:',3X,20I3)
            JY=JY+LY+1						            JY=JY+LY+1
27        CONTINUE						27        CONTINUE
        ENDIF							        ENDIF
        IF ( -IPART(N,1) .NE. NINT(PARTA(N)) ) THEN		        IF ( -IPART(N,1) .NE. NINT(PARTA(N)) ) THEN
          CALL UTSTOP('UTPART: # OF PARTITIONS WRONG         	          CALL UTSTOP('UTPART: # OF PARTITIONS WRONG         
        ENDIF							        ENDIF
11    CONTINUE							11    CONTINUE

      RETURN							      RETURN

1000  WRITE(IFCH,*)' '						1000  WRITE(IFCH,*)' '
      WRITE(IFCH,*)('*',J=1,79)					      WRITE(IFCH,*)('*',J=1,79)
      WRITE(IFCH,*)'***** N=',N					      WRITE(IFCH,*)'***** N=',N
      WRITE(IFCH,*)'***** JPAMAX=',JPAMAX			      WRITE(IFCH,*)'***** JPAMAX=',JPAMAX
      WRITE(IFCH,*)('*',J=1,79)					      WRITE(IFCH,*)('*',J=1,79)
      CALL UTSTOP('UTPART: DIMENSION JPAMAX TOO SMALL.     ')	      CALL UTSTOP('UTPART: DIMENSION JPAMAX TOO SMALL.     ')
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      FUNCTION UTPCM(A,B,C)					      FUNCTION UTPCM(A,B,C)

C------------------------------------------------------------	C------------------------------------------------------------
C  CALCULATES CM MOMENTUM FOR A-->B+C				C  CALCULATES CM MOMENTUM FOR A-->B+C
C------------------------------------------------------------	C------------------------------------------------------------
      VAL=(A**2-B**2-C**2)**2-(2.*B*C)**2			      VAL=(A**2-B**2-C**2)**2-(2.*B*C)**2
      IF ( VAL.LT.0. .AND. VAL.GT.-1.E-4 ) THEN			      IF ( VAL.LT.0. .AND. VAL.GT.-1.E-4 ) THEN
        UTPCM=0.						        UTPCM=0.
        RETURN							        RETURN
      ENDIF							      ENDIF
      UTPCM=SQRT(VAL)/(2.*A)					      UTPCM=SQRT(VAL)/(2.*A)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTQUAF(FU,N,X,Q,X0,X1,X2,X3)			      SUBROUTINE UTQUAF(FU,N,X,Q,X0,X1,X2,X3)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS Q(I) = INTEGRAL (X(1)->X(I)) FU(X) DX		C  RETURNS Q(I) = INTEGRAL (X(1)->X(I)) FU(X) DX
C  ACCELERATED VERSION BY      D. HECK, KFK    SEPT 20, 1993	C  ACCELERATED VERSION BY      D. HECK, KFK    SEPT 20, 1993
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (M=10)						      PARAMETER (M=10)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      REAL Q(N),X(N)						      REAL Q(N),X(N)
C------------------------------------------------------------	C------------------------------------------------------------
      QUOT = 1./FLOAT(M-1)					      QUOT = 1./FLOAT(M-1)
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( X1.LT.X0 .OR. X2.LT.X1 .OR. X3.LT.X2 ) THEN	        IF ( X1.LT.X0 .OR. X2.LT.X1 .OR. X3.LT.X2 ) THEN
          CALL UTMSG('UTQUAF')					          CALL UTMSG('UTQUAF')
          WRITE(IFCH,*)'   XI=',X0,X1,X2,X3			          WRITE(IFCH,*)'   XI=',X0,X1,X2,X3
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      I1 = N/3							      I1 = N/3
      I2 = 2*N/3						      I2 = 2*N/3
      FAC1 = (X1-X0)/FLOAT(I1-1)				      FAC1 = (X1-X0)/FLOAT(I1-1)
      DO 11 I=1,I1-1						      DO 11 I=1,I1-1
        X(I)=X0+(I-1.)*FAC1					        X(I)=X0+(I-1.)*FAC1
 11   CONTINUE							 11   CONTINUE
      FAC2 = (X2-X1)/FLOAT(I2-I1)				      FAC2 = (X2-X1)/FLOAT(I2-I1)
      DO 12 I=I1,I2-1						      DO 12 I=I1,I2-1
        X(I)=X1+FLOAT(I-I1)*FAC2				        X(I)=X1+FLOAT(I-I1)*FAC2
 12   CONTINUE							 12   CONTINUE
      FAC3 = (X3-X2)/FLOAT(N-I2)				      FAC3 = (X3-X2)/FLOAT(N-I2)
      DO 13 I=I2,N						      DO 13 I=I2,N
        X(I)=X2+FLOAT(I-I2)*FAC3				        X(I)=X2+FLOAT(I-I2)*FAC3
 13   CONTINUE							 13   CONTINUE
      Q(1) = 0.							      Q(1) = 0.
      Z = X(1)							      Z = X(1)
      AUXIL = FU(Z)						      AUXIL = FU(Z)
      DO 2 I=2,N						      DO 2 I=2,N
        FACT = (X(I) - Z) * QUOT				        FACT = (X(I) - Z) * QUOT
        UTQUAD = AUXIL*0.5					        UTQUAD = AUXIL*0.5
        DO 3 K=2,M-1						        DO 3 K=2,M-1
          Z=Z+FACT						          Z=Z+FACT
          UTQUAD=FU(Z)+UTQUAD					          UTQUAD=FU(Z)+UTQUAD
 3      CONTINUE						 3      CONTINUE
        Z = X(I)						        Z = X(I)
        AUXIL = FU(Z)						        AUXIL = FU(Z)
        Q(I)=(AUXIL*0.5+UTQUAD)*FACT+Q(I-1)			        Q(I)=(AUXIL*0.5+UTQUAD)*FACT+Q(I-1)
 2    CONTINUE							 2    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTQZ(N,X,Q1,Q2,X0,X1,X2,X3)			      SUBROUTINE UTQZ(N,X,Q1,Q2,X0,X1,X2,X3)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS Q1(I) = INTEGRAL (X(1)->X(I)) FU1(X) DX  (SEA QUAR	C  RETURNS Q1(I) = INTEGRAL (X(1)->X(I)) FU1(X) DX  (SEA QUAR
C  RETURNS Q2(I) = INTEGRAL (X(1)->X(I)) FU2(X) DX  (VAL QUAR	C  RETURNS Q2(I) = INTEGRAL (X(1)->X(I)) FU2(X) DX  (VAL QUAR
C  ACCELERATED VERSION BY      D. HECK, KFK    OCT  20, 1993	C  ACCELERATED VERSION BY      D. HECK, KFK    OCT  20, 1993
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (M=10)						      PARAMETER (M=10)
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      COMMON /CIPIO/   IPIO					      COMMON /CIPIO/   IPIO
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      REAL Q1(N),Q2(N),X(N)					      REAL Q1(N),Q2(N),X(N)
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        IF ( X1.LT.X0 .OR. X2.LT.X1 .OR. X3.LT.X2 ) THEN	        IF ( X1.LT.X0 .OR. X2.LT.X1 .OR. X3.LT.X2 ) THEN
          CALL UTMSG('UTQZ  ')					          CALL UTMSG('UTQZ  ')
          WRITE(IFCH,*)'   XI=',X0,X1,X2,X3			          WRITE(IFCH,*)'   XI=',X0,X1,X2,X3
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      I1 = N/3							      I1 = N/3
      I2 = 2*N/3						      I2 = 2*N/3
      FAC1 = (X1-X0)/FLOAT(I1-1)				      FAC1 = (X1-X0)/FLOAT(I1-1)
      DO 11 I=1,I1-1						      DO 11 I=1,I1-1
        X(I)=(I-1.)*FAC1+X0					        X(I)=(I-1.)*FAC1+X0
 11   CONTINUE							 11   CONTINUE
      FAC2 = (X2-X1)/FLOAT(I2-I1)				      FAC2 = (X2-X1)/FLOAT(I2-I1)
      DO 12 I=I1,I2-1						      DO 12 I=I1,I2-1
        X(I)=FLOAT(I-I1)*FAC2 +X1				        X(I)=FLOAT(I-I1)*FAC2 +X1
 12   CONTINUE							 12   CONTINUE
      FAC3 = (X3-X2)/FLOAT(N-I2)				      FAC3 = (X3-X2)/FLOAT(N-I2)
      DO 13 I=I2,N						      DO 13 I=I2,N
        X(I)=MIN( FLOAT(I-I2)*FAC3 +X2, 0.999999 )		        X(I)=MIN( FLOAT(I-I2)*FAC3 +X2, 0.999999 )
 13   CONTINUE							 13   CONTINUE
      XCUT2 = XCUT**2						      XCUT2 = XCUT**2
      QUOT= 1./FLOAT(M-1)					      QUOT= 1./FLOAT(M-1)
      Q1(1)=0.							      Q1(1)=0.
      Q2(1)=0.							      Q2(1)=0.
      Z = X(1)							      Z = X(1)
      DENOMI= 1./SQRT(Z**2 + XCUT2)				      DENOMI= 1./SQRT(Z**2 + XCUT2)
      IF ( IPIO .EQ. 0 ) THEN					      IF ( IPIO .EQ. 0 ) THEN
        AUXIL1 = (1.-Z)**8.05 *DENOMI				        AUXIL1 = (1.-Z)**8.05 *DENOMI
        IF ( Z .NE. 0. ) THEN					        IF ( Z .NE. 0. ) THEN
          AUXIL2 = (1.-Z)**3.46 * Z**.419			          AUXIL2 = (1.-Z)**3.46 * Z**.419
     *                  * (2.74793064*Z+0.62452969)* DENOMI	     *                  * (2.74793064*Z+0.62452969)* DENOMI
        ELSE							        ELSE
          AUXIL2 = 0.						          AUXIL2 = 0.
        ENDIF							        ENDIF
        DO 3 I=2,N						        DO 3 I=2,N
          FACT = (X(I) - Z) * QUOT				          FACT = (X(I) - Z) * QUOT
          UTQUA1 = 0.5*AUXIL1					          UTQUA1 = 0.5*AUXIL1
          UTQUA2 = 0.5*AUXIL2					          UTQUA2 = 0.5*AUXIL2
          DO 2 K=2,M-1						          DO 2 K=2,M-1
            Z=Z+FACT						            Z=Z+FACT
            DENOMI = 1./SQRT(Z**2 + XCUT2)			            DENOMI = 1./SQRT(Z**2 + XCUT2)
            UTQUA1 = DENOMI * (1.-Z)**8.05 + UTQUA1		            UTQUA1 = DENOMI * (1.-Z)**8.05 + UTQUA1
            IF ( Z .NE. 0. ) THEN				            IF ( Z .NE. 0. ) THEN
              UTQUA2 = (1.-Z)**3.46 * Z**.419			              UTQUA2 = (1.-Z)**3.46 * Z**.419
     *                  * (2.74793064*Z+0.62452969) * DENOMI 	     *                  * (2.74793064*Z+0.62452969) * DENOMI 
            ENDIF						            ENDIF
 2        CONTINUE						 2        CONTINUE
          Z=X(I)						          Z=X(I)
          DENOMI = 1./SQRT(Z**2 + XCUT2)			          DENOMI = 1./SQRT(Z**2 + XCUT2)
          AUXIL1 = DENOMI * (1.-Z)**8.05			          AUXIL1 = DENOMI * (1.-Z)**8.05
          Q1(I) = (AUXIL1*0.5+UTQUA1) * FACT*1.265 + Q1(I-1)	          Q1(I) = (AUXIL1*0.5+UTQUA1) * FACT*1.265 + Q1(I-1)
          IF ( Z .NE. 0. ) THEN					          IF ( Z .NE. 0. ) THEN
            AUXIL2=(1.-Z)**3.46 * Z**.419 * (2.74793064*Z+0.6	            AUXIL2=(1.-Z)**3.46 * Z**.419 * (2.74793064*Z+0.6
     *                  * DENOMI				     *                  * DENOMI
            Q2(I) = (AUXIL2*0.5+UTQUA2) * FACT + Q2(I-1)	            Q2(I) = (AUXIL2*0.5+UTQUA2) * FACT + Q2(I-1)
          ELSE							          ELSE
            AUXIL2 = 0.						            AUXIL2 = 0.
            Q2(I) = FACT* UTQUA2 + Q2(I-1)			            Q2(I) = FACT* UTQUA2 + Q2(I-1)
          ENDIF							          ENDIF
 3      CONTINUE						 3      CONTINUE

      ELSE							      ELSE
        CUTLOG= LOG(XCUT)					        CUTLOG= LOG(XCUT)
        A0 = -5. + 6.6666667*XCUT2 - 0.53333333*XCUT2**2	        A0 = -5. + 6.6666667*XCUT2 - 0.53333333*XCUT2**2
        BA0= A0*XCUT						        BA0= A0*XCUT
        A1 = 5. - 1.875*XCUT2					        A1 = 5. - 1.875*XCUT2
        QB = 1. - A1*XCUT2					        QB = 1. - A1*XCUT2
        A2 = -3.3333333 +0.26666667*XCUT2			        A2 = -3.3333333 +0.26666667*XCUT2
        A3 = 1.25						        A3 = 1.25
        A4 = -0.2						        A4 = -0.2
        AUXIL1 = (1.-Z)**5.0 * DENOMI				        AUXIL1 = (1.-Z)**5.0 * DENOMI
        IF ( Z .NE. 0. ) THEN					        IF ( Z .NE. 0. ) THEN
          AUXIL2 = (1.-Z)**0.7 * Z**0.4 * DENOMI		          AUXIL2 = (1.-Z)**0.7 * Z**0.4 * DENOMI
        ELSE							        ELSE
          AUXIL2 = 0.						          AUXIL2 = 0.
        ENDIF							        ENDIF
        DO 5 I=2,N						        DO 5 I=2,N
          FACT = (X(I) - Z) * QUOT				          FACT = (X(I) - Z) * QUOT
          UTQUA1 = 0.5*AUXIL1					          UTQUA1 = 0.5*AUXIL1
          UTQUA2 = 0.5*AUXIL2					          UTQUA2 = 0.5*AUXIL2
          DO 4 K=2,M-1						          DO 4 K=2,M-1
            Z=Z+FACT						            Z=Z+FACT
            DENOMI = 1./SQRT(Z**2 + XCUT2)			            DENOMI = 1./SQRT(Z**2 + XCUT2)
            UTQUA1 = DENOMI * (1.-Z)**5.0 + UTQUA1		            UTQUA1 = DENOMI * (1.-Z)**5.0 + UTQUA1
            IF ( Z .NE. 0. ) THEN				            IF ( Z .NE. 0. ) THEN
              UTQUA2 = DENOMI * (1.-Z)**0.7 * Z**0.4 + UTQUA2	              UTQUA2 = DENOMI * (1.-Z)**0.7 * Z**0.4 + UTQUA2
            ENDIF						            ENDIF
 4        CONTINUE						 4        CONTINUE
          Z = X(I)						          Z = X(I)
          ROOT = SQRT(Z**2 + XCUT2)				          ROOT = SQRT(Z**2 + XCUT2)
          DENOMI= 1./ROOT					          DENOMI= 1./ROOT
CC        AUXIL1=DENOMI * (1.-Z)**5.0				CC        AUXIL1=DENOMI * (1.-Z)**5.0
CC        Q1(I) = (AUXIL1*0.5+UTQUA1) * FACT*0.9 + Q1(I-1)	CC        Q1(I) = (AUXIL1*0.5+UTQUA1) * FACT*0.9 + Q1(I-1)
          Q1(I) = ( QB * ( LOG(Z+ROOT) - CUTLOG ) - BA0		          Q1(I) = ( QB * ( LOG(Z+ROOT) - CUTLOG ) - BA0
     *           + ROOT * (A0+Z*(A1+Z*(A2+Z*(A3+Z*A4)))) ) *0	     *           + ROOT * (A0+Z*(A1+Z*(A2+Z*(A3+Z*A4)))) ) *0
          IF ( Z .NE. 0. ) THEN					          IF ( Z .NE. 0. ) THEN
            AUXIL2 = DENOMI * (1.-Z)**0.7 * Z**0.4		            AUXIL2 = DENOMI * (1.-Z)**0.7 * Z**0.4
            Q2(I) = (AUXIL2*0.5+UTQUA2) * FACT*0.1730725 + Q2	            Q2(I) = (AUXIL2*0.5+UTQUA2) * FACT*0.1730725 + Q2
          ELSE							          ELSE
            AUXIL2 = 0.						            AUXIL2 = 0.
            Q2(I) = FACT*0.1730725 * UTQUA2 + Q2(I-1)		            Q2(I) = FACT*0.1730725 * UTQUA2 + Q2(I-1)
          ENDIF							          ENDIF
 5      CONTINUE						 5      CONTINUE
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTREMB(PROJ,TARG,II)				      SUBROUTINE UTREMB(PROJ,TARG,II)

C------------------------------------------------------------	C------------------------------------------------------------
C  REMEMBERS NEVT,NSTR,NPTL,PROJ,TARG				C  REMEMBERS NEVT,NSTR,NPTL,PROJ,TARG
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      PARAMETER (MXSTR=3000)					      PARAMETER (MXSTR=3000)
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /CREMB/   PROJRE(2,NSI,NHA),TARGRE(2,NSI,NHA)	      COMMON /CREMB/   PROJRE(2,NSI,NHA),TARGRE(2,NSI,NHA)
     *                ,NEVTRE(2),NPTLRE(2),NSTRRE(2)		     *                ,NEVTRE(2),NPTLRE(2),NSTRRE(2)
      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4	      COMMON /CSTR/    PSTR(5,MXSTR),ROTSTR(3,MXSTR),XORSTR(4
     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX	     *                ,ICSTR(4,MXSTR),IORSTR(MXSTR),IRLSTR(MX
      REAL PROJ(NSI,NHA),TARG(NSI,NHA)				      REAL PROJ(NSI,NHA),TARG(NSI,NHA)
C------------------------------------------------------------	C------------------------------------------------------------
      NEVTRE(II)=NEVT						      NEVTRE(II)=NEVT
      NSTRRE(II)=NSTR						      NSTRRE(II)=NSTR
      NPTLRE(II)=NPTL						      NPTLRE(II)=NPTL
      DO 56 M=1,NHA						      DO 56 M=1,NHA
        SM=0.							        SM=0.
        DO 57 N=1,NSI						        DO 57 N=1,NSI
          PROJRE(II,N,M)=PROJ(N,M)				          PROJRE(II,N,M)=PROJ(N,M)
          SM=SM+PROJ(N,M)**2					          SM=SM+PROJ(N,M)**2
57      CONTINUE						57      CONTINUE
        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 58			        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 58
56    CONTINUE							56    CONTINUE
58    CONTINUE							58    CONTINUE
      DO 53 M=1,NHA						      DO 53 M=1,NHA
        SM=0.							        SM=0.
        DO 54 N=1,NSI						        DO 54 N=1,NSI
          TARGRE(II,N,M)=TARG(N,M)				          TARGRE(II,N,M)=TARG(N,M)
          SM=SM+TARG(N,M)**2					          SM=SM+TARG(N,M)**2
54      CONTINUE						54      CONTINUE
        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 55			        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 55
53    CONTINUE							53    CONTINUE
55    CONTINUE							55    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTREPL(I,J)					      SUBROUTINE UTREPL(I,J)

C------------------------------------------------------------	C------------------------------------------------------------
C  I IS REPLACED BY J IN /CPTL/					C  I IS REPLACED BY J IN /CPTL/
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP	      COMMON /C2PTL/   AMIPTL(MXPTL),RADPTL(MXPTL),IAAPTL(MXP
C------------------------------------------------------------	C------------------------------------------------------------
      AMIPTL(I)  =AMIPTL(J)					      AMIPTL(I)  =AMIPTL(J)
      IAAPTL(I)  =IAAPTL(J)					      IAAPTL(I)  =IAAPTL(J)
      IBPTL(1,I) =IBPTL(1,J)					      IBPTL(1,I) =IBPTL(1,J)
      IBPTL(2,I) =IBPTL(2,J)					      IBPTL(2,I) =IBPTL(2,J)
      IBPTL(3,I) =IBPTL(3,J)					      IBPTL(3,I) =IBPTL(3,J)
      IBPTL(4,I) =IBPTL(4,J)					      IBPTL(4,I) =IBPTL(4,J)
      ICLPTL(I)  =ICLPTL(J)					      ICLPTL(I)  =ICLPTL(J)
      IDPTL(I)   =IDPTL(J)					      IDPTL(I)   =IDPTL(J)
      IFRPTL(1,I)=IFRPTL(1,J)					      IFRPTL(1,I)=IFRPTL(1,J)
      IFRPTL(2,I)=IFRPTL(2,J)					      IFRPTL(2,I)=IFRPTL(2,J)
      IORPTL(I)  =IORPTL(J)					      IORPTL(I)  =IORPTL(J)
      ISTPTL(I)  =ISTPTL(J)					      ISTPTL(I)  =ISTPTL(J)
      JORPTL(I)  =JORPTL(J)					      JORPTL(I)  =JORPTL(J)
      NQJPTL(I)  =NQJPTL(J)					      NQJPTL(I)  =NQJPTL(J)
      DO 1 K=1,5						      DO 1 K=1,5
        PPTL(K,I)=PPTL(K,J)					        PPTL(K,I)=PPTL(K,J)
 1    CONTINUE							 1    CONTINUE
      RADPTL(I)  =RADPTL(J)					      RADPTL(I)  =RADPTL(J)
      TIVPTL(1,I)=TIVPTL(1,J)					      TIVPTL(1,I)=TIVPTL(1,J)
      TIVPTL(2,I)=TIVPTL(2,J)					      TIVPTL(2,I)=TIVPTL(2,J)
      XORPTL(1,I)=XORPTL(1,J)					      XORPTL(1,I)=XORPTL(1,J)
      XORPTL(2,I)=XORPTL(2,J)					      XORPTL(2,I)=XORPTL(2,J)
      XORPTL(3,I)=XORPTL(3,J)					      XORPTL(3,I)=XORPTL(3,J)
      XORPTL(4,I)=XORPTL(4,J)					      XORPTL(4,I)=XORPTL(4,J)

      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTRESM(ICP1,ICP2,ICM1,ICM2,AMP,IDPR,IADJ,IRE	      SUBROUTINE UTRESM(ICP1,ICP2,ICM1,ICM2,AMP,IDPR,IADJ,IRE

C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NFLAV=6)					      PARAMETER (NFLAV=6)
      INTEGER ICM(2),ICP(2),JCM(NFLAV,2),JCP(NFLAV,2)		      INTEGER ICM(2),ICP(2),JCM(NFLAV,2),JCP(NFLAV,2)
C------------------------------------------------------------	C------------------------------------------------------------
      ICM(1)=ICM1						      ICM(1)=ICM1
      ICM(2)=ICM2						      ICM(2)=ICM2
      ICP(1)=ICP1						      ICP(1)=ICP1
      ICP(2)=ICP2						      ICP(2)=ICP2
      CALL IDDECO(ICM,JCM)					      CALL IDDECO(ICM,JCM)
      CALL IDDECO(ICP,JCP)					      CALL IDDECO(ICP,JCP)
      DO 37 NF=1,NFLAV						      DO 37 NF=1,NFLAV
        JCP(NF,1)=JCP(NF,1)+JCM(NF,1)				        JCP(NF,1)=JCP(NF,1)+JCM(NF,1)
        JCP(NF,2)=JCP(NF,2)+JCM(NF,2)				        JCP(NF,2)=JCP(NF,2)+JCM(NF,2)
37    CONTINUE							37    CONTINUE
      CALL IDENCO(JCP,ICP,IRETEN)				      CALL IDENCO(JCP,ICP,IRETEN)
      IDP=IDTRA(ICP,0,0,3)					      IDP=IDTRA(ICP,0,0,3)
      CALL IDRES(IDP,AMP,IDPR,IADJ)				      CALL IDRES(IDP,AMP,IDPR,IADJ)
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTREST(PROJ,TARG,II)				      SUBROUTINE UTREST(PROJ,TARG,II)

C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (NSI=6)						      PARAMETER (NSI=6)
      PARAMETER (NSIX=40)					      PARAMETER (NSIX=40)
      PARAMETER (NHA=NSIX+2)					      PARAMETER (NHA=NSIX+2)
      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT	      COMMON /CEVT/    BIMEVT,COLEVT,EGYEVT,PHIEVT,PMXEVT
     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT		     *                ,KOLEVT,NEVT,NPJEVT,NTGEVT
      COMMON /CREMB/   PROJRE(2,NSI,NHA),TARGRE(2,NSI,NHA)	      COMMON /CREMB/   PROJRE(2,NSI,NHA),TARGRE(2,NSI,NHA)
     *                ,NEVTRE(2),NPTLRE(2),NSTRRE(2)		     *                ,NEVTRE(2),NPTLRE(2),NSTRRE(2)
      REAL PROJ(NSI,NHA),TARG(NSI,NHA)				      REAL PROJ(NSI,NHA),TARG(NSI,NHA)
C------------------------------------------------------------	C------------------------------------------------------------
      NEVT=NEVTRE(II)						      NEVT=NEVTRE(II)
      NSTR=NSTRRE(II)						      NSTR=NSTRRE(II)
      NPTL=NPTLRE(II)						      NPTL=NPTLRE(II)
      DO 66 M=1,NHA						      DO 66 M=1,NHA
        SM=0.							        SM=0.
        DO 67 N=1,NSI						        DO 67 N=1,NSI
          PROJ(N,M)=PROJRE(II,N,M)				          PROJ(N,M)=PROJRE(II,N,M)
          SM=SM+PROJRE(II,N,M)**2				          SM=SM+PROJRE(II,N,M)**2
67      CONTINUE						67      CONTINUE
        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 68			        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 68
66    CONTINUE							66    CONTINUE
68    CONTINUE							68    CONTINUE
      DO 63 M=1,NHA						      DO 63 M=1,NHA
        SM=0.							        SM=0.
        DO 64 N=1,NSI						        DO 64 N=1,NSI
          TARG(N,M)=TARGRE(II,N,M)				          TARG(N,M)=TARGRE(II,N,M)
          SM=SM+TARGRE(II,N,M)**2				          SM=SM+TARGRE(II,N,M)**2
64      CONTINUE						64      CONTINUE
        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 65			        IF ( M.GE.3 .AND. SM.LT.1.E-5 ) GOTO 65
63    CONTINUE							63    CONTINUE
65    CONTINUE							65    CONTINUE
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTROTA(ISIG,AX,AY,AZ,X,Y,Z)			      SUBROUTINE UTROTA(ISIG,AX,AY,AZ,X,Y,Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS A ROTATION						C  PERFORMS A ROTATION
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( AZ .GE. 0. ) THEN					      IF ( AZ .GE. 0. ) THEN
        RX=AX							        RX=AX
        RY=AY							        RY=AY
        RZ=AZ							        RZ=AZ
      ELSE							      ELSE
        RX=-AX							        RX=-AX
        RY=-AY							        RY=-AY
        RZ=-AZ							        RZ=-AZ
      ENDIF							      ENDIF
      ALP=SIGN( ABS(UTACOS(RZ/SQRT(RZ**2+RY**2))), RY )		      ALP=SIGN( ABS(UTACOS(RZ/SQRT(RZ**2+RY**2))), RY )
      BET=SIGN( ABS(UTACOS(SQRT(RZ**2+RY**2)/SQRT(RZ**2+RY**2	      BET=SIGN( ABS(UTACOS(SQRT(RZ**2+RY**2)/SQRT(RZ**2+RY**2
     *                                                       	     *                                                       
      COSA=COS(ALP)						      COSA=COS(ALP)
      SINA=SIN(ALP)						      SINA=SIN(ALP)
      COSB=COS(BET)						      COSB=COS(BET)
      SINB=SIN(BET)						      SINB=SIN(BET)
      IF     ( ISIG .GT. 0 ) THEN				      IF     ( ISIG .GT. 0 ) THEN
        XS=X*COSB-Y*SINA*SINB-Z*COSA*SINB			        XS=X*COSB-Y*SINA*SINB-Z*COSA*SINB
        YS=       Y*COSA     -Z*SINA				        YS=       Y*COSA     -Z*SINA
        ZS=X*SINB+Y*SINA*COSB+Z*COSA*COSB			        ZS=X*SINB+Y*SINA*COSB+Z*COSA*COSB
      ELSEIF ( ISIG .LT. 0 ) THEN				      ELSEIF ( ISIG .LT. 0 ) THEN
        XS= X*COSB            +Z*SINB				        XS= X*COSB            +Z*SINB
        YS=-X*SINB*SINA+Y*COSA+Z*COSB*SINA			        YS=-X*SINB*SINA+Y*COSA+Z*COSB*SINA
        ZS=-X*SINB*COSA-Y*SINA+Z*COSB*COSA			        ZS=-X*SINB*COSA-Y*SINA+Z*COSB*COSA
      ENDIF							      ENDIF
      X=XS							      X=XS
      Y=YS							      Y=YS
      Z=ZS							      Z=ZS
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTROT2(ISIG,AX,AY,AZ,X,Y,Z)			      SUBROUTINE UTROT2(ISIG,AX,AY,AZ,X,Y,Z)

C------------------------------------------------------------	C------------------------------------------------------------
C  PERFORMS A ROTATION, DOUBLE PREC.				C  PERFORMS A ROTATION, DOUBLE PREC.
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS	      COMMON /PARO1/   AMPRIF,AMSIAC,BMAXIM,BMINIM,CORE,CUTMS
     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE	     *                ,DELMSS,DELREM,FCTRMX,GAUMX,OVERLP,PARE
     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX	     *                ,PHARD,PSPINL,PSPINH,PISPN,PTF,PTH,PTMX
     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R	     *                ,PVALEN,QSEPC,QSETC,QMUST,QVAPC,QVATC,R
     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI	     *                ,RADIAS,RSTRAS,SIGJ,SIGPPI,TAUMAX,TAUMI
     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,	     *                ,TAUMX,TAUNLL,TENSN,THEMAS,WPROJ,WTARG,
     *                ,WTSTEP,XCUT				     *                ,WTSTEP,XCUT
     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN	     *                ,IAQU,IFRADE,IOJINT,IOPBRK,IOPENT,IOPEN
     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO	     *                ,IOPTF,IOPTQ,IRESCL,IWCENT,KENTRO,KO1KO
     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ	     *                ,LABSYS,MAXRES,NCLEAN,NCOLMX,NDECAW,NEQ
     *                ,NSTTAU,NTRYMX,NUMTAU			     *                ,NSTTAU,NTRYMX,NUMTAU

      DOUBLE PRECISION ALP,AUXIL1,AUXIL2,AX,AY,AZ,BET,COSA,CO	      DOUBLE PRECISION ALP,AUXIL1,AUXIL2,AX,AY,AZ,BET,COSA,CO
     *                ,RX,RY,RZ,SINA,SINB,X,XS,Y,YS,Z,ZS	     *                ,RX,RY,RZ,SINA,SINB,X,XS,Y,YS,Z,ZS
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( AX**2.EQ.0.D0 .AND. AY**2.EQ.0.D0 .AND. AZ**2.EQ.0	      IF ( AX**2.EQ.0.D0 .AND. AY**2.EQ.0.D0 .AND. AZ**2.EQ.0
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,*)'AX**2,AY**2,AZ**2:',AX**2,AY**2,AZ**2	        WRITE(IFCH,*)'AX**2,AY**2,AZ**2:',AX**2,AY**2,AZ**2
        WRITE(IFCH,*)'AX,AY,AZ:',AX,AY,AZ			        WRITE(IFCH,*)'AX,AY,AZ:',AX,AY,AZ
        CALL UTSTOP('UTROT2: ZERO VECTOR.                    	        CALL UTSTOP('UTROT2: ZERO VECTOR.                    
      ENDIF							      ENDIF
      IF ( AZ .GE. 0.D0 ) THEN					      IF ( AZ .GE. 0.D0 ) THEN
        RX=AX							        RX=AX
        RY=AY							        RY=AY
        RZ=AZ							        RZ=AZ
      ELSE							      ELSE
        RX=-AX							        RX=-AX
        RY=-AY							        RY=-AY
        RZ=-AZ							        RZ=-AZ
      ENDIF							      ENDIF
      AUXIL1 = RZ**2+RY**2					      AUXIL1 = RZ**2+RY**2
      IF ( AUXIL1 .NE. 0.D0 ) THEN				      IF ( AUXIL1 .NE. 0.D0 ) THEN
        AUXIL2 = SQRT(AUXIL1)					        AUXIL2 = SQRT(AUXIL1)
        ALP=SIGN( ABS(ACOS(RZ/AUXIL2)), RY )			        ALP=SIGN( ABS(ACOS(RZ/AUXIL2)), RY )
        BET=SIGN( ABS(ACOS( AUXIL2/SQRT(AUXIL1+RX**2) )), RX 	        BET=SIGN( ABS(ACOS( AUXIL2/SQRT(AUXIL1+RX**2) )), RX 
        COSA=COS(ALP)						        COSA=COS(ALP)
        SINA=SIN(ALP)						        SINA=SIN(ALP)
        COSB=COS(BET)						        COSB=COS(BET)
        SINB=SIN(BET)						        SINB=SIN(BET)
      ELSE							      ELSE
        COSA=0.D0						        COSA=0.D0
        COSB=0.D0						        COSB=0.D0
        SINA=1.D0						        SINA=1.D0
        SINB=1.D0						        SINB=1.D0
      ENDIF							      ENDIF
      IF     ( ISIG .GT. 0 ) THEN				      IF     ( ISIG .GT. 0 ) THEN
        XS=X*COSB-Y*SINA*SINB-Z*COSA*SINB			        XS=X*COSB-Y*SINA*SINB-Z*COSA*SINB
        YS=       Y*COSA     -Z*SINA				        YS=       Y*COSA     -Z*SINA
        ZS=X*SINB+Y*SINA*COSB+Z*COSA*COSB			        ZS=X*SINB+Y*SINA*COSB+Z*COSA*COSB
      ELSEIF ( ISIG .LT. 0 ) THEN				      ELSEIF ( ISIG .LT. 0 ) THEN
        XS= X*COSB            +Z*SINB				        XS= X*COSB            +Z*SINB
        YS=-X*SINB*SINA+Y*COSA+Z*COSB*SINA			        YS=-X*SINB*SINA+Y*COSA+Z*COSB*SINA
        ZS=-X*SINB*COSA-Y*SINA+Z*COSB*COSA			        ZS=-X*SINB*COSA-Y*SINA+Z*COSB*COSA
      ENDIF							      ENDIF
      X=XS							      X=XS
      Y=YS							      Y=YS
      Z=ZS							      Z=ZS
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTSTOP(TEXT)					      SUBROUTINE UTSTOP(TEXT)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS ERROR MESSAGE AND STOPS EXECUTION			C  RETURNS ERROR MESSAGE AND STOPS EXECUTION
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA	      COMMON /ACCUM/   AMSAC,ILAMAS,IMSG,INOIAC,IPAGE,JERR,NA
     *                ,NRPTL,NRSTR,NTEVT			     *                ,NRPTL,NRSTR,NTEVT
      DOUBLE PRECISION SEEDC,SEEDI				      DOUBLE PRECISION SEEDC,SEEDI
      COMMON /CSEED/   SEEDC,SEEDI				      COMMON /CSEED/   SEEDC,SEEDI
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /NEVNT/   NEVNT					      COMMON /NEVNT/   NEVNT
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      CHARACTER STAR*1,TEXT*40					      CHARACTER STAR*1,TEXT*40
      DATA STAR/'*'/						      DATA STAR/'*'/
C------------------------------------------------------------	C------------------------------------------------------------
      DO 1 I=1,2						      DO 1 I=1,2
        IF ( I .EQ. 1 ) THEN					        IF ( I .EQ. 1 ) THEN
          IFI=IFCH						          IFI=IFCH
        ELSE							        ELSE
          IFI=IFMT						          IFI=IFMT
        ENDIF							        ENDIF
        WRITE(IFI,*)' '						        WRITE(IFI,*)' '
        WRITE(IFI,*)(STAR,J=1,77)				        WRITE(IFI,*)(STAR,J=1,77)
        WRITE(IFI,*)'***** STOP IN ',TEXT			        WRITE(IFI,*)'***** STOP IN ',TEXT
CDH     WRITE(IFI,*)'***** CURRENT EVENT NUMBER: ',NREVT+1	CDH     WRITE(IFI,*)'***** CURRENT EVENT NUMBER: ',NREVT+1
        WRITE(IFI,*)'***** CURRENT EVENT NUMBER: ',NEVNT	        WRITE(IFI,*)'***** CURRENT EVENT NUMBER: ',NEVNT
        WRITE(IFI,*)'***** CURRENT PAGE NUMBER: ',IPAGE		        WRITE(IFI,*)'***** CURRENT PAGE NUMBER: ',IPAGE
        WRITE(IFI,*)'***** INITIAL SEED FOR CURRENT EVENT:',S	        WRITE(IFI,*)'***** INITIAL SEED FOR CURRENT EVENT:',S
        WRITE(IFI,*)'***** RANDOM CALLS FOR CURRENT EVENT:',S	        WRITE(IFI,*)'***** RANDOM CALLS FOR CURRENT EVENT:',S
        WRITE(IFI,*)(STAR,J=1,77)				        WRITE(IFI,*)(STAR,J=1,77)
        WRITE(IFI,*)' '						        WRITE(IFI,*)' '
 1    CONTINUE							 1    CONTINUE
      STOP							      STOP
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTTAIN(I,X,Y,Z,T,N,IOPT)			      SUBROUTINE UTTAIN(I,X,Y,Z,T,N,IOPT)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS INTERSECTION OF PTL-I-TRAJECTORY WITH TAUS-LINE.	C  RETURNS INTERSECTION OF PTL-I-TRAJECTORY WITH TAUS-LINE.
C  N=0 IF OK, N=1 IF PTL LIVES LATER, N=2 IF EARLIER,		C  N=0 IF OK, N=1 IF PTL LIVES LATER, N=2 IF EARLIER,
C    N=9 IF TIV1>TIV2, N=3,4,5 ELSE.				C    N=9 IF TIV1>TIV2, N=3,4,5 ELSE.
C  IOPT=0: FORMATION TIME CONSIDERED, IOPT=1 IF NOT		C  IOPT=0: FORMATION TIME CONSIDERED, IOPT=1 IF NOT
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION DD,DERR,TI1,TI2,TT,VV,VVP,VVT,XO3,XO4,	      DOUBLE PRECISION DD,DERR,TI1,TI2,TT,VV,VVP,VVT,XO3,XO4,
      DATA DERR/1.D-2/						      DATA DERR/1.D-2/
C------------------------------------------------------------	C------------------------------------------------------------
      XO4=XORPTL(4,I)						      XO4=XORPTL(4,I)
      IF     ( IOPT .EQ. 0 ) THEN				      IF     ( IOPT .EQ. 0 ) THEN
        TI1=TIVPTL(1,I)						        TI1=TIVPTL(1,I)
      ELSEIF ( IOPT .EQ. 1 ) THEN				      ELSEIF ( IOPT .EQ. 1 ) THEN
        TI1=XO4							        TI1=XO4
      ENDIF							      ENDIF
      TI2=TIVPTL(2,I)						      TI2=TIVPTL(2,I)

      IF ( TI1 .GT. TI2 ) GOTO 1009				      IF ( TI1 .GT. TI2 ) GOTO 1009
      PPT4I = 1./PPTL(4,I)					      PPT4I = 1./PPTL(4,I)
      VV=PPTL(3,I)*PPT4I					      VV=PPTL(3,I)*PPT4I
      XO3=XORPTL(3,I)						      XO3=XORPTL(3,I)

      ZZ=XO3+(TI2-XO4)*VV					      ZZ=XO3+(TI2-XO4)*VV
      IF ( TTAUS .LE. 0.D0 ) THEN				      IF ( TTAUS .LE. 0.D0 ) THEN
        TZ=TTAUS						        TZ=TTAUS
      ELSE							      ELSE
        IF     ( ZZ .LE. ZZT ) THEN				        IF     ( ZZ .LE. ZZT ) THEN
          TZ=TTT+(ZZ-ZZT)*ZZT/TTT				          TZ=TTT+(ZZ-ZZT)*ZZT/TTT
        ELSEIF ( ZZ .GE. ZZP ) THEN				        ELSEIF ( ZZ .GE. ZZP ) THEN
          TZ=TTP+(ZZ-ZZP)*ZZP/TTP				          TZ=TTP+(ZZ-ZZP)*ZZP/TTP
        ELSE							        ELSE
          IF ( TTAUS .GE. AINFIN ) THEN				          IF ( TTAUS .GE. AINFIN ) THEN
            TZ=TTAUS						            TZ=TTAUS
            IF ( ISH .GE. 90 ) THEN				            IF ( ISH .GE. 90 ) THEN
              CALL UTMSG('UTTAIN')				              CALL UTMSG('UTTAIN')
              WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS'	              WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS'
              WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ		              WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
          ELSE							          ELSE
C*DH        TZ=SQRT(TTAUS**2+ZZ**2)				C*DH        TZ=SQRT(TTAUS**2+ZZ**2)
            IF ( TI2 .LT. 0.D0 ) GOTO 1002			            IF ( TI2 .LT. 0.D0 ) GOTO 1002
            IF ( TTAUS**2+ZZ**2 .GE. TI2**2 ) GOTO 1002		            IF ( TTAUS**2+ZZ**2 .GE. TI2**2 ) GOTO 1002
            GOTO 1006						            GOTO 1006
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( TZ .GE. TI2 ) GOTO 1002				      IF ( TZ .GE. TI2 ) GOTO 1002

 1006 ZZ=XO3+(TI1-XO4)*VV					 1006 ZZ=XO3+(TI1-XO4)*VV
      IF ( TTAUS .GT. 0.D0 ) THEN				      IF ( TTAUS .GT. 0.D0 ) THEN
        IF     ( ZZ .LE. ZZT ) THEN				        IF     ( ZZ .LE. ZZT ) THEN
          TZ=TTT+(ZZ-ZZT)*ZZT/TTT				          TZ=TTT+(ZZ-ZZT)*ZZT/TTT
        ELSEIF ( ZZ .GE. ZZP ) THEN				        ELSEIF ( ZZ .GE. ZZP ) THEN
          TZ=TTP+(ZZ-ZZP)*ZZP/TTP				          TZ=TTP+(ZZ-ZZP)*ZZP/TTP
        ELSE							        ELSE
          IF ( TTAUS .GE. AINFIN ) THEN				          IF ( TTAUS .GE. AINFIN ) THEN
            TZ=TTAUS						            TZ=TTAUS
            IF ( ISH .GE. 90 ) THEN				            IF ( ISH .GE. 90 ) THEN
              CALL UTMSG('UTTAIN')				              CALL UTMSG('UTTAIN')
              WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS'	              WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS'
              WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ		              WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
          ELSE							          ELSE
C*DH        TZ=SQRT(TTAUS**2+ZZ**2)				C*DH        TZ=SQRT(TTAUS**2+ZZ**2)
            IF ( TI1 .LT. 0.D0 ) GOTO 1007			            IF ( TI1 .LT. 0.D0 ) GOTO 1007
            IF ( TTAUS**2+ZZ**2 .LE. TI1**2 ) GOTO 1001		            IF ( TTAUS**2+ZZ**2 .LE. TI1**2 ) GOTO 1001
            GOTO 1007						            GOTO 1007
          ENDIF							          ENDIF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( TZ .LE. TI1 ) GOTO 1001				      IF ( TZ .LE. TI1 ) GOTO 1001

 1007 IF ( TTAUS .LE. 0.D0 ) THEN				 1007 IF ( TTAUS .LE. 0.D0 ) THEN
        TT=TTAUS						        TT=TTAUS
        ZZ=XO3+(TT-XO4)*VV					        ZZ=XO3+(TT-XO4)*VV
        IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1031		        IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1031
      ELSE							      ELSE
        ZZA=XO3-XO4*VV						        ZZA=XO3-XO4*VV
        VVT=ZZT/TTT						        VVT=ZZT/TTT
        TT=(TTT+(ZZA-ZZT)*VVT)/(1.D0-VV*VVT)			        TT=(TTT+(ZZA-ZZT)*VVT)/(1.D0-VV*VVT)
        ZZ=XO3+(TT-XO4)*VV					        ZZ=XO3+(TT-XO4)*VV
        IF ( ZZ .LE. ZZT ) THEN					        IF ( ZZ .LE. ZZT ) THEN
          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1032		          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1032
          GOTO 1000						          GOTO 1000
        ENDIF							        ENDIF
        VVP=ZZP/TTP						        VVP=ZZP/TTP
        TT=(TTP+(ZZA-ZZP)*VVP)/(1.D0-VV*VVP)			        TT=(TTP+(ZZA-ZZP)*VVP)/(1.D0-VV*VVP)
        ZZ=XO3+(TT-XO4)*VV					        ZZ=XO3+(TT-XO4)*VV
        IF ( ZZ .GE. ZZP ) THEN					        IF ( ZZ .GE. ZZP ) THEN
          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1033		          IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1033
          GOTO 1000						          GOTO 1000
        ENDIF							        ENDIF
        DD=1.D0-VV**2						        DD=1.D0-VV**2
        IF ( DD .EQ. 0.D0 ) THEN				        IF ( DD .EQ. 0.D0 ) THEN
          TT=-VV*(TTAUS**2+ZZA**2)*0.5D0/ZZA			          TT=-VV*(TTAUS**2+ZZA**2)*0.5D0/ZZA
        ELSE							        ELSE
          TT=(ZZA*VV+SQRT(ZZA**2+TTAUS**2*DD))/DD		          TT=(ZZA*VV+SQRT(ZZA**2+TTAUS**2*DD))/DD
        ENDIF							        ENDIF
        ZZ=XO3+(TT-XO4)*VV					        ZZ=XO3+(TT-XO4)*VV
        IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1034		        IF ( TT.LT.TI1 .OR. TT.GE.TI2 ) GOTO 1034
        IF ( TT .LT. 0.D0 ) GOTO 1035				        IF ( TT .LT. 0.D0 ) GOTO 1035
        IF ( ZZ.LE.ZZT .OR. ZZ.GE.ZZP ) GOTO 1004		        IF ( ZZ.LE.ZZT .OR. ZZ.GE.ZZP ) GOTO 1004
        IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ))			        IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ))
     *                         .GT. DERR*TTAUS**2 ) GOTO 1005	     *                         .GT. DERR*TTAUS**2 ) GOTO 1005
      ENDIF							      ENDIF

 1000 N=0							 1000 N=0
 1011 T=TT							 1011 T=TT
      Z=ZZ							      Z=ZZ
      X=XORPTL(1,I)+(T-XO4)*PPTL(1,I)*PPT4I			      X=XORPTL(1,I)+(T-XO4)*PPTL(1,I)*PPT4I
      Y=XORPTL(2,I)+(T-XO4)*PPTL(2,I)*PPT4I			      Y=XORPTL(2,I)+(T-XO4)*PPTL(2,I)*PPT4I
      RETURN							      RETURN
 1001 N=1							 1001 N=1
      RETURN							      RETURN
 1002 N=2							 1002 N=2
      RETURN							      RETURN
 1031 N=31							 1031 N=31
      GOTO 1003							      GOTO 1003

 1032 N=32							 1032 N=32
      GOTO 1003							      GOTO 1003
 1033 N=33							 1033 N=33
      GOTO 1003							      GOTO 1003
 1034 N=34							 1034 N=34
 1003 IF ( ABS(TT-TI1) .LE. DERR*ABS(TT) ) GOTO 1000		 1003 IF ( ABS(TT-TI1) .LE. DERR*ABS(TT) ) GOTO 1000
      IF ( ABS(TT-TI2) .LE. DERR*ABS(TT) ) GOTO 1000		      IF ( ABS(TT-TI2) .LE. DERR*ABS(TT) ) GOTO 1000
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('UTTAIN')					        CALL UTMSG('UTTAIN')
        WRITE(IFCH,*)'*****  TI1 < TT < TI2   NOT FULFILLED -	        WRITE(IFCH,*)'*****  TI1 < TT < TI2   NOT FULFILLED -
        WRITE(IFCH,*)SNGL(TI1),SNGL(TT),SNGL(TI2)		        WRITE(IFCH,*)SNGL(TI1),SNGL(TT),SNGL(TI2)
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 1011							      GOTO 1011
 1035 CONTINUE							 1035 CONTINUE
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('UTTAIN')					        CALL UTMSG('UTTAIN')
        WRITE(IFCH,*)'*****  TT < 0     ( ',TT,' )'		        WRITE(IFCH,*)'*****  TT < 0     ( ',TT,' )'
        WRITE(IFCH,*)'VV,DD:',VV,DD				        WRITE(IFCH,*)'VV,DD:',VV,DD
        WRITE(IFCH,*)'ZZA,TTAUS:',ZZA,TTAUS			        WRITE(IFCH,*)'ZZA,TTAUS:',ZZA,TTAUS
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 1011							      GOTO 1011
 1004 N=4							 1004 N=4
      IF ( ABS(ZZ-ZZT) .LE. DERR*ABS(ZZ) ) GOTO 1000		      IF ( ABS(ZZ-ZZT) .LE. DERR*ABS(ZZ) ) GOTO 1000
      IF ( ABS(ZZ-ZZP) .LE. DERR*ABS(ZZ) ) GOTO 1000		      IF ( ABS(ZZ-ZZP) .LE. DERR*ABS(ZZ) ) GOTO 1000
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('UTTAIN')					        CALL UTMSG('UTTAIN')
        WRITE(IFCH,*)'*****  ZZT < ZZ < ZZP   NOT FULFILLED'	        WRITE(IFCH,*)'*****  ZZT < ZZ < ZZP   NOT FULFILLED'
        WRITE(IFCH,*)SNGL(ZZT),SNGL(ZZ),SNGL(ZZP)		        WRITE(IFCH,*)SNGL(ZZT),SNGL(ZZ),SNGL(ZZP)
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 1011							      GOTO 1011
 1005 N=5							 1005 N=5
      IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ)) .LE. DERR ) GOTO 100	      IF ( ABS(TTAUS**2-(TT+ZZ)*(TT-ZZ)) .LE. DERR ) GOTO 100
      IF ( ISH .GE. 90 ) THEN					      IF ( ISH .GE. 90 ) THEN
        CALL UTMSG('UTTAIN')					        CALL UTMSG('UTTAIN')
        WRITE(IFCH,*)'*****  TTAUS**2 .NE. (TT+ZZ)*(TT-ZZ)'	        WRITE(IFCH,*)'*****  TTAUS**2 .NE. (TT+ZZ)*(TT-ZZ)'
        WRITE(IFCH,*)SNGL(TTAUS**2),SNGL((TT+ZZ)*(TT-ZZ))	        WRITE(IFCH,*)SNGL(TTAUS**2),SNGL((TT+ZZ)*(TT-ZZ))
        CALL UTMSGF						        CALL UTMSGF
      ENDIF							      ENDIF
      GOTO 1011							      GOTO 1011
 1009 N=9							 1009 N=9
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTTAIX(I,TAU,ZOR,TOR,Z,T)			      SUBROUTINE UTTAIX(I,TAU,ZOR,TOR,Z,T)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS INTERSECTION Z,T OF PTL-I-TRAJECTORY WITH HYPERBOL	C  RETURNS INTERSECTION Z,T OF PTL-I-TRAJECTORY WITH HYPERBOL
C     H: (T-TOR)**2-(Z-ZOR)**2=TAU**2 .				C     H: (T-TOR)**2-(Z-ZOR)**2=TAU**2 .
C     ZOR, TOR DOUBLE PRECISION.				C     ZOR, TOR DOUBLE PRECISION.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (MXPTL=70000)					      PARAMETER (MXPTL=70000)
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4	      COMMON /CPTL/    PPTL(5,MXPTL),TIVPTL(2,MXPTL),XORPTL(4
     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP	     *                ,IBPTL(4,MXPTL),ICLPTL(MXPTL),IDPTL(MXP
     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M	     *                ,IFRPTL(2,MXPTL),IORPTL(MXPTL),ISTPTL(M
     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)		     *                ,JORPTL(MXPTL),NPTL,NQJPTL(MXPTL)

      DOUBLE PRECISION CC,DD,DERR,TOR,TORS,TT,TTAU,VV,ZOR,ZOR	      DOUBLE PRECISION CC,DD,DERR,TOR,TORS,TT,TTAU,VV,ZOR,ZOR
C------------------------------------------------------------	C------------------------------------------------------------
      DERR=1.D-3						      DERR=1.D-3
      TTAU=TAU							      TTAU=TAU
      ZORS=XORPTL(3,I)-ZOR					      ZORS=XORPTL(3,I)-ZOR
      TORS=XORPTL(4,I)-TOR					      TORS=XORPTL(4,I)-TOR
      VV=PPTL(3,I)/PPTL(4,I)					      VV=PPTL(3,I)/PPTL(4,I)
      IF ( ABS(VV) .GT. 1.D0 ) THEN				      IF ( ABS(VV) .GT. 1.D0 ) THEN
        IF ( ISH.GE.90 .AND. ABS(VV).GT.1.001D0 ) THEN		        IF ( ISH.GE.90 .AND. ABS(VV).GT.1.001D0 ) THEN
          CALL UTMSG('UTTAIX')					          CALL UTMSG('UTTAIX')
          WRITE(IFCH,*)'*****  !V! > 1'				          WRITE(IFCH,*)'*****  !V! > 1'
          WRITE(IFCH,*)'V: ',VV					          WRITE(IFCH,*)'V: ',VV
          WRITE(IFCH,*)'P,E: ',PPTL(3,I),PPTL(4,I)		          WRITE(IFCH,*)'P,E: ',PPTL(3,I),PPTL(4,I)
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
        VV=SIGN(1.D0,VV)					        VV=SIGN(1.D0,VV)
      ENDIF							      ENDIF
      CC=ZORS-TORS*VV						      CC=ZORS-TORS*VV
      DD=1.D0-VV**2						      DD=1.D0-VV**2
      IF     ( DD.EQ.0.D0 .AND. CC.EQ.0.D0 ) THEN		      IF     ( DD.EQ.0.D0 .AND. CC.EQ.0.D0 ) THEN
        IF ( TAU .EQ. 0. ) THEN					        IF ( TAU .EQ. 0. ) THEN
          TT=0.							          TT=0.
        ELSE							        ELSE
          TT=AINFIN						          TT=AINFIN
        ENDIF							        ENDIF
        ZZ=TT							        ZZ=TT
        GOTO 1000						        GOTO 1000
      ELSEIF ( DD .EQ. 0.D0 ) THEN				      ELSEIF ( DD .EQ. 0.D0 ) THEN
        TT=-(TTAU**2+CC**2)*0.5D0/(CC*VV)			        TT=-(TTAU**2+CC**2)*0.5D0/(CC*VV)
      ELSEIF ( DD .LT. 1.D-8 ) THEN				      ELSEIF ( DD .LT. 1.D-8 ) THEN
        TT=-(TTAU**2+CC**2)*0.5D0/(CC*VV)			        TT=-(TTAU**2+CC**2)*0.5D0/(CC*VV)
        IF(ISH.GE.90)THEN					        IF(ISH.GE.90)THEN
          CALL UTMSG('UTTAIX')					          CALL UTMSG('UTTAIX')
          WRITE(IFCH,*)'*****  DD = ',DD,'    TREATED AS ZERO	          WRITE(IFCH,*)'*****  DD = ',DD,'    TREATED AS ZERO
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ELSE							      ELSE
        TT=(CC*VV+SQRT(CC**2+TTAU**2*DD))/DD			        TT=(CC*VV+SQRT(CC**2+TTAU**2*DD))/DD
      ENDIF							      ENDIF
      ZZ=CC+TT*VV						      ZZ=CC+TT*VV
      IF ( ABS(TTAU**2-(TT+ZZ)*(TT-ZZ)) .GT. DERR*TTAU**2   .	      IF ( ABS(TTAU**2-(TT+ZZ)*(TT-ZZ)) .GT. DERR*TTAU**2   .
     *     ABS(TTAU**2-(TT+ZZ)*(TT-ZZ)) .GT. DERR           .	     *     ABS(TTAU**2-(TT+ZZ)*(TT-ZZ)) .GT. DERR           .
     *     TORS**2-ZORS**2 .LT. 1.D6                 ) THEN	     *     TORS**2-ZORS**2 .LT. 1.D6                 ) THEN
        IF ( ISH .GE. 90 ) THEN					        IF ( ISH .GE. 90 ) THEN
          CALL UTMSG('UTTAIX')					          CALL UTMSG('UTTAIX')
          WRITE(IFCH,*)'*****  TTAU**2 .NE. (TT+ZZ)*(TT-ZZ)'	          WRITE(IFCH,*)'*****  TTAU**2 .NE. (TT+ZZ)*(TT-ZZ)'
          WRITE(IFCH,*)SNGL(TTAU**2),SNGL((TT+ZZ)*(TT-ZZ))	          WRITE(IFCH,*)SNGL(TTAU**2),SNGL((TT+ZZ)*(TT-ZZ))
          WRITE(IFCH,*)'TAU,T,Z:'				          WRITE(IFCH,*)'TAU,T,Z:'
          WRITE(IFCH,*)TAU,TT,ZZ				          WRITE(IFCH,*)TAU,TT,ZZ
          WRITE(IFCH,*)'#,ID(PTL):',I,IDPTL(I)			          WRITE(IFCH,*)'#,ID(PTL):',I,IDPTL(I)
          WRITE(IFCH,*)'ZOR,TOR(STR):',ZOR,TOR			          WRITE(IFCH,*)'ZOR,TOR(STR):',ZOR,TOR
          WRITE(IFCH,*)'ZORS,TORS,P,E(PTL):'			          WRITE(IFCH,*)'ZORS,TORS,P,E(PTL):'
          WRITE(IFCH,*)SNGL(ZORS),SNGL(TORS),PPTL(3,I),PPTL(4	          WRITE(IFCH,*)SNGL(ZORS),SNGL(TORS),PPTL(3,I),PPTL(4
          CALL UTMSGF						          CALL UTMSGF
        ENDIF							        ENDIF
      ENDIF							      ENDIF
1000  Z=ZZ+ZOR							1000  Z=ZZ+ZOR
      T=TT+TOR							      T=TT+TOR
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTTAUS(Z,SZ)					      SUBROUTINE UTTAUS(Z,SZ)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS INV Z-COORD SZ CORRESPONDING TO TTAUS AND Z.		C  RETURNS INV Z-COORD SZ CORRESPONDING TO TTAUS AND Z.
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION ZZ					      DOUBLE PRECISION ZZ
C------------------------------------------------------------	C------------------------------------------------------------
      IF ( TTAUS .LE. 0.D0 ) THEN				      IF ( TTAUS .LE. 0.D0 ) THEN
        SZ=Z							        SZ=Z
        RETURN							        RETURN
      ENDIF							      ENDIF
      ZZ=Z							      ZZ=Z
      IF     ( ZZ .LE. ZZT ) THEN				      IF     ( ZZ .LE. ZZT ) THEN
        SZ=TTAUS*DETAT+(ZZ-ZZT)/TTAR				        SZ=TTAUS*DETAT+(ZZ-ZZT)/TTAR
      ELSEIF ( ZZ .GE. ZZP ) THEN				      ELSEIF ( ZZ .GE. ZZP ) THEN
        SZ=TTAUS*DETAP+(ZZ-ZZP)/TPRO				        SZ=TTAUS*DETAP+(ZZ-ZZP)/TPRO
      ELSE							      ELSE
        IF ( SNGL(TTAUS) .GE. AINFIN ) THEN			        IF ( SNGL(TTAUS) .GE. AINFIN ) THEN
          SZ=0.							          SZ=0.
          IF ( ISH .GE. 90 ) THEN				          IF ( ISH .GE. 90 ) THEN
            CALL UTMSG('UTTAUS')				            CALL UTMSG('UTTAUS')
            WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS, S	            WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS, S
            WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ		            WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
        ELSE							        ELSE
          TZ=SQRT(TTAUS**2+ZZ**2)				          TZ=SQRT(TTAUS**2+ZZ**2)
          SZ=TTAUS*0.5D0*LOG((TZ+ZZ)/(TZ-ZZ))			          SZ=TTAUS*0.5D0*LOG((TZ+ZZ)/(TZ-ZZ))
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================

      SUBROUTINE UTTAUT(Z,TZ)					      SUBROUTINE UTTAUT(Z,TZ)

C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS TZ = TIME    CORRESPONDING TO TTAUS AND Z		C  RETURNS TZ = TIME    CORRESPONDING TO TTAUS AND Z
C------------------------------------------------------------	C------------------------------------------------------------
      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM			      COMMON /CNSTA/   AINFIN,PI,PIOM,PROM
      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      DOUBLE PRECISION DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT	      COMMON /CTTAUS/  DETAP,DETAT,TPRO,TTAR,TTAUS,TTP,TTT
     *                ,ZPRO,ZTAR,ZZP,ZZT			     *                ,ZPRO,ZTAR,ZZP,ZZT
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT
      DOUBLE PRECISION ZZ					      DOUBLE PRECISION ZZ
C------------------------------------------------------------	C------------------------------------------------------------
      ZZ=Z							      ZZ=Z
      IF     ( ZZ .LE. ZZT ) THEN				      IF     ( ZZ .LE. ZZT ) THEN
        TZ=TTT+(ZZ-ZZT)*ZZT/TTT					        TZ=TTT+(ZZ-ZZT)*ZZT/TTT
      ELSEIF ( ZZ .GE. ZZP ) THEN				      ELSEIF ( ZZ .GE. ZZP ) THEN
        TZ=TTP+(ZZ-ZZP)*ZZP/TTP					        TZ=TTP+(ZZ-ZZP)*ZZP/TTP
      ELSE							      ELSE
        IF ( TTAUS .GE. AINFIN ) THEN				        IF ( TTAUS .GE. AINFIN ) THEN
          TZ=TTAUS						          TZ=TTAUS
          IF ( ISH .GE. 90 ) THEN				          IF ( ISH .GE. 90 ) THEN
            CALL UTMSG('UTTAUT')				            CALL UTMSG('UTTAUT')
            WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS'	            WRITE(IFCH,*)'*****  LARGE TTAUS; SET TZ=TTAUS'
            WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ		            WRITE(IFCH,*)'TTAUS=',TTAUS,'ZZ=',ZZ
            CALL UTMSGF						            CALL UTMSGF
          ENDIF							          ENDIF
        ELSE							        ELSE
          TZ=SQRT(TTAUS**2+ZZ**2)				          TZ=SQRT(TTAUS**2+ZZ**2)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      RETURN							      RETURN
      END							      END
C============================================================	C============================================================
C								C
C     SUBROUTINE UTTIMA(TEXT)					C     SUBROUTINE UTTIMA(TEXT)
C								C
C------------------------------------------------------------	C------------------------------------------------------------
C  RETURNS TIME.						C  RETURNS TIME.
C------------------------------------------------------------	C------------------------------------------------------------
C     COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			C     COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
C     COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	C     COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
C    *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	C    *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
C    *                ,YHAHA,YMXIMI,YPJTL			C    *                ,YHAHA,YMXIMI,YPJTL
C    *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	C    *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
C    *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	C    *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
C    *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	C    *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
C    *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	C    *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
C    *                ,MODSHO,NDECAX,NDECAY,NEVENT		C    *                ,MODSHO,NDECAX,NDECAY,NEVENT
C     CHARACTER*15 TEXT						C     CHARACTER*15 TEXT
C------------------------------------------------------------	C------------------------------------------------------------
C     TIMAA=0.							C     TIMAA=0.
C     TIMA=0.							C     TIMA=0.
C-C   CALL TIMAX(TIMAA)						C-C   CALL TIMAX(TIMAA)
C-C   CALL TIMAD(TIMA)						C-C   CALL TIMAD(TIMA)
C     IF ( TEXT .EQ. '               ' ) RETURN			C     IF ( TEXT .EQ. '               ' ) RETURN
C     IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '			C     IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '
C     WRITE(IFCH,100)TEXT,TIMA/5.,TIMAA/5.			C     WRITE(IFCH,100)TEXT,TIMA/5.,TIMAA/5.
C     IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '			C     IF ( ISH .GE. 91 ) WRITE(IFCH,*)' '
C100  FORMAT(1X,A15,5X,F12.5,5X,F12.5)				C100  FORMAT(1X,A15,5X,F12.5,5X,F12.5)
C     RETURN							C     RETURN
C     END							C     END
C=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-	C=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
C								C
C     ENTRY UTTIMT						C     ENTRY UTTIMT
C								C
C------------------------------------------------------------	C------------------------------------------------------------
C-C   CALL TIMAST(1E10)						C-C   CALL TIMAST(1E10)
C     RETURN							C     RETURN
C=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-	C=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
C								C
C     ENTRY UTTIMX(TIMAAX)					C     ENTRY UTTIMX(TIMAAX)
C								C
C------------------------------------------------------------	C------------------------------------------------------------
C     TIMAAX=0.							C     TIMAAX=0.
C-C   CALL TIMAX(TIMAAX)					C-C   CALL TIMAX(TIMAAX)
C     RETURN							C     RETURN
C     END							C     END
C============================================================	C============================================================

      SUBROUTINE UTTUCL						      SUBROUTINE UTTUCL

C------------------------------------------------------------	C------------------------------------------------------------
C  FILLS ARRAY TUCL(1+K,1+N) CONTAINING THE LOGARITHM (LN) OF	C  FILLS ARRAY TUCL(1+K,1+N) CONTAINING THE LOGARITHM (LN) OF
C  THE NUMBER OF K-TUPELS N_I WITH SUM_I N_I = N:		C  THE NUMBER OF K-TUPELS N_I WITH SUM_I N_I = N:
C    TUCL(1+K,1+N)=LOG((N+1)*(N+2)...*(N+K-1)/(K-1)!)  K>=0 N	C    TUCL(1+K,1+N)=LOG((N+1)*(N+2)...*(N+K-1)/(K-1)!)  K>=0 N
C  DOUBLE PRECISION TUCL.					C  DOUBLE PRECISION TUCL.
C------------------------------------------------------------	C------------------------------------------------------------
      PARAMETER (KTUMAX=100)					      PARAMETER (KTUMAX=100)
      PARAMETER (NTUMAX=100)					      PARAMETER (NTUMAX=100)
      DOUBLE PRECISION TUCL					      DOUBLE PRECISION TUCL
      COMMON /CTUCL/   TUCL(1+KTUMAX,1+NTUMAX)			      COMMON /CTUCL/   TUCL(1+KTUMAX,1+NTUMAX)
      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP			      COMMON /FILES/   IFCH,IFDT,IFHI,IFMT,IFOP
      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG	      COMMON /PARO2/   AMPROJ,AMTARG,ANGMUE,ELEPTI,ELEPTO,ENG
     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR	     *                ,PNLL,PNLLX,PROB(99),PROSEA,RHOPHI,TAUR
     *                ,YHAHA,YMXIMI,YPJTL			     *                ,YHAHA,YMXIMI,YPJTL
     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,	     *                ,ICBAC(99,2),ICFOR(99,2),ICHOIC,ICLHIS,
     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA	     *                ,IDPROJ,IDTARG,IENTRO,IJPHIS,IMIHIS,IPA
     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU	     *                ,ISHEVT,ISHSUB,ISPALL,ISPHIS,ISTMAX,ISU
     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO	     *                ,JPSI,JPSIFI,KUTDIQ,LAPROJ,LATARG,MAPRO
     *                ,MODSHO,NDECAX,NDECAY,NEVENT		     *                ,MODSHO,NDECAX,NDECAY,NEVENT

      DOUBLE PRECISION DD,RELERR				      DOUBLE PRECISION DD,RELERR
C------------------------------------------------------------	C------------------------------------------------------------
      TUCL(1,1)=-100.D0						      TUCL(1,1)=-100.D0
      TUCL(2,1)=0.D0						      TUCL(2,1)=0.D0
      DO 7 K=2,KTUMAX						      DO 7 K=2,KTUMAX
        TUCL(1+K,1)=0.D0					        TUCL(1+K,1)=0.D0
 7    CONTINUE							 7    CONTINUE
      DO 2 N=2,NTUMAX+1						      DO 2 N=2,NTUMAX+1
        TUCL(1,N)=-100.D0					        TUCL(1,N)=-100.D0
        TUCL(2,N)=0.D0						        TUCL(2,N)=0.D0
        DO 1 K=2,KTUMAX						        DO 1 K=2,KTUMAX
          DD=(N+K-2.D0)/(K-1.D0)				          DD=(N+K-2.D0)/(K-1.D0)
          TUCL(1+K,N)=TUCL(K,N)+LOG(DD)				          TUCL(1+K,N)=TUCL(K,N)+LOG(DD)
 1      CONTINUE						 1      CONTINUE
 2    CONTINUE							 2    CONTINUE

      IF ( ISH .GE. 93 ) THEN					      IF ( ISH .GE. 93 ) THEN
        DO 5 K=2,50						        DO 5 K=2,50
          DO 4 N=1,50						          DO 4 N=1,50
            RELERR=ABS((EXP(TUCL(1+K,1+N))-EXP(TUCL(1+K,N))	            RELERR=ABS((EXP(TUCL(1+K,1+N))-EXP(TUCL(1+K,N))
     *                  -EXP(TUCL(K,1+N)))/EXP(TUCL(1+K,1+N))	     *                  -EXP(TUCL(K,1+N)))/EXP(TUCL(1+K,1+N))
            IF ( RELERR .GT. 1.D-4 ) THEN			            IF ( RELERR .GT. 1.D-4 ) THEN
              CALL UTMSG('UTTUCL')				              CALL UTMSG('UTTUCL')
              WRITE(IFCH,*)'*****  TUCL(,) VIOLATES RECURRENC	              WRITE(IFCH,*)'*****  TUCL(,) VIOLATES RECURRENC
              WRITE(IFCH,*)SNGL(EXP(TUCL(1+K,1+N)))		              WRITE(IFCH,*)SNGL(EXP(TUCL(1+K,1+N)))
     *                    ,SNGL(EXP(TUCL(1+K,N))+EXP(TUCL(K,1	     *                    ,SNGL(EXP(TUCL(1+K,N))+EXP(TUCL(K,1
              CALL UTMSGF					              CALL UTMSGF
            ENDIF						            ENDIF
 4        CONTINUE						 4        CONTINUE
 5      CONTINUE						 5      CONTINUE
        WRITE(IFCH,*)' '					        WRITE(IFCH,*)' '
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
121     FORMAT(1X,79A1)						121     FORMAT(1X,79A1)
        WRITE(IFCH,*)'   DEGENERACY OF ENERGY LEVELS OF K-DIM	        WRITE(IFCH,*)'   DEGENERACY OF ENERGY LEVELS OF K-DIM
     *              ,' OSCILLATOR'				     *              ,' OSCILLATOR'
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   =='					        WRITE(IFCH,*)'   =='
     *          ,'     NUMBER OF K-TUPELS OF LENGTH N (SUM_I 	     *          ,'     NUMBER OF K-TUPELS OF LENGTH N (SUM_I 
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        WRITE(IFCH,*)'   K:','   1','   2','   3','   4'	        WRITE(IFCH,*)'   K:','   1','   2','   3','   4'
        WRITE(IFCH,121)('-',IC=1,79)				        WRITE(IFCH,121)('-',IC=1,79)
        DO 8 N=0,50						        DO 8 N=0,50
          WRITE(IFCH,*)N,(SNGL(EXP( TUCL(1+K,1+N) )),K=1,4)	          WRITE(IFCH,*)N,(SNGL(EXP( TUCL(1+K,1+N) )),K=1,4)
 8      CONTINUE						 8      CONTINUE
      ENDIF							      ENDIF

      RETURN							      RETURN
      END							      END
