      SUBROUTINE DIFRAC( NRETFL )				      SUBROUTINE DIFRAC( NRETFL )
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  (SINGLE) DIF(F)RAC(TION)					C  (SINGLE) DIF(F)RAC(TION)
C								C
C  SETS PARAMETERS FOR HDPM IN CASE OF SINGLE DIFFRACTION	C  SETS PARAMETERS FOR HDPM IN CASE OF SINGLE DIFFRACTION
C  THIS SUBROUTINE IS CALLED FROM HDPM				C  THIS SUBROUTINE IS CALLED FROM HDPM
C  ARGUMENT:							C  ARGUMENT:
C   NRETFL = 0  CORRECT ENDING OF SUBROUTINE			C   NRETFL = 0  CORRECT ENDING OF SUBROUTINE
C          = 1  INCORRECT ENDING OF SUBROUTINE			C          = 1  INCORRECT ENDING OF SUBROUTINE
C------------------------------------------------------------	C------------------------------------------------------------
 								 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)			      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
*KEEP,DPMFLG.							*KEEP,DPMFLG.
      COMMON /DPMFLG/  NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR	      COMMON /DPMFLG/  NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR
      INTEGER          NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR	      INTEGER          NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR
*KEEP,INTER.							*KEEP,INTER.
      COMMON /INTER/   AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP	      COMMON /INTER/   AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP
     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN	     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN
     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG	     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG
     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN,	     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN,
     *                 IDIF,ITAR				     *                 IDIF,ITAR
      DOUBLE PRECISION AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP	      DOUBLE PRECISION AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP
     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN	     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN
     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG	     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG
     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN	     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN
      INTEGER          IDIF,ITAR				      INTEGER          IDIF,ITAR
*KEEP,LEPAR.							*KEEP,LEPAR.
      COMMON /LEPAR/   LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP	      COMMON /LEPAR/   LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP
      INTEGER          LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP	      INTEGER          LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP
*KEEP,PAM.							*KEEP,PAM.
      COMMON /PAM/     PAMA,SIGNUM				      COMMON /PAM/     PAMA,SIGNUM
      DOUBLE PRECISION PAMA(6000),SIGNUM(6000)			      DOUBLE PRECISION PAMA(6000),SIGNUM(6000)
*KEEP,PARPAR.							*KEEP,PARPAR.
      COMMON /PARPAR/  CURPAR,SECPAR,PRMPAR,OUTPAR,C,		      COMMON /PARPAR/  CURPAR,SECPAR,PRMPAR,OUTPAR,C,
     *                 E00,E00PN,PTOT0,PTOT0N,THICKH,ITYPE,LE	     *                 E00,E00PN,PTOT0,PTOT0N,THICKH,ITYPE,LE
      DOUBLE PRECISION CURPAR(14),SECPAR(14),PRMPAR(14),OUTPA	      DOUBLE PRECISION CURPAR(14),SECPAR(14),PRMPAR(14),OUTPA
     *                 C(50),E00,E00PN,PTOT0,PTOT0N,THICKH	     *                 C(50),E00,E00PN,PTOT0,PTOT0N,THICKH
      INTEGER          ITYPE,LEVL				      INTEGER          ITYPE,LEVL
*KEEP,PARPAE.							*KEEP,PARPAE.
      DOUBLE PRECISION GAMMA,COSTHE,PHI,H,T,X,Y,CHI,BETA,GCM,	      DOUBLE PRECISION GAMMA,COSTHE,PHI,H,T,X,Y,CHI,BETA,GCM,
      EQUIVALENCE      (CURPAR(2),GAMMA),  (CURPAR(3),COSTHE)	      EQUIVALENCE      (CURPAR(2),GAMMA),  (CURPAR(3),COSTHE)
     *                 (CURPAR(4), PHI ),  (CURPAR(5), H    )	     *                 (CURPAR(4), PHI ),  (CURPAR(5), H    )
     *                 (CURPAR(6), T   ),  (CURPAR(7), X    )	     *                 (CURPAR(6), T   ),  (CURPAR(7), X    )
     *                 (CURPAR(8), Y   ),  (CURPAR(9), CHI  )	     *                 (CURPAR(8), Y   ),  (CURPAR(9), CHI  )
     *                 (CURPAR(10),BETA),  (CURPAR(11),GCM  )	     *                 (CURPAR(10),BETA),  (CURPAR(11),GCM  )
     *                 (CURPAR(12),ECM )			     *                 (CURPAR(12),ECM )
*KEEP,RANDPA.							*KEEP,RANDPA.
      COMMON /RANDPA/  FAC,U1,U2,RD,NSEQ,ISEED,KNOR		      COMMON /RANDPA/  FAC,U1,U2,RD,NSEQ,ISEED,KNOR
      DOUBLE PRECISION FAC,U1,U2				      DOUBLE PRECISION FAC,U1,U2
      REAL             RD(3000)					      REAL             RD(3000)
      INTEGER          ISEED(103,10),NSEQ			      INTEGER          ISEED(103,10),NSEQ
      LOGICAL          KNOR					      LOGICAL          KNOR
*KEEP,REST.							*KEEP,REST.
      COMMON /REST/    CONTNE,TAR,LT				      COMMON /REST/    CONTNE,TAR,LT
      DOUBLE PRECISION CONTNE(3),TAR				      DOUBLE PRECISION CONTNE(3),TAR
      INTEGER          LT					      INTEGER          LT
*KEEP,RUNPAR.							*KEEP,RUNPAR.
      COMMON /RUNPAR/  FIXHEI,THICK0,HILOECM,HILOELB,		      COMMON /RUNPAR/  FIXHEI,THICK0,HILOECM,HILOELB,
     *                 STEPFC,NRRUN,NSHOW,PATAPE,MONIIN,	     *                 STEPFC,NRRUN,NSHOW,PATAPE,MONIIN,
     *                 MONIOU,MDEBUG,NUCNUC,			     *                 MONIOU,MDEBUG,NUCNUC,
     *                 CETAPE,					     *                 CETAPE,
     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,	     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,
     *                 N1STTR,MDBASE,				     *                 N1STTR,MDBASE,
     *                 DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC	     *                 DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC
     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE		     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE
     *                ,GHEISH,GHESIG				     *                ,GHEISH,GHESIG
      COMMON /RUNPAC/  DSN,HOST,USER				      COMMON /RUNPAC/  DSN,HOST,USER
      DOUBLE PRECISION FIXHEI,THICK0,HILOECM,HILOELB		      DOUBLE PRECISION FIXHEI,THICK0,HILOECM,HILOELB
      REAL             STEPFC					      REAL             STEPFC
      INTEGER          NRRUN,NSHOW,PATAPE,MONIIN,MONIOU,MDEBU	      INTEGER          NRRUN,NSHOW,PATAPE,MONIIN,MONIOU,MDEBU
     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,	     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,
     *                 N1STTR,MDBASE				     *                 N1STTR,MDBASE
      INTEGER          CETAPE					      INTEGER          CETAPE
      CHARACTER*79     DSN					      CHARACTER*79     DSN
      CHARACTER*20     HOST,USER				      CHARACTER*20     HOST,USER
 								 
      LOGICAL          DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC	      LOGICAL          DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC
     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE		     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE
     *                ,GHEISH,GHESIG				     *                ,GHEISH,GHESIG
*KEND.								*KEND.
 								 
C------------------------------------------------------------	C------------------------------------------------------------
 								 
      IF ( DEBUG ) WRITE(MDEBUG,*) 'DIFRAC:'			      IF ( DEBUG ) WRITE(MDEBUG,*) 'DIFRAC:'
 								 
C  DECIDE FIRST, WHETHER PROJECTILE OR TARGET DIFFRACTION	C  DECIDE FIRST, WHETHER PROJECTILE OR TARGET DIFFRACTION
      CALL RMMAR( RD,1,1 )					      CALL RMMAR( RD,1,1 )
      IF ( RD(1) .LE. 0.5 ) THEN				      IF ( RD(1) .LE. 0.5 ) THEN
C  PROJECTILE DIFFRACTON, TARGET DIFFRACTION FLAG IS NOT SET	C  PROJECTILE DIFFRACTON, TARGET DIFFRACTION FLAG IS NOT SET
        NFTARD = 0						        NFTARD = 0
C  MASS OF INCOMING PARTICLE AND PI(0) MASS			C  MASS OF INCOMING PARTICLE AND PI(0) MASS
C  PI(0) IS MINIMAL OUTCOME OF SECONDARIES IN DIFRAC		C  PI(0) IS MINIMAL OUTCOME OF SECONDARIES IN DIFRAC
        XM0    = ( PAMA(LEPAR1) + PAMA(7) )**2			        XM0    = ( PAMA(LEPAR1) + PAMA(7) )**2
      ELSE							      ELSE
C  TARGET DIFFRACTON, SET TARGET DIFFRACTION FLAG		C  TARGET DIFFRACTON, SET TARGET DIFFRACTION FLAG
        NFTARD = 1						        NFTARD = 1
C  MASS OF NUCLEON AND PI(0) MASS				C  MASS OF NUCLEON AND PI(0) MASS
C  PI(0) IS MINIMAL OUTCOME OF SECONDARIES IN DIFRAC		C  PI(0) IS MINIMAL OUTCOME OF SECONDARIES IN DIFRAC
        XM0    = ( PAMA(LEPAR2) + PAMA(7) )**2			        XM0    = ( PAMA(LEPAR2) + PAMA(7) )**2
      ENDIF							      ENDIF
C  MAXIMAL DIFFRACTIVE MASS, FACTOR 0.15 GIVEN BY COHERENCE C	C  MAXIMAL DIFFRACTIVE MASS, FACTOR 0.15 GIVEN BY COHERENCE C
      XMX    = 0.15D0 * S					      XMX    = 0.15D0 * S
 								 
C  THROW MAXIMAL 200 TIMES TO GET A GOOD DIFFRACTIVE MASS	C  THROW MAXIMAL 200 TIMES TO GET A GOOD DIFFRACTIVE MASS
      NCDIFL = 0						      NCDIFL = 0
  7   CONTINUE							  7   CONTINUE
C  GET DIFFRACTIVE MASS						C  GET DIFFRACTIVE MASS
      CALL RMMAR( RD,2,1 )					      CALL RMMAR( RD,2,1 )
C  GET S (=ECM**2) (WHY THIS WAY OF THROWING ???)		C  GET S (=ECM**2) (WHY THIS WAY OF THROWING ???)
      SDIF = (XMX/XM0)**RD(1) * XM0				      SDIF = (XMX/XM0)**RD(1) * XM0
 								 
      IF ( SDIF .LE. XM0 ) THEN					      IF ( SDIF .LE. XM0 ) THEN
        IF ( NCDIFL .LE. 200 ) THEN				        IF ( NCDIFL .LE. 200 ) THEN
          NCDIFL = NCDIFL + 1					          NCDIFL = NCDIFL + 1
          GOTO 7						          GOTO 7
        ELSE							        ELSE
C  SET RETURN FLAG TO ERROR					C  SET RETURN FLAG TO ERROR
          NRETFL = 1						          NRETFL = 1
          RETURN						          RETURN
        ENDIF							        ENDIF
      ENDIF							      ENDIF
 								 
C  DISTRIBUTION OF DIFFRACTIVE MASS FLATTENS OFF FOR DIFFRACT	C  DISTRIBUTION OF DIFFRACTIVE MASS FLATTENS OFF FOR DIFFRACT
C  MASS SQUARED .LE. 2 GEV					C  MASS SQUARED .LE. 2 GEV
      IF ( SDIF .LE. 2.D0 ) THEN				      IF ( SDIF .LE. 2.D0 ) THEN
C----- SO GEHT DAS NICHT!!   16.12.91 D.H.			C----- SO GEHT DAS NICHT!!   16.12.91 D.H.
        SDIF = RD(2) * (2.D0 - XM0) + XM0			        SDIF = RD(2) * (2.D0 - XM0) + XM0
      ENDIF							      ENDIF
C  SQRT(S) IS ECM						C  SQRT(S) IS ECM
      ECMDIF = SQRT(SDIF)					      ECMDIF = SQRT(SDIF)
C  LOG(S), LOG(S)**2						C  LOG(S), LOG(S)**2
      DLOG   = LOG(SDIF)					      DLOG   = LOG(SDIF)
      DLOGSQ = DLOG**2						      DLOGSQ = DLOG**2
      IF ( DEBUG ) WRITE(MDEBUG,*) 'DIFRAC: SDIF,ECMDIF,NFTAR	      IF ( DEBUG ) WRITE(MDEBUG,*) 'DIFRAC: SDIF,ECMDIF,NFTAR
     *               SNGL(SDIF),SNGL(ECMDIF),NFTARD		     *               SNGL(SDIF),SNGL(ECMDIF),NFTARD
 								 
C  RAPIDITY IN CMS OF DIFFRACTIVE SYSTEM			C  RAPIDITY IN CMS OF DIFFRACTIVE SYSTEM
C  TO CALCULATE DMLOG, SUBTRACT SUM OF MASS SQUARES FROM SDIF	C  TO CALCULATE DMLOG, SUBTRACT SUM OF MASS SQUARES FROM SDIF
C  PI(0) MASS SQUARED IS 0.0182.				C  PI(0) MASS SQUARED IS 0.0182.
      IF ( NFTARD .EQ. 0 ) THEN					      IF ( NFTARD .EQ. 0 ) THEN
        YY0   =  LOG(ECMDPM/ECMDIF)				        YY0   =  LOG(ECMDPM/ECMDIF)
        DMLOG =  LOG(SDIF - 0.0182D0 - PAMA(LEPAR1)**2)		        DMLOG =  LOG(SDIF - 0.0182D0 - PAMA(LEPAR1)**2)
      ELSE							      ELSE
        YY0   = -LOG(ECMDPM/ECMDIF)				        YY0   = -LOG(ECMDPM/ECMDIF)
        DMLOG =  LOG(SDIF - 0.0182D0 - PAMA(LEPAR2)**2)		        DMLOG =  LOG(SDIF - 0.0182D0 - PAMA(LEPAR2)**2)
      ENDIF							      ENDIF
      IF ( DEBUG ) WRITE(MDEBUG,*) 'DIFRAC: YY0,DMLOG=',	      IF ( DEBUG ) WRITE(MDEBUG,*) 'DIFRAC: YY0,DMLOG=',
     *                           SNGL(YY0),SNGL(DMLOG)		     *                           SNGL(YY0),SNGL(DMLOG)
C  CENTRAL RAPIDITY DENSITY IN CMS OF DIFFRACTIVE SYSTEM	C  CENTRAL RAPIDITY DENSITY IN CMS OF DIFFRACTIVE SYSTEM
C  PARAMETRISATION SEE CAPDEVIELLE,J.PHYS.G:NUCL.PHYS.16(1990	C  PARAMETRISATION SEE CAPDEVIELLE,J.PHYS.G:NUCL.PHYS.16(1990
C  WE USE ONLY THE LOW-ENERGY PART OF THE PARAMETRISATION, AS	C  WE USE ONLY THE LOW-ENERGY PART OF THE PARAMETRISATION, AS
C  NOT REACH THE HIGHER VALUES					C  NOT REACH THE HIGHER VALUES
      DC0 = 0.82D0 * (SDIF**0.107D0)				      DC0 = 0.82D0 * (SDIF**0.107D0)
 								 
C  THERE ARE 3 ENERGY DEPENDENT FORMULAS FOR AVERAGE CHARGED	C  THERE ARE 3 ENERGY DEPENDENT FORMULAS FOR AVERAGE CHARGED
C  MULTIPLICITY ( AVCH1 );					C  MULTIPLICITY ( AVCH1 );
C  PARAMETRISATIONS SEE CAPDEVIELLE,J.PHYS.G:NUCL.PHYS.16(199	C  PARAMETRISATIONS SEE CAPDEVIELLE,J.PHYS.G:NUCL.PHYS.16(199
      IF     ( ECMDIF .LE. 187.5D0 ) THEN			      IF     ( ECMDIF .LE. 187.5D0 ) THEN
C  CHARGED MULTIPLICITY (M**2 IN PLACE OF S)			C  CHARGED MULTIPLICITY (M**2 IN PLACE OF S)
        AVCH1 = 0.57D0 + 0.584D0*DLOG + 0.127D0*DLOGSQ		        AVCH1 = 0.57D0 + 0.584D0*DLOG + 0.127D0*DLOGSQ
      ELSEIF ( ECMDIF .LE. 945.5D0 ) THEN			      ELSEIF ( ECMDIF .LE. 945.5D0 ) THEN
        AVCH1 = -6.55D0 + 6.89D0 * SDIF**0.131D0		        AVCH1 = -6.55D0 + 6.89D0 * SDIF**0.131D0
      ELSE							      ELSE
        AVCH1 = 3.4D0 * SDIF**0.17D0				        AVCH1 = 3.4D0 * SDIF**0.17D0
      ENDIF							      ENDIF
C  PARAMETRISATION IS BASED ON COLLIDER DATA WHERE PROTON AND	C  PARAMETRISATION IS BASED ON COLLIDER DATA WHERE PROTON AND
C  ARE INCLUDED. LOWER LIMIT FOR AVERAGE CHARGED MULTIPLICITY	C  ARE INCLUDED. LOWER LIMIT FOR AVERAGE CHARGED MULTIPLICITY
      AVCH1 = MAX( 1.D0, AVCH1 )				      AVCH1 = MAX( 1.D0, AVCH1 )
 								 
C  CENTER OF GAUSSIAN 1ST+2ND STRING OF FRAGMENTATION SYSTEM	C  CENTER OF GAUSSIAN 1ST+2ND STRING OF FRAGMENTATION SYSTEM
      POSC2 = 0.146D0 * DMLOG + 0.072D0				      POSC2 = 0.146D0 * DMLOG + 0.072D0
C  WIDTH  OF GAUSSIAN 1ST+2ND STRING OF FRAGMENTATION SYSTEM	C  WIDTH  OF GAUSSIAN 1ST+2ND STRING OF FRAGMENTATION SYSTEM
      WIDC2 = 0.120D0 * DMLOG + 0.180D0				      WIDC2 = 0.120D0 * DMLOG + 0.180D0
C  INTERACTION FACTOR GNU FOR INTERACTION WITH NUCLEUS;		C  INTERACTION FACTOR GNU FOR INTERACTION WITH NUCLEUS;
      IF ( NFLAIN .EQ. 0 ) THEN					      IF ( NFLAIN .EQ. 0 ) THEN
        GNU   = 1.D0						        GNU   = 1.D0
        AVCH3 = 0.D0						        AVCH3 = 0.D0
        POSC3 = 0.D0						        POSC3 = 0.D0
        WIDC3 = 1.D0						        WIDC3 = 1.D0
      ELSE							      ELSE
C  NEW PARAMETRIZATION OF J.N.CAPDEVIELLE (MARCH 93)		C  NEW PARAMETRIZATION OF J.N.CAPDEVIELLE (MARCH 93)
        GNU   = (0.4826D0 + 3.522D-2 * DLOG) * TAR**0.31D0	        GNU   = (0.4826D0 + 3.522D-2 * DLOG) * TAR**0.31D0
C  CENTER OF GAUSSIAN FOR 3RD STRING (FROM TARGET)		C  CENTER OF GAUSSIAN FOR 3RD STRING (FROM TARGET)
        POSC3 = +3.D0 - 2.575D0 * EXP( -0.081756452D0 * GNU )	        POSC3 = +3.D0 - 2.575D0 * EXP( -0.081756452D0 * GNU )
C  WIDTH  OF GAUSSIAN FOR 3RD STRING (FROM TARGET)		C  WIDTH  OF GAUSSIAN FOR 3RD STRING (FROM TARGET)
        WIDC3 = 1.2338466D0 + 0.078969916D0 * LOG(GNU)		        WIDC3 = 1.2338466D0 + 0.078969916D0 * LOG(GNU)
        IF ( ECMDIF .LE. 137.D0 ) THEN				        IF ( ECMDIF .LE. 137.D0 ) THEN
          AVCH3 = 0.57D0 * AVCH1 * (GNU-1.D0)			          AVCH3 = 0.57D0 * AVCH1 * (GNU-1.D0)
        ELSE							        ELSE
          AVCH3 = 0.5D0  * AVCH1 * (GNU-1.D0)			          AVCH3 = 0.5D0  * AVCH1 * (GNU-1.D0)
        ENDIF							        ENDIF
      ENDIF							      ENDIF
      IF ( DEBUG ) WRITE(MDEBUG,100)				      IF ( DEBUG ) WRITE(MDEBUG,100)
     *          SNGL(POSC2),SNGL(WIDC2),SNGL(POSC3),SNGL(WIDC	     *          SNGL(POSC2),SNGL(WIDC2),SNGL(POSC3),SNGL(WIDC
 100  FORMAT(' DIFRAC: POSC2,WIDC2,POSC3,WIDC3=',4F12.7)	 100  FORMAT(' DIFRAC: POSC2,WIDC2,POSC3,WIDC3=',4F12.7)
C  AVERAGE CHARGED, INCLUDING THOSE FROM TARGET			C  AVERAGE CHARGED, INCLUDING THOSE FROM TARGET
      AVCH = AVCH1 + AVCH3					      AVCH = AVCH1 + AVCH3
C  THE FOLOWING PROCEDURE IS TO PRODUCE PHOTONS FROM UNKNOWN 	C  THE FOLOWING PROCEDURE IS TO PRODUCE PHOTONS FROM UNKNOWN 
C  DECAYS FOLLOWING CORRELATION WITH CHARGED PARTICLES BASED 	C  DECAYS FOLLOWING CORRELATION WITH CHARGED PARTICLES BASED 
C  PHOTON EXCESS AT COLLIDER EXPERIMENTS. SEUGP IS <N_PHOTON>	C  PHOTON EXCESS AT COLLIDER EXPERIMENTS. SEUGP IS <N_PHOTON>
C  PROBLEM OF THE RISE OF THE UNKNOWN ETA PRODUCTION CROSS SE	C  PROBLEM OF THE RISE OF THE UNKNOWN ETA PRODUCTION CROSS SE
C  IS SOLVED WITH PARAMETRISATION OF UA5 (Z. PHYS. C43 (1989)	C  IS SOLVED WITH PARAMETRISATION OF UA5 (Z. PHYS. C43 (1989)
      IF ( ECMDIF .LE. 103.D0 ) THEN				      IF ( ECMDIF .LE. 103.D0 ) THEN
        SEUGP = -1.27D0 + 0.52D0 * DLOG + 0.148D0 * DLOGSQ	        SEUGP = -1.27D0 + 0.52D0 * DLOG + 0.148D0 * DLOGSQ
      ELSE							      ELSE
C  AT HIGH DIFFRACTIVE MASS USE PARAMETRISATION OF THOUW ????	C  AT HIGH DIFFRACTIVE MASS USE PARAMETRISATION OF THOUW ????
        SEUGP = -18.7D0 + 11.55D0 * SDIF**0.1195D0		        SEUGP = -18.7D0 + 11.55D0 * SDIF**0.1195D0
      ENDIF							      ENDIF
      SEUGP = MAX( 0.5D0, SEUGP )				      SEUGP = MAX( 0.5D0, SEUGP )
      IF ( DEBUG ) WRITE(MDEBUG,110)				      IF ( DEBUG ) WRITE(MDEBUG,110)
     *   SNGL(DC0),SNGL(AVCH1),SNGL(AVCH3),SNGL(AVCH),SNGL(SE	     *   SNGL(DC0),SNGL(AVCH1),SNGL(AVCH3),SNGL(AVCH),SNGL(SE
 110  FORMAT(' DIFRAC: DC0,AVCH1,AVCH3,AVCH,SEUGP=',5F12.6)	 110  FORMAT(' DIFRAC: DC0,AVCH1,AVCH3,AVCH,SEUGP=',5F12.6)
 								 
C  SET RETURN FLAG TO OK					C  SET RETURN FLAG TO OK
      NRETFL = 0						      NRETFL = 0
      RETURN							      RETURN
      END							      END
