      SUBROUTINE HDPM						      SUBROUTINE HDPM
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  H(ADRONIC) D(UAL) P(ARTON) M(ODEL)				C  H(ADRONIC) D(UAL) P(ARTON) M(ODEL)
C								C
C  GENERATOR OF HADRONIC COLLISION INSPIRED BY DUAL PARTON MO	C  GENERATOR OF HADRONIC COLLISION INSPIRED BY DUAL PARTON MO
C  THIS SUBROUTINE IS CALLED FROM SDPM				C  THIS SUBROUTINE IS CALLED FROM SDPM
C------------------------------------------------------------	C------------------------------------------------------------
 								 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)			      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
*KEEP,CONST.							*KEEP,CONST.
      COMMON /CONST/   PI,PI2,OB3,TB3,ENEPER			      COMMON /CONST/   PI,PI2,OB3,TB3,ENEPER
      DOUBLE PRECISION PI,PI2,OB3,TB3,ENEPER			      DOUBLE PRECISION PI,PI2,OB3,TB3,ENEPER
*KEEP,DPMFLG.							*KEEP,DPMFLG.
      COMMON /DPMFLG/  NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR	      COMMON /DPMFLG/  NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR
      INTEGER          NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR	      INTEGER          NFLAIN,NFLDIF,NFLPI0,NFLCHE,NFLPIF,NFR
*KEEP,ELADPM.							*KEEP,ELADPM.
      COMMON /ELADPM/  ELMEAN,ELMEAA,IELDPM,IELDPA		      COMMON /ELADPM/  ELMEAN,ELMEAA,IELDPM,IELDPA
      DOUBLE PRECISION ELMEAN(37),ELMEAA(37)			      DOUBLE PRECISION ELMEAN(37),ELMEAA(37)
      INTEGER          IELDPM(37,13),IELDPA(37,13)		      INTEGER          IELDPM(37,13),IELDPA(37,13)
*KEEP,ELASTY.							*KEEP,ELASTY.
      COMMON /ELASTY/  ELAST,IELIS,IELHM,IELNU,IELPI		      COMMON /ELASTY/  ELAST,IELIS,IELHM,IELNU,IELPI
      DOUBLE PRECISION ELAST					      DOUBLE PRECISION ELAST
      INTEGER          IELIS(20),IELHM(20),IELNU(20),IELPI(20	      INTEGER          IELIS(20),IELHM(20),IELNU(20),IELPI(20
*KEEP,INDICE.							*KEEP,INDICE.
      COMMON /INDICE/  NNUCN,NKA0,NHYPN,NETA,NETAS,NPIZER,	      COMMON /INDICE/  NNUCN,NKA0,NHYPN,NETA,NETAS,NPIZER,
     *                 NNC,NKC,NHC,NPC,NCH,NNN,NKN,NHN,NET,NP	     *                 NNC,NKC,NHC,NPC,NCH,NNN,NKN,NHN,NET,NP
      INTEGER          NNUCN(2:3),NKA0(2:3),NHYPN(2:3),NETA(2	      INTEGER          NNUCN(2:3),NKA0(2:3),NHYPN(2:3),NETA(2
     *                 NETAS(2:3),NPIZER(2:3),			     *                 NETAS(2:3),NPIZER(2:3),
     *                 NNC,NKC,NHC,NPC,NCH,NNN,NKN,NHN,NET,NP	     *                 NNC,NKC,NHC,NPC,NCH,NNN,NKN,NHN,NET,NP
*KEEP,INTER.							*KEEP,INTER.
      COMMON /INTER/   AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP	      COMMON /INTER/   AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP
     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN	     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN
     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG	     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG
     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN,	     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN,
     *                 IDIF,ITAR				     *                 IDIF,ITAR
      DOUBLE PRECISION AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP	      DOUBLE PRECISION AVCH,AVCH3,DC0,DLOG,DMLOG,ECMDIF,ECMDP
     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN	     *                 FNEUT,FNEUT2,GNU,PLAB,POSC2,POSC3,POSN
     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG	     *                 RC3TO2,S,SEUGF,SEUGP,SLOG,SLOGSQ,SMLOG
     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN	     *                 WIDC2,WIDC3,WIDN2,WIDN3,YCM,YY0,ZN
      INTEGER          IDIF,ITAR				      INTEGER          IDIF,ITAR
*KEEP,ISTA.							*KEEP,ISTA.
      COMMON /ISTA/    IFINET,IFINNU,IFINKA,IFINPI,IFINHY	      COMMON /ISTA/    IFINET,IFINNU,IFINKA,IFINPI,IFINHY
      INTEGER          IFINET,IFINNU,IFINKA,IFINPI,IFINHY	      INTEGER          IFINET,IFINNU,IFINKA,IFINPI,IFINHY
*KEEP,LEPAR.							*KEEP,LEPAR.
      COMMON /LEPAR/   LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP	      COMMON /LEPAR/   LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP
      INTEGER          LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP	      INTEGER          LEPAR1,LEPAR2,LASTPI,NRESPC,NRESPN,NCP
*KEEP,MULT.							*KEEP,MULT.
      COMMON /MULT/    EKINL,MSMM,MULTMA,MULTOT			      COMMON /MULT/    EKINL,MSMM,MULTMA,MULTOT
      DOUBLE PRECISION EKINL					      DOUBLE PRECISION EKINL
      INTEGER          MSMM,MULTMA(37,13),MULTOT(37,13)		      INTEGER          MSMM,MULTMA(37,13),MULTOT(37,13)
*KEEP,NEWPAR.							*KEEP,NEWPAR.
      COMMON /NEWPAR/  EA,PT2,PX,PY,TMAS,YR,ITYP,		      COMMON /NEWPAR/  EA,PT2,PX,PY,TMAS,YR,ITYP,
     *                 IA1,IA2,IB1,IB2,IC1,IC2,ID1,ID2,IE1,IE	     *                 IA1,IA2,IB1,IB2,IC1,IC2,ID1,ID2,IE1,IE
     *                 IG1,IG2,IH1,IH2,II1,II2,IJ1,NTOT		     *                 IG1,IG2,IH1,IH2,II1,II2,IJ1,NTOT
      DOUBLE PRECISION EA(3000),PT2(3000),PX(3000),PY(3000),T	      DOUBLE PRECISION EA(3000),PT2(3000),PX(3000),PY(3000),T
     *                 YR(3000)					     *                 YR(3000)
      INTEGER          ITYP(3000),				      INTEGER          ITYP(3000),
     *                 IA1,IA2,IB1,IB2,IC1,IC2,ID1,ID2,IE1,IE	     *                 IA1,IA2,IB1,IB2,IC1,IC2,ID1,ID2,IE1,IE
     *                 IG1,IG2,IH1,IH2,II1,II2,IJ1,NTOT		     *                 IG1,IG2,IH1,IH2,II1,II2,IJ1,NTOT
*KEEP,PAM.							*KEEP,PAM.
      COMMON /PAM/     PAMA,SIGNUM				      COMMON /PAM/     PAMA,SIGNUM
      DOUBLE PRECISION PAMA(6000),SIGNUM(6000)			      DOUBLE PRECISION PAMA(6000),SIGNUM(6000)
*KEEP,PARPAR.							*KEEP,PARPAR.
      COMMON /PARPAR/  CURPAR,SECPAR,PRMPAR,OUTPAR,C,		      COMMON /PARPAR/  CURPAR,SECPAR,PRMPAR,OUTPAR,C,
     *                 E00,E00PN,PTOT0,PTOT0N,THICKH,ITYPE,LE	     *                 E00,E00PN,PTOT0,PTOT0N,THICKH,ITYPE,LE
      DOUBLE PRECISION CURPAR(14),SECPAR(14),PRMPAR(14),OUTPA	      DOUBLE PRECISION CURPAR(14),SECPAR(14),PRMPAR(14),OUTPA
     *                 C(50),E00,E00PN,PTOT0,PTOT0N,THICKH	     *                 C(50),E00,E00PN,PTOT0,PTOT0N,THICKH
      INTEGER          ITYPE,LEVL				      INTEGER          ITYPE,LEVL
*KEEP,PARPAE.							*KEEP,PARPAE.
      DOUBLE PRECISION GAMMA,COSTHE,PHI,H,T,X,Y,CHI,BETA,GCM,	      DOUBLE PRECISION GAMMA,COSTHE,PHI,H,T,X,Y,CHI,BETA,GCM,
      EQUIVALENCE      (CURPAR(2),GAMMA),  (CURPAR(3),COSTHE)	      EQUIVALENCE      (CURPAR(2),GAMMA),  (CURPAR(3),COSTHE)
     *                 (CURPAR(4), PHI ),  (CURPAR(5), H    )	     *                 (CURPAR(4), PHI ),  (CURPAR(5), H    )
     *                 (CURPAR(6), T   ),  (CURPAR(7), X    )	     *                 (CURPAR(6), T   ),  (CURPAR(7), X    )
     *                 (CURPAR(8), Y   ),  (CURPAR(9), CHI  )	     *                 (CURPAR(8), Y   ),  (CURPAR(9), CHI  )
     *                 (CURPAR(10),BETA),  (CURPAR(11),GCM  )	     *                 (CURPAR(10),BETA),  (CURPAR(11),GCM  )
     *                 (CURPAR(12),ECM )			     *                 (CURPAR(12),ECM )
*KEEP,RANDPA.							*KEEP,RANDPA.
      COMMON /RANDPA/  FAC,U1,U2,RD,NSEQ,ISEED,KNOR		      COMMON /RANDPA/  FAC,U1,U2,RD,NSEQ,ISEED,KNOR
      DOUBLE PRECISION FAC,U1,U2				      DOUBLE PRECISION FAC,U1,U2
      REAL             RD(3000)					      REAL             RD(3000)
      INTEGER          ISEED(103,10),NSEQ			      INTEGER          ISEED(103,10),NSEQ
      LOGICAL          KNOR					      LOGICAL          KNOR
*KEEP,RATIOS.							*KEEP,RATIOS.
      COMMON /RATIOS/  RPI0R,RPIER,RPEKR,RPEKNR,PPICH,PPINCH,	      COMMON /RATIOS/  RPI0R,RPIER,RPEKR,RPEKNR,PPICH,PPINCH,
     *                 ISEL,NEUTOT,NTOTEM			     *                 ISEL,NEUTOT,NTOTEM
      DOUBLE PRECISION RPI0R,RPIER,RPEKR,RPEKNR,PPICH,PPINCH,	      DOUBLE PRECISION RPI0R,RPIER,RPEKR,RPEKNR,PPICH,PPINCH,
      INTEGER          ISEL,NEUTOT,NTOTEM			      INTEGER          ISEL,NEUTOT,NTOTEM
*KEEP,RESON.							*KEEP,RESON.
      COMMON /RESON/   RDRES,RESRAN,IRESPAR			      COMMON /RESON/   RDRES,RESRAN,IRESPAR
      REAL             RDRES(2),RESRAN(1000)			      REAL             RDRES(2),RESRAN(1000)
      INTEGER          IRESPAR					      INTEGER          IRESPAR
 								 
*KEEP,REST.							*KEEP,REST.
      COMMON /REST/    CONTNE,TAR,LT				      COMMON /REST/    CONTNE,TAR,LT
      DOUBLE PRECISION CONTNE(3),TAR				      DOUBLE PRECISION CONTNE(3),TAR
      INTEGER          LT					      INTEGER          LT
*KEEP,RUNPAR.							*KEEP,RUNPAR.
      COMMON /RUNPAR/  FIXHEI,THICK0,HILOECM,HILOELB,		      COMMON /RUNPAR/  FIXHEI,THICK0,HILOECM,HILOELB,
     *                 STEPFC,NRRUN,NSHOW,PATAPE,MONIIN,	     *                 STEPFC,NRRUN,NSHOW,PATAPE,MONIIN,
     *                 MONIOU,MDEBUG,NUCNUC,			     *                 MONIOU,MDEBUG,NUCNUC,
     *                 CETAPE,					     *                 CETAPE,
     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,	     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,
     *                 N1STTR,MDBASE,				     *                 N1STTR,MDBASE,
     *                 DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC	     *                 DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC
     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE		     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE
     *                ,GHEISH,GHESIG				     *                ,GHEISH,GHESIG
      COMMON /RUNPAC/  DSN,HOST,USER				      COMMON /RUNPAC/  DSN,HOST,USER
      DOUBLE PRECISION FIXHEI,THICK0,HILOECM,HILOELB		      DOUBLE PRECISION FIXHEI,THICK0,HILOECM,HILOELB
      REAL             STEPFC					      REAL             STEPFC
      INTEGER          NRRUN,NSHOW,PATAPE,MONIIN,MONIOU,MDEBU	      INTEGER          NRRUN,NSHOW,PATAPE,MONIIN,MONIOU,MDEBU
     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,	     *                 SHOWNO,ISHW,NOPART,NRECS,NBLKS,MAXPRT,
     *                 N1STTR,MDBASE				     *                 N1STTR,MDBASE
      INTEGER          CETAPE					      INTEGER          CETAPE
      CHARACTER*79     DSN					      CHARACTER*79     DSN
      CHARACTER*20     HOST,USER				      CHARACTER*20     HOST,USER
 								 
      LOGICAL          DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC	      LOGICAL          DEBDEL,DEBUG,FDECAY,FEGS,FIRSTI,FIXINC
     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE		     *                 FIX1I,FMUADD,FNKG,FPRINT,FDBASE
     *                ,GHEISH,GHESIG				     *                ,GHEISH,GHESIG
*KEND.								*KEND.
 								 
C------------------------------------------------------------	C------------------------------------------------------------
 								 
      IF ( DEBUG ) WRITE(MDEBUG,444) (CURPAR(I),I=1,9)		      IF ( DEBUG ) WRITE(MDEBUG,444) (CURPAR(I),I=1,9)
  444   FORMAT(' HDPM  : CURPAR=',1P,9E10.3)			  444   FORMAT(' HDPM  : CURPAR=',1P,9E10.3)
 								 
C  SET ANTI-LEADER TO PROTON OR NEUTRON; TARGET IS ALWAYS NUC	C  SET ANTI-LEADER TO PROTON OR NEUTRON; TARGET IS ALWAYS NUC
      CALL RMMAR( RD,1,1 )					      CALL RMMAR( RD,1,1 )
      IF ( RD(1) .LE. CONTNE(LT) ) THEN				      IF ( RD(1) .LE. CONTNE(LT) ) THEN
        ITAR = 13						        ITAR = 13
      ELSE							      ELSE
        ITAR = 14						        ITAR = 14
      ENDIF							      ENDIF
 								 
 								 
C  CALCULATE LAB AND CM ENERGY					C  CALCULATE LAB AND CM ENERGY
      IF ( ITYPE .NE. 1 ) THEN					      IF ( ITYPE .NE. 1 ) THEN
        ELAB  = PAMA(ITYPE) * GAMMA				        ELAB  = PAMA(ITYPE) * GAMMA
        PLAB  = ELAB * BETA					        PLAB  = ELAB * BETA
        S     = PAMA(ITYPE)**2 + PAMA(ITAR)**2 + 2.D0*PAMA(IT	        S     = PAMA(ITYPE)**2 + PAMA(ITAR)**2 + 2.D0*PAMA(IT
      ELSE							      ELSE
C  FOR GAMMA-INDUCED REACTION TAKE PI(0) AS LEADING PARTICLE	C  FOR GAMMA-INDUCED REACTION TAKE PI(0) AS LEADING PARTICLE
        ITYPE = 7						        ITYPE = 7
        ELAB  = GAMMA						        ELAB  = GAMMA
        PLAB  = ELAB						        PLAB  = ELAB
        S     = PAMA(ITAR)**2 + 2.D0*PAMA(ITAR)*ELAB		        S     = PAMA(ITAR)**2 + 2.D0*PAMA(ITAR)*ELAB
      ENDIF							      ENDIF
 								 
      ECMDPM  = SQRT(S)						      ECMDPM  = SQRT(S)
      IF ( DEBUG ) WRITE(MDEBUG,*) 'HDPM  : ITYPE,ELAB,PLAB,S	      IF ( DEBUG ) WRITE(MDEBUG,*) 'HDPM  : ITYPE,ELAB,PLAB,S
     *             ITYPE,SNGL(ELAB),SNGL(PLAB),SNGL(S),SNGL(E	     *             ITYPE,SNGL(ELAB),SNGL(PLAB),SNGL(S),SNGL(E
 								 
C  LN(S), LN(S)**2 AND RAPIDITY OF C. M. SYSTEM IN LAB		C  LN(S), LN(S)**2 AND RAPIDITY OF C. M. SYSTEM IN LAB
      SLOG    = LOG(S)						      SLOG    = LOG(S)
      SLOGSQ  = SLOG**2						      SLOGSQ  = SLOG**2
      SMLOG   = LOG( 2.D0 * PAMA(ITAR) * ELAB )			      SMLOG   = LOG( 2.D0 * PAMA(ITAR) * ELAB )
      ELABLG  = LOG(ELAB)					      ELABLG  = LOG(ELAB)
      EPLUSP  = ELAB + PLAB					      EPLUSP  = ELAB + PLAB
*     YCM = 0.5D0 * LOG( (ELAB+PAMA(ITAR)+PLAB)/(ELAB+PAMA(IT	*     YCM = 0.5D0 * LOG( (ELAB+PAMA(ITAR)+PLAB)/(ELAB+PAMA(IT
      YCM = 0.5D0 * LOG( (EPLUSP**2     +PAMA(ITAR)*EPLUSP)/	      YCM = 0.5D0 * LOG( (EPLUSP**2     +PAMA(ITAR)*EPLUSP)/
     *                   (PAMA(ITYPE)**2+PAMA(ITAR)*EPLUSP) )	     *                   (PAMA(ITYPE)**2+PAMA(ITAR)*EPLUSP) )
      IF ( DEBUG ) WRITE(MDEBUG,*)'HDPM  : SLOG,SLOGSQ,YCM=',	      IF ( DEBUG ) WRITE(MDEBUG,*)'HDPM  : SLOG,SLOGSQ,YCM=',
     *                    SNGL(SLOG),SNGL(SLOGSQ),SNGL(YCM)	     *                    SNGL(SLOG),SNGL(SLOGSQ),SNGL(YCM)
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  RETURN POINT IF CALCULATION OF PARTICLES GOES WRONG		C  RETURN POINT IF CALCULATION OF PARTICLES GOES WRONG
   1  CONTINUE							   1  CONTINUE
 								 
      IF ( ITYPE .NE. 7 ) THEN					      IF ( ITYPE .NE. 7 ) THEN
C  CHOOSE NUMBER OF INTERACTIONS IN TARGET			C  CHOOSE NUMBER OF INTERACTIONS IN TARGET
        CALL TARINT						        CALL TARINT
      ELSE							      ELSE
C  FOR GAMMA-INDUCED REACTIONS TAKE ALWAYS ONE COLLISION	C  FOR GAMMA-INDUCED REACTIONS TAKE ALWAYS ONE COLLISION
        GNU = 1.D0						        GNU = 1.D0
      ENDIF							      ENDIF
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  NO DIFFRACTION IF						C  NO DIFFRACTION IF
C  OR       THE NUMBER OF INTERACTIONS IN TARGET IS CHOSEN RA	C  OR       THE NUMBER OF INTERACTIONS IN TARGET IS CHOSEN RA
C     AND   MORE THAN ONE INTERACTION TAKES PLACE		C     AND   MORE THAN ONE INTERACTION TAKES PLACE
C  OR       PRIMARY PARTICLE IS GAMMA (PI0)			C  OR       PRIMARY PARTICLE IS GAMMA (PI0)
C  NOW NFLDIF DECIDES WHETHER DIFFRACTIVE PROCESS POSSIBLE OR	C  NOW NFLDIF DECIDES WHETHER DIFFRACTIVE PROCESS POSSIBLE OR
      IF ( ( NFLAIN.EQ.0 .AND. GNU.GT.1.D0 .AND. NFLDIF.EQ.0 	      IF ( ( NFLAIN.EQ.0 .AND. GNU.GT.1.D0 .AND. NFLDIF.EQ.0 
     *      .OR. ( ITYPE .EQ. 7 ) ) THEN			     *      .OR. ( ITYPE .EQ. 7 ) ) THEN
        IDIF = 0						        IDIF = 0
      ELSE							      ELSE
C  SET DIFFRACTION FLAG IF RANDOM NUMBER < PROBABILITY		C  SET DIFFRACTION FLAG IF RANDOM NUMBER < PROBABILITY
        CALL RMMAR( RD,1,1 )					        CALL RMMAR( RD,1,1 )
C  IDIF IS 0 : NO DIFFRACTION ; IDIF IS 1 : DIFFRACTION		C  IDIF IS 0 : NO DIFFRACTION ; IDIF IS 1 : DIFFRACTION
C  DIFFRACTION RISES WITH ENERGY AND SATURATES AT 10000 GEV	C  DIFFRACTION RISES WITH ENERGY AND SATURATES AT 10000 GEV
C  ### DAS TUT ES ABER NICHT: ES IST KONSTANT 0.15 (SIEHE DPF	C  ### DAS TUT ES ABER NICHT: ES IST KONSTANT 0.15 (SIEHE DPF
        IF ( RD(1) .GT. DPFUNC(ECMDPM) ) THEN			        IF ( RD(1) .GT. DPFUNC(ECMDPM) ) THEN
          IDIF = 0						          IDIF = 0
        ELSE							        ELSE
          IDIF = 1						          IDIF = 1
        ENDIF							        ENDIF
      ENDIF							      ENDIF
 								 
 								 
C  PRINTOUT FOR DEBUG						C  PRINTOUT FOR DEBUG
      IF ( DEBUG ) THEN						      IF ( DEBUG ) THEN
        WRITE(MDEBUG,*) '    DIFFRACTIVE INTERACTION (0/1) = 	        WRITE(MDEBUG,*) '    DIFFRACTIVE INTERACTION (0/1) = 
      ENDIF							      ENDIF
 								 
C  SET COUNTER FOR REPEAT TO 0					C  SET COUNTER FOR REPEAT TO 0
      NREPRD = 0						      NREPRD = 0
 								 
C  GENERATION OF INTERACTION					C  GENERATION OF INTERACTION
 1919 CONTINUE							 1919 CONTINUE
 								 
C  FLAG TO CHECK NUMBER OF SECONDARIES;				C  FLAG TO CHECK NUMBER OF SECONDARIES;
C  IS CHANGED TO 1 IF SECONDARY MULTIPLICITY IS LOW		C  IS CHANGED TO 1 IF SECONDARY MULTIPLICITY IS LOW
      ISEL   = 0						      ISEL   = 0
C  SET LEADING PARTICLE TO INCOMING PARTICLE AND ANTI-LEADER 	C  SET LEADING PARTICLE TO INCOMING PARTICLE AND ANTI-LEADER 
C  (AS IT COMES FROM TARGET NUCLEUS) BOTH MAY BE CHANGED BY L	C  (AS IT COMES FROM TARGET NUCLEUS) BOTH MAY BE CHANGED BY L
      LEPAR1 = ITYPE						      LEPAR1 = ITYPE
      LEPAR2 = ITAR						      LEPAR2 = ITAR
 								 
      IF ( IDIF .EQ. 0 ) THEN					      IF ( IDIF .EQ. 0 ) THEN
C------------------------------------------------------------	C------------------------------------------------------------
C  NON SINGLE DIFFRACTIVE PROCESS STARTS HERE			C  NON SINGLE DIFFRACTIVE PROCESS STARTS HERE
 								 
        CALL NSD						        CALL NSD
C  CHARGE EXCHANGE ENABLED? EXCHANGE LEADER AND ANTI-LEADER	C  CHARGE EXCHANGE ENABLED? EXCHANGE LEADER AND ANTI-LEADER
        LASTPI = 0						        LASTPI = 0
        NRESPC = 0						        NRESPC = 0
        NRESPN = 0						        NRESPN = 0
        NCPLUS = 0						        NCPLUS = 0
        IF ( NFLCHE .EQ. 0 ) THEN				        IF ( NFLCHE .EQ. 0 ) THEN
          CALL LEPACX( ECMDPM,ELABLG,LEPAR1,1 )			          CALL LEPACX( ECMDPM,ELABLG,LEPAR1,1 )
          CALL LEPACX( ECMDPM,ELABLG,LEPAR2,2 )			          CALL LEPACX( ECMDPM,ELABLG,LEPAR2,2 )
        ENDIF							        ENDIF
 1921   CONTINUE						 1921   CONTINUE
        CALL RNEGBI( NCH,AVCH,ECMDPM )				        CALL RNEGBI( NCH,AVCH,ECMDPM )
C  NCH IS # OF ALL CHARGED PARTICLES INCLUDING EXCESS FROM TA	C  NCH IS # OF ALL CHARGED PARTICLES INCLUDING EXCESS FROM TA
        IF ( NCH .LT. 1 ) THEN					        IF ( NCH .LT. 1 ) THEN
          IF ( LEPAR1 .LT. 50  .OR.  LEPAR2 .LT. 50 ) THEN	          IF ( LEPAR1 .LT. 50  .OR.  LEPAR2 .LT. 50 ) THEN
            NREPRD = NREPRD + 1					            NREPRD = NREPRD + 1
            IF ( NREPRD .GT. 10 ) GOTO 1			            IF ( NREPRD .GT. 10 ) GOTO 1
            GOTO 1921						            GOTO 1921
          ELSE							          ELSE
C  INTERACTION IS ONLY RESONANCE PRODUCTION			C  INTERACTION IS ONLY RESONANCE PRODUCTION
            ISEL = 1						            ISEL = 1
          ENDIF							          ENDIF
        ENDIF							        ENDIF
C  WIDTH PLATEAU FOR CLUSTERS AND FOR CALCULATION OF CENTR.RA	C  WIDTH PLATEAU FOR CLUSTERS AND FOR CALCULATION OF CENTR.RA
        DELRAP = 0.6722D0 * (2.95D0 + 0.0302D0 * SLOG)		        DELRAP = 0.6722D0 * (2.95D0 + 0.0302D0 * SLOG)
C  SET RSLOG FOR CALCULATION OF PARTICLE RATIOS			C  SET RSLOG FOR CALCULATION OF PARTICLE RATIOS
        RSLOG  = SLOG						        RSLOG  = SLOG
C  AVERAGE TRANSVERSE MOMENTUM					C  AVERAGE TRANSVERSE MOMENTUM
        CALL AVEPT( ECMDPM,SLOG )				        CALL AVEPT( ECMDPM,SLOG )
 								 
      ELSE							      ELSE
C------------------------------------------------------------	C------------------------------------------------------------
C  SINGLE DIFFRACTIVE PROCESS STARTS HERE			C  SINGLE DIFFRACTIVE PROCESS STARTS HERE
 								 
 1920   CONTINUE						 1920   CONTINUE
        CALL DIFRAC( NRETDF )					        CALL DIFRAC( NRETDF )
        IF ( NRETDF .EQ. 1 ) GOTO 1				        IF ( NRETDF .EQ. 1 ) GOTO 1
C  CHARGE EXCHANGE ENABLED?  EXCHANGE CHARGE OF DIFFRACTING P	C  CHARGE EXCHANGE ENABLED?  EXCHANGE CHARGE OF DIFFRACTING P
        LASTPI = 0						        LASTPI = 0
        NRESPC = 0						        NRESPC = 0
        NRESPN = 0						        NRESPN = 0
        NCPLUS = 0						        NCPLUS = 0
        IF ( NFLCHE .EQ. 0 ) THEN				        IF ( NFLCHE .EQ. 0 ) THEN
          IF ( YY0 .GT. 0.D0 ) THEN				          IF ( YY0 .GT. 0.D0 ) THEN
C  PROJECTILE DIFFRACTION					C  PROJECTILE DIFFRACTION
            CALL LEPACX( ECMDIF,DMLOG,LEPAR1,1 )		            CALL LEPACX( ECMDIF,DMLOG,LEPAR1,1 )
          ELSE							          ELSE
C  TARGET DIFFRACTION						C  TARGET DIFFRACTION
            CALL LEPACX( ECMDIF,DMLOG,LEPAR2,2 )		            CALL LEPACX( ECMDIF,DMLOG,LEPAR2,2 )
          ENDIF							          ENDIF
        ENDIF							        ENDIF
C  FLUCTUATION OF MULTIPLICITY ACCORDING TO NEG.BIN. DISTRIBU	C  FLUCTUATION OF MULTIPLICITY ACCORDING TO NEG.BIN. DISTRIBU
        CALL RNEGBI( NCH,AVCH,ECMDIF )				        CALL RNEGBI( NCH,AVCH,ECMDIF )
C  REPEAT CALCULATION AS SOMETHING WENT WRONG			C  REPEAT CALCULATION AS SOMETHING WENT WRONG
        IF ( NCH .LT. 1 ) THEN					        IF ( NCH .LT. 1 ) THEN
          IF ( (YY0 .GT. 0.D0  .AND.  LEPAR1 .LT. 50)  .OR.	          IF ( (YY0 .GT. 0.D0  .AND.  LEPAR1 .LT. 50)  .OR.
     *         (YY0 .LT. 0.D0  .AND.  LEPAR2 .LT. 50)        	     *         (YY0 .LT. 0.D0  .AND.  LEPAR2 .LT. 50)        
            NREPRD = NREPRD + 1					            NREPRD = NREPRD + 1
            IF ( NREPRD .GT. 10 ) GOTO 1			            IF ( NREPRD .GT. 10 ) GOTO 1
            GOTO 1920						            GOTO 1920
          ELSE							          ELSE
C  DIFFRACTIVE INTERACTION IS ONLY RESONANCE PRODUCTION		C  DIFFRACTIVE INTERACTION IS ONLY RESONANCE PRODUCTION
            ISEL = 1						            ISEL = 1
          ENDIF							          ENDIF
        ENDIF							        ENDIF
C  SET RSLOG FOR CALCULATION OF PARTICLE RATIOS			C  SET RSLOG FOR CALCULATION OF PARTICLE RATIOS
        RSLOG = DLOG						        RSLOG = DLOG
C  HERE WE USE ECMDPM, BECAUSE THE MOMENTUM TRANSFER IS DEPEN	C  HERE WE USE ECMDPM, BECAUSE THE MOMENTUM TRANSFER IS DEPEN
C  ON THE ENERGY OF THE TOTAL SYSTEM AND NOT ON THE DIFFRACTI	C  ON THE ENERGY OF THE TOTAL SYSTEM AND NOT ON THE DIFFRACTI
        CALL AVEPT( ECMDPM,SLOG )				        CALL AVEPT( ECMDPM,SLOG )
 								 
      ENDIF							      ENDIF
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  NOW FOR NSD AND DIFFRACTIVE PROCESSES			C  NOW FOR NSD AND DIFFRACTIVE PROCESSES
 								 
C  IN CASE OF LOW MULTIPLICITY SET FLAG ISEL			C  IN CASE OF LOW MULTIPLICITY SET FLAG ISEL
      IF ( NCH .LE. 2 ) ISEL=1					      IF ( NCH .LE. 2 ) ISEL=1
C  FNCH IS FLUCTUATING TOT.NUMBER OF CHARGED PARTICLES FOR AL	C  FNCH IS FLUCTUATING TOT.NUMBER OF CHARGED PARTICLES FOR AL
      FNCH  = DBLE(NCH)						      FNCH  = DBLE(NCH)
C  RATIO  ALL CHARGED PARTICLES  WITH FLUCTUATION/WITHOUT FLU	C  RATIO  ALL CHARGED PARTICLES  WITH FLUCTUATION/WITHOUT FLU
      XZ    = FNCH / AVCH					      XZ    = FNCH / AVCH
C  FNCH3 IS FLUCTUATING NUMBER OF CHARGED PARTICLES FOR 3RD S	C  FNCH3 IS FLUCTUATING NUMBER OF CHARGED PARTICLES FOR 3RD S
      FNCH3 = XZ * AVCH3					      FNCH3 = XZ * AVCH3
C  FNCH2 IS FLUCTUATING NUMBER OF CHARGED PARTICLES 1ST AND 2	C  FNCH2 IS FLUCTUATING NUMBER OF CHARGED PARTICLES 1ST AND 2
      FNCH2 = FNCH - FNCH3					      FNCH2 = FNCH - FNCH3
C  RC3TO2 IS RATIO (CHARGED 3RD STRING)/(CHARGED 1ST AND 2ND 	C  RC3TO2 IS RATIO (CHARGED 3RD STRING)/(CHARGED 1ST AND 2ND 
      IF ( FNCH2 .NE. 0.D0 ) THEN				      IF ( FNCH2 .NE. 0.D0 ) THEN
        RC3TO2 = FNCH3 / FNCH2					        RC3TO2 = FNCH3 / FNCH2
      ELSE							      ELSE
        RC3TO2 = 0.D0						        RC3TO2 = 0.D0
      ENDIF							      ENDIF
      IF ( DEBUG ) WRITE(MDEBUG,*) '   FNCH,FNCH2,FNCH3,RC3TO	      IF ( DEBUG ) WRITE(MDEBUG,*) '   FNCH,FNCH2,FNCH3,RC3TO
     *          SNGL(FNCH),SNGL(FNCH2),SNGL(FNCH3),SNGL(RC3TO	     *          SNGL(FNCH),SNGL(FNCH2),SNGL(FNCH3),SNGL(RC3TO
 								 
C  IS NUMBER OF NEUTRALS FLUCTUATING AS NUMBER OF CHARGED ?	C  IS NUMBER OF NEUTRALS FLUCTUATING AS NUMBER OF CHARGED ?
      IF ( NFLPIF .EQ. 0 .OR. IDIF .EQ. 1 .OR. ECMDPM .LT. 60	      IF ( NFLPIF .EQ. 0 .OR. IDIF .EQ. 1 .OR. ECMDPM .LT. 60
C  SET NUMBER OF GAMMAS ACCORDING TO NEG. BIN. VARIABLE XZ	C  SET NUMBER OF GAMMAS ACCORDING TO NEG. BIN. VARIABLE XZ
C  AS NUMBER OF NEUTRALS FLUCTUATES AS CHARGED.			C  AS NUMBER OF NEUTRALS FLUCTUATES AS CHARGED.
        SEUGF = SEUGP * XZ					        SEUGF = SEUGP * XZ
        ZG    = XZ						        ZG    = XZ
      ELSE							      ELSE
C  NFLPIF IS 1 MEANS: # OF PI(0) FLUCTUATES AS MEASURED AT CO	C  NFLPIF IS 1 MEANS: # OF PI(0) FLUCTUATES AS MEASURED AT CO
        IF ( ECMDPM .LT. 200.D0 ) THEN				        IF ( ECMDPM .LT. 200.D0 ) THEN
          SEUGF = SEUGP * XZ					          SEUGF = SEUGP * XZ
*         SEUGF = (0.0786D0*SLOG-0.010D0)*FNCH2 + (0.391D0*SL	*         SEUGF = (0.0786D0*SLOG-0.010D0)*FNCH2 + (0.391D0*SL
        ELSE							        ELSE
C  DETERMINE NEW NUMBER OF GAMMAS WITH FLUCTUATION AROUND SEU	C  DETERMINE NEW NUMBER OF GAMMAS WITH FLUCTUATION AROUND SEU
          AGR   = EXP(-XZ)					          AGR   = EXP(-XZ)
          DGR   = SEUGP * XZ * (0.9823D0 - 0.3756D0 * AGR)	          DGR   = SEUGP * XZ * (0.9823D0 - 0.3756D0 * AGR)
          SGS   = DGR * (0.14718D0 + 2.53213D0 * AGR)		          SGS   = DGR * (0.14718D0 + 2.53213D0 * AGR)
 723      CONTINUE						 723      CONTINUE
          SEUGF = 0.88D0 * RANNOR(DGR,SGS)			          SEUGF = 0.88D0 * RANNOR(DGR,SGS)
          IF ( SEUGF .LT. 1.D0 ) GOTO 723			          IF ( SEUGF .LT. 1.D0 ) GOTO 723
        ENDIF							        ENDIF
C  SET NEGATIVE BINOMIAL VARIABLE ZG FOR GAMMAS			C  SET NEGATIVE BINOMIAL VARIABLE ZG FOR GAMMAS
        ZG  = SEUGF / SEUGP					        ZG  = SEUGF / SEUGP
      ENDIF							      ENDIF
      SEUGF = MAX( 1.D0, SEUGF )				      SEUGF = MAX( 1.D0, SEUGF )
      IF ( DEBUG ) WRITE(MDEBUG,*) 'HDPM  :XZ,ZG,SEUGF=',	      IF ( DEBUG ) WRITE(MDEBUG,*) 'HDPM  :XZ,ZG,SEUGF=',
     *      SNGL(XZ),SNGL(ZG),SNGL(SEUGF)			     *      SNGL(XZ),SNGL(ZG),SNGL(SEUGF)
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  RATIO ALL-NUCLEON/ALL-CHARGED				C  RATIO ALL-NUCLEON/ALL-CHARGED
C  PARAMETRISATION FROM UA5, NUCL. PHYS. B291 (1987) 445 EQ.(	C  PARAMETRISATION FROM UA5, NUCL. PHYS. B291 (1987) 445 EQ.(
      RNUCCH = MAX( 0.D0, -0.008D0 + 0.00865D0 * RSLOG )	      RNUCCH = MAX( 0.D0, -0.008D0 + 0.00865D0 * RSLOG )
C  NUMBER FOR DIRECT NEUTRON/ANTINEUTRON PRODUCTION 1ST AND 2	C  NUMBER FOR DIRECT NEUTRON/ANTINEUTRON PRODUCTION 1ST AND 2
C  MULTIPLY BY 0.5 BECAUSE RATIO RNUCCH GIVES (ALL-NUCL)/(ALL	C  MULTIPLY BY 0.5 BECAUSE RATIO RNUCCH GIVES (ALL-NUCL)/(ALL
C  AND HERE ONLY THE NEUTRON-ANTINEUTRONS ARE COUNTED		C  AND HERE ONLY THE NEUTRON-ANTINEUTRONS ARE COUNTED
      FNUCN  = 0.5D0 * RNUCCH * FNCH2				      FNUCN  = 0.5D0 * RNUCCH * FNCH2
C  RATIO (ALL CHARGED SIGMAS)/(ALL CHARGED) IS 1/3 OF ALL STR	C  RATIO (ALL CHARGED SIGMAS)/(ALL CHARGED) IS 1/3 OF ALL STR
C  PARAMETRISATION FORM UA5, NUCL. PHYS. B291 (1987) 445 EQ.(	C  PARAMETRISATION FORM UA5, NUCL. PHYS. B291 (1987) 445 EQ.(
      RHYPCH = MAX( 0.D0, (-0.007D0 + 0.0028D0 * RSLOG) * OB3	      RHYPCH = MAX( 0.D0, (-0.007D0 + 0.0028D0 * RSLOG) * OB3
C  NEUTRAL STRANGE BARYONS ARE DOUBLE OF CHARGED STRANGE BARY	C  NEUTRAL STRANGE BARYONS ARE DOUBLE OF CHARGED STRANGE BARY
      FHYPN  = 2.D0 * RHYPCH * FNCH2				      FHYPN  = 2.D0 * RHYPCH * FNCH2
C  CORRECT NUMBER OF GAMMAS FROM NEUTRAL HYPERON DECAY S0-->L	C  CORRECT NUMBER OF GAMMAS FROM NEUTRAL HYPERON DECAY S0-->L
      SEUGFC = MAX( 0.D0, SEUGF - 0.5D0 * FHYPN )		      SEUGFC = MAX( 0.D0, SEUGF - 0.5D0 * FHYPN )
C  RATIO CHARGED-KAON/CHARGED PIONS				C  RATIO CHARGED-KAON/CHARGED PIONS
C  PARAMETRISATION FROM UA5, NUCL. PHYS. B291 (1987) 445 EQ.(	C  PARAMETRISATION FROM UA5, NUCL. PHYS. B291 (1987) 445 EQ.(
      RKPI   = MAX (0.D0, 0.024D0 + 0.0062D0 * RSLOG )		      RKPI   = MAX (0.D0, 0.024D0 + 0.0062D0 * RSLOG )
C  RKCH IS RATIO (CHARGED-KAON)/(ALL-CHARGED) DERIVED FROM RK	C  RKCH IS RATIO (CHARGED-KAON)/(ALL-CHARGED) DERIVED FROM RK
C  THE FACTOR 0.5 IN FRONT OF RNUCCH IS BECAUSE ONLY HALF OF 	C  THE FACTOR 0.5 IN FRONT OF RNUCCH IS BECAUSE ONLY HALF OF 
C  ARE P/PBAR. THE 1.17 IS AN APROXIMATE CONVERSION FACTOR FR	C  ARE P/PBAR. THE 1.17 IS AN APROXIMATE CONVERSION FACTOR FR
C  (ALL-NUCL)/(ALL-CHARGED) TO (ALL-NUCL)/(CHARGED-PI), WHICH	C  (ALL-NUCL)/(ALL-CHARGED) TO (ALL-NUCL)/(CHARGED-PI), WHICH
C  ENERGY DEPENDENT (1.14 ...1.21) SEE GEICH-GIMBEL TABLE 7.1	C  ENERGY DEPENDENT (1.14 ...1.21) SEE GEICH-GIMBEL TABLE 7.1
      RKCH   = RKPI / (1.D0 + RKPI + (0.5D0*RNUCCH+RHYPCH) * 	      RKCH   = RKPI / (1.D0 + RKPI + (0.5D0*RNUCCH+RHYPCH) * 
C  K0/K0-BAR  FOR 1ST AND 2ND STRING				C  K0/K0-BAR  FOR 1ST AND 2ND STRING
C  NEUTRAL KAONS ARE PRODUCED WITH THE SAME RATE AS CHARGED K	C  NEUTRAL KAONS ARE PRODUCED WITH THE SAME RATE AS CHARGED K
      FKA0   = RKCH * FNCH2					      FKA0   = RKCH * FNCH2
C  RATIO ETA/PI(0) IS ASSUMED TO BE INDEPENDENT OF ENERGY = 0	C  RATIO ETA/PI(0) IS ASSUMED TO BE INDEPENDENT OF ENERGY = 0
C  SEE: ANSORGE ET AL. (UA5-COLLABORATION) Z.PHYS.C43(1989)75	C  SEE: ANSORGE ET AL. (UA5-COLLABORATION) Z.PHYS.C43(1989)75
*     RETPI0 = 0.19D0						*     RETPI0 = 0.19D0
C  RATIO ETA/PI(0) IS ASSUMED TO BE DEPENDENT ON ENERGY		C  RATIO ETA/PI(0) IS ASSUMED TO BE DEPENDENT ON ENERGY
C  SEE: GEICH-GIMBEL,INT.J.MOD.PHYS.A4(1989)1527 TAB.7.1	C  SEE: GEICH-GIMBEL,INT.J.MOD.PHYS.A4(1989)1527 TAB.7.1
C  HECK'S FIT:   RETPI0 IS 0.06 + 0.006*RSLOG + 0.0011*RSLOG*	C  HECK'S FIT:   RETPI0 IS 0.06 + 0.006*RSLOG + 0.0011*RSLOG*
      RETPI0 = 0.06D0 + 0.006D0 * RSLOG + 0.0011D0 * RSLOG**2	      RETPI0 = 0.06D0 + 0.006D0 * RSLOG + 0.0011D0 * RSLOG**2
C  AUXIL1 IS FRACTION OF PI(0)/(PI(0)+ETA)			C  AUXIL1 IS FRACTION OF PI(0)/(PI(0)+ETA)
      AUXIL1 = 1.D0 / (1.D0 + RETPI0)				      AUXIL1 = 1.D0 / (1.D0 + RETPI0)
C  NUMBER OF GAMMAS FROM PI(0) IS 2, FROM ETA IS 3.216 IN AVE	C  NUMBER OF GAMMAS FROM PI(0) IS 2, FROM ETA IS 3.216 IN AVE
C  AUXIL2 IS NUMBER OF GAMMA-PRODUCING-PARTICLES: PI(0) AND E	C  AUXIL2 IS NUMBER OF GAMMA-PRODUCING-PARTICLES: PI(0) AND E
      AUXIL2 = SEUGFC / ( AUXIL1 * 2.D0 + (1.D0 - AUXIL1) * 3	      AUXIL2 = SEUGFC / ( AUXIL1 * 2.D0 + (1.D0 - AUXIL1) * 3
      FETA   = (1.D0 - AUXIL1) * AUXIL2				      FETA   = (1.D0 - AUXIL1) * AUXIL2
      FPI0   =         AUXIL1  * AUXIL2				      FPI0   =         AUXIL1  * AUXIL2
C  CORRECT FPI0 BY DECAYS OF STRANGE BARYONS; NEUTRAL: FHYPN*	C  CORRECT FPI0 BY DECAYS OF STRANGE BARYONS; NEUTRAL: FHYPN*
C  CHARGED: 0.5*FNCH2*RHYPCH*0.5157; IT YIELDS FHYPN*(0.357+0	C  CHARGED: 0.5*FNCH2*RHYPCH*0.5157; IT YIELDS FHYPN*(0.357+0
      FPI0   = MAX( 0.D0, FPI0 - FHYPN * 0.486D0 )		      FPI0   = MAX( 0.D0, FPI0 - FHYPN * 0.486D0 )
C  SUMMED NEUTRAL PARTICLES FOR 1ST AND 2ND STRING		C  SUMMED NEUTRAL PARTICLES FOR 1ST AND 2ND STRING
      FNEUT2 = FNUCN + FKA0 + FHYPN + FETA + FPI0		      FNEUT2 = FNUCN + FKA0 + FHYPN + FETA + FPI0
C  NEUTRAL PARTICLES FROM 3RD STRING				C  NEUTRAL PARTICLES FROM 3RD STRING
      FNEUT3 = RC3TO2 * FNEUT2					      FNEUT3 = RC3TO2 * FNEUT2
C  TOTAL NUMBER OF NEUTRALS					C  TOTAL NUMBER OF NEUTRALS
      FNEUT  = FNEUT2 + FNEUT3					      FNEUT  = FNEUT2 + FNEUT3
      NEUTOT = NINT( FNEUT )					      NEUTOT = NINT( FNEUT )
C  CALCULATE TOTAL NUMBER OF PARTICLES TO BE CREATED		C  CALCULATE TOTAL NUMBER OF PARTICLES TO BE CREATED
      NTOTEM = NCH + NEUTOT					      NTOTEM = NCH + NEUTOT
      IF ( DEBUG ) WRITE(MDEBUG,*)				      IF ( DEBUG ) WRITE(MDEBUG,*)
     *     '    FNUCN,FKA0,FHYPN,FETA,FPI0,FNEUT2,FNEUT3,NTOT	     *     '    FNUCN,FKA0,FHYPN,FETA,FPI0,FNEUT2,FNEUT3,NTOT
     * SNGL(FNUCN),SNGL(FKA0),SNGL(FHYPN),SNGL(FETA),SNGL(FPI	     * SNGL(FNUCN),SNGL(FKA0),SNGL(FHYPN),SNGL(FETA),SNGL(FPI
     * SNGL(FNEUT2),SNGL(FNEUT3),NTOTEM				     * SNGL(FNEUT2),SNGL(FNEUT3),NTOTEM
C  LIMIT OF SECONDARIES PRODUCED (GIVEN BY SIZE OF ARRAY : 30	C  LIMIT OF SECONDARIES PRODUCED (GIVEN BY SIZE OF ARRAY : 30
C  LIMIT IS ARRAY SIZE - SIZE OF LARGEST TARGET NUCLEUS(40)	C  LIMIT IS ARRAY SIZE - SIZE OF LARGEST TARGET NUCLEUS(40)
      IF ( NTOTEM .GE. 2956 ) THEN				      IF ( NTOTEM .GE. 2956 ) THEN
        WRITE(MONIOU,*) 'HDPM  : REJECT EVENT WITH ',NTOTEM,	        WRITE(MONIOU,*) 'HDPM  : REJECT EVENT WITH ',NTOTEM,
     *                  ' SECONDARIES'				     *                  ' SECONDARIES'
        GOTO 1							        GOTO 1
      ENDIF							      ENDIF
C  SPECIAL TREATMENT IF MULTIPLICITY IS TOO LOW			C  SPECIAL TREATMENT IF MULTIPLICITY IS TOO LOW
      IF ( NTOTEM .LE. 3 ) ISEL = 1				      IF ( NTOTEM .LE. 3 ) ISEL = 1
 								 
C  FRACTION OF THE VARIOUS NEUTRAL PARTICLES (NN, K(0), L+S0 	C  FRACTION OF THE VARIOUS NEUTRAL PARTICLES (NN, K(0), L+S0 
C  NORMALIZE WITH THE SUM OF ALL NEUTRAL PARTICLES		C  NORMALIZE WITH THE SUM OF ALL NEUTRAL PARTICLES
      FNORML = 1.D0 / ( 0.5D0 * (FNUCN+FKA0+FHYPN) + FETA + F	      FNORML = 1.D0 / ( 0.5D0 * (FNUCN+FKA0+FHYPN) + FETA + F
      RNUCNR = FNUCN * FNORML * 0.5D0				      RNUCNR = FNUCN * FNORML * 0.5D0
      RKA0R  = FKA0  * FNORML * 0.5D0				      RKA0R  = FKA0  * FNORML * 0.5D0
      RHYPNR = FHYPN * FNORML * 0.5D0				      RHYPNR = FHYPN * FNORML * 0.5D0
      RETAR  = FETA  * FNORML					      RETAR  = FETA  * FNORML
      RPI0R  = FPI0  * FNORML					      RPI0R  = FPI0  * FNORML
C  CUMULATED RATIOS (NN, K(0), LAMBDA+SIGMA0 AS PAIRS)		C  CUMULATED RATIOS (NN, K(0), LAMBDA+SIGMA0 AS PAIRS)
      RPIER  = RPI0R + RETAR					      RPIER  = RPI0R + RETAR
      RPEKR  = RPIER + RKA0R					      RPEKR  = RPIER + RKA0R
      RPEKNR = RPEKR + RNUCNR					      RPEKNR = RPEKR + RNUCNR
C THEN THE REMAINDER (1-RPEKNR) MUST BE NEUTRAL HYPERON PAIRS	C THEN THE REMAINDER (1-RPEKNR) MUST BE NEUTRAL HYPERON PAIRS
      IF ( DEBUG ) WRITE(MDEBUG,*)				      IF ( DEBUG ) WRITE(MDEBUG,*)
     *         '    RPI0R,RETAR,RKA0R,RNUCNR,RHYPNR,FNORML=',	     *         '    RPI0R,RETAR,RKA0R,RNUCNR,RHYPNR,FNORML=',
     *  SNGL(RPI0R),SNGL(RETAR),SNGL(RKA0R),SNGL(RNUCNR),SNGL	     *  SNGL(RPI0R),SNGL(RETAR),SNGL(RKA0R),SNGL(RNUCNR),SNGL
     *  SNGL(FNORML)						     *  SNGL(FNORML)
 								 
C  PROBABILITY TO PRODUCE CHARGED PIONS IS PROBABILITY NOT TO	C  PROBABILITY TO PRODUCE CHARGED PIONS IS PROBABILITY NOT TO
C  CHARGED KAONS OR PROTONS OR CHARGED HYPERONS, WHERE PROTON	C  CHARGED KAONS OR PROTONS OR CHARGED HYPERONS, WHERE PROTON
C  IS HALF OF (ALL-NUCL)/(ALL-CHARGED)				C  IS HALF OF (ALL-NUCL)/(ALL-CHARGED)
      AUXIL  = RKCH + 0.5D0 * RNUCCH + RHYPCH			      AUXIL  = RKCH + 0.5D0 * RNUCCH + RHYPCH
      AUXIL3 = 1.D0 - AUXIL					      AUXIL3 = 1.D0 - AUXIL
C  RENORMALIZATION AS P/P_BAR, K+-, AND HYPERONS ARE PRODUCED	C  RENORMALIZATION AS P/P_BAR, K+-, AND HYPERONS ARE PRODUCED
C  AUXIL2 IS INVERSE OF NORMALISATION				C  AUXIL2 IS INVERSE OF NORMALISATION
      AUXIL2 = 1.D0 / (1.D0 - 0.5D0 * AUXIL)			      AUXIL2 = 1.D0 / (1.D0 - 0.5D0 * AUXIL)
C  CUMULATED PROBABILITIES (PP, K+-, SIGMA+- AS PAIRS)		C  CUMULATED PROBABILITIES (PP, K+-, SIGMA+- AS PAIRS)
      PPICH  = AUXIL3 * AUXIL2					      PPICH  = AUXIL3 * AUXIL2
      PPINCH =  PPICH + 0.25D0 * RNUCCH * AUXIL2		      PPINCH =  PPICH + 0.25D0 * RNUCCH * AUXIL2
      PPNKCH =  PPINCH + 0.5D0 * RKCH * AUXIL2			      PPNKCH =  PPINCH + 0.5D0 * RKCH * AUXIL2
C THEN THE REMAINDER (1-PPNKCH) MUST BE CHARGED HYPERON PAIRS	C THEN THE REMAINDER (1-PPNKCH) MUST BE CHARGED HYPERON PAIRS
      IF ( DEBUG ) WRITE(MDEBUG,*) '   PPICH,PPINCH,PPNKCH=',	      IF ( DEBUG ) WRITE(MDEBUG,*) '   PPICH,PPINCH,PPNKCH=',
     *         SNGL(PPICH),SNGL(PPINCH),SNGL(PPNKCH)		     *         SNGL(PPICH),SNGL(PPINCH),SNGL(PPNKCH)
 								 
C  NOW SELECT HOW MANY PARTICLES OF EACH TYPE ARE PRODUCED	C  NOW SELECT HOW MANY PARTICLES OF EACH TYPE ARE PRODUCED
      CALL PARNUM( INUMFL )					      CALL PARNUM( INUMFL )
      IF ( INUMFL .NE. 0 ) GOTO 1919				      IF ( INUMFL .NE. 0 ) GOTO 1919
 								 
C  DEFINE PARTICLE NUMBERS WHERE SPECIAL RAPIDITY IS CALCULAT	C  DEFINE PARTICLE NUMBERS WHERE SPECIAL RAPIDITY IS CALCULAT
C  FOR PARTICLES FROM TARGET (THIRD STRING)			C  FOR PARTICLES FROM TARGET (THIRD STRING)
      PPP = RC3TO2 / (1.D0+RC3TO2)				      PPP = RC3TO2 / (1.D0+RC3TO2)
C  NUMBER OF PARTICLES IN PROTON ANTIPROTON PAIRS FROM TARGET	C  NUMBER OF PARTICLES IN PROTON ANTIPROTON PAIRS FROM TARGET
      ITA = NINT(PPP * 2.D0 * NNC)				      ITA = NINT(PPP * 2.D0 * NNC)
C  NUMBER OF PARTICLES IN K+ K- PAIRS FROM TARGET		C  NUMBER OF PARTICLES IN K+ K- PAIRS FROM TARGET
      ITB = NINT(PPP * 2.D0 * NKC)				      ITB = NINT(PPP * 2.D0 * NKC)
C  NUMBER OF PARTICLES IN SIGMA+ SIGMA- PAIRS FROM TARGET	C  NUMBER OF PARTICLES IN SIGMA+ SIGMA- PAIRS FROM TARGET
      ITC = NINT(PPP * 2.D0 * NHC)				      ITC = NINT(PPP * 2.D0 * NHC)
C  NUMBER OF PI+ PI- FROM TARGET				C  NUMBER OF PI+ PI- FROM TARGET
      ITD = NINT(PPP * NPC )					      ITD = NINT(PPP * NPC )
C  CALCULATE BOUNDARIES						C  CALCULATE BOUNDARIES
      IA1 = 2							      IA1 = 2
      IA2 = IA1 + ITA						      IA2 = IA1 + ITA
      IB1 = IA1 + 2 * NNC					      IB1 = IA1 + 2 * NNC
      IB2 = IB1 + ITB						      IB2 = IB1 + ITB
      IC1 = IB1 + 2 * NKC					      IC1 = IB1 + 2 * NKC
      IC2 = IC1 + ITC						      IC2 = IC1 + ITC
      ID1 = IC1 + 2 * NHC					      ID1 = IC1 + 2 * NHC
      ID2 = ID1 + ITD						      ID2 = ID1 + ITD
      IE1 = ID1 +     NPC					      IE1 = ID1 +     NPC
C  NUMBER OF PARTICLES IN NEUTRON ANTINEUTRON PAIRS FROM TARG	C  NUMBER OF PARTICLES IN NEUTRON ANTINEUTRON PAIRS FROM TARG
      IE2 = IE1 + 2 * NNUCN(3)					      IE2 = IE1 + 2 * NNUCN(3)
      IF1 = IE1 + 2 * NNN					      IF1 = IE1 + 2 * NNN
C  NUMBER OF PARTICLES IN K0S K0L PAIRS FROM TARGET		C  NUMBER OF PARTICLES IN K0S K0L PAIRS FROM TARGET
      IF2 = IF1 + 2 * NKA0(3)					      IF2 = IF1 + 2 * NKA0(3)
      IG1 = IF1 + 2 * NKN					      IG1 = IF1 + 2 * NKN
C  NUMBER OF PARTICLES IN NEUTRAL HYPERON PAIRS FROM TARGET	C  NUMBER OF PARTICLES IN NEUTRAL HYPERON PAIRS FROM TARGET
      IG2 = IG1 + 2 * NHYPN(3)					      IG2 = IG1 + 2 * NHYPN(3)
      IH1 = IG1 + 2 * NHN					      IH1 = IG1 + 2 * NHN
C  NUMBER OF ETA FROM TARGET					C  NUMBER OF ETA FROM TARGET
      IH2 = IH1 + NETAS(3)					      IH2 = IH1 + NETAS(3)
      II1 = IH1 +     NET					      II1 = IH1 +     NET
C  NUMBER OF PI(0) FROM TARGET					C  NUMBER OF PI(0) FROM TARGET
      II2 = II1 + NPIZER(3)					      II2 = II1 + NPIZER(3)
      IJ1 = II1 +     NPN					      IJ1 = II1 +     NPN
      IF ( DEBUG ) THEN						      IF ( DEBUG ) THEN
        WRITE(MDEBUG,*) '   CHARGED FROM TARGET:',ITA,ITB,ITC	        WRITE(MDEBUG,*) '   CHARGED FROM TARGET:',ITA,ITB,ITC
        WRITE(MDEBUG,*) '   NEUTRAL FROM TARGET:',		        WRITE(MDEBUG,*) '   NEUTRAL FROM TARGET:',
     *     2*NNUCN(3),2*NKA0(3),2*NHYPN(3),NETAS(3),NPIZER(3)	     *     2*NNUCN(3),2*NKA0(3),2*NHYPN(3),NETAS(3),NPIZER(3)
        WRITE(MDEBUG,*) '   NTOTEM,IJ1=',NTOTEM,IJ1		        WRITE(MDEBUG,*) '   NTOTEM,IJ1=',NTOTEM,IJ1
      ENDIF							      ENDIF
C  REDEFINE TOTAL NUMBER OF SECONDARY PARTICLES : NTOTEM	C  REDEFINE TOTAL NUMBER OF SECONDARY PARTICLES : NTOTEM
C  BY CHARGE EXCHANGE AND RESONANCE FORMATION THIS NUMBER MAY	C  BY CHARGE EXCHANGE AND RESONANCE FORMATION THIS NUMBER MAY
      NTOTEM = IJ1 - 2						      NTOTEM = IJ1 - 2
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  RATIO OF RAPIDITY DENSITY TO MEAN PSEUDORAPIDITY IN CENTER	C  RATIO OF RAPIDITY DENSITY TO MEAN PSEUDORAPIDITY IN CENTER
C  PARAMETRISATION SEE CAPDEVIELLE, J.PHYS.G:NUCL.PHYS.15(198	C  PARAMETRISATION SEE CAPDEVIELLE, J.PHYS.G:NUCL.PHYS.15(198
      IF ( XZ .LT. 1.5D0 ) THEN					      IF ( XZ .LT. 1.5D0 ) THEN
        RDS = (0.24396D0 + 0.70150424D0 * XZ)**2		        RDS = (0.24396D0 + 0.70150424D0 * XZ)**2
      ELSE							      ELSE
        RDS = (0.55685D0 + 0.48664753D0 * XZ)**2		        RDS = (0.55685D0 + 0.48664753D0 * XZ)**2
      ENDIF							      ENDIF
C  CALCULATE NOW: DN/DY AT Y = 0; DC0 IS AVERAGE PSEUDORAPIDI	C  CALCULATE NOW: DN/DY AT Y = 0; DC0 IS AVERAGE PSEUDORAPIDI
C  TRAP IS RATIO (RAPID.DENS.)/(PSEUDORAP.DENS.) IN CENTER OF	C  TRAP IS RATIO (RAPID.DENS.)/(PSEUDORAP.DENS.) IN CENTER OF
      TRAP = 1.25D0						      TRAP = 1.25D0
      IF ( IDIF .EQ. 0  .AND.  ECMDPM .GT. 19.4D0 )		      IF ( IDIF .EQ. 0  .AND.  ECMDPM .GT. 19.4D0 )
     *                 TRAP = MAX( 1.D0, 1.28852D0 - 0.0065D0	     *                 TRAP = MAX( 1.D0, 1.28852D0 - 0.0065D0
      DCN2 = DC0 * RDS * TRAP					      DCN2 = DC0 * RDS * TRAP
      IF ( DEBUG ) WRITE(MDEBUG,*) '   RDS,TRAP,DCN2=',		      IF ( DEBUG ) WRITE(MDEBUG,*) '   RDS,TRAP,DCN2=',
     *                SNGL(RDS),SNGL(TRAP),SNGL(DCN2)		     *                SNGL(RDS),SNGL(TRAP),SNGL(DCN2)
C  AMPLITUDE OF GAUSSIAN 1ST AND 2ND STRING			C  AMPLITUDE OF GAUSSIAN 1ST AND 2ND STRING
      ATG2 = FNCH2 / (5.0132566D0 * WIDC2)			      ATG2 = FNCH2 / (5.0132566D0 * WIDC2)
C  NEW DEFINITION OF POSITION BASED ON SEMI INCLUSIVE DATA	C  NEW DEFINITION OF POSITION BASED ON SEMI INCLUSIVE DATA
      SQ2  = 2.D0 * ATG2 / DCN2					      SQ2  = 2.D0 * ATG2 / DCN2
C  FINAL POSITION OF GAUSSIAN;  WIDTH WIDC2 IS UNCHANGED	C  FINAL POSITION OF GAUSSIAN;  WIDTH WIDC2 IS UNCHANGED
      IF ( SQ2 .GT. 1.D0 )  POSC2 = WIDC2 * SQRT( 2.D0*LOG(SQ	      IF ( SQ2 .GT. 1.D0 )  POSC2 = WIDC2 * SQRT( 2.D0*LOG(SQ
C  DENSITY OF CHARGED IN EXCESS FROM TARGET IN CENTER OF RAPI	C  DENSITY OF CHARGED IN EXCESS FROM TARGET IN CENTER OF RAPI
      DCN3 = 0.5D0 * (GNU - 1.D0) * DCN2			      DCN3 = 0.5D0 * (GNU - 1.D0) * DCN2
      IF (DEBUG) WRITE(MDEBUG,*) '   SQ2,POSC2,DCN3=',		      IF (DEBUG) WRITE(MDEBUG,*) '   SQ2,POSC2,DCN3=',
     *          SNGL(SQ2),SNGL(POSC2),SNGL(DCN3)		     *          SNGL(SQ2),SNGL(POSC2),SNGL(DCN3)
      IF ( DCN3 .GT. 0.D0 ) THEN				      IF ( DCN3 .GT. 0.D0 ) THEN
C  AMPLITUDE 3RD GAUSSIAN					C  AMPLITUDE 3RD GAUSSIAN
        ATG3 = FNCH3 / (5.0132566D0 * WIDC3)			        ATG3 = FNCH3 / (5.0132566D0 * WIDC3)
C  AMPLITUDE IS DIVIDED BY DENSITY FOR GETTING CENTER OF 3RD 	C  AMPLITUDE IS DIVIDED BY DENSITY FOR GETTING CENTER OF 3RD 
        SQ3  = 2.D0 * ATG3 / DCN3				        SQ3  = 2.D0 * ATG3 / DCN3
C  CHECK IF ADDITIVE MULTIPLICITY IS TOO LOW			C  CHECK IF ADDITIVE MULTIPLICITY IS TOO LOW
        IF ( SQ3 .GT. 1.D0 )  POSC3 = WIDC3 * SQRT( 2.D0*LOG(	        IF ( SQ3 .GT. 1.D0 )  POSC3 = WIDC3 * SQRT( 2.D0*LOG(
        IF (DEBUG) WRITE(MDEBUG,*)'   SQ3,POSC3=',SNGL(SQ3),S	        IF (DEBUG) WRITE(MDEBUG,*)'   SQ3,POSC3=',SNGL(SQ3),S
      ENDIF							      ENDIF
 								 
C  NFLPI0 .EQ. 0 MEANS TREAT PI(0) RAPIDITY ACCORDING TO COLL	C  NFLPI0 .EQ. 0 MEANS TREAT PI(0) RAPIDITY ACCORDING TO COLL
      IF ( NFLPI0 .EQ. 0 ) THEN					      IF ( NFLPI0 .EQ. 0 ) THEN
C  RATIO OF RAPIDITY DENSITY TO MEAN PSEUDORAPIDITY AT CENTER	C  RATIO OF RAPIDITY DENSITY TO MEAN PSEUDORAPIDITY AT CENTER
        IF ( ZG .LT. 1.5D0 ) THEN				        IF ( ZG .LT. 1.5D0 ) THEN
          RDG = (0.24396D0 + 0.70150424D0 * ZG)**2		          RDG = (0.24396D0 + 0.70150424D0 * ZG)**2
        ELSE							        ELSE
          RDG = (0.55685D0 + 0.48664753D0 * ZG)**2		          RDG = (0.55685D0 + 0.48664753D0 * ZG)**2
        ENDIF							        ENDIF
C  GAMMAS USE RATIO TRAG TO CALCULATE RATIO OF RAPIDITY TO	C  GAMMAS USE RATIO TRAG TO CALCULATE RATIO OF RAPIDITY TO
C  PSEUDO RAPIDITY DENSITY IN CENTER (TRAG = 1.1 * 0.5 ).	C  PSEUDO RAPIDITY DENSITY IN CENTER (TRAG = 1.1 * 0.5 ).
C  FACTOR 0.5 COMES FROM RATIO NEUTRAL/CHARGED, AS WE USE DC0	C  FACTOR 0.5 COMES FROM RATIO NEUTRAL/CHARGED, AS WE USE DC0
C  IS AVERAGE PSEUDORAPIDITY DENSITY FOR CHARGED PIONS		C  IS AVERAGE PSEUDORAPIDITY DENSITY FOR CHARGED PIONS
        TRAG = 0.55D0						        TRAG = 0.55D0
        IF ( IDIF .EQ. 0 ) THEN					        IF ( IDIF .EQ. 0 ) THEN
          IF ( ECMDPM .GT. 19.4D0 )				          IF ( ECMDPM .GT. 19.4D0 )
     *               TRAG = MAX( 0.4D0, 0.6658D0 - 0.01954D0 	     *               TRAG = MAX( 0.4D0, 0.6658D0 - 0.01954D0 
          IF     ( ECMDPM .LE.  50.D0 ) THEN			          IF     ( ECMDPM .LE.  50.D0 ) THEN
            DCG = DC0 * RDG * TRAG				            DCG = DC0 * RDG * TRAG
          ELSEIF ( ECMDPM .LE. 200.D0 ) THEN			          ELSEIF ( ECMDPM .LE. 200.D0 ) THEN
            DCG = DC0 * RDG * TRAG * (1.D0 + 0.18D0 * LOG(ECM	            DCG = DC0 * RDG * TRAG * (1.D0 + 0.18D0 * LOG(ECM
          ELSE							          ELSE
            DCG = DC0 * RDG * TRAG * 1.25D0			            DCG = DC0 * RDG * TRAG * 1.25D0
          ENDIF							          ENDIF
        ELSE							        ELSE
          DCG = DC0 * RDG * TRAG				          DCG = DC0 * RDG * TRAG
        ENDIF							        ENDIF
C  DEFINE WIDTH OF STRINGS FOR NEUTRAL PIONS AND ETAS		C  DEFINE WIDTH OF STRINGS FOR NEUTRAL PIONS AND ETAS
        WIDN2 = WIDC2 * MIN( 1.D0, 1.12275D0 - 0.0208D0 * RSL	        WIDN2 = WIDC2 * MIN( 1.D0, 1.12275D0 - 0.0208D0 * RSL
C  NEW DEFINITION OF CENTER OF GAUSSIAN BASED ON SEMI INCLUSI	C  NEW DEFINITION OF CENTER OF GAUSSIAN BASED ON SEMI INCLUSI
C  USING AMPLITUDE OF THE GAUSSIAN FOR NEUTRALS			C  USING AMPLITUDE OF THE GAUSSIAN FOR NEUTRALS
        AUXIL = 2.D0 / (5.0132566D0 * WIDN2 * DCG)		        AUXIL = 2.D0 / (5.0132566D0 * WIDN2 * DCG)
C  TOTAL MULTIPLICITY USED FOR 1ST AND 2ND STRING OF PI(0) AN	C  TOTAL MULTIPLICITY USED FOR 1ST AND 2ND STRING OF PI(0) AN
C  IS GIVEN BY THEIR NUMBERS. ANALOGOUS FOR 3RD STRING		C  IS GIVEN BY THEIR NUMBERS. ANALOGOUS FOR 3RD STRING
        SP2   = DBLE ( NPIZER(2)+NETAS(2)) * AUXIL		        SP2   = DBLE ( NPIZER(2)+NETAS(2)) * AUXIL
C  FINAL CENTER OF GAUSSIANS FOR PI(0) AND ETA (WIDC2 IS UNCH	C  FINAL CENTER OF GAUSSIANS FOR PI(0) AND ETA (WIDC2 IS UNCH
        IF ( SP2 .GT. 1.D0 ) THEN				        IF ( SP2 .GT. 1.D0 ) THEN
          POSN2 = WIDN2 * SQRT( 2.D0 * LOG(SP2) )		          POSN2 = WIDN2 * SQRT( 2.D0 * LOG(SP2) )
        ELSE							        ELSE
          POSN2 = POSC2						          POSN2 = POSC2
        ENDIF							        ENDIF
        WIDN3 = WIDN2						        WIDN3 = WIDN2
        SP3   = DBLE(NPIZER(3)+NETAS(3)) * AUXIL		        SP3   = DBLE(NPIZER(3)+NETAS(3)) * AUXIL
        IF ( SP3 .GT. 1.D0 ) THEN				        IF ( SP3 .GT. 1.D0 ) THEN
          POSN3 = WIDN3 * SQRT( 2.D0 * LOG(SP3) )		          POSN3 = WIDN3 * SQRT( 2.D0 * LOG(SP3) )
        ELSE							        ELSE
          POSN3 = POSC3						          POSN3 = POSC3
        ENDIF							        ENDIF
      ELSE							      ELSE
C  NFLPI0 .EQ. 1 MEANS RAPIDITY OF PI(0) AND ETA SAME AS THAT	C  NFLPI0 .EQ. 1 MEANS RAPIDITY OF PI(0) AND ETA SAME AS THAT
        POSN2 = POSC2						        POSN2 = POSC2
        WIDN2 = WIDC2						        WIDN2 = WIDC2
        POSN3 = POSC3						        POSN3 = POSC3
        WIDN3 = WIDC3						        WIDN3 = WIDC3
      ENDIF							      ENDIF
      IF ( DEBUG ) WRITE(MDEBUG,*)				      IF ( DEBUG ) WRITE(MDEBUG,*)
     *           '   ZG,RDG,DCG,SP2,SP3,POSN2,POSN3,WIDN2 =',	     *           '   ZG,RDG,DCG,SP2,SP3,POSN2,POSN3,WIDN2 =',
     *   SNGL(ZG),SNGL(RDG),SNGL(DCG),SNGL(SP2),SNGL(SP3),SNG	     *   SNGL(ZG),SNGL(RDG),SNGL(DCG),SNGL(SP2),SNGL(SP3),SNG
     *   SNGL(POSN3),SNGL(WIDN2)				     *   SNGL(POSN3),SNGL(WIDN2)
 								 
C------------------------------------------------------------	C------------------------------------------------------------
      NREPR1 = 0						      NREPR1 = 0
C  RETURN POINT. NUMBERS OF PARTICLES REMAIN UNCHANGED FOR NE	C  RETURN POINT. NUMBERS OF PARTICLES REMAIN UNCHANGED FOR NE
C  BUT INDIVIDUAL RAPIDITIES GET NEW VALUES.			C  BUT INDIVIDUAL RAPIDITIES GET NEW VALUES.
C  START FROM BEGINNING IF NO MATCH AFTER 20 TRIES		C  START FROM BEGINNING IF NO MATCH AFTER 20 TRIES
  30  CONTINUE							  30  CONTINUE
      NREPR1 = NREPR1 + 1					      NREPR1 = NREPR1 + 1
      IF ( NREPR1 .GT. 20 ) THEN				      IF ( NREPR1 .GT. 20 ) THEN
        IF ( IDIF .EQ. 1  .AND.  NREPRD .LE. 10 ) GOTO 1919	        IF ( IDIF .EQ. 1  .AND.  NREPRD .LE. 10 ) GOTO 1919
        GOTO 1							        GOTO 1
      ENDIF							      ENDIF
 								 
C  FOR TOTAL NUMBER OF PARTICLES ADD 2 FOR LEADER AND ANTILEA	C  FOR TOTAL NUMBER OF PARTICLES ADD 2 FOR LEADER AND ANTILEA
      NTOT = NTOTEM + 2						      NTOT = NTOTEM + 2
 								 
C  PRODUCTION OF INDIVIDUAL RAPIDITIES FOR ALL SECONDARY PART	C  PRODUCTION OF INDIVIDUAL RAPIDITIES FOR ALL SECONDARY PART
      CALL PARRAP						      CALL PARRAP
CC    IF ( DEBUG ) THEN						CC    IF ( DEBUG ) THEN
CC      WRITE (MDEBUG,*) '   RAPIDITIES:'			CC      WRITE (MDEBUG,*) '   RAPIDITIES:'
CC      WRITE (MDEBUG,134) (I,YR(I), I=3,NTOT)			CC      WRITE (MDEBUG,134) (I,YR(I), I=3,NTOT)
C134    FORMAT('   ',1P, (1X, I4, 5X, G13.6 ))			C134    FORMAT('   ',1P, (1X, I4, 5X, G13.6 ))
CC    ENDIF							CC    ENDIF
 								 
 								 
C  CALCULATION OF CENTRAL RAPIDITY WITHOUT (ANTI)LEADER		C  CALCULATION OF CENTRAL RAPIDITY WITHOUT (ANTI)LEADER
C  MULTIPLICITY IN CENTER OF RAPIDITY DISTRIBUTION		C  MULTIPLICITY IN CENTER OF RAPIDITY DISTRIBUTION
      IZN = 0.D0						      IZN = 0.D0
      IF ( IDIF .EQ. 0 ) THEN					      IF ( IDIF .EQ. 0 ) THEN
        DO 111  I = 3,NTOT					        DO 111  I = 3,NTOT
          IF ( ABS(YR(I)) .LT. DELRAP ) IZN = IZN + 1		          IF ( ABS(YR(I)) .LT. DELRAP ) IZN = IZN + 1
 111    CONTINUE						 111    CONTINUE
        IF ( IZN .LT. 1 ) THEN					        IF ( IZN .LT. 1 ) THEN
          IF ( ISEL .EQ. 0 ) GOTO 30				          IF ( ISEL .EQ. 0 ) GOTO 30
C  IN CASE OF FEW PARTICLES, SET PARTICLE NUMBER IN PLATEAU T	C  IN CASE OF FEW PARTICLES, SET PARTICLE NUMBER IN PLATEAU T
          IZN = 1						          IZN = 1
        ENDIF							        ENDIF
C  CENTRAL RAPIDITY DENSITY FOR CHARGED PARTICLES		C  CENTRAL RAPIDITY DENSITY FOR CHARGED PARTICLES
        IF ( NTOTEM .GE. 1 ) THEN				        IF ( NTOTEM .GE. 1 ) THEN
          ZNC = MAX( 1.1D0, DBLE(NCH)*IZN/(DBLE(NTOTEM)*2.D0*	          ZNC = MAX( 1.1D0, DBLE(NCH)*IZN/(DBLE(NTOTEM)*2.D0*
        ELSE							        ELSE
          ZNC = 1.1D0						          ZNC = 1.1D0
        ENDIF							        ENDIF
      ELSE							      ELSE
C  DIFFRACTION: SHIFT RAPIDITIES + TAKE CENT.RAP.DENS. FROM P	C  DIFFRACTION: SHIFT RAPIDITIES + TAKE CENT.RAP.DENS. FROM P
        DO 112  I = 3,NTOT					        DO 112  I = 3,NTOT
          YR(I) = YR(I) + YY0					          YR(I) = YR(I) + YY0
 112    CONTINUE						 112    CONTINUE
        ZNC = MAX( 1.1D0, DCN2 )				        ZNC = MAX( 1.1D0, DCN2 )
      ENDIF							      ENDIF
 								 
C  ZN ACCOUNTS FOR THE RISE OF PT WITH CENTRAL RAP.DENSITY. T	C  ZN ACCOUNTS FOR THE RISE OF PT WITH CENTRAL RAP.DENSITY. T
C  IS A FIT TO UA1 VALUES OF ARNISON ET AL, PHYS.LETT.B118(19	C  IS A FIT TO UA1 VALUES OF ARNISON ET AL, PHYS.LETT.B118(19
C  REGARD, THAT OUR ZN IS DEFINED DIFFERENT FROM LITERATURE N	C  REGARD, THAT OUR ZN IS DEFINED DIFFERENT FROM LITERATURE N
C - - - - - -							C - - - - - -
C  MODIFICATION AFTER J.N. CAPDEVIELLE, (DEC.96)		C  MODIFICATION AFTER J.N. CAPDEVIELLE, (DEC.96)
      IF ( ECMDPM .LE. 500.D0 ) THEN				      IF ( ECMDPM .LE. 500.D0 ) THEN
        ZN = MAX( 1.00001D0, 3.669D0 / ZNC**0.435D0 + 6.4D0 )	        ZN = MAX( 1.00001D0, 3.669D0 / ZNC**0.435D0 + 6.4D0 )
      ELSE							      ELSE
C  TAKE INTO ACCOUNT THE RESULTS OF UA1/MIMI EXPERIMENT		C  TAKE INTO ACCOUNT THE RESULTS OF UA1/MIMI EXPERIMENT
        IF ( ZNC .GE. 3.D0 ) THEN				        IF ( ZNC .GE. 3.D0 ) THEN
          ZN = 1.D0 /(ZNC*0.004111D0 + 0.145D0)+3.D0		          ZN = 1.D0 /(ZNC*0.004111D0 + 0.145D0)+3.D0
        ELSE							        ELSE
C  FOR ROCH < 3.00 (MIMI)   (TO BE USED IN  PTRAM)		C  FOR ROCH < 3.00 (MIMI)   (TO BE USED IN  PTRAM)
          ZM = 0.0033D0 * (ZNC-1.56D0)**2 + 0.406D0		          ZM = 0.0033D0 * (ZNC-1.56D0)**2 + 0.406D0
          ZN = 2.64D0/ZM + 3.D0					          ZN = 2.64D0/ZM + 3.D0
        ENDIF							        ENDIF
      ENDIF							      ENDIF
C - - - - - -							C - - - - - -
C  NOW SET PARTICLE TYPE AND TRANSV. MOMENTA FOR NEW PARTICLE	C  NOW SET PARTICLE TYPE AND TRANSV. MOMENTA FOR NEW PARTICLE
C  SET ALSO TRANSVERSE MASS FOR ALL PARTICLES (INCL. LEADER+A	C  SET ALSO TRANSVERSE MASS FOR ALL PARTICLES (INCL. LEADER+A
      CALL PPARAM						      CALL PPARAM
 								 
      IF ( IDIF .EQ. 0 ) THEN					      IF ( IDIF .EQ. 0 ) THEN
C  NOW SET THE RAPIDITY OF THE ANTILEADER ACCORDING TO THE DI	C  NOW SET THE RAPIDITY OF THE ANTILEADER ACCORDING TO THE DI
C  IN THE FEYNMAN X VARIABLE; SET THE RAPIDITY OF LEADER TO C	C  IN THE FEYNMAN X VARIABLE; SET THE RAPIDITY OF LEADER TO C
C  THE REMAINDER OF ENERGY					C  THE REMAINDER OF ENERGY
        CALL LEDENY( LEDEFL )					        CALL LEDENY( LEDEFL )
        IF ( LEDEFL .NE. 0 ) THEN				        IF ( LEDEFL .NE. 0 ) THEN
          IF ( DEBUG ) WRITE(MDEBUG,*) '   LEDEFL=',LEDEFL	          IF ( DEBUG ) WRITE(MDEBUG,*) '   LEDEFL=',LEDEFL
          GOTO 30						          GOTO 30
        ENDIF							        ENDIF
 								 
C  CALCULATE FOR SINGLE COLLISION SYSTEM C.M. ENERGY + RAPIDI	C  CALCULATE FOR SINGLE COLLISION SYSTEM C.M. ENERGY + RAPIDI
        IF ( GNU .LE. 1.D0 ) THEN				        IF ( GNU .LE. 1.D0 ) THEN
          JGNU   = 0.D0						          JGNU   = 0.D0
          DYGNU  = 0.D0						          DYGNU  = 0.D0
          ECMJAD = ECMDPM					          ECMJAD = ECMDPM
        ELSE							        ELSE
C  MULTIPLE COLLISION IN TARGET					C  MULTIPLE COLLISION IN TARGET
          JGNU   = NINT(GNU-1.D0)				          JGNU   = NINT(GNU-1.D0)
C  ADD ADDITIONALLY INTERACTING					C  ADD ADDITIONALLY INTERACTING
C  TARGET NUCLEONS TO GET CORRECT JADACH FILTERING		C  TARGET NUCLEONS TO GET CORRECT JADACH FILTERING
C  CHOSE RANDOMLY WHETHER PROTON OR NEUTRON			C  CHOSE RANDOMLY WHETHER PROTON OR NEUTRON
          CALL RMMAR( RD,JGNU,1 )				          CALL RMMAR( RD,JGNU,1 )
          IPR = 0						          IPR = 0
          INE = 0						          INE = 0
          TARMAS = PAMA(ITYP(2))				          TARMAS = PAMA(ITYP(2))
          DO 114  I = 1,JGNU					          DO 114  I = 1,JGNU
            NTOT       = NTOT + 1				            NTOT       = NTOT + 1
            IF ( RD(I) .LE. .5D0 ) THEN				            IF ( RD(I) .LE. .5D0 ) THEN
              ITYP(NTOT) = 13					              ITYP(NTOT) = 13
              INE = INE + 1					              INE = INE + 1
            ELSE						            ELSE
              ITYP(NTOT) = 14					              ITYP(NTOT) = 14
              IPR = IPR + 1					              IPR = IPR + 1
            ENDIF						            ENDIF
            TMAS(NTOT) = PAMA(ITYP(NTOT))			            TMAS(NTOT) = PAMA(ITYP(NTOT))
            TARMAS     = TARMAS + TMAS(NTOT)			            TARMAS     = TARMAS + TMAS(NTOT)
            EA(NTOT)   = TMAS(NTOT)				            EA(NTOT)   = TMAS(NTOT)
            PX(NTOT)   = 0.D0					            PX(NTOT)   = 0.D0
            PY(NTOT)   = 0.D0					            PY(NTOT)   = 0.D0
            PT2(NTOT)  = 0.D0					            PT2(NTOT)  = 0.D0
 114      CONTINUE						 114      CONTINUE
 								 
C  CALCULATE C.M. ENERGY + RAPIDITY SHIFT			C  CALCULATE C.M. ENERGY + RAPIDITY SHIFT
*         YCMGNU = 0.5D0 * LOG( (ELAB+TARMAS+PLAB)/(ELAB+TARM	*         YCMGNU = 0.5D0 * LOG( (ELAB+TARMAS+PLAB)/(ELAB+TARM
          YCMGNU = 0.5D0 * LOG( (EPLUSP**2     +TARMAS*EPLUSP	          YCMGNU = 0.5D0 * LOG( (EPLUSP**2     +TARMAS*EPLUSP
     *                          (PAMA(ITYPE)**2+TARMAS*EPLUSP	     *                          (PAMA(ITYPE)**2+TARMAS*EPLUSP
          DYGNU  = YCM - YCMGNU					          DYGNU  = YCM - YCMGNU
 								 
C  CALCULATE RAPIDITIES OF ADDITIONALLY INTERACTING TARGET NU	C  CALCULATE RAPIDITIES OF ADDITIONALLY INTERACTING TARGET NU
C  IN THE CM SYSTEM OF NUCLEON-NUCLEON SYSTEM			C  IN THE CM SYSTEM OF NUCLEON-NUCLEON SYSTEM
          DO 115  I = NTOT-JGNU+1,NTOT				          DO 115  I = NTOT-JGNU+1,NTOT
            YR(I) = - YCM					            YR(I) = - YCM
 115      CONTINUE						 115      CONTINUE
C  SHIFT RAPIDITIES INTO CM SYSTEM OF GNU+1 MASSES		C  SHIFT RAPIDITIES INTO CM SYSTEM OF GNU+1 MASSES
          DO 113  I = 1,NTOT					          DO 113  I = 1,NTOT
            YR(I) = YR(I) + DYGNU				            YR(I) = YR(I) + DYGNU
 113      CONTINUE						 113      CONTINUE
 								 
C  CENTER OF MASS ENERGY OF 1 PROJECTILE AND GNU TARGET NUCLE	C  CENTER OF MASS ENERGY OF 1 PROJECTILE AND GNU TARGET NUCLE
C  BE USED IN THE JADACH FILTER.				C  BE USED IN THE JADACH FILTER.
          ECMJAD = SQRT( PAMA(ITYPE)**2 + TARMAS**2 + 2.D0*TA	          ECMJAD = SQRT( PAMA(ITYPE)**2 + TARMAS**2 + 2.D0*TA
 								 
        ENDIF							        ENDIF
 								 
      ELSE							      ELSE
C  IN CASE OF DIFFRACTION SET THE RAPIDITY OF LEADER AND ANTI	C  IN CASE OF DIFFRACTION SET THE RAPIDITY OF LEADER AND ANTI
C  IN SUBROUTINE LEADDF						C  IN SUBROUTINE LEADDF
        DYGNU  = 0.D0						        DYGNU  = 0.D0
        ECMJAD = ECMDPM						        ECMJAD = ECMDPM
        CALL LEADDF( IFLGLD )					        CALL LEADDF( IFLGLD )
        IF ( IFLGLD .NE. 0 ) THEN				        IF ( IFLGLD .NE. 0 ) THEN
          IF ( DEBUG ) WRITE(MDEBUG,*) '   IFLGLD=',IFLGLD	          IF ( DEBUG ) WRITE(MDEBUG,*) '   IFLGLD=',IFLGLD
          GOTO 30						          GOTO 30
        ENDIF							        ENDIF
      ENDIF							      ENDIF
 								 
C  CORRECT THE RAPIDITIES TO CONSERVE LONGITUDINAL MOMENTA AN	C  CORRECT THE RAPIDITIES TO CONSERVE LONGITUDINAL MOMENTA AN
C  USING THE ALGORITHM OF JADACH (SIMPLIFIED VERSION BY R. AT	C  USING THE ALGORITHM OF JADACH (SIMPLIFIED VERSION BY R. AT
      CALL JADACH( ECMJAD,JADFLG )				      CALL JADACH( ECMJAD,JADFLG )
      IF ( JADFLG .NE. 0 ) THEN					      IF ( JADFLG .NE. 0 ) THEN
        IF ( DEBUG ) WRITE(MDEBUG,*) '   JADFLG=', JADFLG	        IF ( DEBUG ) WRITE(MDEBUG,*) '   JADFLG=', JADFLG
        IF ( JADFLG .GT. 0 ) GOTO 30				        IF ( JADFLG .GT. 0 ) GOTO 30
        IF ( JADFLG .LT. 0 ) THEN				        IF ( JADFLG .LT. 0 ) THEN
          NREPRD = NREPRD + 1					          NREPRD = NREPRD + 1
          IF ( NREPRD .GT. 10 ) GOTO 1				          IF ( NREPRD .GT. 10 ) GOTO 1
          GOTO 1919						          GOTO 1919
        ENDIF							        ENDIF
      ENDIF							      ENDIF
 								 
 								 
C  CALCULATE LAB ENERGIES OF SECONDARY PARTICLES FROM THE RAP	C  CALCULATE LAB ENERGIES OF SECONDARY PARTICLES FROM THE RAP
C  INCLUDING THE ADDITIONAL TARGET NUCLEONS			C  INCLUDING THE ADDITIONAL TARGET NUCLEONS
      ETOT = 0.D0						      ETOT = 0.D0
      DO 135  I = 1,NTOT					      DO 135  I = 1,NTOT
        YR(I) = YR(I) + YCM - DYGNU				        YR(I) = YR(I) + YCM - DYGNU
        EA(I) = TMAS(I) * COSH( YR(I) )				        EA(I) = TMAS(I) * COSH( YR(I) )
        ETOT  = ETOT + EA(I)					        ETOT  = ETOT + EA(I)
 135  CONTINUE							 135  CONTINUE
 								 
      IF ( DEBUG ) WRITE(MDEBUG,136)				      IF ( DEBUG ) WRITE(MDEBUG,136)
     *             (I,ITYP(I),PX(I),PY(I),YR(I),EA(I),I=1,NTO	     *             (I,ITYP(I),PX(I),PY(I),YR(I),EA(I),I=1,NTO
 136  FORMAT('  NO ITYP     PX          PY            YR     	 136  FORMAT('  NO ITYP     PX          PY            YR     
     *      (' ',I4,I3,1X,1P,4G13.6) )				     *      (' ',I4,I3,1X,1P,4G13.6) )
 								 
C------------------------------------------------------------	C------------------------------------------------------------
C  LOOP OVER ALL SECONDARY PARTICLES AND THE LEADING PARTICLE	C  LOOP OVER ALL SECONDARY PARTICLES AND THE LEADING PARTICLE
C  PUT THEM ON THE STACK					C  PUT THEM ON THE STACK
      DO 139  LK = 5,8						      DO 139  LK = 5,8
        SECPAR(LK) = CURPAR(LK)					        SECPAR(LK) = CURPAR(LK)
 139  CONTINUE							 139  CONTINUE
 								 
C  PROCESS LOOP							C  PROCESS LOOP
      DO 140  J = 1,NTOT					      DO 140  J = 1,NTOT
C  REJECTION OF BACKWARD GOING PARTICLES			C  REJECTION OF BACKWARD GOING PARTICLES
        IF ( YR(J) .LE. 0.D0 ) THEN				        IF ( YR(J) .LE. 0.D0 ) THEN
          IF ( DEBUG ) WRITE(MDEBUG,*)'HDPM  : YR REJECT PART	          IF ( DEBUG ) WRITE(MDEBUG,*)'HDPM  : YR REJECT PART
          GOTO 140						          GOTO 140
        ENDIF							        ENDIF
C  CALCULATE THE PROPERTIES OF ALL SECONDARIES			C  CALCULATE THE PROPERTIES OF ALL SECONDARIES
C  PARTICLE TYPE						C  PARTICLE TYPE
        SECPAR(1) = ITYP(J)					        SECPAR(1) = ITYP(J)
C  CALCULATE GAMMA FACTOR					C  CALCULATE GAMMA FACTOR
        SECPAR(2) = EA(J) / PAMA(ITYP(J))			        SECPAR(2) = EA(J) / PAMA(ITYP(J))
C  TOTAL MOMENTUM SQUARED					C  TOTAL MOMENTUM SQUARED
        PTM = EA(J)**2 - PAMA(ITYP(J))**2			        PTM = EA(J)**2 - PAMA(ITYP(J))**2
        IF ( PT2(J) .GT. PTM ) THEN				        IF ( PT2(J) .GT. PTM ) THEN
          IF ( DEBUG ) WRITE(MDEBUG,*)'HDPM  : PT REJECT PART	          IF ( DEBUG ) WRITE(MDEBUG,*)'HDPM  : PT REJECT PART
          GOTO 140						          GOTO 140
        ENDIF							        ENDIF
C  EMISSION ZENITH ANGLE AGAINST TRAJECTORY OF PROJECTILE	C  EMISSION ZENITH ANGLE AGAINST TRAJECTORY OF PROJECTILE
        IF ( PTM .EQ. 0.D0 ) THEN				        IF ( PTM .EQ. 0.D0 ) THEN
          COSTET = 1.D0						          COSTET = 1.D0
        ELSE							        ELSE
          COSTET = SQRT( 1.D0 - PT2(J) / PTM )			          COSTET = SQRT( 1.D0 - PT2(J) / PTM )
        ENDIF							        ENDIF
C  EMISSION AZIMUTH ANGLE					C  EMISSION AZIMUTH ANGLE
        IF ( PX(J) .NE. 0.D0  .OR.  PY(J) .NE. 0.D0 ) THEN	        IF ( PX(J) .NE. 0.D0  .OR.  PY(J) .NE. 0.D0 ) THEN
          PHIJ = ATAN2( PY(J), PX(J) )				          PHIJ = ATAN2( PY(J), PX(J) )
        ELSE							        ELSE
          PHIJ = 0.D0						          PHIJ = 0.D0
        ENDIF							        ENDIF
        CALL ADDANG( COSTHE,PHI, COSTET,PHIJ, SECPAR(3),SECPA	        CALL ADDANG( COSTHE,PHI, COSTET,PHIJ, SECPAR(3),SECPA
        IF ( SECPAR(3) .LT. C(29) ) THEN			        IF ( SECPAR(3) .LT. C(29) ) THEN
C  OMIT UPWARD GOING PARTICLES					C  OMIT UPWARD GOING PARTICLES
          IF (DEBUG) WRITE(MDEBUG,*)'HDPM  : ANGLE REJECT PAR	          IF (DEBUG) WRITE(MDEBUG,*)'HDPM  : ANGLE REJECT PAR
          GOTO 140						          GOTO 140
        ENDIF							        ENDIF
C  PUT SECONDARY PARTICLES ON STACK, IF NOT GOING UPWARDS	C  PUT SECONDARY PARTICLES ON STACK, IF NOT GOING UPWARDS
        IF ( J .GT. 2 ) THEN					        IF ( J .GT. 2 ) THEN
          CALL TSTACK						          CALL TSTACK
        ELSE							        ELSE
C  PUT LEADER OR ANTI-LEADER ON STACK, IF NOT GOING UPWARDS	C  PUT LEADER OR ANTI-LEADER ON STACK, IF NOT GOING UPWARDS
          IF ( ITYP(J) .GT. 50 ) THEN				          IF ( ITYP(J) .GT. 50 ) THEN
C  LEADER OR ANTI LEADER ARE RESONANCES AND DECAY		C  LEADER OR ANTI LEADER ARE RESONANCES AND DECAY
            IRESPAR = IRESPAR + 1				            IRESPAR = IRESPAR + 1
            IF ( IRESPAR .GE. 1000 ) THEN			            IF ( IRESPAR .GE. 1000 ) THEN
              WRITE(MONIOU,*) 'STACK OF RESDEC RANDOM NUMBERS	              WRITE(MONIOU,*) 'STACK OF RESDEC RANDOM NUMBERS
              IRESPAR = 999					              IRESPAR = 999
            ENDIF						            ENDIF
            RESRAN(IRESPAR) = RDRES(J)				            RESRAN(IRESPAR) = RDRES(J)
C  COUNTER FOR ENERGY-MULTIPLICITY MATRIX			C  COUNTER FOR ENERGY-MULTIPLICITY MATRIX
            MSMM = MSMM + 1					            MSMM = MSMM + 1
          ENDIF							          ENDIF
          CALL TSTACK						          CALL TSTACK
 								 
C  CALCULATE ELASTICITY FROM ENERGY OF LEADER (REST OF RESONA	C  CALCULATE ELASTICITY FROM ENERGY OF LEADER (REST OF RESONA
          IF ( J. EQ. 1 ) ELASTI = SECPAR(2)*PAMA(NINT(SECPAR	          IF ( J. EQ. 1 ) ELASTI = SECPAR(2)*PAMA(NINT(SECPAR
        ENDIF							        ENDIF
C  COUNTERS FOR FIRST INTERACTION				C  COUNTERS FOR FIRST INTERACTION
        IF ( FIRSTI ) THEN					        IF ( FIRSTI ) THEN
          IF     ( SECPAR(1) .EQ.  7.D0  .OR.  SECPAR(1) .EQ.	          IF     ( SECPAR(1) .EQ.  7.D0  .OR.  SECPAR(1) .EQ.
     *       .OR.  SECPAR(1) .EQ.  9.D0                      	     *       .OR.  SECPAR(1) .EQ.  9.D0                      
            IFINPI = IFINPI + 1					            IFINPI = IFINPI + 1
          ELSEIF ( SECPAR(1) .EQ. 13.D0  .OR.  SECPAR(1) .EQ.	          ELSEIF ( SECPAR(1) .EQ. 13.D0  .OR.  SECPAR(1) .EQ.
     *       .OR.  SECPAR(1) .EQ. 15.D0 .OR. SECPAR(1) .EQ. 2	     *       .OR.  SECPAR(1) .EQ. 15.D0 .OR. SECPAR(1) .EQ. 2
            IFINNU = IFINNU + 1					            IFINNU = IFINNU + 1
          ELSEIF ( SECPAR(1) .EQ. 10.D0  .OR.  SECPAR(1) .EQ.	          ELSEIF ( SECPAR(1) .EQ. 10.D0  .OR.  SECPAR(1) .EQ.
     *       .OR.  SECPAR(1) .EQ. 12.D0 .OR. SECPAR(1) .EQ. 1	     *       .OR.  SECPAR(1) .EQ. 12.D0 .OR. SECPAR(1) .EQ. 1
            IFINKA = IFINKA + 1					            IFINKA = IFINKA + 1
          ELSEIF ( SECPAR(1) .GE. 71.D0 .AND. SECPAR(1) .LE. 	          ELSEIF ( SECPAR(1) .GE. 71.D0 .AND. SECPAR(1) .LE. 
            IFINET = IFINET + 1					            IFINET = IFINET + 1
          ELSEIF ((SECPAR(1) .GE. 18.D0 .AND. SECPAR(1) .LE. 	          ELSEIF ((SECPAR(1) .GE. 18.D0 .AND. SECPAR(1) .LE. 
     *       .OR. (SECPAR(1) .GE. 26.D0 .AND. SECPAR(1) .LE. 	     *       .OR. (SECPAR(1) .GE. 26.D0 .AND. SECPAR(1) .LE. 
            IFINHY = IFINHY + 1					            IFINHY = IFINHY + 1
          ENDIF							          ENDIF
        ENDIF							        ENDIF
 								 
 140  CONTINUE							 140  CONTINUE
 								 
C  COUNTER FOR ENERGY-MULTIPLICITY MATRIX			C  COUNTER FOR ENERGY-MULTIPLICITY MATRIX
      MSMM = MSMM + NTOT - 2					      MSMM = MSMM + NTOT - 2
 								 
C  FILL ELASTICITY IN MATRICES					C  FILL ELASTICITY IN MATRICES
      MEL = MIN ( 1.D0+10.D0*      MAX( 0.D0, ELASTI ) , 11.D	      MEL = MIN ( 1.D0+10.D0*      MAX( 0.D0, ELASTI ) , 11.D
      MEN = MIN ( 4.D0+ 3.D0*LOG10(MAX( .1D0, EKINL  )), 37.D	      MEN = MIN ( 4.D0+ 3.D0*LOG10(MAX( .1D0, EKINL  )), 37.D
      IELDPM(MEN,MEL) = IELDPM(MEN,MEL) + 1			      IELDPM(MEN,MEL) = IELDPM(MEN,MEL) + 1
      IELDPA(MEN,MEL) = IELDPA(MEN,MEL) + 1			      IELDPA(MEN,MEL) = IELDPA(MEN,MEL) + 1
      IF ( ELASTI .LT. 1.D0 ) THEN				      IF ( ELASTI .LT. 1.D0 ) THEN
        ELMEAN(MEN) = ELMEAN(MEN) + ELASTI			        ELMEAN(MEN) = ELMEAN(MEN) + ELASTI
        ELMEAA(MEN) = ELMEAA(MEN) + ELASTI			        ELMEAA(MEN) = ELMEAA(MEN) + ELASTI
      ENDIF							      ENDIF
 								 
      IF ( FIRSTI ) THEN					      IF ( FIRSTI ) THEN
        ELAST  = ELASTI						        ELAST  = ELASTI
        FIRSTI = .FALSE.					        FIRSTI = .FALSE.
      ENDIF							      ENDIF
 								 
      IF ( DEBUG ) WRITE(MDEBUG,*) 'HDPM  : ELAST=',SNGL(ELAS	      IF ( DEBUG ) WRITE(MDEBUG,*) 'HDPM  : ELAST=',SNGL(ELAS
     *                            SNGL(ETOT),SNGL(ELAB)		     *                            SNGL(ETOT),SNGL(ELAB)
 								 
      RETURN							      RETURN
      END							      END
